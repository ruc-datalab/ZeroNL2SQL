[
    {
        "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "gold_select": "select singer.Name, singer.nation, singer.Age",
        "select_candidates": [
            "select singer.Name, singer.nation, singer.Age",
            "select singer.Name, singer.nation, singer.Age",
            "select singer.Name, singer.nation., singer.Age",
            "select singer.Name, singer.nation, singer.Age."
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9948409199714661,
            0.0002668101224116981,
            0.9948409199714661,
            0.0002668101224116981,
            0.039589930325746536,
            0.00037685464485548437,
            0.004792336840182543,
            0.00033465452725067735
        ],
        "align_select": "select singer.Name, singer.nation, singer.Age",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the names, countries, and ages for every singer in descending order of age?",
        "gold_select": "select singer.Name, singer.nation, singer.Age",
        "select_candidates": [
            "select singer.Name, singer.nation, singer.Age",
            "select singer.Name, singer.nation, singer.Age",
            "select singer.Name, singer.nation, singer.Age",
            "select singer.Name, singer.nation., singer.Age"
        ],
        "select_labels": [
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9949274063110352,
            0.9949274063110352,
            0.9949274063110352,
            0.9949274063110352,
            0.9949274063110352,
            0.9949274063110352,
            0.05686437711119652,
            0.05686437711119652
        ],
        "align_select": "select singer.Name, singer.nation, singer.Age",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What is the average, minimum, and maximum age of all singers from France?",
        "gold_select": "select avg(singer.Age), min(singer.Age), max(singer.Age)",
        "select_candidates": [
            "select avg(singer.Age), min(singer.Age), max(singer.Age)",
            "select avg(singer.Is_male), min(singer.Age), max(singer.Age)",
            "select avg(singer.Age), min(singer.Age), max(singer.Age)",
            "select avg(singer.Age), min(singer.Age) and max(singer.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9946478009223938,
            0.9946478009223938,
            0.00019536579202394933,
            0.00019536579202394933,
            0.9946478009223938,
            0.9946478009223938,
            0.975980818271637,
            0.975980818271637
        ],
        "align_select": "select avg(singer.Age), min(singer.Age), max(singer.Age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average, minimum, and maximum age for all French singers?",
        "gold_select": "select avg(singer.Age), min(singer.Age), max(singer.Age)",
        "select_candidates": [
            "select avg(singer.Age), min(singer.Age), max(singer.Age)",
            "select avg(singer.Is_male), min(singer.Age), max(singer.Age)",
            "select avg(singer.Age), min(singer.Age), max(singer.Age)",
            "select avg(singer.Age), min(singer.Age) and max(singer.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9942711591720581,
            0.9942711591720581,
            0.0001946419506566599,
            0.0001946419506566599,
            0.9942711591720581,
            0.9942711591720581,
            0.9710513949394226,
            0.9710513949394226
        ],
        "align_select": "select avg(singer.Age), min(singer.Age), max(singer.Age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the name and the release year of the song by the youngest singer.",
        "gold_select": "select singer.tune_name, singer.tune_release_year",
        "select_candidates": [
            "select singer.tune_name, singer.tune_release_year",
            "select singer.nation, singer.tune_release_year",
            "select concert.Stadium_ID, concert.Year",
            "select singer.Name, singer.tune_release_year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9947261214256287,
            7.574937626486644e-05,
            0.0008557934197597206,
            8.199693547794595e-05,
            0.00018872061627916992,
            7.256008393596858e-05,
            0.9897827506065369,
            8.049196185311303e-05
        ],
        "align_select": "select singer.tune_name, singer.tune_release_year",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the names and release years for all the songs of the youngest singer?",
        "gold_select": "select singer.tune_name, singer.tune_release_year",
        "select_candidates": [
            "select singer.tune_name, singer.tune_release_year",
            "select singer.nation, singer.tune_release_year",
            "select concert.Stadium_ID, concert.Year",
            "select singer.tune_name, t1.1.c4"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9903968572616577,
            8.360957872355357e-05,
            0.0009528646478429437,
            8.853925828589126e-05,
            0.00015530071686953306,
            8.333162986673415e-05,
            0.0005111779901199043,
            0.00010863876377698034
        ],
        "align_select": "select singer.tune_name, singer.tune_release_year",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are all distinct countries where singers above age 20 are from?",
        "gold_select": "select distinct singer.nation",
        "select_candidates": [
            "select distinct singer.nation",
            "select distinct singer.nation, singer.Age",
            "select distinct singer.nation, singer.Is_male",
            "select distinct singer.nation, singer.tune_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9819736480712891,
            0.018081145361065865,
            0.00014089774049352854,
            0.00010615570499794558,
            0.00020585190213751048,
            0.000119742464448791,
            0.00015994776913430542,
            8.24719900265336e-05
        ],
        "align_select": "select distinct singer.nation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the different countries with singers above age 20?",
        "gold_select": "select distinct singer.nation",
        "select_candidates": [
            "select distinct singer.nation",
            "select count(distinct singer.nation)",
            "select distinct singer.nation, singer.tune_name",
            "select distinct singer.nation, singer.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9818381071090698,
            0.0023351958952844143,
            0.003469947027042508,
            0.00011308245302643627,
            0.00014237007417250425,
            9.519579180050641e-05,
            0.00015608323155902326,
            9.34699855861254e-05
        ],
        "align_select": "select distinct singer.nation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all countries and the number of singers in each country.",
        "gold_select": "select singer.nation, count(*)",
        "select_candidates": [
            "select singer.nation, count(*)",
            "select singer.nation, count(*), singer.Singer_ID",
            "select singer.nation., count(*)",
            "select singer.nation, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9956791996955872,
            0.000207798249903135,
            0.00012783486454281956,
            8.483757119392976e-05,
            0.0030177743174135685,
            0.00024694285821169615,
            0.9956791996955872,
            0.000207798249903135
        ],
        "align_select": "select singer.nation, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How many singers are from each country?",
        "gold_select": "select singer.nation, count(*)",
        "select_candidates": [
            "select singer.nation, count(*)",
            "select count(*), singer.nation",
            "select singer.nation, count(*), singer.Name",
            "select singer.nation, count(*), singer.Singer_ID"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.996576726436615,
            0.00019246703595854342,
            0.9964166879653931,
            0.00019919224723707885,
            0.00018826875020749867,
            0.00010468643449712545,
            0.00015356387302745134,
            8.53771052788943e-05
        ],
        "align_select": "select singer.nation, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "List all song names by singers above the average age.",
        "gold_select": "select singer.tune_name",
        "select_candidates": [
            "select singer.tune_name",
            "select singer.tune_name, singer.tune_release_year",
            "select singer.tune_name, singer.Is_male",
            "select singer.tune_name, singer.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer",
            "singer singer_in_concert"
        ],
        "align_scores": [
            0.9937864542007446,
            0.00013750743528362364,
            0.00015079212607815862,
            5.982405491522513e-05,
            0.0001652799401199445,
            6.300750828813761e-05,
            0.0002082977443933487,
            6.382969877449796e-05
        ],
        "align_select": "select singer.tune_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are all the song names by singers who are older than average?",
        "gold_select": "select singer.tune_name",
        "select_candidates": [
            "select singer.tune_name",
            "select singer.tune_name, singer.Is_male",
            "select singer.tune_name, singer.Age",
            "select singer.tune_name, singer.tune_release_year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer",
            "singer singer_in_concert"
        ],
        "align_scores": [
            0.9860736131668091,
            0.00013203015259932727,
            0.00016784420586191118,
            6.182438664836809e-05,
            0.00022146939591038972,
            7.022674253676087e-05,
            0.0001471678406232968,
            6.148526881588623e-05
        ],
        "align_select": "select singer.tune_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "gold_select": "select stadium.position, stadium.Name",
        "select_candidates": [
            "select stadium.position, stadium.Name",
            "select stadium.Stadium_ID, stadium.position, stadium.Name",
            "select stadium.position., stadium.Name",
            "select stadium.position.c2, stadium.position"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.9946550130844116,
            0.0001829638349590823,
            0.0001518769859103486,
            8.166450425051153e-05,
            0.008556296117603779,
            9.801534906728193e-05,
            0.00040172762237489223,
            7.100348739186302e-05
        ],
        "align_select": "select stadium.position, stadium.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
        "gold_select": "select stadium.position, stadium.Name",
        "select_candidates": [
            "select stadium.position, stadium.Name",
            "select stadium.Stadium_ID, stadium.position, stadium.Name",
            "select stadium.position., stadium.Name",
            "select t0, stadium.position, stadium.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.9876698851585388,
            0.00039776653284206986,
            0.0001912654552143067,
            8.549051563022658e-05,
            0.010237067937850952,
            0.00014738607569597661,
            0.0003553029091563076,
            7.641765841981396e-05
        ],
        "align_select": "select stadium.position, stadium.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the maximum capacity and the average of all stadiums?",
        "gold_select": "select max(stadium.max_carrying_number), stadium.mean",
        "select_candidates": [
            "select stadium.max_carrying_number, avg(stadium.mean)",
            "select stadium.max_carrying_number, stadium.mean",
            "select max(stadium.max_carrying_number), avg(stadium.mean)",
            "select stadium.Name, stadium.max_carrying_number, avg(stadium.mean)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.0007519721402786672,
            9.574997238814831e-05,
            0.7170613408088684,
            8.138401608448476e-05,
            0.07024229317903519,
            8.430450543528423e-05,
            0.00020288731320761144,
            0.00011590895883273333
        ],
        "align_select": "select stadium.max_carrying_number, stadium.mean",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the average and maximum capacities for all stadiums?",
        "gold_select": "select avg(stadium.max_carrying_number), max(stadium.max_carrying_number)",
        "select_candidates": [
            "select avg(stadium.mean), stadium.max_carrying_number",
            "select avg(stadium.mean), max(stadium.max_carrying_number)",
            "select avg(stadium.mean), avg(stadium.max_carrying_number)",
            "select stadium.mean, stadium.max_carrying_number"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium",
            "stadium singer concert",
            "stadium singer",
            "stadium concert",
            "stadium concert singer_in_concert",
            "stadium singer singer_in_concert"
        ],
        "align_scores": [
            0.0003957047301810235,
            0.00012602350034285337,
            0.01579609140753746,
            0.00010737618140410632,
            0.0005262375343590975,
            0.00012058430729666725,
            0.16265858709812164,
            0.00012140427133999765
        ],
        "align_select": "select avg(stadium.mean), stadium.max_carrying_number",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "gold_select": "select stadium.Name, stadium.max_carrying_number",
        "select_candidates": [
            "select stadium.Name, stadium.max_carrying_number",
            "select stadium.Stadium_ID, stadium.Name, stadium.max_carrying_number",
            "select stadium.Name, stadium.max_carrying_number, avg(stadium.mean)",
            "select stadium.position, stadium.max_carrying_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.980385422706604,
            6.79233344271779e-05,
            0.0015988406958058476,
            7.474708399968222e-05,
            0.00026905324193648994,
            5.755403981311247e-05,
            0.0004523478273767978,
            8.244478522101417e-05
        ],
        "align_select": "select stadium.Name, stadium.max_carrying_number",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name and capacity for the stadium with the highest average attendance?",
        "gold_select": "select stadium.Name, stadium.max_carrying_number",
        "select_candidates": [
            "select stadium.Name, stadium.max_carrying_number",
            "select stadium.Stadium_ID, stadium.Name, stadium.max_carrying_number",
            "select stadium.Name, stadium.max_carrying_number, avg(stadium.mean)",
            "select stadium.position, stadium.max_carrying_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.9443612694740295,
            7.118416397133842e-05,
            0.001302217016927898,
            7.524225657107309e-05,
            0.0002509280457161367,
            5.978698391118087e-05,
            0.00046565738739445806,
            7.906299288151786e-05
        ],
        "align_select": "select stadium.Name, stadium.max_carrying_number",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "gold_select": "select stadium.Name, stadium.max_carrying_number",
        "select_candidates": [
            "select stadium.Name, stadium.max_carrying_number",
            "select stadium.Name, stadium.max_carrying_number, stadium.mean",
            "select stadium.position, stadium.max_carrying_number",
            "select stadium.Name.c2, stadium.max_carrying_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.9927545189857483,
            8.655509009258822e-05,
            0.00018982580513693392,
            7.719628774793819e-05,
            0.0007606941508129239,
            7.57677189540118e-05,
            0.0011078085517510772,
            7.223519060062245e-05
        ],
        "align_select": "select stadium.Name, stadium.max_carrying_number",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name and capacity of the stadium with the most concerts after 2013?",
        "gold_select": "select stadium.Name, stadium.max_carrying_number",
        "select_candidates": [
            "select stadium.Name, stadium.max_carrying_number",
            "select stadium.position, stadium.max_carrying_number",
            "select stadium.Name, stadium.max_carrying_number, stadium.mean",
            "select stadium.Name.c2, stadium.max_carrying_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.988509476184845,
            0.00010224134166492149,
            0.0004945021355524659,
            8.235214772867039e-05,
            0.0002077687531709671,
            0.00012654381862375885,
            0.0012346127768978477,
            9.59548051469028e-05
        ],
        "align_select": "select stadium.Name, stadium.max_carrying_number",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
        "gold_select": "select singer.nation",
        "select_candidates": [
            "select singer.nation",
            "select singer.nation, singer.Age",
            "select singer.nation, singer.tune_name",
            "select singer.nation, singer.Is_male"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9950509667396545,
            0.06876321136951447,
            0.0002585659094620496,
            0.0001302851305808872,
            0.00014789824490435421,
            0.00010097730410052463,
            0.00019147692364640534,
            0.00011938435636693612
        ],
        "align_select": "select singer.nation",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show the name and theme for all concerts and the number of singers in each concert.",
        "gold_select": "select concert.concert_Name, concert.style, count(*)",
        "select_candidates": [
            "select concert.concert_Name, concert.style, count(*)",
            "select concert.concert_Name, concert.style, count(*), concert.concert_ID",
            "select concert.concert_Name, concert.style, count(*),",
            "select concert.concert_Name, concert.style, count(distinct singer_in_concert.Singer_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "concert singer_in_concert",
        "table_candidates": [
            "concert singer_in_concert"
        ],
        "align_scores": [
            0.4682537019252777,
            0.0002499664551578462,
            0.0002142348967026919,
            9.401832357980311e-05,
            0.001364571275189519,
            0.0001716364931780845,
            0.1819910705089569,
            0.00018084987823385745
        ],
        "align_select": "select concert.concert_Name, concert.style, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the names, themes, and number of singers for every concert?",
        "gold_select": "select concert.concert_Name, concert.style, count(*)",
        "select_candidates": [
            "select concert.concert_Name, concert.style, count(*)",
            "select concert.concert_Name, concert.style, count(distinct singer_in_concert.Singer_ID)",
            "select concert.concert_Name, concert.style, count(*), concert.concert_ID",
            "select concert.concert_Name, concert.style, count(*),"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "concert singer_in_concert",
        "table_candidates": [
            "concert singer_in_concert"
        ],
        "align_scores": [
            0.0020156442187726498,
            0.0001868402468971908,
            0.041761454194784164,
            0.0001502263912698254,
            0.00012155150034232065,
            0.00014278636081144214,
            0.0008438447839580476,
            0.00017587514594197273
        ],
        "align_select": "select concert.concert_Name, concert.style, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "gold_select": "select singer.Name, singer.nation",
        "select_candidates": [
            "select singer.Name, singer.nation",
            "select singer.Name, singer.nation, singer.tune_name",
            "select singer.Name, singer.nation, singer.Singer_ID",
            "select singer.Name, singer.nation,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9614328145980835,
            0.00016411440446972847,
            0.0002928410831373185,
            7.205809379229322e-05,
            0.0002581363369245082,
            8.046686707530171e-05,
            0.003372450824826956,
            7.723045564489439e-05
        ],
        "align_select": "select singer.Name, singer.nation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "gold_select": "select singer.Name, singer.nation",
        "select_candidates": [
            "select singer.Name, singer.nation",
            "select singer.Name, singer.nation, singer.Singer_ID",
            "select singer.Name, singer.nation,",
            "select distinct singer.Name, singer.nation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer",
            "singer singer_in_concert"
        ],
        "align_scores": [
            0.9420376420021057,
            0.00019021153275389224,
            0.00039811365422792733,
            8.784175588516518e-05,
            0.004305561073124409,
            8.398947102250531e-05,
            0.08407112210988998,
            0.0001268650812562555
        ],
        "align_select": "select singer.Name, singer.nation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "gold_select": "select stadium.Name, stadium.position",
        "select_candidates": [
            "select stadium.Name, stadium.position",
            "select stadium.position, stadium.Name",
            "select stadium.Name., stadium.position",
            "select stadium.Name, t0-.c1"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.963557779788971,
            0.020616373047232628,
            0.9773228168487549,
            0.02465611696243286,
            0.005684273317456245,
            0.000576336751691997,
            0.00042843158007599413,
            0.00013731011131312698
        ],
        "align_select": "select stadium.Name, stadium.position",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
        "gold_select": "select stadium.Name, stadium.position",
        "select_candidates": [
            "select stadium.Name, stadium.position",
            "select stadium.position, stadium.Name",
            "select stadium.Stadium_ID, stadium.Name, stadium.position",
            "select stadium.Name, stadium.position, stadium.max_carrying_number"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.9841386675834656,
            0.9841386675834656,
            0.9884979128837585,
            0.9884979128837585,
            0.00042265691445209086,
            0.00042265691445209086,
            0.00029485224513337016,
            0.00029485224513337016
        ],
        "align_select": "select stadium.Name, stadium.position",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the number of concerts happened in the stadium with the highest capacity.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), stadium.Name",
            "select count(*), stadium.Name, stadium.max_carrying_number",
            "select count(*), stadium.Stadium_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert",
            "stadium singer concert"
        ],
        "align_scores": [
            0.9163819551467896,
            0.9636213183403015,
            0.026691773906350136,
            0.0014711469411849976,
            0.0003095403662882745,
            0.00016976651386357844,
            0.002066440414637327,
            0.000329630624037236
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the number of concerts that occurred in the stadium with the largest capacity?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), stadium.Name",
            "select count(*), stadium.Stadium_ID",
            "select count(*), stadium.Name, stadium.max_carrying_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert",
            "stadium singer concert"
        ],
        "align_scores": [
            0.7563835978507996,
            0.9718999862670898,
            0.0069691757671535015,
            0.0015830083284527063,
            0.0013123702956363559,
            0.0003207489789929241,
            0.00024072019732557237,
            0.00017001386731863022
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "gold_select": "select singer.Name, singer.nation, singer.Age",
        "select_candidates": [
            "select singer.Name, singer.nation, singer.Age",
            "select singer.Name, singer.nation, singer.Age",
            "select singer.Name, singer.nation., singer.Age",
            "select singer.Name, singer.nation, singer.Age."
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9948409199714661,
            0.0002668101224116981,
            0.9948409199714661,
            0.0002668101224116981,
            0.039589930325746536,
            0.00037685464485548437,
            0.004792336840182543,
            0.00033465452725067735
        ],
        "align_select": "select singer.Name, singer.nation, singer.Age",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the names, countries, and ages for every singer in descending order of age?",
        "gold_select": "select singer.Name, singer.nation, singer.Age",
        "select_candidates": [
            "select singer.Name, singer.nation, singer.Age",
            "select singer.Name, singer.nation, singer.Age",
            "select singer.Name, singer.nation, singer.Age",
            "select singer.Name, singer.nation., singer.Age"
        ],
        "select_labels": [
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9949274063110352,
            0.9949274063110352,
            0.9949274063110352,
            0.9949274063110352,
            0.9949274063110352,
            0.9949274063110352,
            0.05686437711119652,
            0.05686437711119652
        ],
        "align_select": "select singer.Name, singer.nation, singer.Age",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What is the average, minimum, and maximum age of all singers from France?",
        "gold_select": "select avg(singer.Age), min(singer.Age), max(singer.Age)",
        "select_candidates": [
            "select avg(singer.Age), min(singer.Age), max(singer.Age)",
            "select avg(singer.Is_male), min(singer.Age), max(singer.Age)",
            "select singer.Is_male, avg(singer.Age), min(singer.Age), max(singer.Age)",
            "select avg(singer.Age), min(singer.Age), max(singer.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9946478009223938,
            0.9946478009223938,
            0.00019536579202394933,
            0.00019536579202394933,
            0.00020730117103084922,
            0.00020730117103084922,
            0.9946478009223938,
            0.9946478009223938
        ],
        "align_select": "select avg(singer.Age), min(singer.Age), max(singer.Age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average, minimum, and maximum age for all French singers?",
        "gold_select": "select avg(singer.Age), min(singer.Age), max(singer.Age)",
        "select_candidates": [
            "select avg(singer.Age), min(singer.Age), max(singer.Age)",
            "select avg(singer.Is_male), min(singer.Age), max(singer.Age)",
            "select avg(singer.Age), min(singer.Age), max(singer.Age)",
            "select avg(singer.Age), min(singer.Age), max(singer.Is_male)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9942711591720581,
            0.9942711591720581,
            0.0001946419506566599,
            0.0001946419506566599,
            0.9942711591720581,
            0.9942711591720581,
            0.0001940210204338655,
            0.0001940210204338655
        ],
        "align_select": "select avg(singer.Age), min(singer.Age), max(singer.Age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are all distinct countries where singers above age 20 are from?",
        "gold_select": "select distinct singer.nation",
        "select_candidates": [
            "select distinct singer.nation",
            "select distinct singer.nation, singer.Age",
            "select distinct singer.nation, singer.Is_male",
            "select distinct singer.nation, singer.Song_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9819736480712891,
            0.018081145361065865,
            0.00014089774049352854,
            0.00010615570499794558,
            0.00020585190213751048,
            0.000119742464448791,
            0.00014700797328259796,
            7.629372703377157e-05
        ],
        "align_select": "select distinct singer.nation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the different countries with singers above age 20?",
        "gold_select": "select distinct singer.nation",
        "select_candidates": [
            "select distinct singer.nation",
            "select count(distinct singer.nation)",
            "select distinct singer.nation, singer.Song_Name",
            "select distinct singer.nation, singer.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9818381071090698,
            0.0023351958952844143,
            0.003469947027042508,
            0.00011308245302643627,
            0.00012815096124541014,
            8.954935765359551e-05,
            0.00015608323155902326,
            9.34699855861254e-05
        ],
        "align_select": "select distinct singer.nation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all countries and the number of singers in each country.",
        "gold_select": "select singer.nation, count(*)",
        "select_candidates": [
            "select singer.nation, count(*)",
            "select singer.nation, count(*), singer.Singer_ID",
            "select singer.nation., count(*)",
            "select singer.nation, count(*),"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9956791996955872,
            0.000207798249903135,
            0.00012783486454281956,
            8.483757119392976e-05,
            0.0030177743174135685,
            0.00024694285821169615,
            0.0012382499407976866,
            0.000136782560730353
        ],
        "align_select": "select singer.nation, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How many singers are from each country?",
        "gold_select": "select singer.nation, count(*)",
        "select_candidates": [
            "select singer.nation, count(*)",
            "select count(*), singer.nation",
            "select singer.nation, count(*), singer.Name",
            "select singer.nation, count(*), singer.Singer_ID"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.996576726436615,
            0.00019246703595854342,
            0.9964166879653931,
            0.00019919224723707885,
            0.00018826875020749867,
            0.00010468643449712545,
            0.00015356387302745134,
            8.53771052788943e-05
        ],
        "align_select": "select singer.nation, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "gold_select": "select stadium.Location, stadium.Name",
        "select_candidates": [
            "select stadium.Location, stadium.Name",
            "select stadium.Location., stadium.Name",
            "select t0, stadium.Location, stadium.Name",
            "select stadium.Location, stadium.Name, stadium.Stadium_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.9953319430351257,
            0.00019350502407178283,
            0.025637594982981682,
            0.00010332060628570616,
            0.00036330005968920887,
            6.809921615058556e-05,
            0.00015424980665557086,
            6.917736027389765e-05
        ],
        "align_select": "select stadium.Location, stadium.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
        "gold_select": "select stadium.Location, stadium.Name",
        "select_candidates": [
            "select stadium.Location, stadium.Name",
            "select stadium.Location., stadium.Name",
            "select t0.c 1, stadium.Name",
            "select stadium.Location, stadium.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.976121187210083,
            0.0003889368090312928,
            0.016702353954315186,
            0.00015513361722696573,
            0.0004689276101998985,
            7.799514423822984e-05,
            0.976121187210083,
            0.0003889368090312928
        ],
        "align_select": "select stadium.Location, stadium.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the maximum capacity and the average of all stadiums?",
        "gold_select": "select max(stadium.max_carrying_number), stadium.Average",
        "select_candidates": [
            "select stadium.max_carrying_number, stadium.Average",
            "select stadium.max_carrying_number, avg(stadium.Average)",
            "select max(stadium.max_carrying_number), avg(stadium.Average)",
            "select stadium.Stadium_ID, stadium.max_carrying_number, stadium.Average"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.05046801641583443,
            8.047468872973695e-05,
            0.0009756432264111936,
            8.9064116764348e-05,
            0.07927527278661728,
            7.704568997723982e-05,
            0.00021971524984110147,
            8.731944399187341e-05
        ],
        "align_select": "select stadium.max_carrying_number, stadium.Average",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the average and maximum capacities for all stadiums?",
        "gold_select": "select avg(stadium.max_carrying_number), max(stadium.max_carrying_number)",
        "select_candidates": [
            "select avg(stadium.Average), stadium.max_carrying_number",
            "select avg(stadium.Average), max(stadium.max_carrying_number)",
            "select avg(stadium.Average), avg(stadium.max_carrying_number)",
            "select stadium.Average, stadium.max_carrying_number"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium",
            "stadium singer",
            "stadium concert",
            "stadium singer_in_concert"
        ],
        "align_scores": [
            0.00046670102165080607,
            0.00012022035662084818,
            0.0983252003788948,
            9.900855366140604e-05,
            0.0005512055358849466,
            0.0001191890551126562,
            0.0194559283554554,
            0.00010768534411909059
        ],
        "align_select": "select avg(stadium.Average), stadium.max_carrying_number",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "gold_select": "select stadium.Name, stadium.max_carrying_number",
        "select_candidates": [
            "select stadium.Name, stadium.max_carrying_number",
            "select stadium.Location, stadium.max_carrying_number",
            "select stadium.Stadium_ID, stadium.Name, stadium.max_carrying_number",
            "select stadium.Name, stadium.max_carrying_number, avg(stadium.Average)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium",
            "stadium concert singer_in_concert"
        ],
        "align_scores": [
            0.980385422706604,
            0.9772207736968994,
            0.0006393897347152233,
            0.0008886114810593426,
            0.0015988406958058476,
            0.000505549309309572,
            0.0010853703133761883,
            0.0003155223384965211
        ],
        "align_select": "select stadium.Name, stadium.max_carrying_number",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name and capacity for the stadium with the highest average attendance?",
        "gold_select": "select stadium.Name, stadium.max_carrying_number",
        "select_candidates": [
            "select stadium.Name, stadium.max_carrying_number",
            "select stadium.Stadium_ID, stadium.Name, stadium.max_carrying_number",
            "select stadium.Location, stadium.max_carrying_number",
            "select stadium.Name, stadium.max_carrying_number, avg(stadium.Average)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.9443612694740295,
            0.9649568200111389,
            0.001302217016927898,
            0.0004654337535612285,
            0.0006023805472068489,
            0.000924862630199641,
            0.0007374999113380909,
            0.00030548026552423835
        ],
        "align_select": "select stadium.Name, stadium.max_carrying_number",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "gold_select": "select stadium.Name, stadium.max_carrying_number",
        "select_candidates": [
            "select stadium.Name, stadium.max_carrying_number",
            "select stadium.Name, stadium.max_carrying_number, stadium.Average",
            "select stadium.Location, stadium.max_carrying_number",
            "select stadium.Name.c2, stadium.max_carrying_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.9927545189857483,
            8.655509009258822e-05,
            0.00019884062930941582,
            6.598112668143585e-05,
            0.013804190792143345,
            7.682133582420647e-05,
            0.0011078085517510772,
            7.223519060062245e-05
        ],
        "align_select": "select stadium.Name, stadium.max_carrying_number",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name and capacity of the stadium with the most concerts after 2013?",
        "gold_select": "select stadium.Name, stadium.max_carrying_number",
        "select_candidates": [
            "select stadium.Name, stadium.max_carrying_number",
            "select stadium.Location, stadium.max_carrying_number",
            "select stadium.Name, stadium.max_carrying_number, stadium.Average",
            "select stadium.Name.c2, stadium.max_carrying_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.988509476184845,
            0.00010224134166492149,
            0.0005978614208288491,
            8.33165249787271e-05,
            0.0003283231344539672,
            0.00011370158608769998,
            0.0012346127768978477,
            9.59548051469028e-05
        ],
        "align_select": "select stadium.Name, stadium.max_carrying_number",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
        "gold_select": "select singer.nation",
        "select_candidates": [
            "select singer.nation",
            "select singer.nation, singer.Age",
            "select singer.nation for singer.Age, singer.Is_male",
            "select singer.nation, singer.Age, singer.Is_male"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9950509667396545,
            0.06876321136951447,
            0.0002585659094620496,
            0.0001302851305808872,
            0.00016754069656599313,
            0.00013017572928220034,
            0.0001434590230928734,
            0.00011419357906561345
        ],
        "align_select": "select singer.nation",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show the name and theme for all concerts and the number of singers in each concert.",
        "gold_select": "select concert.event_name, concert.Theme, count(*)",
        "select_candidates": [
            "select concert.event_name, concert.Theme, count(*)",
            "select concert.event_name, concert.Theme, count(*), concert.concert_ID",
            "select concert.event_name, concert.Theme, count(*),",
            "select concert.event_name, concert.Theme, count(*), singer_in_concert.concert_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "concert singer_in_concert",
        "table_candidates": [
            "concert singer_in_concert"
        ],
        "align_scores": [
            0.9928629994392395,
            0.00025749526685103774,
            0.00031433426192961633,
            8.674248965689912e-05,
            0.002356230514124036,
            0.0001450621202820912,
            0.003917330875992775,
            0.00010570236918283626
        ],
        "align_select": "select concert.event_name, concert.Theme, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the names, themes, and number of singers for every concert?",
        "gold_select": "select concert.event_name, concert.Theme, count(*)",
        "select_candidates": [
            "select concert.event_name, concert.Theme, count(*)",
            "select concert.event_name, concert.Theme, count(distinct singer_in_concert.Singer_ID)",
            "select concert.event_name, concert.Theme, count(*),",
            "select concert.event_name, concert.Theme, count(singers)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "concert singer_in_concert",
        "table_candidates": [
            "concert singer_in_concert"
        ],
        "align_scores": [
            0.8978001475334167,
            0.00015736273780930787,
            0.4245072901248932,
            0.00019035724108107388,
            0.0026947741862386465,
            0.00014828941493760794,
            0.0012358538806438446,
            0.00014556718815583736
        ],
        "align_select": "select concert.event_name, concert.Theme, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "gold_select": "select singer.Name, singer.nation",
        "select_candidates": [
            "select singer.Name, singer.nation",
            "select singer.Name, singer.nation, singer.Song_Name",
            "select singer.Name, singer.nation, singer.Singer_ID",
            "select singer.Name, singer.nation for the SELECT-FROM-WHERE"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9614328145980835,
            0.00016411440446972847,
            0.00038312558899633586,
            7.07225117366761e-05,
            0.0002581363369245082,
            8.046686707530171e-05,
            0.018567640334367752,
            8.420391532126814e-05
        ],
        "align_select": "select singer.Name, singer.nation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "gold_select": "select singer.Name, singer.nation",
        "select_candidates": [
            "select singer.Name, singer.nation",
            "select singer.Name, singer.nation, singer.Singer_ID",
            "select singer.Name, singer.nation, singer.Song_Name",
            "select singer.Name, singer.nation,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9420376420021057,
            0.00019021153275389224,
            0.00039811365422792733,
            8.784175588516518e-05,
            0.0004190256877336651,
            8.655757119413465e-05,
            0.004305561073124409,
            8.398947102250531e-05
        ],
        "align_select": "select singer.Name, singer.nation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the number of concerts happened in the stadium with the highest capacity.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), stadium.Name",
            "select count(*), stadium.Name, stadium.max_carrying_number",
            "select count(*), stadium.Stadium_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert",
            "stadium singer concert"
        ],
        "align_scores": [
            0.9163819551467896,
            0.9636213183403015,
            0.026691773906350136,
            0.0014711469411849976,
            0.0003095403662882745,
            0.00016976651386357844,
            0.002066440414637327,
            0.000329630624037236
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the number of concerts that occurred in the stadium with the largest capacity?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), stadium.Name",
            "select count(*), stadium.Stadium_ID",
            "select concert.Stadium_ID, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert",
            "stadium singer concert"
        ],
        "align_scores": [
            0.7563835978507996,
            0.9718999862670898,
            0.0069691757671535015,
            0.0015830083284527063,
            0.0013123702956363559,
            0.0003207489789929241,
            0.896251380443573,
            0.009758643805980682
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the name and the release year of the song by the youngest singer.",
        "gold_select": "select singer.Song_Name, singer.publish_year",
        "select_candidates": [
            "select singer.Song_Name, singer.publish_year",
            "select singer.Country, singer.publish_year",
            "select singer.Song_Name, t01.c4",
            "select singer.Song_Name, t1.1.c4"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9937179088592529,
            7.649559120181948e-05,
            0.0006284170667640865,
            8.332756988238543e-05,
            0.0006196594331413507,
            0.0001094391627702862,
            0.0005069982726126909,
            0.00014149701746646315
        ],
        "align_select": "select singer.Song_Name, singer.publish_year",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the names and release years for all the songs of the youngest singer?",
        "gold_select": "select singer.Song_Name, singer.publish_year",
        "select_candidates": [
            "select singer.Song_Name, singer.publish_year",
            "select singer.Name, singer.Song_Name, singer.publish_year",
            "select singer.Country, singer.publish_year",
            "select singer.Country, singer.Song_Name, singer.publish_year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9893016219139099,
            8.763059304328635e-05,
            0.001037911861203611,
            8.423659164691344e-05,
            0.0008928265306167305,
            9.062057506525889e-05,
            0.00027139802114106715,
            8.798427734291181e-05
        ],
        "align_select": "select singer.Song_Name, singer.publish_year",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the name and the release year of the song by the youngest singer.",
        "gold_select": "select singer.Song_Name, singer.air_date",
        "select_candidates": [
            "select singer.Song_Name, singer.air_date",
            "select singer.Song_Name, singer.Country",
            "select singer.Song_Name, t01.c4",
            "select singer.Country, singer.air_date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9886171221733093,
            7.989532605279237e-05,
            0.0003878205316141248,
            0.00010658263636287302,
            0.0006196594331413507,
            0.0001094391627702862,
            0.0006173059227876365,
            7.748437201371416e-05
        ],
        "align_select": "select singer.Song_Name, singer.air_date",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the names and release years for all the songs of the youngest singer?",
        "gold_select": "select singer.Song_Name, singer.air_date",
        "select_candidates": [
            "select singer.Song_Name, singer.air_date",
            "select singer.Song_Name, singer.Country",
            "select singer.Country, singer.air_date",
            "select singer.Country, singer.Song_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9826710820198059,
            9.275708725908771e-05,
            0.0006856422405689955,
            0.00011723952775355428,
            0.0009132608538493514,
            9.45281281019561e-05,
            0.0008812933810986578,
            0.0001691739453235641
        ],
        "align_select": "select singer.Song_Name, singer.air_date",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "gold_select": "select stadium.whereabouts, stadium.Name",
        "select_candidates": [
            "select stadium.whereabouts, stadium.Name",
            "select stadium.Stadium_ID, stadium.whereabouts, stadium.Name",
            "select stadium.whereabouts., stadium.Name",
            "select stadium.Name, stadium.whereabouts"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.9947044253349304,
            0.00017911146278493106,
            0.00017032150935847312,
            8.600663568358868e-05,
            0.01318926177918911,
            9.950564708560705e-05,
            0.9951468110084534,
            0.0001417369639966637
        ],
        "align_select": "select stadium.whereabouts, stadium.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
        "gold_select": "select stadium.whereabouts, stadium.Name",
        "select_candidates": [
            "select stadium.whereabouts, stadium.Name",
            "select stadium.Stadium_ID, stadium.whereabouts, stadium.Name",
            "select stadium.whereabouts., stadium.Name",
            "select stadium.whereabouts, stadium.Name, stadium.Capacity"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.987613320350647,
            0.0003790250339079648,
            0.00020546441373880953,
            8.904083369998261e-05,
            0.017309056594967842,
            0.00014485257270280272,
            0.0001924359967233613,
            8.135686221066862e-05
        ],
        "align_select": "select stadium.whereabouts, stadium.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the maximum capacity and the average of all stadiums?",
        "gold_select": "select max(stadium.Capacity), stadium.mean",
        "select_candidates": [
            "select max(stadium.Capacity), avg(stadium.Capacity)",
            "select stadium.Capacity, stadium.Highest, stadium.mean",
            "select max(stadium.Capacity), avg(stadium.mean)",
            "select stadium.Capacity, max(stadium.Capacity), avg(stadium.Capacity)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.994486391544342,
            7.141363312257454e-05,
            0.0002831014571711421,
            8.063532004598528e-05,
            0.0008152005611918867,
            6.832728831795976e-05,
            0.00017197626584675163,
            8.622220775578171e-05
        ],
        "align_select": "select max(stadium.Capacity), avg(stadium.Capacity)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "gold_select": "select stadium.Name, stadium.Capacity",
        "select_candidates": [
            "select stadium.Name, stadium.Capacity",
            "select stadium.Stadium_ID, stadium.Name, stadium.Capacity",
            "select stadium.whereabouts, stadium.Capacity",
            "select stadium.Name, stadium.Capacity, avg(stadium.mean)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.9941830039024353,
            9.041195153258741e-05,
            0.0009845857275649905,
            0.00010141462553292513,
            0.00035701520391739905,
            6.182486686157063e-05,
            0.0002687740488909185,
            5.192274329601787e-05
        ],
        "align_select": "select stadium.Name, stadium.Capacity",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name and capacity for the stadium with the highest average attendance?",
        "gold_select": "select stadium.Name, stadium.Capacity",
        "select_candidates": [
            "select stadium.Name, stadium.Capacity",
            "select stadium.Stadium_ID, stadium.Name, stadium.Capacity",
            "select stadium.whereabouts, stadium.Capacity",
            "select stadium.Name, stadium.Capacity, stadium.mean"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.994010865688324,
            8.720793994143605e-05,
            0.0009128962992690504,
            9.647502156440169e-05,
            0.00038225780008360744,
            6.182120705489069e-05,
            0.00036674138391390443,
            6.1328690208029e-05
        ],
        "align_select": "select stadium.Name, stadium.Capacity",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the name and theme for all concerts and the number of singers in each concert.",
        "gold_select": "select concert.concert_Name, concert.category, count(*)",
        "select_candidates": [
            "select concert.concert_Name, concert.category, count(*)",
            "select concert.concert_Name, concert.category, count(*), concert.concert_ID",
            "select concert.concert_Name, concert.Stadium_ID, count(*)",
            "select concert.concert_Name, concert.category, count(*),"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "concert singer_in_concert",
        "table_candidates": [
            "concert singer_in_concert"
        ],
        "align_scores": [
            0.992741048336029,
            0.00045644945930689573,
            0.00038432524888776243,
            9.214059537043795e-05,
            0.0002455585927236825,
            0.00022084439115133137,
            0.0028119280468672514,
            0.00018257938791066408
        ],
        "align_select": "select concert.concert_Name, concert.category, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the names, themes, and number of singers for every concert?",
        "gold_select": "select concert.concert_Name, concert.category, count(*)",
        "select_candidates": [
            "select concert.concert_Name, concert.category, count(*)",
            "select concert.concert_Name, concert.Stadium_ID, count(*)",
            "select concert.concert_Name, concert.category, count(distinct singer_in_concert.Singer_ID)",
            "select concert.concert_Name, concert.category, count(*),"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "concert singer_in_concert",
        "table_candidates": [
            "concert singer_in_concert"
        ],
        "align_scores": [
            0.9297377467155457,
            0.0002667999651748687,
            0.00017296626174356788,
            0.00025293781072832644,
            0.7996045351028442,
            0.00022751424694433808,
            0.002262627240270376,
            0.0001691736251814291
        ],
        "align_select": "select concert.concert_Name, concert.category, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "gold_select": "select stadium.Name, stadium.whereabouts",
        "select_candidates": [
            "select stadium.Name, stadium.whereabouts",
            "select stadium.whereabouts, stadium.Name",
            "select stadium.Name., stadium.whereabouts",
            "select stadium.Stadium_ID, stadium.Name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.9594377279281616,
            0.011013701558113098,
            0.969268262386322,
            0.007725892588496208,
            0.004022140055894852,
            0.0003669035213533789,
            0.0002546160249039531,
            0.00011622947931755334
        ],
        "align_select": "select stadium.Name, stadium.whereabouts",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
        "gold_select": "select stadium.Name, stadium.whereabouts",
        "select_candidates": [
            "select stadium.Name, stadium.whereabouts",
            "select stadium.whereabouts, stadium.Name",
            "select stadium.Stadium_ID, stadium.Name, stadium.whereabouts",
            "select stadium.Name, stadium.whereabouts, stadium.Capacity"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.9830536246299744,
            0.9830536246299744,
            0.9872740507125854,
            0.9872740507125854,
            0.0004961768863722682,
            0.0004961768863722682,
            0.00036044875741936266,
            0.00036044875741936266
        ],
        "align_select": "select stadium.Name, stadium.whereabouts",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show the name and the release year of the song by the youngest singer.",
        "gold_select": "select singer.tune_name, singer.air_time",
        "select_candidates": [
            "select singer.tune_name, concert.Year",
            "select singer.tune_name, singer.air_time",
            "select concert.Stadium_ID, concert.Year",
            "select singer.tune_name, concert.Stadium_ID"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer",
            "singer concert"
        ],
        "align_scores": [
            0.0012964741326868534,
            7.37583395675756e-05,
            0.0004128393775317818,
            7.373034895863384e-05,
            0.00018872061627916992,
            7.256008393596858e-05,
            0.00023312008124776185,
            6.70473527861759e-05
        ],
        "align_select": "select singer.tune_name, concert.Year",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the names and release years for all the songs of the youngest singer?",
        "gold_select": "select singer.tune_name, singer.air_time",
        "select_candidates": [
            "select singer.tune_name, concert.Year",
            "select singer.tune_name, singer.air_time",
            "select singer.tune_name, concert.Stadium_ID",
            "select singer.tune_name, concert.Theme"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.0017467942088842392,
            8.197785064112395e-05,
            0.0005404376424849033,
            8.63155655679293e-05,
            0.0002628811926115304,
            8.509084727847949e-05,
            0.0005025967839173973,
            0.00012770280591212213
        ],
        "align_select": "select singer.tune_name, concert.Year",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "List all song names by singers above the average age.",
        "gold_select": "select singer.tune_name",
        "select_candidates": [
            "select singer.tune_name",
            "select singer.tune_name, singer.Is_male",
            "select singer.tune_name, singer.Age",
            "select singer.tune_name, singer.air_time"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer",
            "singer singer_in_concert"
        ],
        "align_scores": [
            0.9937864542007446,
            0.00013750743528362364,
            0.0001652799401199445,
            6.300750828813761e-05,
            0.0002082977443933487,
            6.382969877449796e-05,
            0.0001627831079531461,
            6.9123474531807e-05
        ],
        "align_select": "select singer.tune_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are all the song names by singers who are older than average?",
        "gold_select": "select singer.tune_name",
        "select_candidates": [
            "select singer.tune_name",
            "select singer.tune_name, singer.Is_male",
            "select singer.tune_name, singer.Age",
            "select singer.tune_name, singer.air_time"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9860736131668091,
            0.00013203015259932727,
            0.00016784420586191118,
            6.182438664836809e-05,
            0.00022146939591038972,
            7.022674253676087e-05,
            0.00017065377323888242,
            7.17024813639e-05
        ],
        "align_select": "select singer.tune_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "gold_select": "select stadium.Location, stadium.Name",
        "select_candidates": [
            "select stadium.Location, stadium.Name",
            "select stadium.Location., stadium.Name",
            "select t0, stadium.Location, stadium.Name",
            "select stadium.Location, stadium.Name, stadium.Stadium_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.9953319430351257,
            0.00019350502407178283,
            0.025637594982981682,
            0.00010332060628570616,
            0.00036330005968920887,
            6.809921615058556e-05,
            0.00015424980665557086,
            6.917736027389765e-05
        ],
        "align_select": "select stadium.Location, stadium.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
        "gold_select": "select stadium.Location, stadium.Name",
        "select_candidates": [
            "select stadium.Location, stadium.Name",
            "select stadium.Location., stadium.Name",
            "select t0.c 1, stadium.Name",
            "select stadium.Location, stadium.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.976121187210083,
            0.0003889368090312928,
            0.016702353954315186,
            0.00015513361722696573,
            0.0004689276101998985,
            7.799514423822984e-05,
            0.976121187210083,
            0.0003889368090312928
        ],
        "align_select": "select stadium.Location, stadium.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the maximum capacity and the average of all stadiums?",
        "gold_select": "select max(stadium.stadium_capacity), stadium.Average",
        "select_candidates": [
            "select max(stadium.stadium_capacity), avg(stadium.stadium_capacity)",
            "select max(stadium.stadium_capacity), avg(stadium.Average)",
            "select stadium.stadium_capacity, avg(stadium.Average)",
            "select stadium.stadium_capacity, stadium.Average"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.9912181496620178,
            0.0005760316853411496,
            0.0017255025450140238,
            0.0001947598357219249,
            0.00029462436214089394,
            0.0001318350259680301,
            0.0014766629319638014,
            0.00014786949031986296
        ],
        "align_select": "select max(stadium.stadium_capacity), avg(stadium.stadium_capacity)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the average and maximum capacities for all stadiums?",
        "gold_select": "select avg(stadium.stadium_capacity), max(stadium.stadium_capacity)",
        "select_candidates": [
            "select avg(stadium.Average), max(stadium.stadium_capacity)",
            "select avg(stadium.stadium_capacity), max(stadium.stadium_capacity)",
            "select stadium.Average, stadium.stadium_capacity",
            "select stadium.Average, stadium.Highest"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.0006191537831909955,
            9.706986020319164e-05,
            0.9929037690162659,
            8.056015212787315e-05,
            0.0071313814260065556,
            0.00014214191469363868,
            0.9821955561637878,
            7.759527943562716e-05
        ],
        "align_select": "select avg(stadium.stadium_capacity), max(stadium.stadium_capacity)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "gold_select": "select stadium.Name, stadium.stadium_capacity",
        "select_candidates": [
            "select stadium.Name, stadium.stadium_capacity",
            "select stadium.Stadium_ID, stadium.Name, stadium.stadium_capacity",
            "select stadium.Name, stadium.stadium_capacity, avg(stadium.Average)",
            "select stadium.Location, stadium.stadium_capacity"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.9937858581542969,
            0.9901893734931946,
            0.0006163888028822839,
            0.00035302291507832706,
            0.0006764085846953094,
            0.00026194073143415153,
            0.0009348539169877768,
            0.0009979705791920424
        ],
        "align_select": "select stadium.Name, stadium.stadium_capacity",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name and capacity for the stadium with the highest average attendance?",
        "gold_select": "select stadium.Name, stadium.stadium_capacity",
        "select_candidates": [
            "select stadium.Name, stadium.stadium_capacity",
            "select stadium.Stadium_ID, stadium.Name, stadium.stadium_capacity",
            "select stadium.Name, stadium.stadium_capacity, avg(stadium.Average)",
            "select stadium.Location, stadium.stadium_capacity"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.9941272735595703,
            0.9887562394142151,
            0.0006343484274111688,
            0.00035427266266196966,
            0.0006594339502044022,
            0.0002591958036646247,
            0.0009019678691402078,
            0.0009972844272851944
        ],
        "align_select": "select stadium.Name, stadium.stadium_capacity",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "gold_select": "select stadium.Name, stadium.stadium_capacity",
        "select_candidates": [
            "select stadium.Name, stadium.stadium_capacity",
            "select stadium.Name.c2, stadium.stadium_capacity",
            "select stadium.Name, stadium.stadium_capacity, stadium.Average",
            "select stadium.Location, stadium.stadium_capacity"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.9913401007652283,
            0.00013252055214252323,
            0.0006622968357987702,
            7.084165554260835e-05,
            0.0002874958736356348,
            6.087222573114559e-05,
            0.0009453389211557806,
            9.228991257259622e-05
        ],
        "align_select": "select stadium.Name, stadium.stadium_capacity",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name and capacity of the stadium with the most concerts after 2013?",
        "gold_select": "select stadium.Name, stadium.stadium_capacity",
        "select_candidates": [
            "select stadium.Name, stadium.stadium_capacity",
            "select stadium.Location, stadium.stadium_capacity",
            "select stadium.Name., stadium.stadium_capacity",
            "select stadium.stadium_capacity, stadium.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-HAVING-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.991438090801239,
            0.9466707110404968,
            0.0010892660357058048,
            0.0009370440384373069,
            0.008555243723094463,
            0.004962311591953039,
            0.9908498525619507,
            0.9199830889701843
        ],
        "align_select": "select stadium.Name, stadium.stadium_capacity",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the name and theme for all concerts and the number of singers in each concert.",
        "gold_select": "select concert.show, concert.Theme, count(*)",
        "select_candidates": [
            "select concert.show, concert.Theme, count(*)",
            "select concert.show, concert.Theme, count(*), concert.concert_ID",
            "select concert.show, concert.Theme, count(*),",
            "select concert.show, concert.Theme, count(distinct singer_in_concert.Singer_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "concert singer_in_concert",
        "table_candidates": [
            "concert singer_in_concert"
        ],
        "align_scores": [
            0.002362907165661454,
            0.0001933829189511016,
            0.00019005799549631774,
            9.161439083982259e-05,
            0.001112487050704658,
            0.00013640354154631495,
            0.028660103678703308,
            0.00016894633881747723
        ],
        "align_select": "select concert.show, concert.Theme, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the names, themes, and number of singers for every concert?",
        "gold_select": "select concert.show, concert.Theme, count(*)",
        "select_candidates": [
            "select concert.show, concert.Theme, count(*)",
            "select concert.show, concert.Theme, count(distinct singer_in_concert.Singer_ID)",
            "select concert.show, concert.Theme, count(*),",
            "select concert.show, concert.Theme, count(singers)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "concert singer_in_concert",
        "table_candidates": [
            "concert singer_in_concert"
        ],
        "align_scores": [
            0.0008011307218112051,
            0.00021339196246117353,
            0.017907554283738136,
            0.00014721037587150931,
            0.0011803124798461795,
            0.0001597086520632729,
            0.00033357474603690207,
            0.00017434523033443838
        ],
        "align_select": "select concert.show, concert.Theme, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "gold_select": "select singer.Name, singer.Country",
        "select_candidates": [
            "select singer.Name, singer.Country",
            "select singer.Name, singer.Country, singer.Singer_ID",
            "select singer.Name, singer.Country, singer.tune_name",
            "select singer.Name, singer.Country,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9695422053337097,
            0.00018799933604896069,
            0.0002692131092771888,
            8.290472032967955e-05,
            0.00030759701621718705,
            7.534679753007367e-05,
            0.0037690645549446344,
            7.90558333392255e-05
        ],
        "align_select": "select singer.Name, singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "gold_select": "select singer.Name, singer.Country",
        "select_candidates": [
            "select singer.Name, singer.Country",
            "select singer.Name, singer.Country, singer.Singer_ID",
            "select singer.Name, singer.Country, singer.tune_name",
            "select singer.Name, singer.Country,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer",
            "singer singer_in_concert"
        ],
        "align_scores": [
            0.9502041935920715,
            0.00018319880473427474,
            0.0003477833524812013,
            9.13870899239555e-05,
            0.00032301366445608437,
            8.288559183711186e-05,
            0.0042691887356340885,
            8.337359759025276e-05
        ],
        "align_select": "select singer.Name, singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the number of concerts happened in the stadium with the highest capacity.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), stadium.Name",
            "select count(*), stadium.Name, stadium.stadium_capacity",
            "select count(*), stadium.Stadium_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert",
            "stadium singer concert"
        ],
        "align_scores": [
            0.9163819551467896,
            0.9636213183403015,
            0.026691773906350136,
            0.0014711469411849976,
            0.0003889798535965383,
            0.00017292372649535537,
            0.002066440414637327,
            0.000329630624037236
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the number of concerts that occurred in the stadium with the largest capacity?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), stadium.Name",
            "select count(*), stadium.Name, stadium.stadium_capacity",
            "select avg(concert.concert_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert",
            "stadium singer concert"
        ],
        "align_scores": [
            0.7563835978507996,
            0.9718999862670898,
            0.0069691757671535015,
            0.0015830083284527063,
            0.0003201620711479336,
            0.00016755891556385905,
            0.0004879636690020561,
            0.0005890692700631917
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the number of pets whose weight is heavier than 10.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetID",
            "select count(*)c1, Pets.PetID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9925954937934875,
            0.0001576165232108906,
            0.00023982446873560548,
            0.0011047838488593698,
            0.00023982446873560548,
            0.0011047838488593698,
            0.000273565121460706,
            0.00022020074538886547
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many pets have a greater weight than 10?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetID",
            "select count(*), Pets.pet_class"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9875615835189819,
            0.0007418737513944507,
            0.0003079435264226049,
            0.0003056334680877626,
            0.0003079435264226049,
            0.0003056334680877626,
            0.00020245772611815482,
            0.0016197377117350698
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the weight of the youngest dog.",
        "gold_select": "select Pets.mass",
        "select_candidates": [
            "select Pets.mass",
            "select Pets.PetID, Pets.mass",
            "select Pets.mass, Pets.pet_age",
            "select Pets.mass)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9945565462112427,
            5.655874701915309e-05,
            0.00036468636244535446,
            5.7628898503025994e-05,
            0.0008066322770901024,
            5.574015449383296e-05,
            0.05145437270402908,
            5.588513522525318e-05
        ],
        "align_select": "select Pets.mass",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "How much does the youngest dog weigh?",
        "gold_select": "select Pets.mass",
        "select_candidates": [
            "select Pets.mass",
            "select min(Pets.mass)",
            "select max(Pets.mass)",
            "select Pets.PetID, Pets.mass"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.8697097301483154,
            7.072184234857559e-05,
            0.9766278266906738,
            8.595367398811504e-05,
            0.0017394081223756075,
            6.772606866434216e-05,
            0.0002113688096869737,
            6.322094122879207e-05
        ],
        "align_select": "select Pets.mass",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
        "gold_select": "select max(Pets.mass), Pets.pet_class",
        "select_candidates": [
            "select max(Pets.mass), Pets.pet_class",
            "select Pets.mass, Pets.pet_class",
            "select max(Pets.mass), Pets.pet_class,",
            "select maximum(Pets.mass), Pets.pet_class"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9958986639976501,
            0.00034146528923884034,
            0.9771153926849365,
            0.0007924002129584551,
            0.0017459200462326407,
            0.00015493611863348633,
            0.0007922959630377591,
            0.00019296941172797233
        ],
        "align_select": "select max(Pets.mass), Pets.pet_class",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "List the maximum weight and type for each type of pet.",
        "gold_select": "select max(Pets.mass), Pets.pet_class",
        "select_candidates": [
            "select max(Pets.mass), Pets.pet_class",
            "select Pets.mass, Pets.pet_class",
            "select Pets.pet_class, max(Pets.mass)",
            "select max(Pets.mass), max(Pets.pet_class), Pets.pet_class"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9940045475959778,
            0.00021701882360503078,
            0.013525696471333504,
            0.00027351296739652753,
            0.9955146908760071,
            0.00035314203705638647,
            0.0006460912409238517,
            8.789003186393529e-05
        ],
        "align_select": "select max(Pets.mass), Pets.pet_class",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Find number of pets owned by students who are older than 20.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.Age",
            "select count(*), Student.ending_name",
            "select count(*), Student.information"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9828426241874695,
            0.0005929180770181119,
            0.0002736084279604256,
            0.04380284994840622,
            0.00026655130204744637,
            0.000622541643679142,
            0.00043313263449817896,
            0.009895045310258865
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many pets are owned by students that have an age greater than 20?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.Age",
            "select count(*), Student.ending_name",
            "select count(distinct Has_Pet.PetID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.967780590057373,
            0.035949911922216415,
            0.00029370395350269973,
            0.0001705119211692363,
            0.0003011387016158551,
            0.00029737214208580554,
            0.08165830373764038,
            0.0013625227147713304
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the number of dog pets that are raised by female students (with sex F).",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.sexuality",
            "select count(distinct Pets.pet_class)",
            "select count(*), Student.sexuality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.991407036781311,
            0.005784410517662764,
            0.0004396722943056375,
            0.04346894100308418,
            0.0019398329313844442,
            0.00022415461717173457,
            0.0004396722943056375,
            0.04346894100308418
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many dog pets are raised by female students?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.sexuality",
            "select count(*), Student.Age, Student.sexuality",
            "select count(*), Student.Age, Student.sexuality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9868268966674805,
            0.00013954874884802848,
            0.0003397798864170909,
            7.718334381934255e-05,
            0.0001379038585582748,
            6.659378414042294e-05,
            0.0001379038585582748,
            6.659378414042294e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the number of distinct type of pets.",
        "gold_select": "select count(distinct Pets.pet_class)",
        "select_candidates": [
            "select count(distinct Pets.pet_class)",
            "select count (distinct Pets.pet_class)",
            "select count(distinct Pets.pet_class).",
            "select count(distinct Pets.pet_class"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9951089024543762,
            0.9951089024543762,
            0.003871192689985037,
            0.003871192689985037,
            0.0004152999317739159,
            0.0004152999317739159,
            0.03281523659825325,
            0.03281523659825325
        ],
        "align_select": "select count(distinct Pets.pet_class)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many different types of pet are there?",
        "gold_select": "select count(distinct Pets.pet_class)",
        "select_candidates": [
            "select count(distinct Pets.pet_class)",
            "select count(distinct Pets.PetID)",
            "select count(distinct Pets.pet_age)",
            "select count(distinct Pets.pet_class)."
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9923880100250244,
            0.9923880100250244,
            0.1272168904542923,
            0.1272168904542923,
            0.0013573450269177556,
            0.0013573450269177556,
            0.001105830422602594,
            0.001105830422602594
        ],
        "align_select": "select count(distinct Pets.pet_class)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find the first name of students who have cat or dog pet.",
        "gold_select": "select distinct Student.forename",
        "select_candidates": [
            "select Student.forename",
            "select distinct Student.forename",
            "select unique Student.forename",
            "select Student.ending_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9537507891654968,
            0.0035358406603336334,
            0.030343201011419296,
            0.00021343813568819314,
            0.0012153827119618654,
            0.000122408164315857,
            0.0010539803188294172,
            0.0005192573880776763
        ],
        "align_select": "select Student.forename",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the first names of every student who has a cat or dog as a pet?",
        "gold_select": "select distinct Student.forename",
        "select_candidates": [
            "select Student.forename",
            "select distinct Student.forename",
            "select Student.forename, Student.ending_name",
            "select Student.ending_name, Student.forename"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9485068917274475,
            0.0016582300886511803,
            0.07529012113809586,
            0.00034890000824816525,
            0.00015861458086874336,
            6.382507126545534e-05,
            0.0001997226499952376,
            6.104173371568322e-05
        ],
        "align_select": "select Student.forename",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the first name of students who have both cat and dog pets.",
        "gold_select": "select Student.forename",
        "select_candidates": [
            "select Student.forename",
            "select Student.forename, Student.ending_name",
            "select Student.ending_name, Student.forename",
            "select Student.forename, Has_Pet.StuID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.994195282459259,
            0.003774762386456132,
            0.00012247436097823083,
            7.141601963667199e-05,
            0.00012830013292841613,
            6.843141454737633e-05,
            0.00021930629736743867,
            9.610663255443797e-05
        ],
        "align_select": "select Student.forename",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the students' first names who have both cats and dogs as pets?",
        "gold_select": "select Student.forename",
        "select_candidates": [
            "select Student.forename",
            "select Student.forename, Student.ending_name",
            "select Student.forename, Has_Pet.StuID",
            "select Student.ending_name, Student.forename"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.99363774061203,
            0.009580506011843681,
            0.00012244634854141623,
            7.133597682695836e-05,
            0.00028346740873530507,
            0.00011784175148932263,
            0.00013362205936573446,
            6.844910240033641e-05
        ],
        "align_select": "select Student.forename",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the major and age of students who do not have a cat pet.",
        "gold_select": "select Student.program, Student.Age",
        "select_candidates": [
            "select Student.program, Student.Age",
            "select Student.forename, Student.Age",
            "select Student.ending_name, Student.Age",
            "select distinct Student.program, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Pets"
        ],
        "align_scores": [
            0.012734916061162949,
            0.012734916061162949,
            0.0002611669187899679,
            0.0002611669187899679,
            0.0003047312202397734,
            0.0003047312202397734,
            0.0006403401494026184,
            0.0006403401494026184
        ],
        "align_select": "select Student.program, Student.Age",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "gold_select": "select Student.program, Student.Age",
        "select_candidates": [
            "select Student.program, Student.Age",
            "select Student.ending_name, Student.Age",
            "select Student.forename, Student.Age",
            "select Student.sexuality, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.027327874675393105,
            0.9539302587509155,
            0.0002603142347652465,
            0.0009196943719871342,
            0.0002693581918720156,
            0.0009687620913609862,
            0.00037677702493965626,
            0.0015974545385688543
        ],
        "align_select": "select Student.program, Student.Age",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the id of students who do not have a cat pet.",
        "gold_select": "select Student.information",
        "select_candidates": [
            "select Has_Pet.StuID",
            "select Student.information",
            "select Has_Pet.StuID, Pets.pet_class",
            "select Has_Pet.StuID, Has_Pet.PetID"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Has_Pet Pets",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9828869700431824,
            0.0006206668331287801,
            0.8701202273368835,
            0.0007629810716025531,
            0.00018294759502168745,
            9.118418529396877e-05,
            0.00013028499961365014,
            8.190096559701487e-05
        ],
        "align_select": "select Has_Pet.StuID",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the ids of the students who do not own cats as pets?",
        "gold_select": "select Student.information",
        "select_candidates": [
            "select Has_Pet.StuID",
            "select Student.information",
            "select Has_Pet.StuID, Pets.pet_class",
            "select Has_Pet.StuID, Has_Pet.PetID"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Has_Pet Pets",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9740993976593018,
            0.9809884428977966,
            0.8421362042427063,
            0.9584581851959229,
            0.0002453252673149109,
            0.00026049447478726506,
            0.00013675427180714905,
            0.00014308061508927494
        ],
        "align_select": "select Has_Pet.StuID",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "gold_select": "select Student.forename, Student.Age",
        "select_candidates": [
            "select Student.forename, Student.Age",
            "select Student.information, Student.forename, Student.Age",
            "select Student.ending_name, Student.Age",
            "select distinct Student.forename, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.8518729209899902,
            0.8518729209899902,
            0.00035710539668798447,
            0.00035710539668798447,
            0.0004674784140661359,
            0.0004674784140661359,
            0.0025422354228794575,
            0.0025422354228794575
        ],
        "align_select": "select Student.forename, Student.Age",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What is the first name of every student who has a dog but does not have a cat?",
        "gold_select": "select Student.forename, Student.Age",
        "select_candidates": [
            "select Student.forename",
            "select Student.ending_name, Student.forename",
            "select Student.forename, Student.ending_name",
            "select Student.information, Student.forename"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.989831805229187,
            0.9721800088882446,
            0.00015033844101708382,
            0.0001297177659580484,
            0.0001388573436997831,
            0.00012965295172762126,
            0.0005866387509740889,
            0.0005492802010849118
        ],
        "align_select": "select Student.forename",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the type and weight of the youngest pet.",
        "gold_select": "select Pets.pet_class, Pets.mass",
        "select_candidates": [
            "select Pets.pet_class, Pets.mass",
            "select Pets.PetID, Pets.pet_class, Pets.mass",
            "select Pets.pet_class, Pets.mass, min(Pets.pet_age)",
            "select Pets.pet_class, Pets.mass, Pets.pet_age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9952611327171326,
            6.434285751311108e-05,
            0.0002683275379240513,
            6.841752474429086e-05,
            0.00022376766719389707,
            5.432592661236413e-05,
            0.00013624988787341863,
            5.1681377954082564e-05
        ],
        "align_select": "select Pets.pet_class, Pets.mass",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What type of pet is the youngest animal, and how much does it weigh?",
        "gold_select": "select Pets.pet_class, Pets.mass",
        "select_candidates": [
            "select Pets.pet_class, Pets.mass",
            "select Pets.PetID, Pets.pet_class, Pets.mass",
            "select Pets.pet_class, Pets.mass, max(Pets.pet_age)",
            "select Pets.pet_class, Pets.mass, min(Pets.pet_age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9844982028007507,
            5.8348665334051475e-05,
            0.0003021337615791708,
            6.62972524878569e-05,
            0.00029681669548153877,
            6.013613165123388e-05,
            0.0008293228456750512,
            5.52425226487685e-05
        ],
        "align_select": "select Pets.pet_class, Pets.mass",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the id and weight of all pets whose age is older than 1.",
        "gold_select": "select Pets.PetID, Pets.mass",
        "select_candidates": [
            "select Pets.PetID, Pets.mass",
            "select Pets.PetID, Pets.mass.",
            "select Pets.PetID, Pets.mass)",
            "select Pets.PetID, Pets.mass,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9748098254203796,
            0.00013581328676082194,
            0.004726379178464413,
            9.086780482903123e-05,
            0.0015611479757353663,
            8.794602763373405e-05,
            0.0034904659260064363,
            6.769616447854787e-05
        ],
        "align_select": "select Pets.PetID, Pets.mass",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the id and weight of every pet who is older than 1?",
        "gold_select": "select Pets.PetID, Pets.mass",
        "select_candidates": [
            "select Pets.PetID, Pets.mass",
            "select Pets.PetID, Pets.mass.",
            "select Pets.PetID, Pets.mass)",
            "select Pets.PetID, Pets.mass,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9428934454917908,
            0.00020473382028285414,
            0.0036940989084541798,
            0.00011372999870218337,
            0.0017055171774700284,
            0.0001273671368835494,
            0.0032833293080329895,
            7.759127765893936e-05
        ],
        "align_select": "select Pets.PetID, Pets.mass",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the average and maximum age for each type of pet.",
        "gold_select": "select avg(Pets.pet_age), max(Pets.pet_age), Pets.pet_class",
        "select_candidates": [
            "select Pets.pet_class, avg(Pets.pet_age), max(Pets.pet_age)",
            "select avg(Pets.pet_age), max(Pets.pet_age), Pets.pet_class",
            "select Pets.pet_class, avg(Pets.pet_age), max(Pets.pet_age)",
            "select Pets.PetID, avg(Pets.pet_age), max(Pets.pet_age)"
        ],
        "select_labels": [
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9949058294296265,
            0.0002183940086979419,
            0.9952725768089294,
            0.00016028989921323955,
            0.9949058294296265,
            0.0002183940086979419,
            0.0015371148474514484,
            0.00011483347043395042
        ],
        "align_select": "select Pets.pet_class, avg(Pets.pet_age), max(Pets.pet_age)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the average and maximum age for each pet type?",
        "gold_select": "select avg(Pets.pet_age), max(Pets.pet_age), Pets.pet_class",
        "select_candidates": [
            "select Pets.pet_class, avg(Pets.pet_age), max(Pets.pet_age)",
            "select avg(Pets.pet_age), max(Pets.pet_age), Pets.pet_class",
            "select Pets.pet_class, avg(Pets.pet_age), max(Pets.pet_age)",
            "select pet_Pets.pet_class, avg(Pets.pet_age), max(Pets.pet_age)"
        ],
        "select_labels": [
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9948703050613403,
            0.00020580792624969035,
            0.9949913620948792,
            0.00015482536400668323,
            0.9948703050613403,
            0.00020580792624969035,
            0.00033026168239302933,
            0.0001809457753552124
        ],
        "align_select": "select Pets.pet_class, avg(Pets.pet_age), max(Pets.pet_age)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Find the average weight for each pet type.",
        "gold_select": "select avg(Pets.mass), Pets.pet_class",
        "select_candidates": [
            "select Pets.pet_class, avg(Pets.mass)",
            "select avg(Pets.mass), Pets.pet_class",
            "select Pets.pet_class.c3, avg(Pets.mass)",
            "select Pets.pet_class, Avg(Pets.mass)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9969768524169922,
            0.00020891356689389795,
            0.9966163039207458,
            0.0001376690634060651,
            0.0005955121014267206,
            0.00015764430281706154,
            0.9969768524169922,
            0.00020891356689389795
        ],
        "align_select": "select Pets.pet_class, avg(Pets.mass)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the average weight for each type of pet?",
        "gold_select": "select avg(Pets.mass), Pets.pet_class",
        "select_candidates": [
            "select Pets.pet_class, avg(Pets.mass)",
            "select avg(Pets.mass), Pets.pet_class",
            "select Pets.pet_class.c3, avg(Pets.mass)",
            "select Pets.pet_class, avg(Pets.mass)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9964976906776428,
            0.00026726332725957036,
            0.996301531791687,
            0.0001597179361851886,
            0.0007196972146630287,
            0.00019408026128076017,
            0.9964976906776428,
            0.00026726332725957036
        ],
        "align_select": "select Pets.pet_class, avg(Pets.mass)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Find the first name and age of students who have a pet.",
        "gold_select": "select distinct Student.forename, Student.Age",
        "select_candidates": [
            "select distinct Student.forename, Student.Age",
            "select Student.forename, Student.Age",
            "select unique Student.forename, Student.Age",
            "select distinct Student.ending_name, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.030324786901474,
            7.188885501818731e-05,
            0.9637832045555115,
            0.000137653318233788,
            0.000993269612081349,
            7.901445496827364e-05,
            0.0005875239730812609,
            7.125384581740946e-05
        ],
        "align_select": "select Student.forename, Student.Age",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the different first names and ages of the students who do have pets?",
        "gold_select": "select distinct Student.forename, Student.Age",
        "select_candidates": [
            "select distinct Student.forename, Student.Age",
            "select distinct Student.ending_name, Student.Age",
            "select different Student.forename, Student.Age",
            "select distinct Student.forename., Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9887217283248901,
            0.0031623304821550846,
            0.0008590053184889257,
            0.0002669692039489746,
            0.017553873360157013,
            0.0002858769439626485,
            0.0046071442775428295,
            0.0002710786066018045
        ],
        "align_select": "select distinct Student.forename, Student.Age",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
        "gold_select": "select Has_Pet.PetID",
        "select_candidates": [
            "select Has_Pet.PetID",
            "select Has_Pet.PetID, Student.forename",
            "select Has_Pet.PetID, Student.ending_name",
            "select Has_Pet.PetID, Has_Pet.StuID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.14084027707576752,
            0.00010415670112706721,
            0.00018622558854985982,
            6.490933446912095e-05,
            0.00021125053171999753,
            6.92302783136256e-05,
            0.00023857377527747303,
            6.953212141525e-05
        ],
        "align_select": "select Has_Pet.PetID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
        "gold_select": "select Has_Pet.PetID",
        "select_candidates": [
            "select Has_Pet.PetID",
            "select Has_Pet.PetID, Student.forename",
            "select Has_Pet.PetID, Student.ending_name",
            "select Has_Pet.PetID, Has_Pet.StuID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.30338141322135925,
            9.812915959628299e-05,
            0.0001994398917304352,
            6.509430386358872e-05,
            0.00021316886704880744,
            6.696963828289881e-05,
            0.0002602057938929647,
            6.705603300360963e-05
        ],
        "align_select": "select Has_Pet.PetID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the number of pets for each student who has any pet and student id.",
        "gold_select": "select count(*), Student.information",
        "select_candidates": [
            "select count(*), Has_Pet.StuID",
            "select Has_Pet.StuID, count(*)",
            "select count(distinct Has_Pet.PetID), Has_Pet.StuID",
            "select counts(*), Has_Pet.StuID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Has_Pet",
            "Has_Pet Pets"
        ],
        "align_scores": [
            0.9773130416870117,
            0.0002794660977087915,
            0.9830652475357056,
            0.0003285651619080454,
            0.0019543590024113655,
            0.00010476752504473552,
            0.0011159498244524002,
            0.00015175971202552319
        ],
        "align_select": "select count(*), Has_Pet.StuID",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For students who have pets, how many pets does each student have? list their ids instead of names.",
        "gold_select": "select count(*), Student.information",
        "select_candidates": [
            "select Has_Pet.StuID, count(*)",
            "select count(*), Has_Pet.StuID",
            "select Has_Pet.StuID",
            "select Student.information, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.975340723991394,
            0.5056477785110474,
            0.9766188263893127,
            0.10589031130075455,
            0.3019176125526428,
            0.1216215193271637,
            0.06587888300418854,
            0.001280837575905025
        ],
        "align_select": "select Has_Pet.StuID, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Find the first name and gender of student who have more than one pet.",
        "gold_select": "select Student.forename, Student.sexuality",
        "select_candidates": [
            "select Student.forename, Student.sexuality",
            "select Student.forename, Student.Age, Student.sexuality",
            "select Student.information, Student.forename, Student.sexuality",
            "select Student.ending_name, Student.sexuality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets",
            "Student Student Has_Pet"
        ],
        "align_scores": [
            0.9914295077323914,
            0.00014835955516900867,
            0.0001663934817770496,
            5.8648056437959895e-05,
            0.0005367591511458158,
            7.031163841020316e-05,
            0.0007708271150477231,
            8.049380267038941e-05
        ],
        "align_select": "select Student.forename, Student.sexuality",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the first name and gender of the all the students who have more than one pet?",
        "gold_select": "select Student.forename, Student.sexuality",
        "select_candidates": [
            "select Student.forename, Student.sexuality",
            "select Student.forename, Student.Age, Student.sexuality",
            "select Student.information, Student.forename, Student.sexuality",
            "select distinct Student.forename, Student.sexuality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets",
            "Student Student Has_Pet"
        ],
        "align_scores": [
            0.9892938137054443,
            0.00016808731015771627,
            0.00016004935605451465,
            6.290593591984361e-05,
            0.0008086479501798749,
            8.026683644857258e-05,
            0.0020770037081092596,
            7.963032112456858e-05
        ],
        "align_select": "select Student.forename, Student.sexuality",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the last name of the student who has a cat that is age 3.",
        "gold_select": "select Student.ending_name",
        "select_candidates": [
            "select Student.ending_name",
            "select Student.ending_name, Student.forename, Student.Age",
            "select Student.ending_name, Student.forename",
            "select Student.ending_name, Student.forename, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Pets"
        ],
        "align_scores": [
            0.9169689416885376,
            0.003575024427846074,
            0.00014087060117162764,
            8.316229650517926e-05,
            0.00020861119264736772,
            0.00011364045349182561,
            0.00014087060117162764,
            8.316229650517926e-05
        ],
        "align_select": "select Student.ending_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the last name of the student who has a cat that is 3 years old?",
        "gold_select": "select Student.ending_name",
        "select_candidates": [
            "select Student.ending_name",
            "select Student.ending_name, Student.forename, Student.Age",
            "select Student.ending_name, Student.forename",
            "select Student.ending_name Student.forename, Student.ending_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.8071708083152771,
            0.007341592572629452,
            0.00014348393597174436,
            8.746529056224972e-05,
            0.0002326111716683954,
            0.00011722456838469952,
            0.0004783002659678459,
            0.0001151459728134796
        ],
        "align_select": "select Student.ending_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the average age of students who do not have any pet.",
        "gold_select": "select avg(Student.Age)",
        "select_candidates": [
            "select avg(Student.Age)",
            "select an avg(Student.Age)",
            "select avg(t0-Student.Age)",
            "select  avg(Student.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student",
        "table_candidates": [
            "Student",
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.993311882019043,
            0.0001625365111976862,
            0.0005873406189493835,
            0.00012851024803239852,
            0.005612600594758987,
            0.0001734131365083158,
            0.993311882019043,
            0.0001625365111976862
        ],
        "align_select": "select avg(Student.Age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average age for all students who do not own any pets?",
        "gold_select": "select avg(Student.Age)",
        "select_candidates": [
            "select avg(Student.Age)",
            "select an avg(Student.Age)",
            "select avg(Student.Age), Student.sexuality",
            "select avg(Student.Age), Student.information"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student",
        "table_candidates": [
            "Student",
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9935750365257263,
            0.00015301514940802008,
            0.0005402013193815947,
            0.00013857347948942333,
            0.00015727705613244325,
            0.00014226963685359806,
            0.00018576430738903582,
            0.00022894982248544693
        ],
        "align_select": "select avg(Student.Age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the weight of the youngest dog.",
        "gold_select": "select Pets.weight",
        "select_candidates": [
            "select Pets.weight",
            "select Pets.weight, Pets.how_old",
            "select min(Pets.weight)",
            "select max(Pets.weight)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9933502078056335,
            5.670498649124056e-05,
            0.0014488077722489834,
            5.4566429753322154e-05,
            0.0004364939813967794,
            6.019114516675472e-05,
            0.0002824845723807812,
            5.7705390645423904e-05
        ],
        "align_select": "select Pets.weight",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "How much does the youngest dog weigh?",
        "gold_select": "select Pets.weight",
        "select_candidates": [
            "select Pets.weight",
            "select min(Pets.weight)",
            "select max(Pets.weight)",
            "select Pets.weight, Pets.how_old"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.21010547876358032,
            0.9929138422012329,
            0.9905607104301453,
            0.0005517053068615496,
            0.002039596438407898,
            0.0003585429221857339,
            0.00028701574774459004,
            0.0008748464751988649
        ],
        "align_select": "select Pets.weight",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the number of dog pets that are raised by female students (with sex F).",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.StuID",
            "select count(*), Student.gender",
            "select count(distinct Pets.PetType)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.991407036781311,
            0.005784410517662764,
            0.0005169881042093039,
            0.0007137565407902002,
            0.0003874844405800104,
            0.6559947729110718,
            0.006451840046793222,
            0.00042707170359790325
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many dog pets are raised by female students?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.gender",
            "select count(distinct Pets.PetType)",
            "select count(*), Student.StuID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9868268966674805,
            0.00013954874884802848,
            0.00042665316141210496,
            8.13772639958188e-05,
            0.004559457767754793,
            7.113259198376909e-05,
            0.00035896908957511187,
            6.938984006410465e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the type and weight of the youngest pet.",
        "gold_select": "select Pets.PetType, Pets.weight",
        "select_candidates": [
            "select Pets.PetType, Pets.weight",
            "select Pets.PetType, Pets.weight, Pets.how_old",
            "select Pets.PetType, Pets.weight)",
            "select Pets.PetType.c1, Pets.weight"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9884280562400818,
            6.206883699633181e-05,
            0.00022064401127863675,
            5.148461787030101e-05,
            0.0020745391957461834,
            5.481034531840123e-05,
            0.0017223366303369403,
            5.86424685025122e-05
        ],
        "align_select": "select Pets.PetType, Pets.weight",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What type of pet is the youngest animal, and how much does it weigh?",
        "gold_select": "select Pets.PetType, Pets.weight",
        "select_candidates": [
            "select Pets.PetType, Pets.weight",
            "select Pets.PetID, Pets.PetType, Pets.weight",
            "select Pets.PetType, Pets.weight, Pets.how_old",
            "select Pets.PetType.c1, Pets.weight"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9745015501976013,
            5.904193676542491e-05,
            0.00035120718530379236,
            6.970478716539219e-05,
            0.0006468271603807807,
            5.397359927883372e-05,
            0.0016567341517657042,
            5.800490907859057e-05
        ],
        "align_select": "select Pets.PetType, Pets.weight",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the id and weight of all pets whose age is older than 1.",
        "gold_select": "select Pets.PetID, Pets.weight",
        "select_candidates": [
            "select Pets.PetID, Pets.weight",
            "select Pets.PetID, Pets.weight.",
            "select Pets.PetID, Pets.weight)",
            "select Pets.PetType, Pets.weight"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9657233357429504,
            0.00014438125072047114,
            0.004302414134144783,
            9.520687308395281e-05,
            0.0012760534882545471,
            8.812316082185134e-05,
            0.0006032015080563724,
            8.308707037940621e-05
        ],
        "align_select": "select Pets.PetID, Pets.weight",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the id and weight of every pet who is older than 1?",
        "gold_select": "select Pets.PetID, Pets.weight",
        "select_candidates": [
            "select Pets.PetID, Pets.weight",
            "select Pets.PetID, Pets.weight.",
            "select Pets.PetID, Pets.weight)",
            "select Pets.PetType, Pets.weight"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.7979413270950317,
            0.00023188086925074458,
            0.003518173936754465,
            0.00012271097511984408,
            0.0014725413639098406,
            0.000123715159134008,
            0.000563070410862565,
            0.0001074474785127677
        ],
        "align_select": "select Pets.PetID, Pets.weight",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the average and maximum age for each type of pet.",
        "gold_select": "select avg(Pets.how_old), max(Pets.how_old), Pets.PetType",
        "select_candidates": [
            "select Pets.PetType, avg(Pets.how_old), max(Pets.how_old)",
            "select avg(Pets.how_old), max(Pets.how_old), Pets.PetType",
            "select Pets.PetType, avg(Pets.how_old), max(Pets.how_old)",
            "select type Pets.PetType, avg(Pets.how_old), max(Pets.how_old)"
        ],
        "select_labels": [
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9914501309394836,
            0.000220467773033306,
            0.9923376441001892,
            0.00016460100596304983,
            0.9914501309394836,
            0.000220467773033306,
            0.00042209200910292566,
            0.0001451146963518113
        ],
        "align_select": "select Pets.PetType, avg(Pets.how_old), max(Pets.how_old)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the average and maximum age for each pet type?",
        "gold_select": "select avg(Pets.how_old), max(Pets.how_old), Pets.PetType",
        "select_candidates": [
            "select Pets.PetType, avg(Pets.how_old), max(Pets.how_old)",
            "select avg(Pets.how_old), max(Pets.how_old), Pets.PetType",
            "select Pets.PetType, avg(Pets.how_old), max(Pets.how_old)",
            "select pettype, avg(Pets.how_old), max(Pets.how_old)"
        ],
        "select_labels": [
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9923766851425171,
            0.0002103883889503777,
            0.992460310459137,
            0.000162342912517488,
            0.9923766851425171,
            0.0002103883889503777,
            0.18464583158493042,
            0.0001601742405910045
        ],
        "align_select": "select Pets.PetType, avg(Pets.how_old), max(Pets.how_old)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
        "gold_select": "select Has_Pet.PetID",
        "select_candidates": [
            "select Has_Pet.PetID",
            "select Has_Pet.PetID, Student.StuID",
            "select Has_Pet.PetID, Student.Fname",
            "select Has_Pet.PetID, Student.ending_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.14084027707576752,
            0.00010415670112706721,
            0.00023472121392842382,
            7.321517477976158e-05,
            0.00020622201554942876,
            6.743297126377001e-05,
            0.00021125053171999753,
            6.92302783136256e-05
        ],
        "align_select": "select Has_Pet.PetID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
        "gold_select": "select Has_Pet.PetID",
        "select_candidates": [
            "select Has_Pet.PetID",
            "select Has_Pet.PetID, Student.Fname",
            "select Has_Pet.PetID, Student.StuID",
            "select Has_Pet.PetID, Student.ending_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.30338141322135925,
            9.812915959628299e-05,
            0.00024165105423890054,
            6.667740672128275e-05,
            0.0002945906308013946,
            7.45052020647563e-05,
            0.00021316886704880744,
            6.696963828289881e-05
        ],
        "align_select": "select Has_Pet.PetID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the first name and gender of student who have more than one pet.",
        "gold_select": "select Student.Fname, Student.gender",
        "select_candidates": [
            "select Student.Fname, Student.gender",
            "select Student.StuID, Student.Fname, Student.gender",
            "select Student.ending_name, Student.gender",
            "select Student.Fname, Student.Age, Student.gender"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9930086135864258,
            0.0001171110343420878,
            0.0002146061888197437,
            7.129129517124966e-05,
            0.0006033855024725199,
            7.547127461293712e-05,
            0.00016426156798843294,
            5.830800364492461e-05
        ],
        "align_select": "select Student.Fname, Student.gender",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the first name and gender of the all the students who have more than one pet?",
        "gold_select": "select Student.Fname, Student.gender",
        "select_candidates": [
            "select Student.Fname, Student.gender",
            "select Student.StuID, Student.Fname, Student.gender",
            "select distinct Student.Fname, Student.gender",
            "select Student.ending_name, Student.gender"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets",
            "Student Pets"
        ],
        "align_scores": [
            0.9913819432258606,
            0.0001217691387864761,
            0.00033204161445610225,
            8.017083018785343e-05,
            0.0025768368504941463,
            6.641798245254904e-05,
            0.0005713308928534389,
            8.680688188178465e-05
        ],
        "align_select": "select Student.Fname, Student.gender",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the last name of the student who has a cat that is age 3.",
        "gold_select": "select Student.ending_name",
        "select_candidates": [
            "select Student.ending_name",
            "select Student.ending_name, Student.Fname",
            "select Student.ending_name, Student.Fname, Student.Age",
            "select Student.StuID, Student.ending_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9169689416885376,
            0.003575024427846074,
            0.00023356190649792552,
            9.309958113590255e-05,
            0.00012928963406011462,
            7.629205356352031e-05,
            0.00022591894958168268,
            0.00010423639469081536
        ],
        "align_select": "select Student.ending_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the last name of the student who has a cat that is 3 years old?",
        "gold_select": "select Student.ending_name",
        "select_candidates": [
            "select Student.ending_name",
            "select Student.ending_name, Student.Fname",
            "select Student.ending_name, Student.Fname, Student.Age",
            "select Student.ending_name, Student.Fname, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.8071708083152771,
            0.007341592572629452,
            0.0001957573986146599,
            9.510869858786464e-05,
            0.0001293082459596917,
            7.810984243405983e-05,
            0.0001293082459596917,
            7.810984243405983e-05
        ],
        "align_select": "select Student.ending_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
        "gold_select": "select max(Pets.weight), Pets.type_of_animal",
        "select_candidates": [
            "select max(Pets.weight), Pets.type_of_animal",
            "select Pets.weight, Pets.type_of_animal",
            "select max(Pets.weight), Pets.type_of_animal,",
            "select maximum(Pets.weight), Pets.type_of_animal"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9957743287086487,
            0.00022881517361383885,
            0.8379318118095398,
            0.0011912380577996373,
            0.0013191478792577982,
            0.00011548706970643252,
            0.0006932660471647978,
            0.00016049774421844631
        ],
        "align_select": "select max(Pets.weight), Pets.type_of_animal",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "List the maximum weight and type for each type of pet.",
        "gold_select": "select max(Pets.weight), Pets.type_of_animal",
        "select_candidates": [
            "select max(Pets.weight), Pets.type_of_animal",
            "select Pets.weight, Pets.type_of_animal",
            "select max(Pets.weight), max(Pets.type_of_animal), Pets.type_of_animal",
            "select Pets.type_of_animal, max(Pets.weight)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9948446750640869,
            0.00016346813936252147,
            0.017818136140704155,
            0.0003134326252620667,
            0.001679497305303812,
            7.36506626708433e-05,
            0.995918333530426,
            0.00029210158390924335
        ],
        "align_select": "select max(Pets.weight), Pets.type_of_animal",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Find the number of dog pets that are raised by female students (with sex F).",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.StuID",
            "select count(*), Student.Sex",
            "select count(*), Student.LName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.991407036781311,
            0.005784410517662764,
            0.0005169881042093039,
            0.0007137565407902002,
            0.0003581673081498593,
            0.722908079624176,
            0.0005025220452807844,
            0.002492896281182766
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many dog pets are raised by female students?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.Sex",
            "select count(*), Student.StuID",
            "select count(distinct Pets.type_of_animal)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9868268966674805,
            0.00013954874884802848,
            0.0005205380730330944,
            8.159818389685825e-05,
            0.00035896908957511187,
            6.938984006410465e-05,
            0.0024874014779925346,
            6.701947859255597e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the number of distinct type of pets.",
        "gold_select": "select count(distinct Pets.type_of_animal)",
        "select_candidates": [
            "select count(distinct Pets.type_of_animal)",
            "select count (distinct Pets.type_of_animal)",
            "select count(distinct Pets.type_of_animal).",
            "select count(diff. Pets.type_of_animal)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9952066540718079,
            0.9952066540718079,
            0.0026661467272788286,
            0.0026661467272788286,
            0.00030639933538623154,
            0.00030639933538623154,
            0.0008430322632193565,
            0.0008430322632193565
        ],
        "align_select": "select count(distinct Pets.type_of_animal)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many different types of pet are there?",
        "gold_select": "select count(distinct Pets.type_of_animal)",
        "select_candidates": [
            "select count(distinct Pets.type_of_animal)",
            "select count(distinct Pets.type_of_animal).",
            "select count(distinct Pets.PetID)",
            "select count(distinct t2.c 1)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9838823080062866,
            0.9838823080062866,
            0.0005889160092920065,
            0.0005889160092920065,
            0.1272168904542923,
            0.1272168904542923,
            0.000889381451997906,
            0.000889381451997906
        ],
        "align_select": "select count(distinct Pets.type_of_animal)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find the first name of students who have cat or dog pet.",
        "gold_select": "select distinct Student.Fname",
        "select_candidates": [
            "select Student.Fname",
            "select distinct Student.Fname",
            "select Student.StuID, Student.Fname",
            "select Student.LName, Student.Fname"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9885817170143127,
            0.001788000576198101,
            0.023030782118439674,
            0.00014537603419739753,
            0.00017282993940170854,
            6.83037651469931e-05,
            0.00020349332771729678,
            7.915215246612206e-05
        ],
        "align_select": "select Student.Fname",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the first names of every student who has a cat or dog as a pet?",
        "gold_select": "select distinct Student.Fname",
        "select_candidates": [
            "select Student.Fname",
            "select distinct Student.Fname",
            "select Student.StuID, Student.Fname",
            "select Student.LName, Student.Fname"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9811119437217712,
            0.0010368017246946692,
            0.06965380162000656,
            0.0002447731967549771,
            0.00019724520097952336,
            7.537072815466672e-05,
            0.00021616592130158097,
            7.969473517732695e-05
        ],
        "align_select": "select Student.Fname",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the first name of students who have both cat and dog pets.",
        "gold_select": "select Student.Fname",
        "select_candidates": [
            "select Student.Fname",
            "select Student.StuID, Student.Fname",
            "select Student.Fname, Student.LName",
            "select Student.LName, Student.Fname"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9945722222328186,
            0.9945722222328186,
            0.00012949791562277824,
            0.00012949791562277824,
            0.000215387626667507,
            0.000215387626667507,
            0.00022462464403361082,
            0.00022462464403361082
        ],
        "align_select": "select Student.Fname",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the students' first names who have both cats and dogs as pets?",
        "gold_select": "select Student.Fname",
        "select_candidates": [
            "select Student.Fname",
            "select Student.StuID, Student.Fname",
            "select Student.Fname, Student.LName",
            "select Student.LName, Student.Fname"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9940622448921204,
            0.003805838990956545,
            0.00014647933130618185,
            7.856081356294453e-05,
            0.0001501692458987236,
            7.538632780779153e-05,
            0.00021885678870603442,
            7.634882058482617e-05
        ],
        "align_select": "select Student.Fname",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the major and age of students who do not have a cat pet.",
        "gold_select": "select Student.Major, Student.Age",
        "select_candidates": [
            "select Student.Major, Student.Age",
            "select distinct Student.Major, Student.Age",
            "select Student.Fname, Student.Age, Student.Major",
            "select Student.LName, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Pets"
        ],
        "align_scores": [
            0.1265280544757843,
            0.1265280544757843,
            0.009547867812216282,
            0.009547867812216282,
            0.00022228258603718132,
            0.00022228258603718132,
            0.00029418873600661755,
            0.00029418873600661755
        ],
        "align_select": "select Student.Major, Student.Age",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "gold_select": "select Student.Major, Student.Age",
        "select_candidates": [
            "select Student.Major, Student.Age",
            "select Student.Fname, Student.Major, Student.Age",
            "select distinct Student.Major, Student.Age",
            "select Student.LName, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.031734399497509,
            0.9736204743385315,
            0.0001707572810119018,
            0.0002675506693776697,
            0.010735597461462021,
            0.04865531250834465,
            0.00028196413768455386,
            0.0009455641848035157
        ],
        "align_select": "select Student.Major, Student.Age",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the id of students who do not have a cat pet.",
        "gold_select": "select Student.StuID",
        "select_candidates": [
            "select Has_Pet.StuID",
            "select Student.StuID",
            "select t1, Student.StuID",
            "select Student.StuID, Has_Pet.StuID"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9828869700431824,
            0.0006206668331287801,
            0.6944427490234375,
            0.0015191314741969109,
            0.0004564072878565639,
            0.00012485988554544747,
            0.00031302322167903185,
            0.00011541859566932544
        ],
        "align_select": "select Has_Pet.StuID",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the ids of the students who do not own cats as pets?",
        "gold_select": "select Student.StuID",
        "select_candidates": [
            "select Has_Pet.StuID",
            "select Student.StuID",
            "select Has_Pet.StuID, Has_Pet.PetID",
            "select t1, Has_Pet.StuID"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Has_Pet Pets"
        ],
        "align_scores": [
            0.9740993976593018,
            0.9809884428977966,
            0.7632283568382263,
            0.7439793348312378,
            0.00013675427180714905,
            0.00014308061508927494,
            0.0009892309317365289,
            0.0016661436529830098
        ],
        "align_select": "select Has_Pet.StuID",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "gold_select": "select Student.Fname, Student.Age",
        "select_candidates": [
            "select Student.Fname, Student.Age",
            "select Student.StuID, Student.Fname, Student.Age",
            "select Student.LName, Student.Age",
            "select distinct Student.Fname, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.8138681054115295,
            0.928305983543396,
            0.00016485499509144574,
            0.0002386033593211323,
            0.0020453892648220062,
            0.0009250323055312037,
            0.0031039223540574312,
            0.02873140573501587
        ],
        "align_select": "select Student.Fname, Student.Age",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What is the first name of every student who has a dog but does not have a cat?",
        "gold_select": "select Student.Fname, Student.Age",
        "select_candidates": [
            "select Student.Fname",
            "select Student.StuID, Student.Fname",
            "select Student.LName, Student.Fname",
            "select Student.Fname, Student.LName"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.989252507686615,
            0.9555471539497375,
            0.00018909778736997396,
            0.0001816928415792063,
            0.0002597866114228964,
            0.00025671281036920846,
            0.00019391653768252581,
            0.00017039425438269973
        ],
        "align_select": "select Student.Fname",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the type and weight of the youngest pet.",
        "gold_select": "select Pets.type_of_animal, Pets.weight",
        "select_candidates": [
            "select Pets.type_of_animal, Pets.weight",
            "select Pets.type_of_animal, Pets.weight, Pets.pet_age",
            "select Pets.type_of_animal, Pets.weight)",
            "select Pets.type_of_animal, Pets.weight, min(Pets.pet_age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9947904348373413,
            5.960487396805547e-05,
            0.00017438214854337275,
            5.1580242143245414e-05,
            0.0016319947317242622,
            5.403875184128992e-05,
            0.00019646139116957784,
            5.6164128181990236e-05
        ],
        "align_select": "select Pets.type_of_animal, Pets.weight",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What type of pet is the youngest animal, and how much does it weigh?",
        "gold_select": "select Pets.type_of_animal, Pets.weight",
        "select_candidates": [
            "select Pets.type_of_animal, Pets.weight",
            "select Pets.type_of_animal, Pets.weight, Pets.pet_age",
            "select Pets.type_of_animal.c1, Pets.weight",
            "select Pets.type_of_animal, Pets.weight, max(Pets.pet_age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9887948036193848,
            5.6434073485434055e-05,
            0.00046393697266466916,
            5.4690568504156545e-05,
            0.0002550925128161907,
            5.933430657023564e-05,
            0.0002578106941655278,
            6.115651922300458e-05
        ],
        "align_select": "select Pets.type_of_animal, Pets.weight",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the average and maximum age for each type of pet.",
        "gold_select": "select avg(Pets.pet_age), max(Pets.pet_age), Pets.type_of_animal",
        "select_candidates": [
            "select Pets.type_of_animal, avg(Pets.pet_age), max(Pets.pet_age)",
            "select avg(Pets.pet_age), max(Pets.pet_age), Pets.type_of_animal",
            "select Pets.type_of_animal, avg(Pets.pet_age), max(Pets.pet_age)",
            "select type_of_animal, avg(Pets.pet_age), max(Pets.pet_age)"
        ],
        "select_labels": [
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9937350153923035,
            0.0001787361252354458,
            0.993135929107666,
            0.0001467187685193494,
            0.9937350153923035,
            0.0001787361252354458,
            0.0076301624067127705,
            0.00011621949670370668
        ],
        "align_select": "select Pets.type_of_animal, avg(Pets.pet_age), max(Pets.pet_age)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the average and maximum age for each pet type?",
        "gold_select": "select avg(Pets.pet_age), max(Pets.pet_age), Pets.type_of_animal",
        "select_candidates": [
            "select Pets.type_of_animal, avg(Pets.pet_age), max(Pets.pet_age)",
            "select avg(Pets.pet_age), max(Pets.pet_age), Pets.type_of_animal",
            "select pet_Pets.type_of_animal, avg(Pets.pet_age), max(Pets.pet_age)",
            "select Pets.type_of_animal, avg(Pets.pet_age), max(Pets.pet_age)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9940654039382935,
            0.00017808798293117434,
            0.9940156936645508,
            0.00015098303265403956,
            0.00044115266064181924,
            0.00015914300456643105,
            0.9940654039382935,
            0.00017808798293117434
        ],
        "align_select": "select Pets.type_of_animal, avg(Pets.pet_age), max(Pets.pet_age)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Find the average weight for each pet type.",
        "gold_select": "select avg(Pets.weight), Pets.type_of_animal",
        "select_candidates": [
            "select Pets.type_of_animal, avg(Pets.weight)",
            "select avg(Pets.weight), Pets.type_of_animal",
            "select pet_Pets.type_of_animal, avg(Pets.weight)",
            "select type_of_animal, avg(Pets.weight)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9963517189025879,
            0.00019096788309980184,
            0.9960965514183044,
            0.00013109453720971942,
            0.0023692597169429064,
            0.00015496952983085066,
            0.014764153398573399,
            0.0001523023092886433
        ],
        "align_select": "select Pets.type_of_animal, avg(Pets.weight)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the average weight for each type of pet?",
        "gold_select": "select avg(Pets.weight), Pets.type_of_animal",
        "select_candidates": [
            "select Pets.type_of_animal, avg(Pets.weight)",
            "select avg(Pets.weight), Pets.type_of_animal",
            "select type_of_animal, avg(Pets.weight)",
            "select Pets.type_of_animal.c3, avg(Pets.weight)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9960338473320007,
            0.00021330142044462264,
            0.9959052801132202,
            0.00014251390530262142,
            0.00958662573248148,
            0.00014839124924037606,
            0.00028465251671150327,
            0.0001712761732051149
        ],
        "align_select": "select Pets.type_of_animal, avg(Pets.weight)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Find the last name of the student who has a cat that is age 3.",
        "gold_select": "select Student.LName",
        "select_candidates": [
            "select Student.LName",
            "select Student.LName, Student.Fname",
            "select Student.LName, Student.Fname, Student.Age",
            "select Student.LName, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9475710988044739,
            0.0025291929487138987,
            0.00018102860485669225,
            0.00010105773253599182,
            0.0001339927111985162,
            7.492663280572742e-05,
            0.00019421354227233678,
            0.00010402031330158934
        ],
        "align_select": "select Student.LName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the last name of the student who has a cat that is 3 years old?",
        "gold_select": "select Student.LName",
        "select_candidates": [
            "select Student.LName",
            "select Student.LName, Student.Fname, Student.Age",
            "select Student.LName, Student.Fname",
            "select Student.LName, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9243311285972595,
            0.004660360049456358,
            0.00014040003588888794,
            8.004143455764279e-05,
            0.00019661671831272542,
            0.00013132348249200732,
            0.00021448711049742997,
            0.00010613546328386292
        ],
        "align_select": "select Student.LName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the number of pets whose weight is heavier than 10.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetID, Pets.heaviness"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9925954937934875,
            0.0001576165232108906,
            0.00023982446873560548,
            0.0011047838488593698,
            0.00023982446873560548,
            0.0011047838488593698,
            0.0001376352010993287,
            0.00016447974485345185
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many pets have a greater weight than 10?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetID",
            "select count(*), Pets.pet_class"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9875615835189819,
            0.0007418737513944507,
            0.0003079435264226049,
            0.0003056334680877626,
            0.0003079435264226049,
            0.0003056334680877626,
            0.00020245772611815482,
            0.0016197377117350698
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the weight of the youngest dog.",
        "gold_select": "select Pets.heaviness",
        "select_candidates": [
            "select Pets.heaviness",
            "select Pets.PetID, Pets.heaviness",
            "select Pets.heaviness)",
            "select Pets.heaviness, Pets.pet_age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9933011531829834,
            5.647014040732756e-05,
            0.0005626262864097953,
            5.5655702453805134e-05,
            0.03335625305771828,
            5.448360025184229e-05,
            0.0022515859454870224,
            5.556375253945589e-05
        ],
        "align_select": "select Pets.heaviness",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "How much does the youngest dog weigh?",
        "gold_select": "select Pets.heaviness",
        "select_candidates": [
            "select Pets.heaviness",
            "select min(Pets.heaviness)",
            "select max(Pets.heaviness)",
            "select Pets.PetID, Pets.heaviness"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.22829125821590424,
            7.46665900805965e-05,
            0.9813637733459473,
            6.924408080521971e-05,
            0.0034164797980338335,
            6.28184134257026e-05,
            0.00024983350886031985,
            5.939805487287231e-05
        ],
        "align_select": "select min(Pets.heaviness)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
        "gold_select": "select max(Pets.heaviness), Pets.pet_class",
        "select_candidates": [
            "select max(Pets.heaviness), Pets.pet_class",
            "select Pets.heaviness, Pets.pet_class",
            "select maximum(Pets.heaviness), Pets.pet_class",
            "select max(Pets.heaviness), Pets.pet_class,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9959384202957153,
            0.0002888547314796597,
            0.972030758857727,
            0.003159893210977316,
            0.0016128739807754755,
            0.00016872480046004057,
            0.0015626127133145928,
            0.00013446129742078483
        ],
        "align_select": "select max(Pets.heaviness), Pets.pet_class",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "List the maximum weight and type for each type of pet.",
        "gold_select": "select max(Pets.heaviness), Pets.pet_class",
        "select_candidates": [
            "select max(Pets.heaviness), Pets.pet_class",
            "select max(Pets.heaviness), max(Pets.pet_class), Pets.pet_class",
            "select Pets.heaviness, Pets.pet_class",
            "select max(Pets.heaviness), min(Pets.heaviness), Pets.pet_class"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9928081035614014,
            0.00020857321214862168,
            0.0005610974039882421,
            8.462297410005704e-05,
            0.05394269898533821,
            0.0005108623299747705,
            0.00017078759265132248,
            0.00013061301433481276
        ],
        "align_select": "select max(Pets.heaviness), Pets.pet_class",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Find number of pets owned by students who are older than 20.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.LName, Student.Age",
            "select count(*), Student.LName",
            "select count(*), Student.LName, Student.forename"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9828426241874695,
            0.0005929180770181119,
            0.00011694900604197755,
            0.0003191190189681947,
            0.00031424500048160553,
            0.01906159706413746,
            0.00032555716461502016,
            0.011578901670873165
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many pets are owned by students that have an age greater than 20?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.LName, Student.Age",
            "select count(*), Student.LName",
            "select count(*), Student.LName, Student.forename"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.967780590057373,
            0.035949911922216415,
            0.00011983591684838757,
            0.0001081497612176463,
            0.00032855922472663224,
            0.002291004406288266,
            0.0002801300142891705,
            0.0013831083197146654
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the number of dog pets that are raised by female students (with sex F).",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.Sex",
            "select count(distinct Pets.pet_class)",
            "select count(*), Student.Sex"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.991407036781311,
            0.005784410517662764,
            0.0003581673081498593,
            0.722908079624176,
            0.0019398329313844442,
            0.00022415461717173457,
            0.0003581673081498593,
            0.722908079624176
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many dog pets are raised by female students?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.Sex",
            "select count(distinct Pets.pet_class)",
            "select count(*), Student.Sex"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9868268966674805,
            0.010665835812687874,
            0.0005205380730330944,
            0.9200873970985413,
            0.001246300176717341,
            0.00025265145814046264,
            0.0005205380730330944,
            0.9200873970985413
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the number of distinct type of pets.",
        "gold_select": "select count(distinct Pets.pet_class)",
        "select_candidates": [
            "select count(distinct Pets.pet_class)",
            "select count(distinct Pets.pet_class).",
            "select count (distinct Pets.pet_class)",
            "select count(distinct Pets.pet_class"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9951089024543762,
            0.9951089024543762,
            0.0004152999317739159,
            0.0004152999317739159,
            0.003871192689985037,
            0.003871192689985037,
            0.03281523659825325,
            0.03281523659825325
        ],
        "align_select": "select count(distinct Pets.pet_class)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many different types of pet are there?",
        "gold_select": "select count(distinct Pets.pet_class)",
        "select_candidates": [
            "select count(distinct Pets.pet_class)",
            "select count(distinct Pets.PetID)",
            "select count(distinct Pets.pet_class).",
            "select count(distinct Pets.pet_age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9923880100250244,
            0.9923880100250244,
            0.1272168904542923,
            0.1272168904542923,
            0.001105830422602594,
            0.001105830422602594,
            0.0013573450269177556,
            0.0013573450269177556
        ],
        "align_select": "select count(distinct Pets.pet_class)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find the first name of students who have cat or dog pet.",
        "gold_select": "select distinct Student.forename",
        "select_candidates": [
            "select Student.forename",
            "select distinct Student.forename",
            "select Student.LName",
            "select distinct Student.LName"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9537507891654968,
            0.0035358406603336334,
            0.030343201011419296,
            0.00021343813568819314,
            0.36714059114456177,
            0.0014303363859653473,
            0.028430158272385597,
            0.00018965864728670567
        ],
        "align_select": "select Student.forename",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the first names of every student who has a cat or dog as a pet?",
        "gold_select": "select distinct Student.forename",
        "select_candidates": [
            "select Student.forename",
            "select distinct Student.forename",
            "select Student.LName, Student.forename",
            "select Student.forename, Student.LName"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9485068917274475,
            0.0016582300886511803,
            0.07529012113809586,
            0.00034890000824816525,
            0.00023910299933049828,
            6.94406044203788e-05,
            0.00020268853404559195,
            8.393271127715707e-05
        ],
        "align_select": "select Student.forename",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the first name of students who have both cat and dog pets.",
        "gold_select": "select Student.forename",
        "select_candidates": [
            "select Student.forename",
            "select Student.forename, Student.LName",
            "select Student.LName, Student.forename",
            "select Student.LName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.994195282459259,
            0.994195282459259,
            0.0001737574057187885,
            0.0001737574057187885,
            0.00020155363017693162,
            0.00020155363017693162,
            0.9893933534622192,
            0.9893933534622192
        ],
        "align_select": "select Student.forename",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the students' first names who have both cats and dogs as pets?",
        "gold_select": "select Student.forename",
        "select_candidates": [
            "select Student.forename",
            "select Student.forename, Student.LName",
            "select Student.LName, Student.forename",
            "select Student.LName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.99363774061203,
            0.009580506011843681,
            0.00018677738262340426,
            9.254601172870025e-05,
            0.0002431899483781308,
            8.404587424593046e-05,
            0.9860373139381409,
            0.007185646332800388
        ],
        "align_select": "select Student.forename",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the major and age of students who do not have a cat pet.",
        "gold_select": "select Student.Major, Student.Age",
        "select_candidates": [
            "select Student.Major, Student.Age",
            "select distinct Student.Major, Student.Age",
            "select Student.LName, Student.Age",
            "select Student.Age, Student.Major"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Pets"
        ],
        "align_scores": [
            0.1265280544757843,
            0.1265280544757843,
            0.009547867812216282,
            0.009547867812216282,
            0.00029418873600661755,
            0.00029418873600661755,
            0.0019084166269749403,
            0.0019084166269749403
        ],
        "align_select": "select Student.Major, Student.Age",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "gold_select": "select Student.Major, Student.Age",
        "select_candidates": [
            "select Student.Major, Student.Age",
            "select Student.forename, Student.Major, Student.Age",
            "select distinct Student.Major, Student.Age",
            "select Student.LName, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Pets"
        ],
        "align_scores": [
            0.031734399497509,
            0.9736204743385315,
            0.00015003597945906222,
            0.0004098011995665729,
            0.010735597461462021,
            0.04865531250834465,
            0.00028196413768455386,
            0.0009455641848035157
        ],
        "align_select": "select Student.Major, Student.Age",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the id of students who do not have a cat pet.",
        "gold_select": "select Student.information",
        "select_candidates": [
            "select Has_Pet.StuID",
            "select Student.information",
            "select Has_Pet.StuID, Pets.pet_class",
            "select Has_Pet.StuID, Has_Pet.PetID"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Has_Pet Pets"
        ],
        "align_scores": [
            0.9828869700431824,
            0.0006206668331287801,
            0.8701202273368835,
            0.0007629810716025531,
            0.00018294759502168745,
            9.118418529396877e-05,
            0.00013028499961365014,
            8.190096559701487e-05
        ],
        "align_select": "select Has_Pet.StuID",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the ids of the students who do not own cats as pets?",
        "gold_select": "select Student.information",
        "select_candidates": [
            "select Has_Pet.StuID",
            "select Student.information",
            "select Has_Pet.StuID, Pets.pet_class",
            "select Has_Pet.StuID, Has_Pet.PetID"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Has_Pet Pets",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9740993976593018,
            0.9809884428977966,
            0.8421362042427063,
            0.9584581851959229,
            0.0002453252673149109,
            0.00026049447478726506,
            0.00013675427180714905,
            0.00014308061508927494
        ],
        "align_select": "select Has_Pet.StuID",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "gold_select": "select Student.forename, Student.Age",
        "select_candidates": [
            "select Student.forename, Student.Age",
            "select Student.information, Student.forename, Student.Age",
            "select Student.LName, Student.Age",
            "select distinct Student.forename, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.8518729209899902,
            0.8518729209899902,
            0.00035710539668798447,
            0.00035710539668798447,
            0.0020453892648220062,
            0.0020453892648220062,
            0.0025422354228794575,
            0.0025422354228794575
        ],
        "align_select": "select Student.forename, Student.Age",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What is the first name of every student who has a dog but does not have a cat?",
        "gold_select": "select Student.forename, Student.Age",
        "select_candidates": [
            "select Student.forename",
            "select Student.LName, Student.forename",
            "select Student.information, Student.forename",
            "select Student.forename, Student.LName"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.989831805229187,
            0.9721800088882446,
            0.000253207515925169,
            0.00024887657491490245,
            0.0005866387509740889,
            0.0005492802010849118,
            0.00021078453573863953,
            0.0001864956720964983
        ],
        "align_select": "select Student.forename",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the type and weight of the youngest pet.",
        "gold_select": "select Pets.pet_class, Pets.heaviness",
        "select_candidates": [
            "select Pets.pet_class, Pets.heaviness",
            "select Pets.PetID, Pets.pet_class, Pets.heaviness",
            "select Pets.pet_class, Pets.heaviness, min(Pets.pet_age)",
            "select Pets.pet_class, Pets.heaviness, max(Pets.pet_age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9942237734794617,
            6.655912147834897e-05,
            0.000286889640847221,
            6.987116648815572e-05,
            0.0002395536721451208,
            5.6422879424644634e-05,
            0.00020214158575981855,
            5.699133180314675e-05
        ],
        "align_select": "select Pets.pet_class, Pets.heaviness",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What type of pet is the youngest animal, and how much does it weigh?",
        "gold_select": "select Pets.pet_class, Pets.heaviness",
        "select_candidates": [
            "select Pets.pet_class, Pets.heaviness",
            "select Pets.PetID, Pets.pet_class, Pets.heaviness",
            "select Pets.pet_class, Pets.heaviness, max(Pets.pet_age)",
            "select Pets.pet_class, Pets.heaviness, min(Pets.pet_age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9847452044487,
            5.99624436290469e-05,
            0.0002910022158175707,
            6.698777724523097e-05,
            0.00032131586340256035,
            5.7571993238525465e-05,
            0.0006381249986588955,
            5.489508112077601e-05
        ],
        "align_select": "select Pets.pet_class, Pets.heaviness",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the id and weight of all pets whose age is older than 1.",
        "gold_select": "select Pets.PetID, Pets.heaviness",
        "select_candidates": [
            "select Pets.PetID, Pets.heaviness",
            "select Pets.PetID, Pets.heaviness.",
            "select Pets.PetID, Pets.heaviness)",
            "select Pets.PetID, Pets.heaviness,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9745444655418396,
            0.00013894037692807615,
            0.003594857407733798,
            9.383274300489575e-05,
            0.0015726418932899833,
            9.541482722852379e-05,
            0.0038497159257531166,
            7.121295493561774e-05
        ],
        "align_select": "select Pets.PetID, Pets.heaviness",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the id and weight of every pet who is older than 1?",
        "gold_select": "select Pets.PetID, Pets.heaviness",
        "select_candidates": [
            "select Pets.PetID, Pets.heaviness",
            "select Pets.PetID, Pets.heaviness.",
            "select Pets.PetID, Pets.heaviness)",
            "select Pets.PetID, Pets.heaviness,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.8982522487640381,
            0.0002049973263638094,
            0.0031302659772336483,
            0.00011987922334810719,
            0.0015879779821261764,
            0.0001433124707546085,
            0.0035675258841365576,
            8.563779556425288e-05
        ],
        "align_select": "select Pets.PetID, Pets.heaviness",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the average and maximum age for each type of pet.",
        "gold_select": "select avg(Pets.pet_age), max(Pets.pet_age), Pets.pet_class",
        "select_candidates": [
            "select Pets.pet_class, avg(Pets.pet_age), max(Pets.pet_age)",
            "select avg(Pets.pet_age), max(Pets.pet_age), Pets.pet_class",
            "select Pets.pet_class, avg(Pets.pet_age), max(Pets.pet_age)",
            "select Pets.PetID, avg(Pets.pet_age), max(Pets.pet_age)"
        ],
        "select_labels": [
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9949058294296265,
            0.0002183940086979419,
            0.9952725768089294,
            0.00016028989921323955,
            0.9949058294296265,
            0.0002183940086979419,
            0.0015371148474514484,
            0.00011483347043395042
        ],
        "align_select": "select Pets.pet_class, avg(Pets.pet_age), max(Pets.pet_age)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the average and maximum age for each pet type?",
        "gold_select": "select avg(Pets.pet_age), max(Pets.pet_age), Pets.pet_class",
        "select_candidates": [
            "select Pets.pet_class, avg(Pets.pet_age), max(Pets.pet_age)",
            "select avg(Pets.pet_age), max(Pets.pet_age), Pets.pet_class",
            "select Pets.pet_class, avg(Pets.pet_age), max(Pets.pet_age)",
            "select pet_Pets.pet_class, avg(Pets.pet_age), max(Pets.pet_age)"
        ],
        "select_labels": [
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9948703050613403,
            0.00020580792624969035,
            0.9949913620948792,
            0.00015482536400668323,
            0.9948703050613403,
            0.00020580792624969035,
            0.00033026168239302933,
            0.0001809457753552124
        ],
        "align_select": "select Pets.pet_class, avg(Pets.pet_age), max(Pets.pet_age)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Find the average weight for each pet type.",
        "gold_select": "select avg(Pets.heaviness), Pets.pet_class",
        "select_candidates": [
            "select Pets.pet_class, avg(Pets.heaviness)",
            "select avg(Pets.heaviness), Pets.pet_class",
            "select Pets.pet_class.c3, avg(Pets.heaviness)",
            "select Pets.pet_class, Avg(Pets.heaviness)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9966601133346558,
            0.00020540096738841385,
            0.9963621497154236,
            0.0001423058711225167,
            0.000649364257697016,
            0.00015996789443306625,
            0.9966601133346558,
            0.00020540096738841385
        ],
        "align_select": "select Pets.pet_class, avg(Pets.heaviness)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the average weight for each type of pet?",
        "gold_select": "select avg(Pets.heaviness), Pets.pet_class",
        "select_candidates": [
            "select Pets.pet_class, avg(Pets.heaviness)",
            "select avg(Pets.heaviness), Pets.pet_class",
            "select Pets.pet_class.c3, avg(Pets.heaviness)",
            "select Pets.pet_class, Avg(Pets.heaviness)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9960678815841675,
            0.0002551190264057368,
            0.9960505366325378,
            0.00015985354548320174,
            0.000920963182579726,
            0.00018031505169346929,
            0.9960678815841675,
            0.0002551190264057368
        ],
        "align_select": "select Pets.pet_class, avg(Pets.heaviness)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Find the first name and age of students who have a pet.",
        "gold_select": "select distinct Student.forename, Student.Age",
        "select_candidates": [
            "select distinct Student.forename, Student.Age",
            "select Student.forename, Student.Age",
            "select unique Student.forename, Student.Age",
            "select distinct Student.LName, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.030324786901474,
            7.188885501818731e-05,
            0.9637832045555115,
            0.000137653318233788,
            0.000993269612081349,
            7.901445496827364e-05,
            0.002869553631171584,
            6.940459570614621e-05
        ],
        "align_select": "select Student.forename, Student.Age",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the different first names and ages of the students who do have pets?",
        "gold_select": "select distinct Student.forename, Student.Age",
        "select_candidates": [
            "select distinct Student.forename, Student.Age",
            "select distinct Student.forename, Student.Age, Has_Pet.StuID",
            "select distinct Student.forename, Student.Age, Student.Sex",
            "select distinct Student.LName, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9887217283248901,
            0.0031623304821550846,
            0.0002498253888916224,
            0.00011179520515725017,
            0.00018038591952063143,
            0.00014808309788350016,
            0.0028420567978173494,
            0.0010129198199138045
        ],
        "align_select": "select distinct Student.forename, Student.Age",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
        "gold_select": "select Has_Pet.PetID",
        "select_candidates": [
            "select Has_Pet.PetID",
            "select Has_Pet.PetID, Student.LName",
            "select Has_Pet.PetID, Has_Pet.StuID",
            "select Has_Pet.PetID, Student.forename"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.14084027707576752,
            0.00010415670112706721,
            0.0002690371184144169,
            7.563445251435041e-05,
            0.00023857377527747303,
            6.953212141525e-05,
            0.00018622558854985982,
            6.490933446912095e-05
        ],
        "align_select": "select Has_Pet.PetID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
        "gold_select": "select Has_Pet.PetID",
        "select_candidates": [
            "select Has_Pet.PetID",
            "select Has_Pet.PetID, Student.LName",
            "select Has_Pet.PetID, Student.forename",
            "select Has_Pet.PetID, Has_Pet.StuID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.30338141322135925,
            9.812915959628299e-05,
            0.000269567797658965,
            7.579604425700381e-05,
            0.0001994398917304352,
            6.509430386358872e-05,
            0.0002602057938929647,
            6.705603300360963e-05
        ],
        "align_select": "select Has_Pet.PetID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the number of pets for each student who has any pet and student id.",
        "gold_select": "select count(*), Student.information",
        "select_candidates": [
            "select count(*), Has_Pet.StuID",
            "select count(distinct Has_Pet.PetID), Has_Pet.StuID",
            "select count(distinct Has_Pet.StuID), Has_Pet.StuID",
            "select Has_Pet.StuID, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Has_Pet",
            "Has_Pet Pets"
        ],
        "align_scores": [
            0.9773130416870117,
            0.0002794660977087915,
            0.0019543590024113655,
            0.00010476752504473552,
            0.0001533477334305644,
            7.968227873789147e-05,
            0.9830652475357056,
            0.0003285651619080454
        ],
        "align_select": "select count(*), Has_Pet.StuID",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For students who have pets, how many pets does each student have? list their ids instead of names.",
        "gold_select": "select count(*), Student.information",
        "select_candidates": [
            "select count(*), Has_Pet.StuID",
            "select Has_Pet.StuID, count(*)",
            "select Has_Pet.StuID",
            "select Has_Pet.StuID, count(distinct Has_Pet.PetID)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets",
            "Has_Pet Pets"
        ],
        "align_scores": [
            0.9766188263893127,
            0.10589031130075455,
            0.975340723991394,
            0.5056477785110474,
            0.3019176125526428,
            0.1216215193271637,
            0.3487526774406433,
            0.11112217605113983
        ],
        "align_select": "select count(*), Has_Pet.StuID",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Find the first name and gender of student who have more than one pet.",
        "gold_select": "select Student.forename, Student.Sex",
        "select_candidates": [
            "select Student.forename, Student.Sex",
            "select Student.information, Student.forename, Student.Sex",
            "select Student.forename, Student.Age, Student.Sex",
            "select Student.LName, Student.Sex"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets",
            "Student Student Has_Pet"
        ],
        "align_scores": [
            0.9924318790435791,
            0.00014518777607008815,
            0.000630130642093718,
            7.560230733361095e-05,
            0.0001625451841391623,
            5.9553221944952384e-05,
            0.0008424793486483395,
            9.954038250725716e-05
        ],
        "align_select": "select Student.forename, Student.Sex",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the first name and gender of the all the students who have more than one pet?",
        "gold_select": "select Student.forename, Student.Sex",
        "select_candidates": [
            "select Student.forename, Student.Sex",
            "select Student.information, Student.forename, Student.Sex",
            "select distinct Student.forename, Student.Sex",
            "select Student.forename, Student.Age, Student.Sex"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets",
            "Student Student Has_Pet"
        ],
        "align_scores": [
            0.9909789562225342,
            0.00014214612019713968,
            0.0008523872238583863,
            7.874365837778896e-05,
            0.002882528118789196,
            7.538704085163772e-05,
            0.00016064719238784164,
            5.746437091147527e-05
        ],
        "align_select": "select Student.forename, Student.Sex",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the last name of the student who has a cat that is age 3.",
        "gold_select": "select Student.LName",
        "select_candidates": [
            "select Student.LName",
            "select Student.LName, Student.forename, Student.Age",
            "select Student.LName, Student.forename",
            "select Student.LName, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Pets"
        ],
        "align_scores": [
            0.9475710988044739,
            0.0025291929487138987,
            0.0001434639561921358,
            8.232364780269563e-05,
            0.00029527110746130347,
            0.00011540605191839859,
            0.00019421354227233678,
            0.00010402031330158934
        ],
        "align_select": "select Student.LName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the last name of the student who has a cat that is 3 years old?",
        "gold_select": "select Student.LName",
        "select_candidates": [
            "select Student.LName",
            "select Student.LName, Student.forename, Student.Age",
            "select Student.LName, Student.forename",
            "select Student.LName, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9243311285972595,
            0.004660360049456358,
            0.00015318303485400975,
            8.487592276651412e-05,
            0.00032387246028520167,
            0.00011836102203233168,
            0.00021448711049742997,
            0.00010613546328386292
        ],
        "align_select": "select Student.LName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the average age of students who do not have any pet.",
        "gold_select": "select avg(Student.Age)",
        "select_candidates": [
            "select avg(Student.Age)",
            "select an avg(Student.Age)",
            "select avg(t0-Student.Age)",
            "select  avg(Student.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student",
        "table_candidates": [
            "Student",
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.993311882019043,
            0.0001625365111976862,
            0.0005873406189493835,
            0.00012851024803239852,
            0.005612600594758987,
            0.0001734131365083158,
            0.993311882019043,
            0.0001625365111976862
        ],
        "align_select": "select avg(Student.Age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average age for all students who do not own any pets?",
        "gold_select": "select avg(Student.Age)",
        "select_candidates": [
            "select avg(Student.Age)",
            "select avg(Student.Age), Student.Sex",
            "select an avg(Student.Age)",
            "select avg(Student.Age), Student.information"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student",
        "table_candidates": [
            "Student",
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9935750365257263,
            0.00015301514940802008,
            0.0001374901330564171,
            0.00022935796005185694,
            0.0005402013193815947,
            0.00013857347948942333,
            0.00018576430738903582,
            0.00022894982248544693
        ],
        "align_select": "select avg(Student.Age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the weight of the youngest dog.",
        "gold_select": "select Pets.weight",
        "select_candidates": [
            "select Pets.weight",
            "select Pets.weight, Pets.how_old",
            "select min(Pets.weight)",
            "select Pets.weight)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets",
            "Has_Pet Pets"
        ],
        "align_scores": [
            0.9933502078056335,
            5.670498649124056e-05,
            0.0014488077722489834,
            5.4566429753322154e-05,
            0.0004364939813967794,
            6.019114516675472e-05,
            0.026379039511084557,
            5.60896733077243e-05
        ],
        "align_select": "select Pets.weight",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "How much does the youngest dog weigh?",
        "gold_select": "select Pets.weight",
        "select_candidates": [
            "select Pets.weight",
            "select min(Pets.weight)",
            "select max(Pets.weight)",
            "select Pets.PetID, Pets.weight"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.21010547876358032,
            0.9929138422012329,
            0.9905607104301453,
            0.0005517053068615496,
            0.002039596438407898,
            0.0003585429221857339,
            0.000198269248357974,
            0.0005598910502158105
        ],
        "align_select": "select Pets.weight",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
        "gold_select": "select max(Pets.weight), Pets.animal_category",
        "select_candidates": [
            "select max(Pets.weight), Pets.animal_category",
            "select Pets.weight, Pets.animal_category",
            "select maximum(Pets.weight), Pets.animal_category",
            "select max(Pets.weight), Pets.animal_category,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9959653615951538,
            0.00029919130611233413,
            0.9252467155456543,
            0.0027951474767178297,
            0.001306119142100215,
            0.00016117039194796234,
            0.001730139716528356,
            0.00013542700617108494
        ],
        "align_select": "select max(Pets.weight), Pets.animal_category",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "List the maximum weight and type for each type of pet.",
        "gold_select": "select max(Pets.weight), Pets.animal_category",
        "select_candidates": [
            "select max(Pets.weight), Pets.animal_category",
            "select max(Pets.weight), max(Pets.animal_category), Pets.animal_category",
            "select Pets.weight, Pets.animal_category",
            "select max(Pets.weight), min(Pets.weight), Pets.animal_category"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9946441650390625,
            0.00019332226656842977,
            0.003976771607995033,
            8.121625432977453e-05,
            0.026383094489574432,
            0.0003818646364379674,
            0.00018253603775519878,
            0.00013458584726322442
        ],
        "align_select": "select max(Pets.weight), Pets.animal_category",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Find the number of dog pets that are raised by female students (with sex F).",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.StuID",
            "select count(*), Student.Sex",
            "select count(*), Student.surname"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.991407036781311,
            0.005784410517662764,
            0.0005169881042093039,
            0.0007137565407902002,
            0.0003581673081498593,
            0.722908079624176,
            0.00048338324995711446,
            0.001439905259758234
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many dog pets are raised by female students?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.Sex",
            "select count(*), Student.StuID",
            "select count(distinct Pets.animal_category)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9868268966674805,
            0.00013954874884802848,
            0.0005205380730330944,
            8.159818389685825e-05,
            0.00035896908957511187,
            6.938984006410465e-05,
            0.0022910917177796364,
            7.088042912073433e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the number of distinct type of pets.",
        "gold_select": "select count(distinct Pets.animal_category)",
        "select_candidates": [
            "select count(distinct Pets.animal_category)",
            "select count( distinct Pets.animal_category)",
            "select count(distinct Pets.animal_category).",
            "select count(diff. Pets.animal_category)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9943491816520691,
            0.9943491816520691,
            0.1577211618423462,
            0.1577211618423462,
            0.00045439694076776505,
            0.00045439694076776505,
            0.001085476716980338,
            0.001085476716980338
        ],
        "align_select": "select count(distinct Pets.animal_category)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many different types of pet are there?",
        "gold_select": "select count(distinct Pets.animal_category)",
        "select_candidates": [
            "select count(distinct Pets.animal_category)",
            "select count(distinct Pets.PetID)",
            "select count(distinct Pets.animal_category).",
            "select count(distinct t2.c)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9821155071258545,
            0.9821155071258545,
            0.1272168904542923,
            0.1272168904542923,
            0.0009066059137694538,
            0.0009066059137694538,
            0.001969748642295599,
            0.001969748642295599
        ],
        "align_select": "select count(distinct Pets.animal_category)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find the first name of students who have cat or dog pet.",
        "gold_select": "select distinct Student.Fname",
        "select_candidates": [
            "select Student.Fname",
            "select distinct Student.Fname",
            "select Student.StuID, Student.Fname",
            "select Student.surname, Student.Fname"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9885817170143127,
            0.001788000576198101,
            0.023030782118439674,
            0.00014537603419739753,
            0.00017282993940170854,
            6.83037651469931e-05,
            0.0001937383640324697,
            6.416357064153999e-05
        ],
        "align_select": "select Student.Fname",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the first names of every student who has a cat or dog as a pet?",
        "gold_select": "select distinct Student.Fname",
        "select_candidates": [
            "select Student.Fname",
            "select distinct Student.Fname",
            "select Student.StuID, Student.Fname",
            "select Student.surname, Student.Fname"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9811119437217712,
            0.0010368017246946692,
            0.06965380162000656,
            0.0002447731967549771,
            0.00019724520097952336,
            7.537072815466672e-05,
            0.00021291720622684807,
            7.344502955675125e-05
        ],
        "align_select": "select Student.Fname",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the first name of students who have both cat and dog pets.",
        "gold_select": "select Student.Fname",
        "select_candidates": [
            "select Student.Fname",
            "select Student.StuID, Student.Fname",
            "select Student.surname, Student.Fname",
            "select Student.Fname, Student.surname"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9945722222328186,
            0.9945722222328186,
            0.00012949791562277824,
            0.00012949791562277824,
            0.0001294814865104854,
            0.0001294814865104854,
            0.00011105887097073719,
            0.00011105887097073719
        ],
        "align_select": "select Student.Fname",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the students' first names who have both cats and dogs as pets?",
        "gold_select": "select Student.Fname",
        "select_candidates": [
            "select Student.Fname",
            "select Student.StuID, Student.Fname",
            "select Student.Fname, Student.surname",
            "select Student.surname, Student.Fname"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9940622448921204,
            0.003805838990956545,
            0.00014647933130618185,
            7.856081356294453e-05,
            0.00011505794827826321,
            6.5662017732393e-05,
            0.00013596682401839644,
            7.210174226202071e-05
        ],
        "align_select": "select Student.Fname",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the major and age of students who do not have a cat pet.",
        "gold_select": "select Student.program, Student.Age",
        "select_candidates": [
            "select Student.program, Student.Age",
            "select distinct Student.program, Student.Age",
            "select Student.surname, Student.Age",
            "select Student.Fname, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.012734916061162949,
            0.0004902695654891431,
            0.0006403401494026184,
            0.00010187464067712426,
            0.00048350717406719923,
            9.859494457487017e-05,
            0.0001919020724017173,
            8.086417074082419e-05
        ],
        "align_select": "select Student.program, Student.Age",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "gold_select": "select Student.program, Student.Age",
        "select_candidates": [
            "select Student.program, Student.Age",
            "select Student.Fname, Student.program, Student.Age",
            "select Student.Fname, Student.Age",
            "select Student.Sex, Student.program, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.027327874675393105,
            0.9539302587509155,
            0.00016646107542328537,
            0.00028661161195486784,
            0.0002603852190077305,
            0.0009314469643868506,
            0.00018473222735337913,
            0.00044661349966190755
        ],
        "align_select": "select Student.program, Student.Age",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the id of students who do not have a cat pet.",
        "gold_select": "select Student.StuID",
        "select_candidates": [
            "select Has_Pet.StuID",
            "select Student.StuID",
            "select Student.StuID, Has_Pet.StuID",
            "select t1, Student.StuID"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9828869700431824,
            0.0006206668331287801,
            0.6944427490234375,
            0.0015191314741969109,
            0.00031302322167903185,
            0.00011541859566932544,
            0.0004564072878565639,
            0.00012485988554544747
        ],
        "align_select": "select Has_Pet.StuID",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the ids of the students who do not own cats as pets?",
        "gold_select": "select Student.StuID",
        "select_candidates": [
            "select Has_Pet.StuID",
            "select Student.StuID",
            "select Has_Pet.StuID, Has_Pet.PetID",
            "select Has_Pet.StuID, Pets.animal_category"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Has_Pet Pets",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9740993976593018,
            0.06358561664819717,
            0.7632283568382263,
            0.11232925206422806,
            0.00013675427180714905,
            0.00010824592027347535,
            0.0005635569104924798,
            0.0003634571621660143
        ],
        "align_select": "select Has_Pet.StuID",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "gold_select": "select Student.Fname, Student.Age",
        "select_candidates": [
            "select Student.Fname, Student.Age",
            "select Student.surname, Student.Age",
            "select Student.StuID, Student.Fname, Student.Age",
            "select distinct Student.Fname, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.8138681054115295,
            0.8138681054115295,
            0.00041210337076336145,
            0.00041210337076336145,
            0.00016485499509144574,
            0.00016485499509144574,
            0.0031039223540574312,
            0.0031039223540574312
        ],
        "align_select": "select Student.Fname, Student.Age",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What is the first name of every student who has a dog but does not have a cat?",
        "gold_select": "select Student.Fname, Student.Age",
        "select_candidates": [
            "select Student.Fname",
            "select Student.StuID, Student.Fname",
            "select Student.surname, Student.Fname",
            "select Student.Fname, Student.surname"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.989252507686615,
            0.9555471539497375,
            0.00018909778736997396,
            0.0001816928415792063,
            0.00019176890782546252,
            0.00019311906362418085,
            0.00021053968521300703,
            0.0001813497656257823
        ],
        "align_select": "select Student.Fname",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the type and weight of the youngest pet.",
        "gold_select": "select Pets.animal_category, Pets.weight",
        "select_candidates": [
            "select Pets.animal_category, Pets.weight",
            "select Pets.animal_category, Pets.weight, Pets.how_old",
            "select Pets.animal_category, Pets.weight)",
            "select t2, Pets.animal_category, Pets.weight"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9940617680549622,
            6.314839265542105e-05,
            0.0003724670095834881,
            4.9904960178537294e-05,
            0.0024651798885315657,
            5.768349365098402e-05,
            0.00029962093685753644,
            5.847961801919155e-05
        ],
        "align_select": "select Pets.animal_category, Pets.weight",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What type of pet is the youngest animal, and how much does it weigh?",
        "gold_select": "select Pets.animal_category, Pets.weight",
        "select_candidates": [
            "select Pets.animal_category, Pets.weight",
            "select Pets.animal_category, Pets.weight, Pets.how_old",
            "select Pets.animal_category, Pets.weight, max(Pets.how_old)",
            "select Pets.animal_category, Pets.weight, min(Pets.how_old)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9890753030776978,
            5.836468699271791e-05,
            0.0010856552980840206,
            5.310120832291432e-05,
            0.0004000840417575091,
            5.612889799522236e-05,
            0.0031795171089470387,
            5.513116411748342e-05
        ],
        "align_select": "select Pets.animal_category, Pets.weight",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the id and weight of all pets whose age is older than 1.",
        "gold_select": "select Pets.PetID, Pets.weight",
        "select_candidates": [
            "select Pets.PetID, Pets.weight",
            "select Pets.PetID, Pets.weight.",
            "select Pets.animal_category, Pets.weight",
            "select Pets.PetID, Pets.weight)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9657233357429504,
            0.00014438125072047114,
            0.004302414134144783,
            9.520687308395281e-05,
            0.00045701483031734824,
            7.539825310232118e-05,
            0.0012760534882545471,
            8.812316082185134e-05
        ],
        "align_select": "select Pets.PetID, Pets.weight",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the id and weight of every pet who is older than 1?",
        "gold_select": "select Pets.PetID, Pets.weight",
        "select_candidates": [
            "select Pets.PetID, Pets.weight",
            "select Pets.PetID, Pets.weight.",
            "select Pets.PetID, Pets.weight)",
            "select Pets.animal_category, Pets.weight"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.7979413270950317,
            0.00023188086925074458,
            0.003518173936754465,
            0.00012271097511984408,
            0.0014725413639098406,
            0.000123715159134008,
            0.0003792833012994379,
            8.982200233731419e-05
        ],
        "align_select": "select Pets.PetID, Pets.weight",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the average and maximum age for each type of pet.",
        "gold_select": "select avg(Pets.how_old), max(Pets.how_old), Pets.animal_category",
        "select_candidates": [
            "select Pets.animal_category, avg(Pets.how_old), max(Pets.how_old)",
            "select avg(Pets.how_old), max(Pets.how_old), Pets.animal_category",
            "select animal_category, avg(Pets.how_old), max(Pets.how_old)",
            "select type Pets.animal_category, avg(Pets.how_old), max(Pets.how_old)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9935715198516846,
            0.9935715198516846,
            0.9927052855491638,
            0.9927052855491638,
            0.00781315565109253,
            0.00781315565109253,
            0.00037157948827371,
            0.00037157948827371
        ],
        "align_select": "select Pets.animal_category, avg(Pets.how_old), max(Pets.how_old)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the average and maximum age for each pet type?",
        "gold_select": "select avg(Pets.how_old), max(Pets.how_old), Pets.animal_category",
        "select_candidates": [
            "select Pets.animal_category, avg(Pets.how_old), max(Pets.how_old)",
            "select avg(Pets.how_old), max(Pets.how_old), Pets.animal_category",
            "select animal_category, avg(Pets.how_old), max(Pets.how_old)",
            "select pet_Pets.animal_category, avg(Pets.how_old), max(Pets.how_old)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9936863780021667,
            0.00020261897589080036,
            0.9853553771972656,
            0.00015236173931043595,
            0.007808659691363573,
            0.00010297988774254918,
            0.0011716969311237335,
            0.00017156550893560052
        ],
        "align_select": "select Pets.animal_category, avg(Pets.how_old), max(Pets.how_old)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Find the average weight for each pet type.",
        "gold_select": "select avg(Pets.weight), Pets.animal_category",
        "select_candidates": [
            "select Pets.animal_category, avg(Pets.weight)",
            "select avg(Pets.weight), Pets.animal_category",
            "select pet_Pets.animal_category, avg(Pets.weight)",
            "select animal_category, avg(Pets.weight)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9966925382614136,
            0.00019836022693198174,
            0.9957432150840759,
            0.0001277152041438967,
            0.0019462560303509235,
            0.00016599700029473752,
            0.021622411906719208,
            0.00014043418923392892
        ],
        "align_select": "select Pets.animal_category, avg(Pets.weight)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the average weight for each type of pet?",
        "gold_select": "select avg(Pets.weight), Pets.animal_category",
        "select_candidates": [
            "select Pets.animal_category, avg(Pets.weight)",
            "select avg(Pets.weight), Pets.animal_category",
            "select animal_category, avg(Pets.weight)",
            "select Pets.animal_category.c3, avg(Pets.weight)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9963255524635315,
            0.00024089722137432545,
            0.9956804513931274,
            0.00014734336582478136,
            0.03234952688217163,
            0.00014925148570910096,
            0.001108432887122035,
            0.00017557105456944555
        ],
        "align_select": "select Pets.animal_category, avg(Pets.weight)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
        "gold_select": "select Has_Pet.PetID",
        "select_candidates": [
            "select Has_Pet.PetID",
            "select Has_Pet.PetID, Student.StuID",
            "select Has_Pet.PetID, Student.surname",
            "select Has_Pet.PetID, Student.Fname"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.14084027707576752,
            0.00010415670112706721,
            0.00023472121392842382,
            7.321517477976158e-05,
            0.0003515585558488965,
            6.932673568371683e-05,
            0.00020622201554942876,
            6.743297126377001e-05
        ],
        "align_select": "select Has_Pet.PetID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
        "gold_select": "select Has_Pet.PetID",
        "select_candidates": [
            "select Has_Pet.PetID",
            "select Has_Pet.PetID, Student.Fname",
            "select Has_Pet.PetID, Student.surname",
            "select Has_Pet.PetID, Student.StuID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.30338141322135925,
            9.812915959628299e-05,
            0.00024165105423890054,
            6.667740672128275e-05,
            0.00038685754407197237,
            6.858789129182696e-05,
            0.0002945906308013946,
            7.45052020647563e-05
        ],
        "align_select": "select Has_Pet.PetID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the last name of the student who has a cat that is age 3.",
        "gold_select": "select Student.surname",
        "select_candidates": [
            "select Student.surname",
            "select Student.surname, Student.Fname",
            "select Student.surname, Student.Age",
            "select Student.StuID, Student.surname"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.96024489402771,
            0.005773791112005711,
            0.00025755370734259486,
            9.285451960749924e-05,
            0.00021491682855412364,
            0.00010932328586932272,
            0.00024387399025727063,
            0.00010298440611222759
        ],
        "align_select": "select Student.surname",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the last name of the student who has a cat that is 3 years old?",
        "gold_select": "select Student.surname",
        "select_candidates": [
            "select Student.surname",
            "select Student.surname, Student.Fname",
            "select Student.surname, Student.Fname, Student.Age",
            "select Student.surname, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9273855090141296,
            0.007090510800480843,
            0.00024256217875517905,
            9.707411663839594e-05,
            0.00012883549788966775,
            7.321468729060143e-05,
            0.0001976533530978486,
            0.00011423769319662824
        ],
        "align_select": "select Student.surname",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "gold_select": "select continents.ContId, continents.Continent, count(*)",
        "select_candidates": [
            "select continents.ContId, continents.Continent, count(*)",
            "select continents.ContId, continents.Continent, count(*)",
            "select countries.nation_designation, continents.Continent, count(*)",
            "select countries.CountryId, continents.Continent, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries",
        "table_candidates": [
            "continents countries"
        ],
        "align_scores": [
            0.9939354062080383,
            0.0003348504542373121,
            0.9939354062080383,
            0.0003348504542373121,
            0.00054684974020347,
            0.00024161952023860067,
            0.00046427635243162513,
            0.0005130270146764815
        ],
        "align_select": "select continents.ContId, continents.Continent, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For each continent, list its id, name, and how many countries it has?",
        "gold_select": "select continents.ContId, continents.Continent, count(*)",
        "select_candidates": [
            "select continents.ContId, continents.Continent, count(*)",
            "select continents.ContId, continents.Continent, count(*)",
            "select countries.mainland, continents.ContId, count(*)",
            "select countries.mainland, continents.Continent, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries",
        "table_candidates": [
            "continents countries"
        ],
        "align_scores": [
            0.9864422082901001,
            0.0002532826329115778,
            0.9864422082901001,
            0.0002532826329115778,
            0.00530181685462594,
            0.000262629910139367,
            0.18686991930007935,
            0.0002712919667828828
        ],
        "align_select": "select continents.ContId, continents.Continent, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How many models does each car maker produce? List maker full name, id and the number.",
        "gold_select": "select car_makers.full_appellation, car_makers.Id, count(*)",
        "select_candidates": [
            "select car_makers.full_appellation, model_list.producer, count(*)",
            "select car_makers.full_appellation, car_makers.Id, count(*)",
            "select car_makers.producer, model_list.producer, count(*)",
            "select car_makers.full_appellation, model_list.ModelId, count(*)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list"
        ],
        "align_scores": [
            0.008968817070126534,
            0.00035380214103497565,
            0.8899507522583008,
            0.00032529901363886893,
            0.00037469598464667797,
            0.00018963729962706566,
            0.0006950331153348088,
            0.00028028953238390386
        ],
        "align_select": "select car_makers.full_appellation, car_makers.Id, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the full name of each car maker, along with its id and how many models it produces?",
        "gold_select": "select car_makers.full_appellation, car_makers.Id, count(*)",
        "select_candidates": [
            "select car_makers.full_appellation, model_list.producer, count(*)",
            "select car_makers.producer, car_makers.full_appellation, count(*)",
            "select car_makers.full_appellation, car_makers.Id, count(*)",
            "select car_makers.producer, model_list.producer, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers model_list",
            "countries car_makers model_list car_names",
            "car_makers car_names",
            "model_list car_makers car_names"
        ],
        "align_scores": [
            0.7600749731063843,
            0.00023301783949136734,
            0.0016843227203935385,
            0.00010334307444281876,
            0.9795758128166199,
            0.00027409617905505,
            0.0005972622311674058,
            0.00011540132254594937
        ],
        "align_select": "select car_makers.full_appellation, car_makers.Id, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Which model of the car has the minimum horsepower?",
        "gold_select": "select car_names.mode",
        "select_candidates": [
            "select car_names.mode",
            "select car_names.mode, car_names.manufacture",
            "select car_names.mode, model_list.version",
            "select car_names.mode, model_list.ModelId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "car_makers model_list cars_data",
            "car_makers model_list car_names cars_data",
            "continents car_names cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.9468309879302979,
            6.846249016234651e-05,
            0.0005589275388047099,
            5.269019675324671e-05,
            0.0007947920821607113,
            5.6022963690338656e-05,
            0.0016031181439757347,
            6.338724779197946e-05
        ],
        "align_select": "select car_names.mode",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the model of the car with the smallest amount of horsepower?",
        "gold_select": "select car_names.mode",
        "select_candidates": [
            "select car_names.mode",
            "select car_names.mode, car_names.manufacture",
            "select car_names.mode, model_list.version",
            "select car_names.mode, t4.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers model_list cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9754402041435242,
            8.208948565879837e-05,
            0.0005499426042661071,
            5.857646465301514e-05,
            0.00038230541395023465,
            5.995598257868551e-05,
            0.0004362795443739742,
            7.47439480619505e-05
        ],
        "align_select": "select car_names.mode",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the model of the car whose weight is below the average weight.",
        "gold_select": "select car_names.mode",
        "select_candidates": [
            "select car_names.mode",
            "select model_list.version",
            "select model_list.producer",
            "select car_names.mode, model_list.version"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list cars_data",
            "car_makers model_list cars_data",
            "car_names cars_data",
            "model_list car_names cars_data",
            "countries model_list cars_data",
            "countries car_names cars_data",
            "car_makers car_names cars_data",
            "continents model_list cars_data"
        ],
        "align_scores": [
            0.9896817803382874,
            7.757353159831837e-05,
            0.10057179629802704,
            8.186083869077265e-05,
            0.0022173335310071707,
            7.695932436035946e-05,
            0.0002934945223387331,
            6.590730481548235e-05
        ],
        "align_select": "select car_names.mode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the model for the car with a weight smaller than the average?",
        "gold_select": "select car_names.mode",
        "select_candidates": [
            "select model_list.version",
            "select car_names.mode",
            "select model_list.producer",
            "select model_list.ModelId"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "cars_data",
            "model_list cars_data",
            "cars_data model_list car_names",
            "cars_data model_list car_names cars_data",
            "car_names cars_data",
            "cars_data car_names cars_data",
            "cars_data model_list",
            "cars_data car_makers model_list car_names"
        ],
        "align_scores": [
            0.727866530418396,
            9.540181781630963e-05,
            0.9899427890777588,
            9.825950110098347e-05,
            0.0012437168043106794,
            9.4397779321298e-05,
            0.1447933465242386,
            0.00014062164700590074
        ],
        "align_select": "select car_names.mode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the name of the makers that produced some cars in the year of 1970?",
        "gold_select": "select distinct car_makers.producer",
        "select_candidates": [
            "select car_makers.producer",
            "select distinct car_makers.producer",
            "select car_makers.producer, car_names.manufacture",
            "select car_makers.producer, car_makers.full_appellation"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "car_makers car_names",
            "car_makers model_list car_names cars_data",
            "continents car_makers car_names cars_data",
            "countries car_makers car_names cars_data"
        ],
        "align_scores": [
            0.9676177501678467,
            0.0005430869641713798,
            0.3868970572948456,
            0.00016167678404599428,
            0.00030161539325490594,
            7.053412264212966e-05,
            0.0003178464830853045,
            6.5249674662482e-05
        ],
        "align_select": "select car_makers.producer",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name of the different car makers who produced a car in 1970?",
        "gold_select": "select distinct car_makers.producer",
        "select_candidates": [
            "select distinct car_makers.producer",
            "select distinct car_makers.producer, car_names.manufacture",
            "select distinct car_makers.producer, car_makers.full_appellation",
            "select count(distinct car_makers.producer)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names",
            "car_makers car_names cars_data",
            "continents car_makers car_names cars_data",
            "continents car_makers car_names"
        ],
        "align_scores": [
            0.9906674027442932,
            0.0002851132012438029,
            0.00042261058115400374,
            8.331367280334234e-05,
            0.0005548234912566841,
            8.101041021291167e-05,
            0.002666556043550372,
            7.537783676525578e-05
        ],
        "align_select": "select distinct car_makers.producer",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the make and production time of the cars that were produced in the earliest year?",
        "gold_select": "select car_names.manufacture, cars_data.Year",
        "select_candidates": [
            "select car_names.mode, car_names.manufacture",
            "select car_names.MakeId, car_names.manufacture",
            "select car_makers.producer, car_names.manufacture",
            "select car_names.manufacture, car_names.MakeId"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.0010623265989124775,
            6.261828821152449e-05,
            0.8958142399787903,
            6.914952246006578e-05,
            0.00808513630181551,
            6.659339851466939e-05,
            0.0031172940507531166,
            6.995297007961199e-05
        ],
        "align_select": "select car_names.MakeId, car_names.manufacture",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the maker of the carr produced in the earliest year and what year was it?",
        "gold_select": "select car_names.manufacture, cars_data.Year",
        "select_candidates": [
            "select car_makers.producer, cars_data.Year",
            "select car_names.mode, cars_data.Year",
            "select car_makers.producer, t4.c7",
            "select model_list.producer, cars_data.Year"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "countries car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "model_list car_makers car_names cars_data",
            "car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9862090945243835,
            6.960037717362866e-05,
            0.0009554460411891341,
            8.796314068604261e-05,
            0.0006434329552575946,
            0.0001145082715083845,
            0.9856268763542175,
            7.4522897193674e-05
        ],
        "align_select": "select car_makers.producer, cars_data.Year",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which distinct car models are the produced after 1980?",
        "gold_select": "select distinct model_list.version",
        "select_candidates": [
            "select distinct car_names.MakeId",
            "select distinct car_names.mode",
            "select distinct car_names.mode, car_names.manufacture",
            "select distinct car_names.MakeId, car_names.mode"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "model_list car_names cars_data",
        "table_candidates": [
            "model_list car_names",
            "car_names",
            "car_makers model_list car_names",
            "countries car_names",
            "car_makers car_names",
            "countries model_list car_names",
            "model_list car_names cars_data"
        ],
        "align_scores": [
            0.9509222507476807,
            0.026517229154706,
            0.9818210005760193,
            0.00979924388229847,
            0.00013883152860216796,
            0.00012827101454604417,
            0.0002466722798999399,
            0.000142153978231363
        ],
        "align_select": "select distinct car_names.MakeId",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the different models for the cards produced after 1980?",
        "gold_select": "select distinct model_list.version",
        "select_candidates": [
            "select distinct model_list.ModelId",
            "select distinct model_list.ModelId, model_list.version",
            "select count(distinct model_list.ModelId)",
            "select distinct model_list.producer, model_list.version"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "model_list car_names cars_data",
        "table_candidates": [
            "model_list cars_data",
            "model_list car_names",
            "model_list"
        ],
        "align_scores": [
            0.9225692749023438,
            0.00029513996560126543,
            0.0002260406909044832,
            8.1005557149183e-05,
            0.01577194407582283,
            8.10591081972234e-05,
            0.00014604892930947244,
            8.129435445880517e-05
        ],
        "align_select": "select distinct model_list.ModelId",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many car makers are there in each continents? List the continent name and the count.",
        "gold_select": "select continents.Continent, count(*)",
        "select_candidates": [
            "select continents.Continent, count(*)",
            "select continents.Continent, count(*), car_makers.Id",
            "select continents.Continent, count(*)",
            "select continents.Continent, count(*), car_makers.nation"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents car_makers",
            "continents countries car_makers"
        ],
        "align_scores": [
            0.9858147501945496,
            0.00019305148452986032,
            0.00014710247342009097,
            0.00011417811765568331,
            0.9858147501945496,
            0.00019305148452986032,
            0.00019137526396661997,
            0.00012569177488330752
        ],
        "align_select": "select continents.Continent, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the name of each continent and how many car makers are there in each one?",
        "gold_select": "select continents.Continent, count(*)",
        "select_candidates": [
            "select continents.Continent, count(*)",
            "select continents.Continent, count(*), car_makers.nation",
            "select continents.Continent, count(*)",
            "select car_makers.producer, continents.Continent, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents car_makers",
            "continents countries car_makers"
        ],
        "align_scores": [
            0.9907079935073853,
            0.0002469739702064544,
            0.00020755136210937053,
            0.00013728627527598292,
            0.9907079935073853,
            0.0002469739702064544,
            0.0018990248208865523,
            9.460919682169333e-05
        ],
        "align_select": "select continents.Continent, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Which of the countries has the most car makers? List the country name.",
        "gold_select": "select countries.nation_designation",
        "select_candidates": [
            "select countries.nation_designation",
            "select countries.nation_designation, car_makers.nation",
            "select countries.nation_designation, countries.mainland",
            "select countries.nation_designation, countries.CountryId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers",
            "countries car_makers model_list"
        ],
        "align_scores": [
            0.9827669858932495,
            9.206681716023013e-05,
            0.0029275137931108475,
            8.316079038195312e-05,
            0.0014684554189443588,
            7.575890776934102e-05,
            0.0021117227151989937,
            7.170768367359415e-05
        ],
        "align_select": "select countries.nation_designation",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the country with the most car makers?",
        "gold_select": "select countries.nation_designation",
        "select_candidates": [
            "select countries.nation_designation",
            "select countries.nation_designation, car_makers.nation",
            "select countries.nation_designation, countries.mainland",
            "select countries.nation_designation pour car_makers.nation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.9921030402183533,
            7.633819768670946e-05,
            0.0021811884362250566,
            7.3843497375492e-05,
            0.0013758261920884252,
            6.797361129429191e-05,
            0.0017469373997300863,
            7.367553189396858e-05
        ],
        "align_select": "select countries.nation_designation",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "How many car models are produced by each maker? Only list the count and the maker full name.",
        "gold_select": "select count(*), car_makers.full_appellation",
        "select_candidates": [
            "select count(*), car_makers.full_appellation",
            "select count(*), car_makers.producer, car_makers.full_appellation",
            "select count(*), car_makers.producer",
            "select car_makers.producer, car_makers.full_appellation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers model_list"
        ],
        "align_scores": [
            0.983583390712738,
            0.0002246060175821185,
            0.000988400774076581,
            0.00011279383033979684,
            0.9917665123939514,
            0.0002217328583355993,
            0.0073530650697648525,
            0.00017518858658149838
        ],
        "align_select": "select count(*), car_makers.full_appellation",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
        "gold_select": "select count(*), car_makers.full_appellation, car_makers.Id",
        "select_candidates": [
            "select count(*), car_makers.Id, car_makers.full_appellation",
            "select car_makers.Id, car_makers.producer, car_makers.full_appellation",
            "select count(*), car_makers.Id, car_makers.producer, car_makers.full_appellation",
            "select car_makers.Id, car_makers.full_appellation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers model_list"
        ],
        "align_scores": [
            0.9854162335395813,
            0.0003088458615820855,
            0.0005960415583103895,
            0.00014819923671893775,
            0.002762386342510581,
            0.0001179080645670183,
            0.17722946405410767,
            0.0003966136137023568
        ],
        "align_select": "select count(*), car_makers.Id, car_makers.full_appellation",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "gold_select": "select cars_data.speed_up",
        "select_candidates": [
            "select avg(cars_data.speed_up)",
            "select max(cars_data.speed_up)",
            "select accel(cars_data.speed_up)",
            "select accelet(cars_data.speed_up)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "continents car_names cars_data",
            "countries car_names cars_data"
        ],
        "align_scores": [
            0.2908652126789093,
            6.537599256262183e-05,
            0.9509192109107971,
            7.222595741041005e-05,
            0.0010268110781908035,
            7.429561810567975e-05,
            0.0010310604702681303,
            7.52088162698783e-05
        ],
        "align_select": "select max(cars_data.speed_up)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "gold_select": "select cars_data.speed_up",
        "select_candidates": [
            "select avg(cars_data.speed_up)",
            "select cars_data.speed_up",
            "select accel(cars_data.speed_up)",
            "select max(cars_data.speed_up)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "continents car_names cars_data",
            "countries car_names cars_data"
        ],
        "align_scores": [
            0.09189315140247345,
            6.827243487350643e-05,
            0.9666184782981873,
            0.00012797645467799157,
            0.001435871236026287,
            9.10656526684761e-05,
            0.8946838974952698,
            8.74359393492341e-05
        ],
        "align_select": "select cars_data.speed_up",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many car makers are there in france?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countries.CountryId",
            "select count(*), countries.nation_designation",
            "select count(*), countries.mainland"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.9935194849967957,
            7.833474228391424e-05,
            0.00022106579854153097,
            8.0096026067622e-05,
            0.00022045346850063652,
            7.003000064287335e-05,
            0.0002877023071050644,
            7.179335079854354e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of makers of care in France?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countries.CountryId",
            "select count(*), countries.nation_designation",
            "select count(*) (car_makers.Id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.9940605759620667,
            6.083206972107291e-05,
            0.00029217565315775573,
            6.614089943468571e-05,
            0.00022099772468209267,
            6.225331890163943e-05,
            0.00032675493275746703,
            5.867888830835e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many car models are produced in the usa?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct model_list.ModelId)",
            "select count(*), car_makers.Id",
            "select count(*), countries.CountryId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "countries car_makers model_list car_names",
            "countries car_makers model_list",
            "countries car_makers",
            "countries car_makers car_names"
        ],
        "align_scores": [
            0.9936060905456543,
            0.0034735859371721745,
            0.05936590954661369,
            0.0001941109512699768,
            0.0002857107319869101,
            0.003852502442896366,
            0.00020887350547127426,
            0.00025986641412600875
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the count of the car models produced in the United States?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), car_makers.Id",
            "select count(distinct model_list.ModelId)",
            "select count(*), car_makers.producer"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "countries car_makers model_list car_names",
            "car_makers car_names",
            "car_makers model_list",
            "continents car_makers model_list car_names",
            "car_makers model_list car_makers car_names"
        ],
        "align_scores": [
            0.9917306303977966,
            0.03911377862095833,
            0.00023313562269322574,
            0.007470363285392523,
            0.031055377796292305,
            0.000123038116726093,
            0.0002830231678672135,
            0.011569000780582428
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
        "gold_select": "select avg(cars_data.miles_per_gallon)",
        "select_candidates": [
            "select avg(cars_data.miles_per_gallon)",
            "select an avg(cars_data.miles_per_gallon)",
            "select  avg(cars_data.miles_per_gallon)",
            "select avg(cars_data.miles_per_gallon)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.994941771030426,
            0.00010083844972541556,
            0.00033513919333927333,
            0.00010206075239693746,
            0.994941771030426,
            0.00010083844972541556,
            0.994941771030426,
            0.00010083844972541556
        ],
        "align_select": "select avg(cars_data.miles_per_gallon)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
        "gold_select": "select avg(cars_data.miles_per_gallon)",
        "select_candidates": [
            "select avg(cars_data.miles_per_gallon)",
            "select an avg(cars_data.miles_per_gallon)",
            "select  avg(cars_data.miles_per_gallon)",
            "select avg(avg(cars_data.miles_per_gallon)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9947484135627747,
            0.00046194327296689153,
            0.00031575464527122676,
            0.00011992152576567605,
            0.9947484135627747,
            0.00046194327296689153,
            0.0004017007886432111,
            0.00012376294762361795
        ],
        "align_select": "select avg(cars_data.miles_per_gallon)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the smallest weight of the car produced with 8 cylinders on 1974?",
        "gold_select": "select min(cars_data.heaviness)",
        "select_candidates": [
            "select min(cars_data.heaviness)",
            "select min(cars_data.heaviness), cars_data.Year",
            "select min(cars_data.heaviness), cars_data.cylinder_number",
            "select min(cars_data.heaviness), cars_data.speed_up"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.994239091873169,
            9.181239875033498e-05,
            0.00012914348917547613,
            6.203866360010579e-05,
            0.0001235905074281618,
            6.563872011611238e-05,
            0.00011176875705132261,
            5.939816765021533e-05
        ],
        "align_select": "select min(cars_data.heaviness)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the minimum weight of the car with 8 cylinders produced in 1974?",
        "gold_select": "select min(cars_data.heaviness)",
        "select_candidates": [
            "select min(cars_data.heaviness)",
            "select min(cars_data.heaviness), cars_data.Year",
            "select min(cars_data.heaviness), cars_data.speed_up",
            "select min(cars_data.heaviness), cars_data.cylinder_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data",
            "cars_data car_names cars_data"
        ],
        "align_scores": [
            0.9928267002105713,
            8.674033597344533e-05,
            0.00013967989070806652,
            6.447847408708185e-05,
            0.00012387889728415757,
            6.335721263894811e-05,
            0.00013943371595814824,
            6.80934390402399e-05
        ],
        "align_select": "select min(cars_data.heaviness)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are all the makers and models?",
        "gold_select": "select model_list.producer, model_list.version",
        "select_candidates": [
            "select car_makers.producer, model_list.ModelId",
            "select car_makers.producer, car_makers.Id",
            "select car_makers.producer, car_makers.nation",
            "select car_makers.producer, model_list.producer"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "model_list",
        "table_candidates": [
            "car_makers model_list",
            "countries car_makers model_list",
            "car_makers model_list car_names",
            "continents car_makers model_list",
            "model_list car_makers",
            "countries model_list",
            "countries model_list car_names"
        ],
        "align_scores": [
            0.3921043276786804,
            0.00016288962797261775,
            0.0009721724782139063,
            9.301838144892827e-05,
            0.0008653693366795778,
            0.00010501778160687536,
            0.0027446395251899958,
            0.00012171052367193624
        ],
        "align_select": "select car_makers.producer, model_list.ModelId",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the makers and models?",
        "gold_select": "select model_list.producer, model_list.version",
        "select_candidates": [
            "select car_makers.producer, model_list.ModelId",
            "select car_makers.producer, model_list.producer",
            "select car_makers.producer, car_makers.nation",
            "select car_makers.producer, model_list.version"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "model_list",
        "table_candidates": [
            "car_makers model_list",
            "countries car_makers model_list",
            "car_makers model_list car_names",
            "continents car_makers model_list",
            "model_list car_makers",
            "countries model_list"
        ],
        "align_scores": [
            0.8448131680488586,
            0.00013175836647860706,
            0.0015260507352650166,
            9.453615348320454e-05,
            0.0009739064262248576,
            9.496967686573043e-05,
            0.12398716062307358,
            0.00010538574861129746
        ],
        "align_select": "select car_makers.producer, model_list.ModelId",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the countries having at least one car maker? List name and id.",
        "gold_select": "select countries.nation_designation, countries.CountryId",
        "select_candidates": [
            "select countries.nation_designation, countries.CountryId",
            "select distinct countries.nation_designation, countries.CountryId",
            "select countries.nation_designation, car_makers.Id",
            "select at least countries.nation_designation, countries.CountryId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers",
            "countries car_makers model_list"
        ],
        "align_scores": [
            0.15272247791290283,
            0.18421846628189087,
            0.020583325996994972,
            0.0006213990272954106,
            0.03919823840260506,
            0.2357291728258133,
            0.034631166607141495,
            0.0009584264480508864
        ],
        "align_select": "select countries.nation_designation, countries.CountryId",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the names and ids of all countries with at least one car maker?",
        "gold_select": "select countries.nation_designation, countries.CountryId",
        "select_candidates": [
            "select countries.nation_designation, countries.CountryId",
            "select distinct countries.nation_designation, countries.CountryId",
            "select count(*), countries.nation_designation, countries.CountryId",
            "select at least countries.nation_designation, countries.CountryId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers",
            "countries car_makers model_list",
            "countries car_makers car_names"
        ],
        "align_scores": [
            0.7607839107513428,
            0.9325292706489563,
            0.15765616297721863,
            0.0009032884845510125,
            0.0004497347690630704,
            0.000385539693525061,
            0.3094479739665985,
            0.00764104537665844
        ],
        "align_select": "select countries.nation_designation, countries.CountryId",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the number of the cars with horsepower more than 150?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), t5.dcars_data.Id",
            "select count(*) (cars_data.Id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9940716624259949,
            0.00013623700942844152,
            0.00023281310859601945,
            0.005770950578153133,
            0.0002170202787965536,
            0.0011751182610169053,
            0.0003293655172456056,
            0.0003563242789823562
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of cars with a horsepower greater than 150?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), t5.dcars_data.Id",
            "select count(*) (cars_data.Id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9917104840278625,
            0.0001299772848142311,
            0.00023115881776902825,
            0.0008899731910787523,
            0.00020766675879713148,
            0.00035195378586649895,
            0.00028922565979883075,
            0.0001320604933425784
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average weight of cars each year?",
        "gold_select": "select avg(cars_data.heaviness), cars_data.Year",
        "select_candidates": [
            "select avg(cars_data.heaviness), cars_data.Year",
            "select cars_data.Year, avg(cars_data.heaviness)",
            "select an avg(cars_data.heaviness), cars_data.Year",
            "select avg(cars_data.speed_up), cars_data.Year"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9930713772773743,
            0.0001363807823508978,
            0.9957925081253052,
            0.00012190391134936363,
            0.00024506135378032923,
            0.00011691833788063377,
            0.0002491184859536588,
            0.00018961272144224495
        ],
        "align_select": "select avg(cars_data.heaviness), cars_data.Year",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the average weight and year for each year?",
        "gold_select": "select avg(cars_data.heaviness), cars_data.Year",
        "select_candidates": [
            "select avg(cars_data.heaviness), avg(cars_data.Year), cars_data.Year",
            "select avg(cars_data.heaviness), cars_data.Year",
            "select avg(cars_data.heaviness), avg(cars_data.Year),",
            "select avg(cars_data.speed_up), avg(cars_data.Year), cars_data.Year"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.00040084600914269686,
            6.267235585255548e-05,
            0.9583069682121277,
            0.00013812718680128455,
            0.0006605685921385884,
            0.00013031557318754494,
            8.116049866657704e-05,
            8.497618546243757e-05
        ],
        "align_select": "select avg(cars_data.heaviness), cars_data.Year",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Which countries in europe have at least 3 car manufacturers?",
        "gold_select": "select countries.nation_designation",
        "select_candidates": [
            "select countries.CountryId",
            "select countries.nation_designation, countries.CountryId",
            "select countries.CountryId, countries.nation_designation",
            "select countries.nation_designation, countries.mainland"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "continents countries car_makers car_names",
            "continents countries car_makers model_list"
        ],
        "align_scores": [
            0.7878082990646362,
            0.00024672565632499754,
            0.0011617009295150638,
            9.269906877307221e-05,
            0.0007844865904189646,
            7.927361730253324e-05,
            0.0006066504283808172,
            6.8706511228811e-05
        ],
        "align_select": "select countries.CountryId",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "What are the names of all European countries with at least 3 manufacturers?",
        "gold_select": "select countries.nation_designation",
        "select_candidates": [
            "select countries.nation_designation",
            "select countries.nation_designation, t0.c2",
            "select countries.nation_designation, continents.ContId",
            "select countries.nation_designation, continents.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents car_makers car_names",
            "continents countries car_makers car_names",
            "continents car_makers model_list car_names",
            "continents countries car_makers model_list car_names",
            "continents countries car_makers",
            "countries car_makers car_names",
            "continents car_makers"
        ],
        "align_scores": [
            0.9899936318397522,
            0.00012678066559601575,
            0.00029810710111632943,
            7.20347452443093e-05,
            0.0011012470349669456,
            7.592119072796777e-05,
            0.0005628292565234005,
            7.06916325725615e-05
        ],
        "align_select": "select countries.nation_designation",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "gold_select": "select cars_data.hp, car_names.manufacture",
        "select_candidates": [
            "select max(cars_data.hp), car_names.manufacture",
            "select max(cars_data.speed_up), car_names.manufacture",
            "select max(cars_data.hp), car_names.manufacture)",
            "select max(cars_data.hp), cars_data.cylinder_number"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.9896370768547058,
            0.00017470800958108157,
            0.07800750434398651,
            0.00016178336227312684,
            0.0012198815820738673,
            0.00011172742961207405,
            0.00041751930257305503,
            9.34357667574659e-05
        ],
        "align_select": "select max(cars_data.hp), car_names.manufacture",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "gold_select": "select cars_data.hp, car_names.manufacture",
        "select_candidates": [
            "select max(cars_data.hp), car_names.manufacture",
            "select car_names.manufacture, max(cars_data.hp)",
            "select car_names.mode, car_names.manufacture",
            "select car_names.manufacture, cars_data.hp"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "model_list cars_data",
            "countries car_names cars_data",
            "car_makers cars_data",
            "continents car_names cars_data",
            "cars_data"
        ],
        "align_scores": [
            0.0004551386518869549,
            9.437194239581004e-05,
            0.0020321300253272057,
            0.00011075978545704857,
            0.0025068423710763454,
            0.0003879111318383366,
            0.8785130977630615,
            0.00028385603218339384
        ],
        "align_select": "select car_names.manufacture, cars_data.hp",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "gold_select": "select car_names.mode",
        "select_candidates": [
            "select car_names.mode",
            "select car_names.mode, car_names.manufacture",
            "select car_names.MakeId",
            "select car_names.mode, model_list.version"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list cars_data",
            "car_names cars_data",
            "model_list car_names cars_data",
            "cars_data",
            "car_makers model_list cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "countries model_list cars_data"
        ],
        "align_scores": [
            0.8866973519325256,
            0.9783951044082642,
            0.0004717186384368688,
            0.0007019928307272494,
            0.6718151569366455,
            0.9373822808265686,
            0.00033731953590177,
            0.0003585648082662374
        ],
        "align_select": "select car_names.mode",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the car model with the highest mpg?",
        "gold_select": "select car_names.mode",
        "select_candidates": [
            "select car_names.mode",
            "select car_names.mode, car_names.manufacture",
            "select car_names.MakeId, car_names.mode",
            "select car_names.mode, car_names.MakeId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9556105136871338,
            8.405228436458856e-05,
            0.000733312510419637,
            5.9618687373586e-05,
            0.0011492142220959067,
            6.796648085583001e-05,
            0.0004534719919320196,
            6.92063185852021e-05
        ],
        "align_select": "select car_names.mode",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the average horsepower of the cars before 1980?",
        "gold_select": "select avg(cars_data.hp)",
        "select_candidates": [
            "select avg(cars_data.hp)",
            "select an avg(cars_data.hp)",
            "select avg(avg(cars_data.hp)",
            "select  avg(cars_data.hp)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "model_list cars_data",
            "car_names cars_data"
        ],
        "align_scores": [
            0.9962714910507202,
            0.00012884644092991948,
            0.00036250086850486696,
            0.00011982048454228789,
            0.000420260796090588,
            0.0001101017405744642,
            0.9962714910507202,
            0.00012884644092991948
        ],
        "align_select": "select avg(cars_data.hp)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average horsepower for all cars produced before 1980?",
        "gold_select": "select avg(cars_data.hp)",
        "select_candidates": [
            "select avg(cars_data.hp)",
            "select an avg(cars_data.hp)",
            "select avg(avg(cars_data.hp)",
            "select  avg(cars_data.hp)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "model_list cars_data",
            "car_names cars_data"
        ],
        "align_scores": [
            0.9961491823196411,
            0.00011111183266621083,
            0.00036923724110238254,
            0.00010818534065037966,
            0.0004917371552437544,
            0.00010067597031593323,
            0.9961491823196411,
            0.00011111183266621083
        ],
        "align_select": "select avg(cars_data.hp)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average edispl of the cars of model volvo?",
        "gold_select": "select avg(cars_data.Edispl)",
        "select_candidates": [
            "select avg(cars_data.Edispl)",
            "select an avg(cars_data.Edispl)",
            "select  avg(cars_data.Edispl)",
            "select avg(avg(cars_data.Edispl)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9964190721511841,
            8.57400955283083e-05,
            0.00039060739800333977,
            0.00011745192750822753,
            0.9964190721511841,
            8.57400955283083e-05,
            0.0004909514682367444,
            8.018015796551481e-05
        ],
        "align_select": "select avg(cars_data.Edispl)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average edispl for all volvos?",
        "gold_select": "select avg(cars_data.Edispl)",
        "select_candidates": [
            "select avg(cars_data.Edispl)",
            "select an avg(cars_data.Edispl)",
            "select  avg(cars_data.Edispl)",
            "select avg(cars_data.Edispl)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data",
            "car_makers car_names cars_data",
            "countries cars_data",
            "countries car_names cars_data"
        ],
        "align_scores": [
            0.9966610670089722,
            0.0001598495728103444,
            0.00037628886639140546,
            9.487797797191888e-05,
            0.9966610670089722,
            0.0001598495728103444,
            0.9966610670089722,
            0.0001598495728103444
        ],
        "align_select": "select avg(cars_data.Edispl)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the maximum accelerate for different number of cylinders?",
        "gold_select": "select max(cars_data.speed_up), cars_data.cylinder_number",
        "select_candidates": [
            "select max(cars_data.speed_up), cars_data.cylinder_number",
            "select cars_data.cylinder_number, max(cars_data.speed_up)",
            "select min(cars_data.speed_up), cars_data.cylinder_number",
            "select maximum(cars_data.speed_up), cars_data.cylinder_number"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9940447211265564,
            0.00011820469808299094,
            0.9953943490982056,
            0.00013089705316815525,
            0.00026536762015894055,
            9.458384738536552e-05,
            0.003936272580176592,
            0.00010117430792888626
        ],
        "align_select": "select max(cars_data.speed_up), cars_data.cylinder_number",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the maximum accelerate for all the different cylinders?",
        "gold_select": "select max(cars_data.speed_up), cars_data.cylinder_number",
        "select_candidates": [
            "select max(cars_data.speed_up), cars_data.cylinder_number",
            "select cars_data.cylinder_number, max(cars_data.speed_up)",
            "select maximum(cars_data.speed_up), cars_data.cylinder_number",
            "select min(cars_data.speed_up), cars_data.cylinder_number"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9948142766952515,
            0.0001368651574011892,
            0.9957082271575928,
            0.00016231441986747086,
            0.004304131958633661,
            0.00010525438119657338,
            0.00030500852153636515,
            9.030535147758201e-05
        ],
        "align_select": "select max(cars_data.speed_up), cars_data.cylinder_number",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Which model has the most version(make) of cars?",
        "gold_select": "select car_names.mode",
        "select_candidates": [
            "select model_list.ModelId",
            "select model_list.ModelId, model_list.version",
            "select model_list.ModelId, car_names.mode",
            "select model_list.ModelId, car_names.mode, car_names.manufacture"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names",
        "table_candidates": [
            "model_list car_names",
            "car_makers model_list car_names",
            "continents model_list car_names",
            "countries car_names"
        ],
        "align_scores": [
            0.9036750197410583,
            0.001134431571699679,
            0.0037683770060539246,
            0.00011152646038681269,
            0.008851545862853527,
            0.0002265825169160962,
            0.00041266196058131754,
            7.157405343605205e-05
        ],
        "align_select": "select model_list.ModelId",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What model has the most different versions?",
        "gold_select": "select car_names.mode",
        "select_candidates": [
            "select model_list.ModelId",
            "select model_list.ModelId, model_list.version",
            "select model_list.producer, model_list.version",
            "select model_list.producer"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names",
        "table_candidates": [
            "model_list"
        ],
        "align_scores": [
            0.16768476366996765,
            0.0001225076412083581,
            0.00890106800943613,
            7.865300722187385e-05,
            0.00033000955590978265,
            6.777011731173843e-05,
            0.18664342164993286,
            7.287754851859063e-05
        ],
        "align_select": "select model_list.ModelId",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "How many cars have more than 4 cylinders?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.cylinder_number",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.cylinder_number, cars_data.Edispl"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9901673793792725,
            0.0004566364223137498,
            0.0001960540103027597,
            0.0001820825127651915,
            0.00024721850058995187,
            0.00027042554575018585,
            0.0001161731852334924,
            0.00011004580301232636
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of cars with more than 4 cylinders?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.cylinder_number",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.cylinder_number, cars_data.Edispl"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9919754862785339,
            0.00011362355144228786,
            0.0001844752550823614,
            0.002846469869837165,
            0.00024426981690339744,
            0.0003930952516384423,
            0.000123801757581532,
            0.0001890078274300322
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many car models were produced by the maker with full name American Motor Company?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), car_makers.producer",
            "select count(*), car_makers.Id",
            "select count(*), car_makers.producer, car_makers.full_appellation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers model_list",
            "countries car_makers model_list car_names",
            "countries car_makers model_list"
        ],
        "align_scores": [
            0.9923270344734192,
            0.00014054309576749802,
            0.00042339428910054266,
            0.00011145863390993327,
            0.0005440996610559523,
            9.4926668680273e-05,
            0.00015066390915308148,
            8.053756755543873e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of car models created by the car maker American Motor Company?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), car_makers.Id",
            "select count(distinct model_list.ModelId)",
            "select count(model_list.ModelId)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list",
            "car_makers model_list car_names",
            "continents car_makers model_list",
            "countries car_makers model_list"
        ],
        "align_scores": [
            0.9931821227073669,
            7.967476267367601e-05,
            0.0004703117301687598,
            7.110911974450573e-05,
            0.0348675362765789,
            8.161904406733811e-05,
            0.010759430937469006,
            8.777227048994973e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which makers designed more than 3 car models? List full name and the id.",
        "gold_select": "select car_makers.full_appellation, car_makers.Id",
        "select_candidates": [
            "select car_makers.full_appellation, car_makers.Id",
            "select car_makers.producer, car_makers.full_appellation, car_makers.Id",
            "select t2.c4, car_makers.full_appellation, car_makers.Id",
            "select t2.c5, car_makers.full_appellation, car_makers.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list",
            "car_makers model_list car_names",
            "countries car_makers model_list"
        ],
        "align_scores": [
            0.9396058320999146,
            0.00013418757589533925,
            0.00045531787327490747,
            8.914431964512914e-05,
            0.00037838154821656644,
            7.053601439110935e-05,
            0.0004044753441121429,
            7.244545122375712e-05
        ],
        "align_select": "select car_makers.full_appellation, car_makers.Id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the names and ids of all makers with more than 3 models?",
        "gold_select": "select car_makers.full_appellation, car_makers.Id",
        "select_candidates": [
            "select car_makers.producer, car_makers.Id",
            "select car_makers.producer, model_list.ModelId",
            "select car_makers.producer, model_list.producer",
            "select car_makers.producer, car_names.MakeId"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list",
            "car_makers model_list car_names",
            "countries car_makers model_list",
            "continents car_makers model_list"
        ],
        "align_scores": [
            0.09437001496553421,
            8.145374886225909e-05,
            0.0006279848166741431,
            7.447472307831049e-05,
            0.0013662786222994328,
            7.091660518199205e-05,
            0.01075008139014244,
            7.247702887980267e-05
        ],
        "align_select": "select car_makers.producer, car_makers.Id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "gold_select": "select distinct model_list.version",
        "select_candidates": [
            "select distinct model_list.ModelId",
            "select distinct model_list.ModelId, car_makers.full_appellation",
            "select distinct model_list.producer",
            "select distinctive model_list.ModelId"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list cars_data",
            "car_makers model_list car_names cars_data",
            "countries car_makers model_list cars_data"
        ],
        "align_scores": [
            0.6069137454032898,
            0.0982665866613388,
            0.004738954361528158,
            0.00044954122859053314,
            0.3935328722000122,
            0.003912578336894512,
            0.0023191224317997694,
            0.00846817810088396
        ],
        "align_select": "select distinct model_list.ModelId",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "gold_select": "select distinct model_list.version",
        "select_candidates": [
            "select distinct model_list.ModelId",
            "select count(distinct model_list.ModelId)",
            "select distinct model_list.ModelId, car_makers.full_appellation",
            "select distinct model_list.ModelId, car_makers.producer"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list cars_data",
            "car_makers model_list car_names cars_data",
            "countries car_makers model_list cars_data",
            "continents car_makers model_list cars_data",
            "car_makers car_names cars_data"
        ],
        "align_scores": [
            0.43265432119369507,
            0.0015693347668275237,
            0.008071614429354668,
            0.0001364045892842114,
            0.0009581169579178095,
            0.00012457209231797606,
            0.0004023208748549223,
            0.00013101293006911874
        ],
        "align_select": "select distinct model_list.ModelId",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In which years cars were produced weighing no less than 3000 and no more than 4000?",
        "gold_select": "select distinct cars_data.Year",
        "select_candidates": [
            "select cars_data.Year",
            "select distinct cars_data.Year",
            "select cars_data.Year",
            "select specific cars_data.Year"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "model_list cars_data",
            "car_names cars_data"
        ],
        "align_scores": [
            0.9773098230361938,
            0.00044615499791689217,
            0.14043419063091278,
            0.0002846302813850343,
            0.9773098230361938,
            0.00044615499791689217,
            0.002285911003127694,
            0.00014829053543508053
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000?",
        "gold_select": "select distinct cars_data.Year",
        "select_candidates": [
            "select distinct cars_data.Year",
            "select cars_data.Year",
            "select different cars_data.Year",
            "select distinct cars_data.Year, t5.c8"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.004785803146660328,
            0.015139421448111534,
            0.8248753547668457,
            0.8884948492050171,
            0.002534568542614579,
            0.001202822313643992,
            0.0001234767260029912,
            0.00012239707575645298
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
    },
    {
        "question": "What is the horsepower of the car with the largest accelerate?",
        "gold_select": "select cars_data.hp",
        "select_candidates": [
            "select cars_data.hp",
            "select cars_data.Id, cars_data.hp",
            "select cars_data.hp, cars_data.speed_up",
            "select cars_data.Id, cars_data.cylinder_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.97031569480896,
            7.928571722004563e-05,
            0.0002384837280260399,
            6.963776104385033e-05,
            0.0005852801841683686,
            6.859233690192923e-05,
            0.00021749005827587098,
            6.803806900279596e-05
        ],
        "align_select": "select cars_data.hp",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the horsepower of the car with the greatest accelerate?",
        "gold_select": "select cars_data.hp",
        "select_candidates": [
            "select cars_data.hp",
            "select cars_data.Id, cars_data.hp",
            "select cars_data.hp, cars_data.speed_up",
            "select cars_data.Id, cars_data.cylinder_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9828212261199951,
            8.148916822392493e-05,
            0.0002659593301359564,
            7.050642307149246e-05,
            0.0005998099222779274,
            6.848252814961597e-05,
            0.00022671047190669924,
            6.591987767023966e-05
        ],
        "align_select": "select cars_data.hp",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "gold_select": "select cars_data.cylinder_number",
        "select_candidates": [
            "select cars_data.cylinder_number",
            "select sum(cars_data.cylinder_number)",
            "select cars_data.cylinder_number, cars_data.Edispl",
            "select cars_data.cylinder_number, t4.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "model_list cars_data",
            "car_names cars_data",
            "continents model_list car_names cars_data",
            "cars_data",
            "continents model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9740158319473267,
            0.0006999819888733327,
            0.09847776591777802,
            0.00013194380153436214,
            0.00039778396603651345,
            8.612014062236995e-05,
            0.0008515096269547939,
            0.0001288638886762783
        ],
        "align_select": "select cars_data.cylinder_number",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "gold_select": "select cars_data.cylinder_number",
        "select_candidates": [
            "select cars_data.cylinder_number",
            "select cars_data.cylinder_number, cars_data.Edispl",
            "select sum(cars_data.cylinder_number)",
            "select cars_data.cylinder_number, model_list.ModelId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list cars_data",
            "countries model_list cars_data",
            "continents model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9617484211921692,
            0.7083496451377869,
            0.0004518655769061297,
            0.0006537277367897332,
            0.0073206606321036816,
            0.005984866991639137,
            0.00026075239293277264,
            0.0011648850049823523
        ],
        "align_select": "select cars_data.cylinder_number",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(distinct cars_data.Id)",
            "select count(*), cars_data.hp"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9621860384941101,
            0.0013478088658303022,
            0.000418550189351663,
            0.00016310707724187523,
            0.0012011600192636251,
            7.569095760118216e-05,
            0.00037309230538085103,
            0.0003348255413584411
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.hp",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.miles_per_gallon"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9737866520881653,
            0.0005758209154009819,
            0.0003294066700618714,
            0.00017238588770851493,
            0.0004231985367368907,
            9.957162546925247e-05,
            0.00022027466911822557,
            0.00010825561912497506
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many countries has more than 2 car makers?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), car_makers.nation",
            "select count(*), countries.CountryId",
            "select count(distinct countries.CountryId)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers",
            "countries car_makers model_list"
        ],
        "align_scores": [
            0.8212433457374573,
            0.012550869956612587,
            0.0010753225069493055,
            0.015640726312994957,
            0.001570986700244248,
            0.014231045730412006,
            0.09125061333179474,
            0.003144681453704834
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the number of countries with more than 2 car makers?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), car_makers.nation",
            "select count(*), countries.CountryId",
            "select count(*) dependant on car_makers.nation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers",
            "countries car_makers model_list"
        ],
        "align_scores": [
            0.76219242811203,
            0.004517059773206711,
            0.0009301126701757312,
            0.19924435019493103,
            0.0009759411914274096,
            0.021267719566822052,
            0.08248814195394516,
            0.000400881574023515
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many cars has over 6 cylinders?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.cylinder_number",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.cylinder_number, cars_data.Edispl"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9940642714500427,
            0.0007791265961714089,
            0.00023126798623707145,
            0.0002664298517629504,
            0.0002797678462229669,
            0.00024079000286292285,
            0.00011938959505641833,
            0.0001120439701480791
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of carsw ith over 6 cylinders?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.cylinder_number",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.cylinder_number, cars_data.Edispl"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9932132959365845,
            0.00016561345546506345,
            0.0002127850748365745,
            0.00718937162309885,
            0.00026156759122386575,
            0.0004515148466452956,
            0.00012422098370734602,
            0.00019244720169808716
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "gold_select": "select car_names.mode",
        "select_candidates": [
            "select car_names.mode",
            "select car_names.mode, cars_data.cylinder_number",
            "select car_names.mode, cars_data.Id",
            "select car_names.mode, car_names.manufacture"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data",
            "countries cars_data",
            "cars_data car_names cars_data"
        ],
        "align_scores": [
            0.2464800626039505,
            0.0001326085184700787,
            0.000798901601228863,
            7.006646774243563e-05,
            0.0008653969271108508,
            0.00010982441017404199,
            0.0005001284880563617,
            7.154185004765168e-05
        ],
        "align_select": "select car_names.mode",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "gold_select": "select car_names.mode",
        "select_candidates": [
            "select car_names.mode",
            "select car_names.mode, cars_data.cylinder_number",
            "select car_names.mode, cars_data.Id",
            "select cars_data.miles_per_gallon"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "car_makers cars_data",
            "model_list cars_data",
            "countries cars_data",
            "cars_data car_names cars_data"
        ],
        "align_scores": [
            0.027621068060398102,
            0.00015592049749102443,
            0.0009275307529605925,
            8.578564302297309e-05,
            0.0009824730223044753,
            0.00011143461597384885,
            0.0029655855614691973,
            7.303073653019965e-05
        ],
        "align_select": "select car_names.mode",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "gold_select": "select car_names.MakeId, car_names.manufacture",
        "select_candidates": [
            "select car_names.MakeId, car_names.manufacture",
            "select car_makers.Id, car_names.manufacture",
            "select car_names.mode, car_names.manufacture",
            "select car_names.MakeId, car_names.manufacture"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "car_makers cars_data",
            "model_list cars_data",
            "cars_data"
        ],
        "align_scores": [
            0.004347893875092268,
            0.000596841680817306,
            0.1860765516757965,
            0.05078081786632538,
            0.0009706398122943938,
            0.0002155384427169338,
            0.004347893875092268,
            0.000596841680817306
        ],
        "align_select": "select car_names.MakeId, car_names.manufacture",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Among the cars that do not have the minimum horsepower, what are the make ids and names of all those with less than 4 cylinders?",
        "gold_select": "select car_names.MakeId, car_names.manufacture",
        "select_candidates": [
            "select car_names.MakeId, car_names.mode",
            "select car_names.MakeId, car_names.manufacture",
            "select car_names.MakeId, car_names.MakeId",
            "select car_names.MakeId, t4.c4"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.0012588995741680264,
            0.00017290888354182243,
            0.008248165249824524,
            0.0003335865039844066,
            0.0007350854575634003,
            0.00013439949543680996,
            0.0013705885503441095,
            0.00016900739865377545
        ],
        "align_select": "select car_names.MakeId, car_names.mode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980?",
        "gold_select": "select max(cars_data.miles_per_gallon)",
        "select_candidates": [
            "select max(cars_data.miles_per_gallon)",
            "select max(cars_data.miles_per_gallon), cars_data.cylinder_number",
            "select max(cars_data.miles_per_gallon), cars_data.Year",
            "select max(cars_data.miles_per_gallon) delegated to cars_data.cylinder_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9922235608100891,
            0.00010113495955010876,
            0.00016737033729441464,
            6.542120536323637e-05,
            0.0001294696266995743,
            6.36702316114679e-05,
            0.00019342514860909432,
            7.585889397887513e-05
        ],
        "align_select": "select max(cars_data.miles_per_gallon)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980?",
        "gold_select": "select max(cars_data.miles_per_gallon)",
        "select_candidates": [
            "select max(cars_data.miles_per_gallon)",
            "select max(cars_data.miles_per_gallon), cars_data.cylinder_number",
            "select max(cars_data.miles_per_gallon) de cars_data.Id",
            "select max(cars_data.miles_per_gallon), cars_data.Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9742480516433716,
            0.02901126816868782,
            0.0002231914986623451,
            0.00014943632413633168,
            0.00023147488536778837,
            0.0001521892409073189,
            0.00015396528760902584,
            8.116375101963058e-05
        ],
        "align_select": "select max(cars_data.miles_per_gallon)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "gold_select": "select distinct model_list.version",
        "select_candidates": [
            "select model_list.ModelId",
            "select car_names.MakeId",
            "select model_list.ModelId, car_makers.full_appellation",
            "select model_list.ModelId, car_makers.producer"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list cars_data",
            "car_makers model_list car_names",
            "countries car_makers model_list cars_data",
            "continents car_makers model_list cars_data",
            "car_makers model_list car_names cars_data",
            "car_makers car_names cars_data"
        ],
        "align_scores": [
            0.5573230981826782,
            0.5573230981826782,
            0.7608383893966675,
            0.7608383893966675,
            0.001245772116817534,
            0.001245772116817534,
            0.0007669185288250446,
            0.0007669185288250446
        ],
        "align_select": "select car_names.MakeId",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "gold_select": "select distinct model_list.version",
        "select_candidates": [
            "select distinct model_list.ModelId",
            "select distinct car_names.MakeId",
            "select distinct model_list.ModelId, car_makers.full_appellation",
            "select distinct model_list.ModelId, car_makers.producer"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list cars_data",
            "car_makers model_list car_names cars_data",
            "car_makers model_list car_names",
            "countries car_makers model_list cars_data",
            "continents car_makers model_list cars_data",
            "car_makers car_names cars_data"
        ],
        "align_scores": [
            0.3883489668369293,
            0.3883489668369293,
            0.5588410496711731,
            0.5588410496711731,
            0.0010880340123549104,
            0.0010880340123549104,
            0.001490591443143785,
            0.001490591443143785
        ],
        "align_select": "select distinct model_list.ModelId",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the name of the countries where there is not a single car maker?",
        "gold_select": "select countries.nation_designation",
        "select_candidates": [
            "select countries.nation_designation",
            "select countries.nation_designation, countries.CountryId",
            "select countries.nation_designation, countries.mainland",
            "select countries.CountryId, countries.nation_designation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries",
            "countries car_makers",
            "countries car_makers model_list",
            "countries car_makers car_names"
        ],
        "align_scores": [
            0.9454058408737183,
            0.010183442384004593,
            0.0002960768179036677,
            0.00016770629736129194,
            0.0004896785249002278,
            0.00018195876327808946,
            0.0003400148416403681,
            0.00018365301366429776
        ],
        "align_select": "select countries.nation_designation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of the countries with no car makers?",
        "gold_select": "select countries.nation_designation",
        "select_candidates": [
            "select countries.nation_designation",
            "select countries.nation_designation, countries.mainland",
            "select countries.nation_designation, countries.CountryId",
            "select countries.CountryId, countries.nation_designation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries",
            "countries car_makers",
            "countries car_makers model_list"
        ],
        "align_scores": [
            0.9648371934890747,
            0.0015899507561698556,
            0.0003585583181120455,
            0.0001239263656316325,
            0.0002604085602797568,
            0.00013926801329944283,
            0.00032396329334005713,
            0.0001415712176822126
        ],
        "align_select": "select countries.nation_designation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which are the car makers which produce at least 2 models and more than 3 car makers? List the id and the maker.",
        "gold_select": "select car_makers.Id, car_makers.producer",
        "select_candidates": [
            "select car_makers.Id, car_makers.producer",
            "select model_list.ModelId, car_makers.producer",
            "select car_makers.producer, car_makers.Id",
            "select model_list.producer, car_makers.producer"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers model_list",
            "countries car_makers model_list car_names"
        ],
        "align_scores": [
            0.016124889254570007,
            0.006537536159157753,
            0.0006506781792268157,
            0.0005612883251160383,
            0.0038972527254372835,
            0.001995137892663479,
            0.0005431147292256355,
            0.00041416584281250834
        ],
        "align_select": "select car_makers.Id, car_makers.producer",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "gold_select": "select car_makers.Id, car_makers.producer",
        "select_candidates": [
            "select car_makers.Id, car_makers.producer",
            "select model_list.ModelId, car_makers.producer",
            "select t2, car_makers.Id, car_makers.producer",
            "select car_names.mode, car_makers.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names",
        "table_candidates": [
            "car_makers model_list car_names",
            "countries car_makers model_list car_names",
            "car_makers car_makers model_list car_names",
            "car_makers model_list car_makers car_names"
        ],
        "align_scores": [
            0.8082902431488037,
            0.056374937295913696,
            0.00022117055777925998,
            0.0002332441508769989,
            0.00017170098726637661,
            0.00013572874013334513,
            0.00253241416066885,
            0.0027064827736467123
        ],
        "align_select": "select car_makers.Id, car_makers.producer",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "gold_select": "select countries.CountryId, countries.nation_designation",
        "select_candidates": [
            "select countries.CountryId, countries.nation_designation",
            "select car_makers.Id, countries.nation_designation",
            "select countries.CountryId, countries.nation_designation,",
            "select car_names.mode, countries.CountryId, countries.nation_designation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "countries car_makers model_list car_names",
            "countries car_makers model_list",
            "countries car_makers",
            "countries car_makers car_names"
        ],
        "align_scores": [
            0.9706246256828308,
            0.14616958796977997,
            0.9815858602523804,
            0.04015035927295685,
            0.0012805096339434385,
            0.0004130153974983841,
            0.00024126339121721685,
            0.00015974992129486054
        ],
        "align_select": "select countries.CountryId, countries.nation_designation",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model?",
        "gold_select": "select countries.CountryId, countries.nation_designation",
        "select_candidates": [
            "select countries.CountryId, countries.nation_designation",
            "select countries.CountryId, countries.nation_designation,",
            "select countries.CountryId, countries.mainland",
            "select car_names.mode, countries.CountryId, countries.nation_designation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "countries car_makers model_list car_names",
            "countries car_makers model_list",
            "countries model_list car_names"
        ],
        "align_scores": [
            0.9348952174186707,
            0.9659364223480225,
            0.0012578448513522744,
            0.0013554939068853855,
            0.004240731243044138,
            0.02205861173570156,
            0.0002437373186694458,
            0.00028785900212824345
        ],
        "align_select": "select countries.CountryId, countries.nation_designation",
        "align_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
    },
    {
        "question": "Which of the countries has the most car makers? List the country name.",
        "gold_select": "select countries.nation",
        "select_candidates": [
            "select countries.nation",
            "select countries.nation, car_makers.Country",
            "select countries.nation, countries.CountryId",
            "select countries.nation, countries.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.9756432771682739,
            7.601043034810573e-05,
            0.0020828398410230875,
            7.636898953933269e-05,
            0.0032979457173496485,
            7.175296195782721e-05,
            0.0049843573942780495,
            7.571810419904068e-05
        ],
        "align_select": "select countries.nation",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the country with the most car makers?",
        "gold_select": "select countries.nation",
        "select_candidates": [
            "select countries.nation",
            "select countries.nation, car_makers.Country",
            "select countries.nation, countries.Continent",
            "select countries.nation, countries.CountryId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.9854418039321899,
            6.505359488073736e-05,
            0.0014024536358192563,
            6.716406642226502e-05,
            0.0045407419092953205,
            7.923658995423466e-05,
            0.0017302230698987842,
            7.066089165164158e-05
        ],
        "align_select": "select countries.nation",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "gold_select": "select cars_data.speed_up",
        "select_candidates": [
            "select avg(cars_data.speed_up)",
            "select max(cars_data.speed_up)",
            "select accel(cars_data.speed_up)",
            "select accelet(cars_data.speed_up)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "continents car_names cars_data",
            "countries car_names cars_data"
        ],
        "align_scores": [
            0.2908652126789093,
            6.537599256262183e-05,
            0.9509192109107971,
            7.222595741041005e-05,
            0.0010268110781908035,
            7.429561810567975e-05,
            0.0010310604702681303,
            7.52088162698783e-05
        ],
        "align_select": "select max(cars_data.speed_up)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "gold_select": "select cars_data.speed_up",
        "select_candidates": [
            "select avg(cars_data.speed_up)",
            "select cars_data.speed_up",
            "select accel(cars_data.speed_up)",
            "select acceleration(cars_data.speed_up)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "continents car_names cars_data",
            "countries car_names cars_data"
        ],
        "align_scores": [
            0.09189315140247345,
            6.827243487350643e-05,
            0.9666184782981873,
            0.00012797645467799157,
            0.001435871236026287,
            9.10656526684761e-05,
            0.0009412128129042685,
            8.58734711073339e-05
        ],
        "align_select": "select cars_data.speed_up",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many car makers are there in france?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countries.CountryId",
            "select count(*), countries.nation",
            "select count(*) (car_makers.Maker)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.9935194849967957,
            7.833474228391424e-05,
            0.00022106579854153097,
            8.0096026067622e-05,
            0.0002518839610274881,
            6.743039557477459e-05,
            0.000391535519156605,
            6.118125020293519e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of makers of care in France?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countries.CountryId",
            "select count(*), countries.CountryId, countries.nation",
            "select count(*), countries.CountryId, countries.nation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.9940605759620667,
            6.083206972107291e-05,
            0.00029217565315775573,
            6.614089943468571e-05,
            0.00013124813267495483,
            5.3170522733125836e-05,
            0.00013124813267495483,
            5.3170522733125836e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many car models are produced in the usa?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct model_list.Model)",
            "select count(*), countries.CountryId",
            "select count(*), car_makers.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "countries car_makers model_list car_names",
            "countries car_makers model_list",
            "countries car_makers",
            "countries car_makers car_names",
            "countries model_list car_names"
        ],
        "align_scores": [
            0.9936060905456543,
            0.0034735859371721745,
            0.13467884063720703,
            0.00014685427595395595,
            0.00020887350547127426,
            0.00025986641412600875,
            0.0002857107319869101,
            0.003852502442896366
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the count of the car models produced in the United States?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct model_list.Model)",
            "select count(*), car_makers.Maker",
            "select count(*), car_makers.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "countries car_makers model_list car_names",
            "car_makers model_list",
            "continents car_makers model_list car_names",
            "car_makers car_names"
        ],
        "align_scores": [
            0.9917306303977966,
            0.03911377862095833,
            0.03990941494703293,
            0.00010231742635369301,
            0.00023722102923784405,
            0.00451313704252243,
            0.00023313562269322574,
            0.007470363285392523
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
        "gold_select": "select avg(cars_data.MPG)",
        "select_candidates": [
            "select avg(cars_data.MPG)",
            "select an avg(cars_data.MPG)",
            "select  avg(cars_data.MPG)",
            "select avg(avg(cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9956057667732239,
            0.00010507127444725484,
            0.0004002295318059623,
            0.00010512118024053052,
            0.9956057667732239,
            0.00010507127444725484,
            0.0004325479385443032,
            0.0001028888946166262
        ],
        "align_select": "select avg(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
        "gold_select": "select avg(cars_data.MPG)",
        "select_candidates": [
            "select avg(cars_data.MPG)",
            "select avg(avg(cars_data.MPG)",
            "select an avg(cars_data.MPG)",
            "select  avg(cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9953299760818481,
            0.0007165662827901542,
            0.00046309659956023097,
            0.0001665395247982815,
            0.0004020243068225682,
            0.00015905016334727407,
            0.9953299760818481,
            0.0007165662827901542
        ],
        "align_select": "select avg(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the smallest weight of the car produced with 8 cylinders on 1974?",
        "gold_select": "select min(cars_data.Weight)",
        "select_candidates": [
            "select min(cars_data.Weight)",
            "select min(cars_data.Weight), cars_data.Year",
            "select min(cars_data.Weight), cars_data.cylinder_number",
            "select min(cars_data.Weight), cars_data.speed_up"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9936635494232178,
            9.960209717974067e-05,
            0.0001255959359696135,
            5.962221621302888e-05,
            0.00011213386460440233,
            6.158866744954139e-05,
            0.00011358908523106948,
            5.535790478461422e-05
        ],
        "align_select": "select min(cars_data.Weight)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the minimum weight of the car with 8 cylinders produced in 1974?",
        "gold_select": "select min(cars_data.Weight)",
        "select_candidates": [
            "select min(cars_data.Weight)",
            "select min(cars_data.Weight), cars_data.Year",
            "select min(cars_data.Weight), cars_data.speed_up",
            "select min(cars_data.Weight), cars_data.cylinder_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.9922705888748169,
            9.02866740943864e-05,
            0.0001309880753979087,
            6.160487828310579e-05,
            0.00013228217721916735,
            5.876344221178442e-05,
            0.00012122740008635446,
            6.276607746258378e-05
        ],
        "align_select": "select min(cars_data.Weight)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the countries having at least one car maker? List name and id.",
        "gold_select": "select countries.nation, countries.CountryId",
        "select_candidates": [
            "select countries.nation, car_makers.Id",
            "select countries.nation, countries.CountryId",
            "select countries.nation, car_makers.Country",
            "select distinct countries.nation, car_makers.Id"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.029708286747336388,
            0.19340768456459045,
            0.524165153503418,
            0.6429715752601624,
            0.04717419296503067,
            0.002482406562194228,
            0.007063698023557663,
            0.0004933735472150147
        ],
        "align_select": "select countries.nation, countries.CountryId",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the names and ids of all countries with at least one car maker?",
        "gold_select": "select countries.nation, countries.CountryId",
        "select_candidates": [
            "select countries.nation, countries.CountryId",
            "select distinct countries.nation, countries.CountryId",
            "select count(*), countries.nation, countries.CountryId",
            "select at least countries.nation, countries.CountryId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.8365495204925537,
            0.9189820885658264,
            0.5446481704711914,
            0.0024217304307967424,
            0.0004166930157225579,
            0.0002988660417031497,
            0.47859784960746765,
            0.02065308764576912
        ],
        "align_select": "select countries.nation, countries.CountryId",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Which countries in europe have at least 3 car manufacturers?",
        "gold_select": "select countries.nation",
        "select_candidates": [
            "select countries.nation",
            "select countries.nation, countries.CountryId",
            "select countries.nation, t0.c2",
            "select countries.nation, continents.ContId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "countries car_makers"
        ],
        "align_scores": [
            0.9869850277900696,
            0.00010498693882254884,
            0.0008913513738662004,
            7.452175486832857e-05,
            0.00022661731054540724,
            6.309776654234156e-05,
            0.001527479849755764,
            6.73439062666148e-05
        ],
        "align_select": "select countries.nation",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "What are the names of all European countries with at least 3 manufacturers?",
        "gold_select": "select countries.nation",
        "select_candidates": [
            "select countries.nation",
            "select countries.nation, t0.c2",
            "select countries.nation, countries.Continent",
            "select countries.nation, continents.ContId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents car_makers",
            "continents countries car_makers",
            "countries car_makers",
            "continents countries car_makers model_list"
        ],
        "align_scores": [
            0.9887557625770569,
            0.00021105582709424198,
            0.0002805686672218144,
            0.0001064464304363355,
            0.00021844898583367467,
            9.269986185245216e-05,
            0.001781017635948956,
            0.0001337566936854273
        ],
        "align_select": "select countries.nation",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "gold_select": "select cars_data.Horsepower, car_names.Make",
        "select_candidates": [
            "select max(cars_data.Horsepower), car_names.Make",
            "select max(cars_data.speed_up), car_names.Make",
            "select max(cars_data.Horsepower), cars_data.cylinder_number",
            "select max(cars_data.Horsepower), car_names.Make)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "car_makers cars_data",
            "continents car_names cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.9933711290359497,
            0.00014452834147959948,
            0.021192358806729317,
            0.00014138802362140268,
            0.0003719214873854071,
            8.947953028837219e-05,
            0.0011121643474325538,
            0.00010537810885580257
        ],
        "align_select": "select max(cars_data.Horsepower), car_names.Make",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "gold_select": "select cars_data.Horsepower, car_names.Make",
        "select_candidates": [
            "select max(cars_data.Horsepower), car_names.Make",
            "select car_names.Model, car_names.Make",
            "select max(cars_data.Horsepower), car_names.Make",
            "select max(cars_data.speed_up), car_names.Make"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers cars_data",
            "countries car_names cars_data",
            "car_makers car_names cars_data",
            "continents car_names cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.00044584355782717466,
            8.556537795811892e-05,
            0.9887672066688538,
            0.0004081351216882467,
            0.00044584355782717466,
            8.556537795811892e-05,
            0.00030790476012043655,
            0.00010584065603325143
        ],
        "align_select": "select car_names.Model, car_names.Make",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "What is the maximum accelerate for different number of cylinders?",
        "gold_select": "select max(cars_data.speed_up), cars_data.cylinder_number",
        "select_candidates": [
            "select max(cars_data.speed_up), cars_data.cylinder_number",
            "select cars_data.cylinder_number, max(cars_data.speed_up)",
            "select min(cars_data.speed_up), cars_data.cylinder_number",
            "select maximum(cars_data.speed_up), cars_data.cylinder_number"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9940447211265564,
            0.00011820469808299094,
            0.9953943490982056,
            0.00013089705316815525,
            0.00026536762015894055,
            9.458384738536552e-05,
            0.003936272580176592,
            0.00010117430792888626
        ],
        "align_select": "select max(cars_data.speed_up), cars_data.cylinder_number",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the maximum accelerate for all the different cylinders?",
        "gold_select": "select max(cars_data.speed_up), cars_data.cylinder_number",
        "select_candidates": [
            "select max(cars_data.speed_up), cars_data.cylinder_number",
            "select cars_data.cylinder_number, max(cars_data.speed_up)",
            "select maximum(cars_data.speed_up), cars_data.cylinder_number",
            "select min(cars_data.speed_up), cars_data.cylinder_number"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9948142766952515,
            0.0001368651574011892,
            0.9957082271575928,
            0.00016231441986747086,
            0.004304131958633661,
            0.00010525438119657338,
            0.00030500852153636515,
            9.030535147758201e-05
        ],
        "align_select": "select max(cars_data.speed_up), cars_data.cylinder_number",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How many cars have more than 4 cylinders?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.cylinder_number",
            "select count(*), cars_data.Id",
            "select count(*), t5.dcars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9901673793792725,
            0.0004566364223137498,
            0.0001960540103027597,
            0.0001820825127651915,
            0.00024721850058995187,
            0.00027042554575018585,
            0.0002132204972440377,
            0.00023791639250703156
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of cars with more than 4 cylinders?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.cylinder_number",
            "select count(*), cars_data.Id",
            "select count(*) (cars_data.Id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9919754862785339,
            0.00011362355144228786,
            0.0001844752550823614,
            0.002846469869837165,
            0.00024426981690339744,
            0.0003930952516384423,
            0.0002743207151070237,
            0.00012331070320215076
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the horsepower of the car with the largest accelerate?",
        "gold_select": "select cars_data.Horsepower",
        "select_candidates": [
            "select cars_data.Horsepower",
            "select cars_data.Id, cars_data.Horsepower",
            "select cars_data.Horsepower, cars_data.speed_up",
            "select cars_data.Id, cars_data.cylinder_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9730871915817261,
            7.358818402281031e-05,
            0.0002146372862625867,
            6.882637535454705e-05,
            0.0005674116546288133,
            6.42786399112083e-05,
            0.00021749005827587098,
            6.803806900279596e-05
        ],
        "align_select": "select cars_data.Horsepower",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the horsepower of the car with the greatest accelerate?",
        "gold_select": "select cars_data.Horsepower",
        "select_candidates": [
            "select cars_data.Horsepower",
            "select cars_data.Id, cars_data.Horsepower",
            "select cars_data.Horsepower, cars_data.speed_up",
            "select cars_data.Horsepower, t5.diff(cars_data.speed_up)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9837855100631714,
            7.437465683324262e-05,
            0.00022333947708830237,
            6.966791261220351e-05,
            0.0005454208585433662,
            6.33727468084544e-05,
            0.00016126263653859496,
            8.104604057734832e-05
        ],
        "align_select": "select cars_data.Horsepower",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "gold_select": "select cars_data.cylinder_number",
        "select_candidates": [
            "select cars_data.cylinder_number",
            "select sum(cars_data.cylinder_number)",
            "select cars_data.cylinder_number, car_names.Model",
            "select cars_data.cylinder_number, cars_data.Edispl"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers cars_data",
            "continents car_names cars_data",
            "countries car_names cars_data",
            "countries cars_data",
            "cars_data"
        ],
        "align_scores": [
            0.9740158319473267,
            6.972101982682943e-05,
            0.09847776591777802,
            7.005436782492325e-05,
            0.00026117663946934044,
            6.536881846841425e-05,
            0.00039778396603651345,
            5.916328154853545e-05
        ],
        "align_select": "select cars_data.cylinder_number",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "gold_select": "select cars_data.cylinder_number",
        "select_candidates": [
            "select cars_data.cylinder_number",
            "select cars_data.cylinder_number, cars_data.Edispl",
            "select cars_data.cylinder_number, car_names.Model",
            "select cars_data.MPG, cars_data.cylinder_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "cars_data",
            "model_list cars_data",
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.9617484211921692,
            0.7083496451377869,
            0.0004518655769061297,
            0.0006537277367897332,
            0.0004259334527887404,
            0.0020626483019441366,
            0.00026482727844268084,
            0.00033581064781174064
        ],
        "align_select": "select cars_data.cylinder_number",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.Horsepower",
            "select count(distinct cars_data.Id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9621860384941101,
            0.0013478088658303022,
            0.000418550189351663,
            0.00016310707724187523,
            0.00032085360726341605,
            0.0002618865401018411,
            0.0012011600192636251,
            7.569095760118216e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Horsepower",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.MPG"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9737866520881653,
            0.0005758209154009819,
            0.000264512374997139,
            0.00012637031613849103,
            0.0004231985367368907,
            9.957162546925247e-05,
            0.0002871525939553976,
            0.00010203068086411804
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many cars has over 6 cylinders?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.cylinder_number",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.cylinder_number, cars_data.Edispl"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9940642714500427,
            0.0007791265961714089,
            0.00023126798623707145,
            0.0002664298517629504,
            0.0002797678462229669,
            0.00024079000286292285,
            0.00011938959505641833,
            0.0001120439701480791
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of carsw ith over 6 cylinders?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.cylinder_number",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.cylinder_number, cars_data.Edispl"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9932132959365845,
            0.00016561345546506345,
            0.0002127850748365745,
            0.00718937162309885,
            0.00026156759122386575,
            0.0004515148466452956,
            0.00012422098370734602,
            0.00019244720169808716
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, cars_data.cylinder_number",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, cars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "countries cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9618129134178162,
            0.00010249074694002047,
            0.0004302887537050992,
            6.580581975867972e-05,
            0.0005489091854542494,
            7.199971150839701e-05,
            0.00038168326136656106,
            8.028672891668975e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, cars_data.cylinder_number",
            "select car_names.Model, car_names.Make",
            "select car_names.Model (cars_data.cylinder_number)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "countries cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.95494145154953,
            0.00011157262633787468,
            0.0009716756758280098,
            7.712271326454356e-05,
            0.0004810009559150785,
            6.589730764972046e-05,
            0.003589657135307789,
            8.375575998798013e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "gold_select": "select car_names.MakeId, car_names.Make",
        "select_candidates": [
            "select car_names.MakeId, car_names.Make",
            "select car_makers.Id, car_names.Make",
            "select car_names.MakeId, car_names.Make",
            "select car_names.Model, car_names.Make"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9007434248924255,
            0.5555253028869629,
            0.7111538648605347,
            0.5436035394668579,
            0.9007434248924255,
            0.5555253028869629,
            0.001049237558618188,
            0.0004926859983243048
        ],
        "align_select": "select car_names.MakeId, car_names.Make",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Among the cars that do not have the minimum horsepower, what are the make ids and names of all those with less than 4 cylinders?",
        "gold_select": "select car_names.MakeId, car_names.Make",
        "select_candidates": [
            "select car_names.MakeId, car_names.Make",
            "select car_names.Make, car_names.Model",
            "select car_names.Make, car_names.MakeId",
            "select car_names.Make, car_names.Make"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9219397306442261,
            0.0016255590599030256,
            0.917999804019928,
            0.005422369111329317,
            0.8170405626296997,
            0.0022956000175327063,
            0.0024420563131570816,
            0.0001752255338942632
        ],
        "align_select": "select car_names.MakeId, car_names.Make",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980?",
        "gold_select": "select max(cars_data.MPG)",
        "select_candidates": [
            "select max(cars_data.MPG)",
            "select max(cars_data.MPG), cars_data.cylinder_number",
            "select max(cars_data.MPG), cars_data.Year",
            "select max(cars_data.MPG), cars_data.speed_up"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9916421175003052,
            0.00012152449926361442,
            0.00016240793047472835,
            6.774802750442177e-05,
            0.00013197351654525846,
            6.376063538482413e-05,
            0.000155454792547971,
            6.998913886491209e-05
        ],
        "align_select": "select max(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980?",
        "gold_select": "select max(cars_data.MPG)",
        "select_candidates": [
            "select max(cars_data.MPG)",
            "select max(cars_data.MPG), cars_data.cylinder_number",
            "select max(cars_data.MPG), cars_data.Year",
            "select max(cars_data.MPG), cars_data.speed_up"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9765095710754395,
            0.1504601389169693,
            0.00017642221064306796,
            0.00014213826216291636,
            0.00011888293374795467,
            7.532150630140677e-05,
            0.00017612436204217374,
            7.603051199112087e-05
        ],
        "align_select": "select max(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the name of the countries where there is not a single car maker?",
        "gold_select": "select countries.nation",
        "select_candidates": [
            "select countries.nation",
            "select countries.nation, countries.CountryId",
            "select countries.nation, countries.Continent",
            "select countries.nation, car_makers.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers",
            "countries car_makers model_list"
        ],
        "align_scores": [
            0.9146749973297119,
            0.7123044729232788,
            0.0003833420341834426,
            0.00043825904140248895,
            0.0004459235060494393,
            0.0009758570231497288,
            0.0006616015452891588,
            0.00048386913840658963
        ],
        "align_select": "select countries.nation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of the countries with no car makers?",
        "gold_select": "select countries.nation",
        "select_candidates": [
            "select countries.nation",
            "select countries.nation, countries.Continent",
            "select countries.nation, countries.CountryId",
            "select countries.nation, t1.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers",
            "countries",
            "countries car_makers model_list"
        ],
        "align_scores": [
            0.9011040329933167,
            0.8093684911727905,
            0.0002882061235141009,
            0.0005902714328840375,
            0.0003196232137270272,
            0.00032767487573437393,
            0.0004322534368839115,
            0.0002644836204126477
        ],
        "align_select": "select countries.nation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "gold_select": "select countries.CountryId, countries.nation",
        "select_candidates": [
            "select car_makers.Id, car_makers.Country",
            "select car_makers.Id, car_makers.FullName",
            "select car_makers.Id, car_makers.Maker",
            "select countries.CountryId, countries.nation"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "countries car_makers model_list car_names",
            "car_makers car_names",
            "car_makers model_list",
            "countries car_makers model_list",
            "continents car_makers model_list car_names",
            "countries car_makers car_names"
        ],
        "align_scores": [
            0.9833956956863403,
            0.02154691144824028,
            0.8148200511932373,
            0.022836778312921524,
            0.715786337852478,
            0.010645356960594654,
            0.9809606075286865,
            0.18626821041107178
        ],
        "align_select": "select car_makers.Id, car_makers.Country",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model?",
        "gold_select": "select countries.CountryId, countries.nation",
        "select_candidates": [
            "select car_makers.Id, car_makers.FullName",
            "select car_makers.Id, car_makers.Country",
            "select car_makers.Id, car_makers.Maker",
            "select countries.CountryId, countries.Continent"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "countries car_makers model_list car_names",
            "car_makers model_list",
            "continents car_makers model_list car_names",
            "countries car_makers model_list"
        ],
        "align_scores": [
            0.8781370520591736,
            0.06190161779522896,
            0.6308360695838928,
            0.6253840327262878,
            0.18001699447631836,
            0.18731342256069183,
            0.0006204344099387527,
            0.0012159824836999178
        ],
        "align_select": "select car_makers.Id, car_makers.FullName",
        "align_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
    },
    {
        "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "gold_select": "select continents.ContId, continents.Continent, count(*)",
        "select_candidates": [
            "select continents.ContId, continents.Continent, count(*)",
            "select continents.ContId, continents.Continent, count(*)",
            "select countries.state, continents.Continent, count(*)",
            "select countries.CountryId, continents.Continent, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries",
        "table_candidates": [
            "continents countries"
        ],
        "align_scores": [
            0.9939354062080383,
            0.0003348504542373121,
            0.9939354062080383,
            0.0003348504542373121,
            0.0002440079697407782,
            0.00027061483706347644,
            0.00046427635243162513,
            0.0005130270146764815
        ],
        "align_select": "select continents.ContId, continents.Continent, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For each continent, list its id, name, and how many countries it has?",
        "gold_select": "select continents.ContId, continents.Continent, count(*)",
        "select_candidates": [
            "select continents.ContId, continents.Continent, count(*)",
            "select continents.ContId, continents.Continent, count(*)",
            "select countries.mainland, continents.Continent, count(*)",
            "select continents.Continent, count(*), countries.CountryId"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries",
        "table_candidates": [
            "continents countries"
        ],
        "align_scores": [
            0.9864422082901001,
            0.0002532826329115778,
            0.9864422082901001,
            0.0002532826329115778,
            0.18686991930007935,
            0.0002712919667828828,
            0.0005146227194927633,
            0.0002440726530039683
        ],
        "align_select": "select continents.ContId, continents.Continent, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How many models does each car maker produce? List maker full name, id and the number.",
        "gold_select": "select car_makers.complete_name, car_makers.Id, count(*)",
        "select_candidates": [
            "select car_makers.complete_name, car_makers.Id, count(*)",
            "select car_makers.complete_name, car_names.MakeId, count(*)",
            "select car_makers.complete_name, model_list.ModelId, count(*)",
            "select car_makers.creator, car_makers.complete_name, car_makers.Id, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list",
            "car_makers model_list car_names",
            "car_makers car_names"
        ],
        "align_scores": [
            0.9848796725273132,
            0.0003287518920842558,
            0.00444704107940197,
            0.00025559228379279375,
            0.0005511508206836879,
            0.0002546179748605937,
            0.0008309471886605024,
            0.00012958016304764897
        ],
        "align_select": "select car_makers.complete_name, car_makers.Id, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the full name of each car maker, along with its id and how many models it produces?",
        "gold_select": "select car_makers.complete_name, car_makers.Id, count(*)",
        "select_candidates": [
            "select car_makers.complete_name, car_names.MakeId, count(*)",
            "select car_makers.creator, car_makers.complete_name, count(*)",
            "select car_makers.complete_name, count(*), car_makers.Id",
            "select car_makers.creator, car_makers.complete_name, car_names.MakeId, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers car_names",
            "car_makers model_list car_names"
        ],
        "align_scores": [
            0.005609703715890646,
            0.00028324182494543493,
            0.0073041124269366264,
            0.00016073575534392148,
            0.9637588262557983,
            0.00022529237321577966,
            0.00035732233664020896,
            0.00012230876018293202
        ],
        "align_select": "select car_makers.complete_name, count(*), car_makers.Id",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Which model of the car has the minimum horsepower?",
        "gold_select": "select car_names.model_name",
        "select_candidates": [
            "select car_names.model_name",
            "select car_names.model_name, cars_data.number_cylinder",
            "select car_names.model_name, cars_data.speed_up",
            "select car_names.model_name, car_names.manufacture"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9813500642776489,
            6.386207678588107e-05,
            0.0006779310060665011,
            5.987005715724081e-05,
            0.0003527177614159882,
            5.665818025590852e-05,
            0.0005349344573915005,
            5.345079262042418e-05
        ],
        "align_select": "select car_names.model_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the model of the car with the smallest amount of horsepower?",
        "gold_select": "select car_names.model_name",
        "select_candidates": [
            "select car_names.model_name",
            "select car_names.model_name, cars_data.number_cylinder",
            "select car_names.model_name, car_names.manufacture",
            "select car_names.model_name, cars_data.speed_up"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9857585430145264,
            7.206826558103785e-05,
            0.00037607422564178705,
            5.834220792166889e-05,
            0.00044339298619888723,
            5.892674016649835e-05,
            0.0002643172338139266,
            6.005617615301162e-05
        ],
        "align_select": "select car_names.model_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the model of the car whose weight is below the average weight.",
        "gold_select": "select car_names.model_name",
        "select_candidates": [
            "select car_names.model_name",
            "select car_names.model_name, car_names.manufacture",
            "select car_names.model_name, t4.c3",
            "select car_names.model_name, cars_data.number_cylinder"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9256756901741028,
            7.156341598602012e-05,
            0.00022705073934048414,
            6.215093162609264e-05,
            0.00033343228278681636,
            7.754335820209235e-05,
            0.00015833623183425516,
            7.213152275653556e-05
        ],
        "align_select": "select car_names.model_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the model for the car with a weight smaller than the average?",
        "gold_select": "select car_names.model_name",
        "select_candidates": [
            "select car_names.model_name",
            "select car_names.model_name, car_names.manufacture",
            "select car_names.model_name, cars_data.number_cylinder",
            "select car_names.model_name, cars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "cars_data car_names cars_data",
            "countries car_names cars_data",
            "cars_data car_names",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9912346601486206,
            9.690504521131516e-05,
            0.00021728509454987943,
            6.194300658535212e-05,
            0.00014618353452533484,
            6.583357026102021e-05,
            0.00019056534802075475,
            7.35749927116558e-05
        ],
        "align_select": "select car_names.model_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the name of the makers that produced some cars in the year of 1970?",
        "gold_select": "select distinct car_makers.creator",
        "select_candidates": [
            "select car_makers.complete_name",
            "select car_makers.complete_name, car_makers.creator",
            "select car_makers.creator, car_makers.complete_name",
            "select car_makers.Id, car_makers.complete_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "car_makers car_names",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.8876969814300537,
            0.13831599056720734,
            0.00026902888203039765,
            8.288385288324207e-05,
            0.0002450183383189142,
            9.05756387510337e-05,
            0.00021584237401839346,
            9.266893903259188e-05
        ],
        "align_select": "select car_makers.complete_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name of the different car makers who produced a car in 1970?",
        "gold_select": "select distinct car_makers.creator",
        "select_candidates": [
            "select distinct car_makers.complete_name",
            "select distinct car_makers.complete_name, car_makers.creator",
            "select distinct car_makers.creator, car_makers.complete_name",
            "select distinct car_makers.Id, car_makers.complete_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names",
            "car_makers car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9339908361434937,
            0.0002286330854985863,
            0.000279563624644652,
            7.514093158533797e-05,
            0.0005307981045916677,
            7.771102536935359e-05,
            0.0013907812535762787,
            8.188159699784592e-05
        ],
        "align_select": "select distinct car_makers.complete_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the make and production time of the cars that were produced in the earliest year?",
        "gold_select": "select car_names.manufacture, cars_data.Year",
        "select_candidates": [
            "select car_names.model_name, car_names.manufacture",
            "select car_names.MakeId, car_names.manufacture",
            "select car_makers.creator, car_names.manufacture",
            "select car_names.manufacture, car_names.MakeId"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.004670104943215847,
            7.49109240132384e-05,
            0.8958142399787903,
            6.914952246006578e-05,
            0.032386910170316696,
            6.782766286050901e-05,
            0.0031172940507531166,
            6.995297007961199e-05
        ],
        "align_select": "select car_names.MakeId, car_names.manufacture",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the maker of the carr produced in the earliest year and what year was it?",
        "gold_select": "select car_names.manufacture, cars_data.Year",
        "select_candidates": [
            "select car_makers.creator, cars_data.Year",
            "select car_names.model_name, cars_data.Year",
            "select car_makers.complete_name, cars_data.Year",
            "select car_makers.creator/car_makers.complete_name, cars_data.Year"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "countries car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "model_list car_makers car_names cars_data",
            "continents car_makers car_names cars_data",
            "car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9850531220436096,
            7.048121915431693e-05,
            0.0009808335453271866,
            7.866021041991189e-05,
            0.9871808886528015,
            7.487307448172942e-05,
            0.0011156507534906268,
            7.095813634805381e-05
        ],
        "align_select": "select car_makers.creator, cars_data.Year",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which distinct car models are the produced after 1980?",
        "gold_select": "select distinct model_list.mode",
        "select_candidates": [
            "select distinct car_names.model_name",
            "select distinct car_names.model_name, car_names.manufacture",
            "select distinct car_names.model_name, car_names.MakeId",
            "select distinct car_names.model_name, cars_data.number_cylinder"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "model_list car_names cars_data",
        "table_candidates": [
            "car_names",
            "car_names cars_data",
            "model_list car_names cars_data",
            "model_list car_names",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "car_makers car_names",
            "countries car_names"
        ],
        "align_scores": [
            0.9852869510650635,
            0.004111633636057377,
            0.00015694762987550348,
            0.00012814851652365178,
            0.00018538195581641048,
            0.00016429398965556175,
            0.00013813415716867894,
            0.00012894967221654952
        ],
        "align_select": "select distinct car_names.model_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the different models for the cards produced after 1980?",
        "gold_select": "select distinct model_list.mode",
        "select_candidates": [
            "select distinct model_list.ModelId",
            "select distinct model_list.mode",
            "select distinct model_list.produced_by",
            "select distinct model_list.ModelId, model_list.mode"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "model_list car_names cars_data",
        "table_candidates": [
            "model_list cars_data",
            "model_list car_names",
            "car_makers model_list"
        ],
        "align_scores": [
            0.9225692749023438,
            0.00029513996560126543,
            0.9945675134658813,
            0.00015736241766717285,
            0.13751716911792755,
            0.00013738042616751045,
            0.0002822460373863578,
            7.860817277105525e-05
        ],
        "align_select": "select distinct model_list.ModelId",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many car makers are there in each continents? List the continent name and the count.",
        "gold_select": "select continents.Continent, count(*)",
        "select_candidates": [
            "select continents.Continent, count(*)",
            "select continents.Continent, count(*)",
            "select continents.Continent, count(*), car_makers.Id",
            "select continents.Continent, count(*), car_makers.nation"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents car_makers",
            "continents countries car_makers"
        ],
        "align_scores": [
            0.9858147501945496,
            0.00019305148452986032,
            0.9858147501945496,
            0.00019305148452986032,
            0.00014710247342009097,
            0.00011417811765568331,
            0.00019137526396661997,
            0.00012569177488330752
        ],
        "align_select": "select continents.Continent, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the name of each continent and how many car makers are there in each one?",
        "gold_select": "select continents.Continent, count(*)",
        "select_candidates": [
            "select continents.Continent, count(*)",
            "select continents.Continent, count(*), car_makers.nation",
            "select continents.Continent, count(*)",
            "select continents.Continent., count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents car_makers",
            "continents countries car_makers"
        ],
        "align_scores": [
            0.9907079935073853,
            0.0002469739702064544,
            0.00020755136210937053,
            0.00013728627527598292,
            0.9907079935073853,
            0.0002469739702064544,
            0.0025279184337705374,
            0.000168450569617562
        ],
        "align_select": "select continents.Continent, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Which of the countries has the most car makers? List the country name.",
        "gold_select": "select countries.state",
        "select_candidates": [
            "select countries.mainland",
            "select countries.mainland, countries.CountryId",
            "select countries.mainland, car_makers.nation",
            "select countries.state"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers",
            "countries car_makers model_list"
        ],
        "align_scores": [
            0.9563097953796387,
            8.159662684192881e-05,
            0.0011616904521360993,
            7.525000546593219e-05,
            0.002283278852701187,
            8.558333502151072e-05,
            0.21584489941596985,
            7.568771252408624e-05
        ],
        "align_select": "select countries.mainland",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the country with the most car makers?",
        "gold_select": "select countries.state",
        "select_candidates": [
            "select countries.mainland",
            "select countries.state",
            "select countries.mainland, car_makers.nation",
            "select countries.state, car_makers.nation"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.9845096468925476,
            6.622546061407775e-05,
            0.9575283527374268,
            6.866118201287463e-05,
            0.0015084069455042481,
            7.209370232885703e-05,
            0.00043959563481621444,
            6.342673441395164e-05
        ],
        "align_select": "select countries.mainland",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "How many car models are produced by each maker? Only list the count and the maker full name.",
        "gold_select": "select count(*), car_makers.complete_name",
        "select_candidates": [
            "select count(*), car_makers.complete_name",
            "select count(*), car_makers.creator, car_makers.complete_name",
            "select car_makers.creator, car_makers.complete_name",
            "select count(*).. car_makers.creator, car_makers.complete_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names"
        ],
        "align_scores": [
            0.9932742118835449,
            0.00020691214012913406,
            0.00046807530452497303,
            0.0001037316833389923,
            0.0026462639216333628,
            0.00023957582016009837,
            0.0003667755227070302,
            0.00013577184290625155
        ],
        "align_select": "select count(*), car_makers.complete_name",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
        "gold_select": "select count(*), car_makers.complete_name, car_makers.Id",
        "select_candidates": [
            "select count(*), car_makers.Id, car_makers.complete_name",
            "select car_makers.Id, car_makers.creator, car_makers.complete_name",
            "select count(*), car_makers.Id, car_makers.creator, car_makers.complete_name",
            "select car_names.MakeId, car_makers.creator, car_makers.complete_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers model_list",
            "countries car_makers model_list car_names"
        ],
        "align_scores": [
            0.9892593622207642,
            0.00025620032101869583,
            0.0004678649129346013,
            0.00016100356879178435,
            0.001253018737770617,
            0.00012882260489277542,
            0.0002803531533572823,
            0.0002000028034672141
        ],
        "align_select": "select count(*), car_makers.Id, car_makers.complete_name",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "gold_select": "select cars_data.speed_up",
        "select_candidates": [
            "select avg(cars_data.speed_up)",
            "select max(cars_data.speed_up)",
            "select accel(cars_data.speed_up)",
            "select cars_data.speed_up"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "continents car_names cars_data",
            "countries car_names cars_data"
        ],
        "align_scores": [
            0.2908652126789093,
            6.537599256262183e-05,
            0.9509192109107971,
            7.222595741041005e-05,
            0.0010268110781908035,
            7.429561810567975e-05,
            0.9941043257713318,
            7.621999247930944e-05
        ],
        "align_select": "select cars_data.speed_up",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "gold_select": "select cars_data.speed_up",
        "select_candidates": [
            "select avg(cars_data.speed_up)",
            "select cars_data.speed_up",
            "select accel(cars_data.speed_up)",
            "select max(cars_data.speed_up)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "continents car_names cars_data",
            "countries car_names cars_data"
        ],
        "align_scores": [
            0.09189315140247345,
            6.827243487350643e-05,
            0.9666184782981873,
            0.00012797645467799157,
            0.001435871236026287,
            9.10656526684761e-05,
            0.8946838974952698,
            8.74359393492341e-05
        ],
        "align_select": "select cars_data.speed_up",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many car makers are there in france?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countries.CountryId",
            "select count(*), countries.state",
            "select count(*) (car_makers.Id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.9935194849967957,
            7.833474228391424e-05,
            0.00022106579854153097,
            8.0096026067622e-05,
            0.0002859549131244421,
            6.623626541113481e-05,
            0.0003195970202796161,
            6.269932055147365e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of makers of care in France?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countries.CountryId",
            "select count(*), countries.CountryId, countries.state",
            "select count(*), countries.state"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.9940605759620667,
            6.083206972107291e-05,
            0.00029217565315775573,
            6.614089943468571e-05,
            0.0001279627758776769,
            5.76158199692145e-05,
            0.00025051782722584903,
            5.62143322895281e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many car models are produced in the usa?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countries.CountryId",
            "select count(distinct car_names.model_name)",
            "select count(*), countries.state"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "countries car_names",
            "countries model_list car_names",
            "countries car_makers model_list car_names",
            "countries car_makers car_names",
            "countries car_makers model_list",
            "countries car_makers"
        ],
        "align_scores": [
            0.9936060905456543,
            0.0034735859371721745,
            0.00020887350547127426,
            0.00025986641412600875,
            0.1432468295097351,
            0.000170655403053388,
            0.00026844904641620815,
            0.013207059353590012
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the count of the car models produced in the United States?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), car_makers.Id",
            "select count(distinct model_list.ModelId)",
            "select count(*), countries.state"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "countries car_makers model_list car_names",
            "countries car_makers model_list",
            "countries car_makers car_names"
        ],
        "align_scores": [
            0.9917306303977966,
            0.03911377862095833,
            0.00023313562269322574,
            0.007470363285392523,
            0.031055377796292305,
            0.000123038116726093,
            0.00024649430997669697,
            0.021298900246620178
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
        "gold_select": "select avg(cars_data.miles_per_gallon)",
        "select_candidates": [
            "select avg(cars_data.miles_per_gallon)",
            "select an avg(cars_data.miles_per_gallon)",
            "select  avg(cars_data.miles_per_gallon)",
            "select avg(cars_data.miles_per_gallon)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.994941771030426,
            0.00010083844972541556,
            0.00033513919333927333,
            0.00010206075239693746,
            0.994941771030426,
            0.00010083844972541556,
            0.994941771030426,
            0.00010083844972541556
        ],
        "align_select": "select avg(cars_data.miles_per_gallon)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
        "gold_select": "select avg(cars_data.miles_per_gallon)",
        "select_candidates": [
            "select avg(cars_data.miles_per_gallon)",
            "select an avg(cars_data.miles_per_gallon)",
            "select  avg(cars_data.miles_per_gallon)",
            "select avg(avg(cars_data.miles_per_gallon)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9947484135627747,
            7.332907262025401e-05,
            0.00031575464527122676,
            8.367386908503249e-05,
            0.9947484135627747,
            7.332907262025401e-05,
            0.0004017007886432111,
            7.344026380451396e-05
        ],
        "align_select": "select avg(cars_data.miles_per_gallon)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the smallest weight of the car produced with 8 cylinders on 1974?",
        "gold_select": "select min(cars_data.mass)",
        "select_candidates": [
            "select min(cars_data.mass)",
            "select min(cars_data.mass), cars_data.Year",
            "select min(cars_data.mass), cars_data.speed_up",
            "select min(cars_data.mass), cars_data.number_cylinder"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9941524863243103,
            0.00010248517355648801,
            0.00012933807738590986,
            6.084727283450775e-05,
            0.00012099597370252013,
            5.677803710568696e-05,
            0.00011037242074962705,
            6.489059160230681e-05
        ],
        "align_select": "select min(cars_data.mass)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the minimum weight of the car with 8 cylinders produced in 1974?",
        "gold_select": "select min(cars_data.mass)",
        "select_candidates": [
            "select min(cars_data.mass)",
            "select min(cars_data.mass), cars_data.Year",
            "select min(cars_data.mass), cars_data.speed_up",
            "select min(cars_data.mass), cars_data.number_cylinder"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.992646336555481,
            9.436124673811719e-05,
            0.0001390685501974076,
            6.314646452665329e-05,
            0.00013137234782334417,
            5.951076673227362e-05,
            0.0001188355527119711,
            6.639758794335648e-05
        ],
        "align_select": "select min(cars_data.mass)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are all the makers and models?",
        "gold_select": "select model_list.produced_by, model_list.mode",
        "select_candidates": [
            "select car_makers.creator, model_list.ModelId",
            "select car_makers.creator, model_list.produced_by",
            "select car_makers.creator, model_list.mode",
            "select car_makers.creator, car_makers.complete_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "countries car_makers model_list car_names",
            "model_list car_names",
            "countries model_list car_names",
            "continents car_makers model_list car_names",
            "car_makers model_list",
            "countries car_makers model_list"
        ],
        "align_scores": [
            0.7917960286140442,
            0.0002042765700025484,
            0.20485278964042664,
            0.00018253829330205917,
            0.937138020992279,
            0.00016674671496730298,
            0.003480897517874837,
            0.00017968518659472466
        ],
        "align_select": "select car_makers.creator, model_list.ModelId",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the makers and models?",
        "gold_select": "select model_list.produced_by, model_list.mode",
        "select_candidates": [
            "select car_makers.creator, model_list.ModelId",
            "select car_makers.creator, model_list.mode",
            "select car_makers.creator, model_list.produced_by",
            "select car_makers.creator, car_makers.nation"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers model_list",
            "countries car_makers model_list car_names",
            "continents car_makers model_list car_names",
            "countries model_list car_names",
            "countries car_makers model_list",
            "model_list car_names"
        ],
        "align_scores": [
            0.956693708896637,
            0.00016772805247455835,
            0.9682165384292603,
            0.000130069165606983,
            0.4137079119682312,
            0.00012450914073269814,
            0.0008545609307475388,
            0.00010657196253305301
        ],
        "align_select": "select car_makers.creator, model_list.ModelId",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the countries having at least one car maker? List name and id.",
        "gold_select": "select countries.state, countries.CountryId",
        "select_candidates": [
            "select countries.state, countries.CountryId",
            "select countries.state, car_makers.Id",
            "select countries.mainland, countries.CountryId",
            "select distinct countries.state, countries.CountryId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers",
            "countries car_makers model_list"
        ],
        "align_scores": [
            0.005714337807148695,
            0.0014798400225117803,
            0.0006352169439196587,
            0.00038820080226287246,
            0.0015360446413978934,
            0.001400250243023038,
            0.003937218803912401,
            0.00032253609970211983
        ],
        "align_select": "select countries.state, countries.CountryId",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the names and ids of all countries with at least one car maker?",
        "gold_select": "select countries.state, countries.CountryId",
        "select_candidates": [
            "select countries.mainland, countries.CountryId",
            "select countries.state, countries.CountryId",
            "select distinct countries.mainland, countries.CountryId",
            "select count(*), countries.mainland, countries.CountryId"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers",
            "countries car_makers model_list",
            "countries car_makers car_names"
        ],
        "align_scores": [
            0.0026164886076003313,
            0.004151076078414917,
            0.009267584420740604,
            0.009577285498380661,
            0.0033312183804810047,
            0.00028223582194186747,
            0.00044634027290157974,
            0.00025429794914089143
        ],
        "align_select": "select countries.mainland, countries.CountryId",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the number of the cars with horsepower more than 150?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), t5.dcars_data.Id",
            "select count(*) dependant on cars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9940716624259949,
            0.00013623700942844152,
            0.00023281310859601945,
            0.005770950578153133,
            0.0002170202787965536,
            0.0011751182610169053,
            0.00041207700269296765,
            0.0011765183880925179
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of cars with a horsepower greater than 150?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*) dependant on cars_data.Id",
            "select count(*) (cars_data.Id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9917104840278625,
            0.0001299772848142311,
            0.00023115881776902825,
            0.0008899731910787523,
            0.00035893794847652316,
            0.0003968945820815861,
            0.00028922565979883075,
            0.0001320604933425784
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average weight of cars each year?",
        "gold_select": "select avg(cars_data.mass), cars_data.Year",
        "select_candidates": [
            "select avg(cars_data.mass), cars_data.Year",
            "select cars_data.Year, avg(cars_data.mass)",
            "select an avg(cars_data.mass), cars_data.Year",
            "select accu(cars_data.mass), cars_data.Year"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9931064248085022,
            0.00012191006680950522,
            0.9961466789245605,
            0.00010736614785855636,
            0.00024261050566565245,
            0.00012020604481222108,
            0.0005125448224134743,
            0.00010312895756214857
        ],
        "align_select": "select avg(cars_data.mass), cars_data.Year",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the average weight and year for each year?",
        "gold_select": "select avg(cars_data.mass), cars_data.Year",
        "select_candidates": [
            "select avg(cars_data.mass), avg(cars_data.Year), cars_data.Year",
            "select avg(cars_data.mass), cars_data.Year",
            "select avg(cars_data.mass), avg(cars_data.Year),",
            "select avg(cars_data.speed_up), avg(cars_data.Year), cars_data.Year"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.0003808943147305399,
            7.13283516233787e-05,
            0.9523985385894775,
            0.00014416965132113546,
            0.0006908212671987712,
            0.00013301883882377297,
            8.116049866657704e-05,
            8.497618546243757e-05
        ],
        "align_select": "select avg(cars_data.mass), cars_data.Year",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Which countries in europe have at least 3 car manufacturers?",
        "gold_select": "select countries.state",
        "select_candidates": [
            "select countries.CountryId",
            "select countries.state, countries.mainland",
            "select countries.state, countries.CountryId",
            "select countries.CountryId, countries.mainland"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "continents countries car_makers car_names",
            "continents countries car_makers model_list"
        ],
        "align_scores": [
            0.7878082990646362,
            0.00013596448116004467,
            0.0002648090885486454,
            6.836084503447637e-05,
            0.00048566065379418433,
            6.463028694270179e-05,
            0.0006854305975139141,
            7.070046558510512e-05
        ],
        "align_select": "select countries.CountryId",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "What are the names of all European countries with at least 3 manufacturers?",
        "gold_select": "select countries.state",
        "select_candidates": [
            "select countries.state",
            "select countries.state, countries.mainland",
            "select countries.state, t0.c2",
            "select countries.CountryId, countries.state"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents car_makers car_names",
            "continents countries car_makers car_names",
            "continents car_makers model_list car_names",
            "continents countries car_makers model_list car_names",
            "continents countries car_makers"
        ],
        "align_scores": [
            0.7395828366279602,
            0.00012126660294597968,
            0.00026159477420151234,
            6.310035678325221e-05,
            0.00022754399105906487,
            5.909894025535323e-05,
            0.0004168440354987979,
            6.635289901169017e-05
        ],
        "align_select": "select countries.state",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "gold_select": "select cars_data.engine, car_names.manufacture",
        "select_candidates": [
            "select max(cars_data.speed_up), car_names.manufacture",
            "select max(cars_data.speed_up), car_names.model_name, car_names.manufacture",
            "select max(cars_data.engine), car_names.manufacture",
            "select max(cars_data.speed_up), car_names.model_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "countries car_names cars_data",
            "model_list car_names cars_data",
            "car_makers cars_data",
            "continents car_names cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.07800750434398651,
            0.00016178336227312684,
            0.00019931992574129254,
            8.071317279245704e-05,
            0.006439609918743372,
            0.00013423134805634618,
            0.04430670291185379,
            0.0001471214200137183
        ],
        "align_select": "select max(cars_data.speed_up), car_names.manufacture",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "gold_select": "select cars_data.engine, car_names.manufacture",
        "select_candidates": [
            "select max(cars_data.engine), car_names.manufacture",
            "select max(cars_data.speed_up), car_names.manufacture",
            "select max(cars_data.speed_up), car_names.model_name",
            "select max(cars_data.mass), car_names.manufacture"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "countries car_names cars_data",
            "car_makers cars_data",
            "continents car_names cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.00019377275020815432,
            0.003078829264268279,
            0.0004241551214363426,
            0.018203329294919968,
            0.0004145998100284487,
            0.007640033029019833,
            0.00025454998831264675,
            0.0005787392146885395
        ],
        "align_select": "select max(cars_data.engine), car_names.manufacture",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "gold_select": "select car_names.model_name",
        "select_candidates": [
            "select car_names.model_name",
            "select car_names.model_name, cars_data.miles_per_gallon",
            "select car_names.model_name, cars_data.number_cylinder",
            "select car_names.model_name, cars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9685844779014587,
            6.774867506464943e-05,
            0.001803518389351666,
            5.800347207696177e-05,
            0.00040862587047740817,
            5.926051380811259e-05,
            0.0009101051837205887,
            6.377608951879665e-05
        ],
        "align_select": "select car_names.model_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the car model with the highest mpg?",
        "gold_select": "select car_names.model_name",
        "select_candidates": [
            "select car_names.model_name",
            "select car_names.model_name, cars_data.Id",
            "select car_names.model_name, cars_data.number_cylinder",
            "select car_names.model_name, car_names.manufacture"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9797356128692627,
            7.461960194632411e-05,
            0.0006314327474683523,
            6.302842666627839e-05,
            0.0003892919921781868,
            6.285598647082224e-05,
            0.0008182302699424326,
            6.075322744436562e-05
        ],
        "align_select": "select car_names.model_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the average horsepower of the cars before 1980?",
        "gold_select": "select avg(cars_data.engine)",
        "select_candidates": [
            "select avg(cars_data.speed_up)",
            "select avg(cars_data.engine)",
            "select avg(cars_data.mass)",
            "select avg(t5.c8)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "model_list cars_data",
            "car_names cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.002241248730570078,
            0.00012573564890772104,
            0.9813275933265686,
            0.00015526474453508854,
            0.0005408252472989261,
            0.00011654977424768731,
            0.0006916374550200999,
            0.00019890129624400288
        ],
        "align_select": "select avg(cars_data.engine)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average horsepower for all cars produced before 1980?",
        "gold_select": "select avg(cars_data.engine)",
        "select_candidates": [
            "select avg(cars_data.engine)",
            "select avg(cars_data.speed_up)",
            "select avg(cars_data.mass)",
            "select avg(avg(cars_data.engine)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "model_list cars_data",
            "car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9598775506019592,
            0.0001522671664133668,
            0.006344630848616362,
            0.00012469961075112224,
            0.0007365053752437234,
            0.00010902210487984121,
            0.0006160922348499298,
            0.00010483208461664617
        ],
        "align_select": "select avg(cars_data.engine)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average edispl of the cars of model volvo?",
        "gold_select": "select avg(cars_data.Edispl)",
        "select_candidates": [
            "select avg(cars_data.Edispl)",
            "select  avg(cars_data.Edispl)",
            "select an avg(cars_data.Edispl)",
            "select avg(cars_data.Edispl)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.9964190721511841,
            8.57400955283083e-05,
            0.9964190721511841,
            8.57400955283083e-05,
            0.00039060739800333977,
            0.00011745192750822753,
            0.9964190721511841,
            8.57400955283083e-05
        ],
        "align_select": "select avg(cars_data.Edispl)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average edispl for all volvos?",
        "gold_select": "select avg(cars_data.Edispl)",
        "select_candidates": [
            "select avg(cars_data.Edispl)",
            "select an avg(cars_data.Edispl)",
            "select  avg(cars_data.Edispl)",
            "select avg(cars_data.Edispl)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list cars_data",
            "car_makers model_list cars_data",
            "car_makers cars_data",
            "countries model_list cars_data",
            "cars_data",
            "car_names cars_data",
            "countries car_makers cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.9966610670089722,
            0.0001598495728103444,
            0.00037628886639140546,
            9.487797797191888e-05,
            0.9966610670089722,
            0.0001598495728103444,
            0.9966610670089722,
            0.0001598495728103444
        ],
        "align_select": "select avg(cars_data.Edispl)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the maximum accelerate for different number of cylinders?",
        "gold_select": "select max(cars_data.speed_up), cars_data.number_cylinder",
        "select_candidates": [
            "select max(cars_data.speed_up), cars_data.number_cylinder",
            "select cars_data.number_cylinder, max(cars_data.speed_up)",
            "select min(cars_data.speed_up), cars_data.number_cylinder",
            "select maximum(cars_data.speed_up), cars_data.number_cylinder"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9866624474525452,
            0.00011823626118712127,
            0.9910023808479309,
            0.00014615661348216236,
            0.0002590226649772376,
            9.412910731043667e-05,
            0.0032653193920850754,
            9.521296306047589e-05
        ],
        "align_select": "select max(cars_data.speed_up), cars_data.number_cylinder",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the maximum accelerate for all the different cylinders?",
        "gold_select": "select max(cars_data.speed_up), cars_data.number_cylinder",
        "select_candidates": [
            "select max(cars_data.speed_up), cars_data.number_cylinder",
            "select cars_data.number_cylinder, max(cars_data.speed_up)",
            "select maximum(cars_data.speed_up), cars_data.number_cylinder",
            "select min(cars_data.speed_up), cars_data.number_cylinder"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9915313720703125,
            0.00013526875409297645,
            0.9924815893173218,
            0.00018490671936888248,
            0.004801458679139614,
            9.684611723059788e-05,
            0.00028399922302924097,
            8.943978900788352e-05
        ],
        "align_select": "select max(cars_data.speed_up), cars_data.number_cylinder",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Which model has the most version(make) of cars?",
        "gold_select": "select car_names.model_name",
        "select_candidates": [
            "select car_names.model_name",
            "select model_list.mode",
            "select car_names.model_name, car_names.manufacture",
            "select model_list.produced_by, car_names.manufacture"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names",
        "table_candidates": [
            "model_list car_names",
            "car_names",
            "car_makers model_list car_names",
            "car_makers car_names",
            "countries car_names",
            "continents model_list car_names",
            "continents car_names"
        ],
        "align_scores": [
            0.9700888991355896,
            0.0003270812158007175,
            0.9211585521697998,
            0.0006225787219591439,
            0.5342825055122375,
            0.00019962935766670853,
            0.0012443974846974015,
            0.00010042323992820457
        ],
        "align_select": "select car_names.model_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What model has the most different versions?",
        "gold_select": "select car_names.model_name",
        "select_candidates": [
            "select model_list.ModelId",
            "select model_list.produced_by",
            "select model_list.ModelId, model_list.mode",
            "select model_list.produced_by, model_list.mode"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names",
        "table_candidates": [
            "model_list",
            "model_list car_names",
            "car_makers model_list"
        ],
        "align_scores": [
            0.16768476366996765,
            0.0001225076412083581,
            0.4743371605873108,
            7.258534606080502e-05,
            0.0007459216867573559,
            8.914381032809615e-05,
            0.000735006295144558,
            7.226295565487817e-05
        ],
        "align_select": "select model_list.produced_by",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "How many cars have more than 4 cylinders?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.number_cylinder",
            "select count(*), cars_data.number_cylinder, cars_data.engine"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9901673793792725,
            0.00023121281992644072,
            0.00024721850058995187,
            0.004161194432526827,
            0.0002028227027039975,
            0.004384434781968594,
            0.00010827378719113767,
            0.00014872725296299905
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of cars with more than 4 cylinders?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.number_cylinder",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.number_cylinder, cars_data.engine"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9919754862785339,
            0.00011362355144228786,
            0.0001829397660912946,
            0.0046609267592430115,
            0.00024426981690339744,
            0.0003930952516384423,
            0.00011779569467762485,
            0.00015835526573937386
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many car models were produced by the maker with full name American Motor Company?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), car_makers.Id",
            "select count(*), car_makers.creator",
            "select count(model_list.ModelId)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers model_list",
            "countries car_makers model_list car_names",
            "continents car_makers model_list car_names"
        ],
        "align_scores": [
            0.9923270344734192,
            0.00014054309576749802,
            0.0005440996610559523,
            9.4926668680273e-05,
            0.0004456207389011979,
            0.00014899708912707865,
            0.05398605018854141,
            0.00011773773439927027
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of car models created by the car maker American Motor Company?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), car_makers.Id",
            "select count(distinct car_names.model_name)",
            "select count(*), car_makers.creator"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers car_names",
            "car_makers model_list car_names",
            "countries car_makers car_names",
            "countries car_makers model_list car_names",
            "car_makers model_list car_makers car_names",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9931821227073669,
            0.0004967506974935532,
            0.0004703117301687598,
            0.0001949950965354219,
            0.178219273686409,
            0.00015016035467851907,
            0.00035432129516266286,
            0.027473444119095802
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which makers designed more than 3 car models? List full name and the id.",
        "gold_select": "select car_makers.complete_name, car_makers.Id",
        "select_candidates": [
            "select car_makers.complete_name, car_makers.Id",
            "select car_makers.creator, car_makers.complete_name, car_makers.Id",
            "select t2.c4, car_makers.complete_name, car_makers.Id",
            "select car_makers.creator, car_makers.complete_name, car_names.MakeId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers car_names",
            "car_makers model_list car_names"
        ],
        "align_scores": [
            0.9843674302101135,
            0.00012493312533479184,
            0.0004627603630069643,
            8.08424229035154e-05,
            0.000381553138140589,
            7.024750811979175e-05,
            0.00019418650481384248,
            6.696950731566176e-05
        ],
        "align_select": "select car_makers.complete_name, car_makers.Id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the names and ids of all makers with more than 3 models?",
        "gold_select": "select car_makers.complete_name, car_makers.Id",
        "select_candidates": [
            "select car_makers.complete_name, car_makers.Id",
            "select car_makers.creator, car_makers.complete_name, car_makers.Id",
            "select car_makers.complete_name, car_names.MakeId",
            "select car_makers.creator, car_makers.complete_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers car_names",
            "car_makers model_list car_names",
            "countries car_makers car_names",
            "countries car_makers model_list car_names"
        ],
        "align_scores": [
            0.9870049953460693,
            0.00011547032772796229,
            0.0006254955078475177,
            8.033828635234386e-05,
            0.010767650790512562,
            8.491025073453784e-05,
            0.022440599277615547,
            0.00010267357720294967
        ],
        "align_select": "select car_makers.complete_name, car_makers.Id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "gold_select": "select distinct model_list.mode",
        "select_candidates": [
            "select distinct car_names.model_name",
            "select distinct model_list.produced_by",
            "select distinct car_names.model_name, car_names.manufacture",
            "select distinct car_names.model_name, car_names.MakeId"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list cars_data",
            "car_makers model_list car_names",
            "countries car_makers model_list cars_data",
            "continents car_makers model_list cars_data",
            "countries car_makers model_list car_names",
            "continents car_makers model_list car_names"
        ],
        "align_scores": [
            0.8025849461555481,
            0.09799617528915405,
            0.6364335417747498,
            0.003733711550012231,
            0.0002669949026312679,
            0.00011713906860677525,
            0.0002638300065882504,
            0.000134695103042759
        ],
        "align_select": "select distinct car_names.model_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "gold_select": "select distinct model_list.mode",
        "select_candidates": [
            "select distinct car_names.model_name",
            "select distinct car_names.model_name, car_names.manufacture",
            "select distinct car_names.model_name, car_names.MakeId",
            "select distinct model_list.produced_by"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers model_list cars_data",
            "car_makers model_list car_names",
            "car_makers model_list car_makers car_names cars_data",
            "car_makers model_list car_makers cars_data"
        ],
        "align_scores": [
            0.9752971529960632,
            0.0006034527905285358,
            0.0002733580768108368,
            0.00010526421829126775,
            0.00018535666458774358,
            0.00012028297351207584,
            0.9804431796073914,
            0.00024831504561007023
        ],
        "align_select": "select distinct car_names.model_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In which years cars were produced weighing no less than 3000 and no more than 4000?",
        "gold_select": "select distinct cars_data.Year",
        "select_candidates": [
            "select cars_data.Year",
            "select distinct cars_data.Year",
            "select specific cars_data.Year",
            "select the cars_data.Year"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "model_list cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.9773098230361938,
            0.00044615499791689217,
            0.14043419063091278,
            0.0002846302813850343,
            0.002285911003127694,
            0.00014829053543508053,
            0.001858817064203322,
            0.00013749406207352877
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000?",
        "gold_select": "select distinct cars_data.Year",
        "select_candidates": [
            "select distinct cars_data.Year",
            "select cars_data.Year",
            "select distinct cars_data.Year, t5.c8",
            "select different cars_data.Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.004785803146660328,
            0.015139421448111534,
            0.8248753547668457,
            0.8884948492050171,
            0.0001234767260029912,
            0.00012239707575645298,
            0.002534568542614579,
            0.001202822313643992
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
    },
    {
        "question": "What is the horsepower of the car with the largest accelerate?",
        "gold_select": "select cars_data.engine",
        "select_candidates": [
            "select cars_data.engine",
            "select cars_data.engine, cars_data.speed_up",
            "select cars_data.engine, t5.diff(cars_data.speed_up)",
            "select cars_data.engine, max(cars_data.speed_up)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9694641828536987,
            7.599477976327762e-05,
            0.0004802166949957609,
            6.796427624067292e-05,
            0.00017464588745497167,
            7.778449798934162e-05,
            0.00018922692106571048,
            6.433408270822838e-05
        ],
        "align_select": "select cars_data.engine",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the horsepower of the car with the greatest accelerate?",
        "gold_select": "select cars_data.engine",
        "select_candidates": [
            "select cars_data.engine",
            "select cars_data.engine, cars_data.speed_up",
            "select cars_data.engine, t5.diff(cars_data.speed_up)",
            "select cars_data.engine, max(cars_data.speed_up)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9795255661010742,
            7.996361091500148e-05,
            0.0004433120775502175,
            6.826188473496586e-05,
            0.0001916301844175905,
            7.668461330467835e-05,
            0.00023000399232842028,
            6.228146230569109e-05
        ],
        "align_select": "select cars_data.engine",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "gold_select": "select cars_data.number_cylinder",
        "select_candidates": [
            "select cars_data.number_cylinder",
            "select cars_data.Id, cars_data.number_cylinder",
            "select cars_data.number_cylinder, car_names.model_name",
            "select cars_data.number_cylinder, cars_data.engine"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "continents car_names cars_data",
            "countries car_names cars_data",
            "car_makers cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.9811691641807556,
            0.00010144075349671766,
            0.0002166596968891099,
            8.937311213230714e-05,
            0.00021084466425236315,
            7.097539491951466e-05,
            0.0002739227202255279,
            7.558947254437953e-05
        ],
        "align_select": "select cars_data.number_cylinder",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "gold_select": "select cars_data.number_cylinder",
        "select_candidates": [
            "select cars_data.number_cylinder",
            "select cars_data.Id, cars_data.number_cylinder",
            "select cars_data.number_cylinder, cars_data.engine",
            "select cars_data.number_cylinder, cars_data.Edispl"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.9799206852912903,
            0.14892616868019104,
            0.00034485250944271684,
            0.0002209749654866755,
            0.00028444171766750515,
            0.00022438191808760166,
            0.00036255866871215403,
            0.0002704985090531409
        ],
        "align_select": "select cars_data.number_cylinder",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.engine",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.speed_up"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9621860384941101,
            0.0013478088658303022,
            0.0003600002673920244,
            0.0004106077249161899,
            0.000418550189351663,
            0.00016310707724187523,
            0.0003771345946006477,
            0.00031933083664625883
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.engine",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.speed_up"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9737866520881653,
            0.0005758209154009819,
            0.00037151819560676813,
            0.0001787790679372847,
            0.0004231985367368907,
            9.957162546925247e-05,
            0.00035016561741940677,
            0.00016986607806757092
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many countries has more than 2 car makers?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), car_makers.nation",
            "select count(*), countries.CountryId",
            "select count(distinct countries.CountryId)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers",
            "countries car_makers model_list"
        ],
        "align_scores": [
            0.8212433457374573,
            0.012550869956612587,
            0.0010753225069493055,
            0.015640726312994957,
            0.001570986700244248,
            0.014231045730412006,
            0.09125061333179474,
            0.003144681453704834
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the number of countries with more than 2 car makers?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), car_makers.nation",
            "select count(*), countries.CountryId",
            "select count(*),"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers",
            "countries car_makers model_list"
        ],
        "align_scores": [
            0.76219242811203,
            0.004517059773206711,
            0.0009301126701757312,
            0.19924435019493103,
            0.0009759411914274096,
            0.021267719566822052,
            0.001945057767443359,
            0.005826910957694054
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many cars has over 6 cylinders?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.number_cylinder",
            "select count(*), cars_data.number_cylinder, cars_data.engine"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9940642714500427,
            0.00011757249740185216,
            0.0002797678462229669,
            8.941692794905975e-05,
            0.00021533051040023565,
            9.901913290377706e-05,
            0.00010749501234386116,
            6.148919783299789e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of carsw ith over 6 cylinders?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.number_cylinder",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.number_cylinder, cars_data.Edispl"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9932132959365845,
            0.00016561345546506345,
            0.0001907707774080336,
            0.005637784954160452,
            0.00026156759122386575,
            0.0004515148466452956,
            0.00013065662642475218,
            0.00018245374667458236
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "gold_select": "select car_names.model_name",
        "select_candidates": [
            "select car_names.model_name",
            "select car_names.model_name, cars_data.number_cylinder",
            "select car_names.model_name, cars_data.speed_up",
            "select car_names.model_name, cars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers cars_data",
            "continents car_names cars_data",
            "cars_data",
            "countries car_names cars_data",
            "car_makers car_names cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.885124683380127,
            0.00010636931256158277,
            0.0001652777282288298,
            6.795481749577448e-05,
            0.0007178300293162465,
            7.423279748763889e-05,
            0.0006192782893776894,
            8.383975364267826e-05
        ],
        "align_select": "select car_names.model_name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "gold_select": "select car_names.model_name",
        "select_candidates": [
            "select car_names.model_name",
            "select car_names.model_name, cars_data.number_cylinder",
            "select car_names.model_name, cars_data.speed_up",
            "select car_names.model_name, cars_data.engine"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.8821665048599243,
            0.00012924414477311075,
            0.000264442729530856,
            6.876005500089377e-05,
            0.000866974238306284,
            6.87808424117975e-05,
            0.0011640331940725446,
            7.717892731307074e-05
        ],
        "align_select": "select car_names.model_name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "gold_select": "select car_names.MakeId, car_names.manufacture",
        "select_candidates": [
            "select car_names.MakeId, car_names.model_name",
            "select car_names.MakeId, car_names.model_name, car_names.manufacture",
            "select car_makers.Id, car_names.model_name",
            "select car_names.MakeId, car_names.model_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "car_makers cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.003188999369740486,
            0.01238049566745758,
            0.0002697387826628983,
            0.00027014335501007736,
            0.009943777695298195,
            0.023285970091819763,
            0.003188999369740486,
            0.01238049566745758
        ],
        "align_select": "select car_names.MakeId, car_names.model_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Among the cars that do not have the minimum horsepower, what are the make ids and names of all those with less than 4 cylinders?",
        "gold_select": "select car_names.MakeId, car_names.manufacture",
        "select_candidates": [
            "select car_names.MakeId, car_names.model_name",
            "select car_names.MakeId, car_names.model_name, car_names.manufacture",
            "select car_makers.Id, car_names.model_name",
            "select car_names.model_name, car_names.MakeId"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9149302244186401,
            0.006813905201852322,
            0.00033385123242624104,
            0.0001212958522955887,
            0.7023686766624451,
            0.004405302461236715,
            0.9537109732627869,
            0.010480538010597229
        ],
        "align_select": "select car_names.MakeId, car_names.model_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980?",
        "gold_select": "select max(cars_data.miles_per_gallon)",
        "select_candidates": [
            "select max(cars_data.miles_per_gallon)",
            "select max(cars_data.miles_per_gallon), cars_data.number_cylinder",
            "select max(cars_data.miles_per_gallon), cars_data.Year",
            "select max(cars_data.miles_per_gallon), cars_data.number_cylinder, cars_data.Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9922235608100891,
            0.00010113495955010876,
            0.00012496304407250136,
            6.942386244190857e-05,
            0.0001294696266995743,
            6.36702316114679e-05,
            0.00013304193271324039,
            7.902319339336827e-05
        ],
        "align_select": "select max(cars_data.miles_per_gallon)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980?",
        "gold_select": "select max(cars_data.miles_per_gallon)",
        "select_candidates": [
            "select max(cars_data.miles_per_gallon)",
            "select max(cars_data.miles_per_gallon), cars_data.number_cylinder",
            "select max(cars_data.miles_per_gallon), cars_data.Year",
            "select max(cars_data.miles_per_gallon), cars_data.speed_up"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9742480516433716,
            0.02901126816868782,
            0.0001458279584767297,
            0.00012492158566601574,
            0.00015396528760902584,
            8.116375101963058e-05,
            0.00015255041944328696,
            7.127790740923956e-05
        ],
        "align_select": "select max(cars_data.miles_per_gallon)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "gold_select": "select distinct model_list.mode",
        "select_candidates": [
            "select car_names.model_name",
            "select model_list.ModelId",
            "select car_makers.creator, car_makers.complete_name",
            "select model_list.produced_by"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers model_list cars_data",
            "countries car_makers model_list car_names",
            "continents car_makers model_list car_names",
            "continents car_makers model_list cars_data"
        ],
        "align_scores": [
            0.8665902018547058,
            0.7106234431266785,
            0.5573230981826782,
            0.237071231007576,
            0.00029687839560210705,
            0.00028177554486319423,
            0.9793294668197632,
            0.9330911636352539
        ],
        "align_select": "select car_names.model_name",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "gold_select": "select distinct model_list.mode",
        "select_candidates": [
            "select distinct car_names.model_name",
            "select distinct model_list.ModelId",
            "select distinct model_list.produced_by",
            "select distinct car_names.model_name, model_list.mode"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers model_list cars_data",
            "countries car_makers model_list car_names",
            "continents car_makers model_list car_names"
        ],
        "align_scores": [
            0.4829316735267639,
            0.4829316735267639,
            0.3883489668369293,
            0.3883489668369293,
            0.10721614211797714,
            0.10721614211797714,
            0.0004532193997874856,
            0.0004532193997874856
        ],
        "align_select": "select distinct car_names.model_name",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the name of the countries where there is not a single car maker?",
        "gold_select": "select countries.state",
        "select_candidates": [
            "select countries.state",
            "select countries.state, countries.mainland",
            "select countries.CountryId, countries.mainland",
            "select countries.CountryId, countries.state"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers",
            "countries",
            "countries car_makers model_list",
            "countries car_makers car_names"
        ],
        "align_scores": [
            0.1737619787454605,
            0.23976640403270721,
            0.00028754572849720716,
            0.00022227111912798136,
            0.0002757708716671914,
            0.00031072841375134885,
            0.00027185119688510895,
            0.0001769754890119657
        ],
        "align_select": "select countries.state",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of the countries with no car makers?",
        "gold_select": "select countries.state",
        "select_candidates": [
            "select countries.state",
            "select countries.state, countries.mainland",
            "select countries.CountryId, countries.mainland",
            "select countries.mainland"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries",
            "countries car_makers",
            "countries car_makers model_list"
        ],
        "align_scores": [
            0.08136589825153351,
            0.5907346606254578,
            0.00028700591064989567,
            0.00020144392328802496,
            0.0002336501347599551,
            0.0002758576301857829,
            0.07507748156785965,
            0.7384185194969177
        ],
        "align_select": "select countries.mainland",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Which are the car makers which produce at least 2 models and more than 3 car makers? List the id and the maker.",
        "gold_select": "select car_makers.Id, car_makers.creator",
        "select_candidates": [
            "select car_makers.Id, car_makers.creator",
            "select car_names.MakeId, car_makers.creator",
            "select model_list.ModelId, car_makers.creator",
            "select car_names.model_name, car_makers.creator"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names",
        "table_candidates": [
            "car_makers car_names",
            "car_makers model_list car_names"
        ],
        "align_scores": [
            0.01899387314915657,
            0.006074527278542519,
            0.025093253701925278,
            0.00957006961107254,
            0.0007004320505075157,
            0.000633643358014524,
            0.00015003285079728812,
            0.0001184834327432327
        ],
        "align_select": "select car_makers.Id, car_makers.creator",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "gold_select": "select car_makers.Id, car_makers.creator",
        "select_candidates": [
            "select car_makers.Id, car_makers.creator",
            "select car_names.MakeId, car_makers.creator",
            "select car_names.model_name, car_makers.creator",
            "select model_list.ModelId, car_makers.creator"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names",
        "table_candidates": [
            "car_makers car_names",
            "car_makers model_list car_names",
            "countries car_makers car_names",
            "car_makers car_makers car_names"
        ],
        "align_scores": [
            0.8304803967475891,
            0.06688115745782852,
            0.7195409536361694,
            0.07630916684865952,
            0.00015182570496108383,
            0.00013143446994945407,
            0.00025243329582735896,
            0.00026732703554444015
        ],
        "align_select": "select car_makers.Id, car_makers.creator",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "gold_select": "select countries.CountryId, countries.state",
        "select_candidates": [
            "select countries.CountryId, countries.mainland",
            "select car_makers.Id, car_makers.complete_name",
            "select countries.CountryId, countries.mainland.",
            "select car_makers.Id, countries.mainland"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "countries car_makers car_names",
            "countries car_makers model_list car_names",
            "countries model_list car_names",
            "car_makers car_names"
        ],
        "align_scores": [
            0.01649663597345352,
            0.004714949056506157,
            0.7997608780860901,
            0.015275496058166027,
            0.002883167937397957,
            0.0009240144863724709,
            0.32769688963890076,
            0.007428763434290886
        ],
        "align_select": "select car_makers.Id, car_makers.complete_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model?",
        "gold_select": "select countries.CountryId, countries.state",
        "select_candidates": [
            "select countries.CountryId, countries.mainland",
            "select countries.CountryId, countries.mainland.",
            "select countries.CountryId, countries.mainland,",
            "select car_makers.Id, countries.mainland"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "countries car_makers car_names",
            "countries car_makers model_list car_names",
            "countries model_list car_names",
            "countries car_makers model_list"
        ],
        "align_scores": [
            0.004240731243044138,
            0.00703081488609314,
            0.0007035674061626196,
            0.0009719785302877426,
            0.00034339012927375734,
            0.00026005576364696026,
            0.021012358367443085,
            0.010183876380324364
        ],
        "align_select": "select countries.CountryId, countries.mainland",
        "align_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
    },
    {
        "question": "Which model of the car has the minimum horsepower?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select model_list.model_name",
            "select car_names.Model, model_list.model_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9847778081893921,
            5.9840087487827986e-05,
            0.0007638646056875587,
            5.335204696166329e-05,
            0.9666416645050049,
            6.613124423893169e-05,
            0.0004876883467659354,
            5.761214197264053e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the model of the car with the smallest amount of horsepower?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select model_list.model_name",
            "select car_names.Make",
            "select car_names.Model, car_names.Make"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "model_list car_names"
        ],
        "align_scores": [
            0.9895781874656677,
            7.24460041965358e-05,
            0.9692040085792542,
            7.432161510223523e-05,
            0.9637528657913208,
            8.05775125627406e-05,
            0.0005260299076326191,
            5.794426760985516e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the model of the car whose weight is below the average weight.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select model_list.model_name",
            "select model_list.ModelId, model_list.model_name",
            "select car_names.Model, car_names.Make"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "car_names cars_data",
            "car_makers model_list car_names cars_data",
            "car_makers car_names cars_data",
            "continents model_list car_names cars_data",
            "countries car_names cars_data",
            "model_list car_names"
        ],
        "align_scores": [
            0.9913051128387451,
            6.780256808269769e-05,
            0.7876074314117432,
            7.131951133487746e-05,
            0.0006022462039254606,
            7.504003588110209e-05,
            0.00028302616556175053,
            6.38878409517929e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the model for the car with a weight smaller than the average?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.model_name",
            "select car_names.Model",
            "select model_list.ModelId, model_list.model_name",
            "select model_list.model_name, car_names.Model"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names",
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers model_list car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers model_list car_names",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9883391857147217,
            6.557266897289082e-05,
            0.9913359880447388,
            6.32893352303654e-05,
            0.00026489925221540034,
            6.548599048983306e-05,
            0.0002470745239406824,
            5.84703084314242e-05
        ],
        "align_select": "select model_list.model_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the name of the makers that produced some cars in the year of 1970?",
        "gold_select": "select distinct car_makers.Maker",
        "select_candidates": [
            "select car_makers.Maker, car_makers.FullName",
            "select car_makers.FullName, car_makers.Maker",
            "select car_makers.Maker",
            "select car_makers.FullName"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "continents car_makers car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.0003570220433175564,
            7.233390351757407e-05,
            0.0003991229459643364,
            7.143658876884729e-05,
            0.9692379236221313,
            0.001314473687671125,
            0.7215805649757385,
            0.0002875046629924327
        ],
        "align_select": "select car_makers.Maker",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name of the different car makers who produced a car in 1970?",
        "gold_select": "select distinct car_makers.Maker",
        "select_candidates": [
            "select distinct car_makers.Maker, car_makers.FullName",
            "select distinct car_makers.FullName, car_makers.Maker",
            "select distinct car_makers.FullName",
            "select distinct car_makers.Maker"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "car_makers car_names",
            "car_makers cars_data",
            "car_makers model_list car_names cars_data",
            "continents car_makers car_names cars_data"
        ],
        "align_scores": [
            0.0005942312418483198,
            7.654076762264594e-05,
            0.0004664957523345947,
            7.654025102965534e-05,
            0.9575826525688171,
            0.00029225728940218687,
            0.990705668926239,
            0.000356165983248502
        ],
        "align_select": "select distinct car_makers.Maker",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which distinct car models are the produced after 1980?",
        "gold_select": "select distinct model_list.model_name",
        "select_candidates": [
            "select distinct car_names.Model",
            "select distinct model_list.model_name",
            "select distinct car_names.Model, car_names.Make",
            "select distinct car_names.Model/car_names.Model"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "model_list car_names cars_data",
        "table_candidates": [
            "model_list car_names",
            "car_names",
            "car_makers model_list car_names",
            "model_list car_names cars_data",
            "car_names cars_data",
            "car_makers car_names",
            "countries car_names",
            "car_makers car_names cars_data"
        ],
        "align_scores": [
            0.9871242046356201,
            0.005341054406017065,
            0.9874067902565002,
            0.010289991274476051,
            0.00016812962712720037,
            0.00013371167005971074,
            0.0003751656331587583,
            0.00011996934335911646
        ],
        "align_select": "select distinct car_names.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the different models for the cards produced after 1980?",
        "gold_select": "select distinct model_list.model_name",
        "select_candidates": [
            "select distinct model_list.model_name",
            "select distinct model_list.model_name, model_list.ModelId",
            "select distinct model_list.model_name, t3.c3",
            "select distinct model_list.model_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "model_list car_names cars_data",
        "table_candidates": [
            "model_list cars_data",
            "model_list car_names",
            "car_makers model_list car_names",
            "car_makers model_list cars_data"
        ],
        "align_scores": [
            0.9936762452125549,
            0.00015035938122309744,
            0.00031716027297079563,
            7.766930502839386e-05,
            0.00048825208796188235,
            9.08982110559009e-05,
            0.9936762452125549,
            0.00015035938122309744
        ],
        "align_select": "select distinct model_list.model_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
        "gold_select": "select avg(cars_data.MPG)",
        "select_candidates": [
            "select avg(cars_data.MPG)",
            "select an avg(cars_data.MPG)",
            "select  avg(cars_data.MPG)",
            "select avg(avg(cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9956057667732239,
            0.00010507127444725484,
            0.0004002295318059623,
            0.00010512118024053052,
            0.9956057667732239,
            0.00010507127444725484,
            0.0004325479385443032,
            0.0001028888946166262
        ],
        "align_select": "select avg(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
        "gold_select": "select avg(cars_data.MPG)",
        "select_candidates": [
            "select avg(cars_data.MPG)",
            "select an avg(cars_data.MPG)",
            "select avg(avg(cars_data.MPG)",
            "select Avg(cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9953299760818481,
            0.0007165662827901542,
            0.0004020243068225682,
            0.00015905016334727407,
            0.00046309659956023097,
            0.0001665395247982815,
            0.9953299760818481,
            0.0007165662827901542
        ],
        "align_select": "select avg(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the smallest weight of the car produced with 8 cylinders on 1974?",
        "gold_select": "select min(cars_data.mass)",
        "select_candidates": [
            "select min(cars_data.mass)",
            "select min(cars_data.mass), cars_data.Year",
            "select min(cars_data.mass), cars_data.Accelerate",
            "select min(cars_data.mass), cars_data.cylinder_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9941524863243103,
            0.00010248517355648801,
            0.00012933807738590986,
            6.084727283450775e-05,
            0.00013780566223431379,
            5.650477760354988e-05,
            0.00011392579472158104,
            6.324420974124223e-05
        ],
        "align_select": "select min(cars_data.mass)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the minimum weight of the car with 8 cylinders produced in 1974?",
        "gold_select": "select min(cars_data.mass)",
        "select_candidates": [
            "select min(cars_data.mass)",
            "select min(cars_data.mass), cars_data.Year",
            "select min(cars_data.mass), cars_data.Accelerate",
            "select min(cars_data.mass), cars_data.cylinder_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.992646336555481,
            9.436124673811719e-05,
            0.0001390685501974076,
            6.314646452665329e-05,
            0.00014005773118697107,
            5.9696398238884285e-05,
            0.0001271784130949527,
            6.391904753400013e-05
        ],
        "align_select": "select min(cars_data.mass)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are all the makers and models?",
        "gold_select": "select model_list.Maker, model_list.model_name",
        "select_candidates": [
            "select model_list.Maker, model_list.model_name",
            "select car_makers.Maker, model_list.model_name",
            "select car_names.Make, car_names.Model",
            "select distinct model_list.Maker, model_list.model_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "model_list",
        "table_candidates": [
            "model_list car_names",
            "car_makers model_list car_names",
            "countries model_list car_names",
            "continents car_makers model_list car_names",
            "countries car_makers model_list car_names",
            "car_makers model_list",
            "continents model_list car_names"
        ],
        "align_scores": [
            0.9948081374168396,
            0.0001221318234456703,
            0.9776554107666016,
            0.00014627361088059843,
            0.992732584476471,
            0.00013452194980345666,
            0.001970453653484583,
            0.00011162307782797143
        ],
        "align_select": "select model_list.Maker, model_list.model_name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the makers and models?",
        "gold_select": "select model_list.Maker, model_list.model_name",
        "select_candidates": [
            "select car_makers.Maker, model_list.model_name",
            "select model_list.Maker, model_list.model_name",
            "select car_names.Make, car_names.Model",
            "select car_makers.Maker, car_makers.FullName"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "model_list car_names",
            "countries car_makers model_list car_names",
            "countries model_list car_names",
            "continents car_makers model_list car_names",
            "car_makers model_list",
            "countries car_makers model_list"
        ],
        "align_scores": [
            0.9930693507194519,
            0.00012105619680369273,
            0.9956086277961731,
            0.00011000184167642146,
            0.9947233200073242,
            0.0001413352001691237,
            0.0006077053840272129,
            0.00012943529873155057
        ],
        "align_select": "select car_makers.Maker, model_list.model_name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the number of the cars with horsepower more than 150?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), t5.dcars_data.Id",
            "select count(*), cars_data.MPG"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9940716624259949,
            0.00013623700942844152,
            0.00023281310859601945,
            0.005770950578153133,
            0.0002170202787965536,
            0.0011751182610169053,
            0.0002116075629601255,
            0.0002523471775930375
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of cars with a horsepower greater than 150?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), t5.dcars_data.Id",
            "select count(*) (cars_data.Id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9917104840278625,
            0.0001299772848142311,
            0.00023115881776902825,
            0.0008899731910787523,
            0.00020766675879713148,
            0.00035195378586649895,
            0.00028922565979883075,
            0.0001320604933425784
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average weight of cars each year?",
        "gold_select": "select avg(cars_data.mass), cars_data.Year",
        "select_candidates": [
            "select avg(cars_data.mass), cars_data.Year",
            "select cars_data.Year, avg(cars_data.mass)",
            "select an avg(cars_data.mass), cars_data.Year",
            "select accuarte(cars_data.mass), cars_data.Year"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9931064248085022,
            0.00012191006680950522,
            0.9961466789245605,
            0.00010736614785855636,
            0.00024261050566565245,
            0.00012020604481222108,
            0.0011730761034414172,
            7.416034350171685e-05
        ],
        "align_select": "select avg(cars_data.mass), cars_data.Year",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the average weight and year for each year?",
        "gold_select": "select avg(cars_data.mass), cars_data.Year",
        "select_candidates": [
            "select avg(cars_data.mass), cars_data.Year",
            "select avg(cars_data.mass), avg(cars_data.Year), cars_data.Year",
            "select avg(cars_data.mass), avg(cars_data.Year),",
            "select avg(cars_data.Accelerate), avg(cars_data.Year), cars_data.Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9523985385894775,
            0.00014416965132113546,
            0.0003808943147305399,
            7.13283516233787e-05,
            0.0006908212671987712,
            0.00013301883882377297,
            7.963791722431779e-05,
            6.700407539028674e-05
        ],
        "align_select": "select avg(cars_data.mass), cars_data.Year",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "gold_select": "select cars_data.engine, car_names.Make",
        "select_candidates": [
            "select max(cars_data.Accelerate), car_names.Make",
            "select max(cars_data.Year), car_names.Make",
            "select max(t5.c8), car_names.Make",
            "select max(cars_data.engine), car_names.Make"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "model_list cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.9851554036140442,
            0.00016139399667736143,
            0.0003948623489122838,
            7.343487231992185e-05,
            0.0005420658271759748,
            9.41713951760903e-05,
            0.002534795319661498,
            0.00012153758871136233
        ],
        "align_select": "select max(cars_data.Accelerate), car_names.Make",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "gold_select": "select cars_data.engine, car_names.Make",
        "select_candidates": [
            "select max(cars_data.Accelerate), car_names.Make",
            "select max(t5.c8), car_names.Make",
            "select max(cars_data.engine), car_names.Make",
            "select max(cars_data.Year), car_names.Make"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers cars_data",
            "countries car_names cars_data",
            "car_makers car_names cars_data",
            "continents car_names cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.0005426226416602731,
            9.014747774926946e-05,
            0.00020269742526579648,
            0.00012511826935224235,
            0.00016418482118751854,
            0.000114281581772957,
            0.00018136274593416601,
            0.00016444506763946265
        ],
        "align_select": "select max(cars_data.Accelerate), car_names.Make",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "What is the average horsepower of the cars before 1980?",
        "gold_select": "select avg(cars_data.engine)",
        "select_candidates": [
            "select avg(cars_data.Accelerate)",
            "select avg(cars_data.engine)",
            "select avg(cars_data.mass)",
            "select avg(cars_data.Year)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "model_list cars_data",
            "car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.983904242515564,
            0.00014081998961046338,
            0.9813275933265686,
            0.00015526474453508854,
            0.0005408252472989261,
            0.00011654977424768731,
            0.0005336159956641495,
            0.00016647600568830967
        ],
        "align_select": "select avg(cars_data.Accelerate)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average horsepower for all cars produced before 1980?",
        "gold_select": "select avg(cars_data.engine)",
        "select_candidates": [
            "select avg(cars_data.Accelerate)",
            "select avg(cars_data.engine)",
            "select avg(t5.c8)",
            "select avg(cars_data.Year)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "model_list cars_data",
            "car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9493364095687866,
            0.00013727582700084895,
            0.9598775506019592,
            0.0001522671664133668,
            0.0008697448065504432,
            0.0001796201104298234,
            0.0006618736661039293,
            0.00014982839638832957
        ],
        "align_select": "select avg(cars_data.Accelerate)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the maximum accelerate for different number of cylinders?",
        "gold_select": "select max(cars_data.Accelerate), cars_data.cylinder_number",
        "select_candidates": [
            "select max(cars_data.Accelerate), cars_data.cylinder_number",
            "select cars_data.cylinder_number, max(cars_data.Accelerate)",
            "select min(cars_data.Accelerate), cars_data.cylinder_number",
            "select maximum(cars_data.Accelerate), cars_data.cylinder_number"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9944474697113037,
            0.00011713650019373745,
            0.9953445792198181,
            0.00016035366570577025,
            0.0003170557029079646,
            7.792608084855601e-05,
            0.0029405076056718826,
            0.00010074935562442988
        ],
        "align_select": "select max(cars_data.Accelerate), cars_data.cylinder_number",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the maximum accelerate for all the different cylinders?",
        "gold_select": "select max(cars_data.Accelerate), cars_data.cylinder_number",
        "select_candidates": [
            "select max(cars_data.Accelerate), cars_data.cylinder_number",
            "select cars_data.cylinder_number, max(cars_data.Accelerate)",
            "select min(cars_data.Accelerate), cars_data.cylinder_number",
            "select maximum(cars_data.Accelerate), cars_data.cylinder_number"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9952430129051208,
            0.00013294632663019001,
            0.9959261417388916,
            0.00018885488680098206,
            0.00038351037073880434,
            8.463153062621132e-05,
            0.003341826843097806,
            0.00010397946607554331
        ],
        "align_select": "select max(cars_data.Accelerate), cars_data.cylinder_number",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How many cars have more than 4 cylinders?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.cylinder_number",
            "select count(*), cars_data.cylinder_number, cars_data.engine",
            "select count(*), cars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9901673793792725,
            0.00023121281992644072,
            0.0001960540103027597,
            0.001819857396185398,
            0.00010028448014054447,
            0.00012374370999168605,
            0.00024721850058995187,
            0.004161194432526827
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of cars with more than 4 cylinders?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.cylinder_number",
            "select count(*), cars_data.cylinder_number, cars_data.engine",
            "select count(*), cars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9919754862785339,
            0.00011362355144228786,
            0.0001844752550823614,
            0.002846469869837165,
            0.00010592758189886808,
            0.00012854064698331058,
            0.00024426981690339744,
            0.0003930952516384423
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "gold_select": "select distinct model_list.model_name",
        "select_candidates": [
            "select distinct model_list.model_name",
            "select distinct model_list.model_name, model_list.Maker",
            "select distinct model_list.model_name, car_makers.Maker",
            "select distinct model_list.model_name, car_names.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers model_list cars_data",
            "car_makers model_list car_makers cars_data",
            "countries car_makers model_list car_names",
            "car_makers model_list car_makers car_names",
            "countries car_makers model_list cars_data"
        ],
        "align_scores": [
            0.7608861923217773,
            0.02714184671640396,
            0.0003414042294025421,
            0.00013206237053964287,
            0.0010261157294735312,
            0.0002544801391195506,
            0.0002874486963264644,
            0.00013041017518844455
        ],
        "align_select": "select distinct model_list.model_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "gold_select": "select distinct model_list.model_name",
        "select_candidates": [
            "select distinct model_list.model_name",
            "select distinct model_list.model_name, car_makers.Maker",
            "select count(distinct model_list.model_name)",
            "select distinct model_list.model_name, model_list.Maker"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list cars_data",
            "car_makers model_list car_names",
            "countries car_makers model_list cars_data",
            "continents car_makers model_list cars_data",
            "countries car_makers model_list car_names"
        ],
        "align_scores": [
            0.974867045879364,
            0.0005650687962770462,
            0.0007979581714607775,
            0.0001437490718672052,
            0.001487074070610106,
            0.00010036177263827994,
            0.00039167681825347245,
            0.00010414278949610889
        ],
        "align_select": "select distinct model_list.model_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In which years cars were produced weighing no less than 3000 and no more than 4000?",
        "gold_select": "select distinct cars_data.Year",
        "select_candidates": [
            "select cars_data.Year",
            "select distinct cars_data.Year",
            "select specific cars_data.Year",
            "select the cars_data.Year"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "model_list cars_data",
            "car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9773098230361938,
            0.00044615499791689217,
            0.14043419063091278,
            0.0002846302813850343,
            0.002285911003127694,
            0.00014829053543508053,
            0.001858817064203322,
            0.00013749406207352877
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000?",
        "gold_select": "select distinct cars_data.Year",
        "select_candidates": [
            "select distinct cars_data.Year",
            "select cars_data.Year",
            "select distinct cars_data.Year, t5.c8",
            "select different cars_data.Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.004785803146660328,
            0.015139421448111534,
            0.8248753547668457,
            0.8884948492050171,
            0.0001234767260029912,
            0.00012239707575645298,
            0.002534568542614579,
            0.001202822313643992
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
    },
    {
        "question": "What is the horsepower of the car with the largest accelerate?",
        "gold_select": "select cars_data.engine",
        "select_candidates": [
            "select cars_data.engine",
            "select hp(cars_data.engine)",
            "select cars_data.engine, cars_data.Accelerate",
            "select cars_data.engine, max(cars_data.Accelerate)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9694641828536987,
            7.599477976327762e-05,
            0.0022790224757045507,
            7.196648948593065e-05,
            0.0004179433744866401,
            6.523150659631938e-05,
            0.00012775369395967573,
            6.391404895111918e-05
        ],
        "align_select": "select cars_data.engine",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the horsepower of the car with the greatest accelerate?",
        "gold_select": "select cars_data.engine",
        "select_candidates": [
            "select cars_data.engine",
            "select hp(cars_data.engine)",
            "select cars_data.engine, cars_data.Accelerate",
            "select cars_data.engine, max(cars_data.Accelerate)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9795255661010742,
            7.996361091500148e-05,
            0.0025409236550331116,
            7.358200673479587e-05,
            0.00041633605724200606,
            6.500201561721042e-05,
            0.0001514232426416129,
            6.45628897473216e-05
        ],
        "align_select": "select cars_data.engine",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "gold_select": "select cars_data.cylinder_number",
        "select_candidates": [
            "select cars_data.cylinder_number",
            "select sum(cars_data.cylinder_number)",
            "select cars_data.Id, cars_data.cylinder_number",
            "select cars_data.cylinder_number, car_names.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "continents car_names cars_data",
            "countries car_names cars_data",
            "car_makers cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.9740158319473267,
            0.00010373237455496565,
            0.09847776591777802,
            7.559459481853992e-05,
            0.00023494937340728939,
            9.022462472785264e-05,
            0.00026117663946934044,
            7.261546124937013e-05
        ],
        "align_select": "select cars_data.cylinder_number",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "gold_select": "select cars_data.cylinder_number",
        "select_candidates": [
            "select cars_data.cylinder_number",
            "select cars_data.cylinder_number, cars_data.engine",
            "select cars_data.cylinder_number, cars_data.Edispl",
            "select sum(cars_data.cylinder_number)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "model_list car_names cars_data",
            "car_makers cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.9617484211921692,
            0.3066903352737427,
            0.00035823287907987833,
            0.00025763866142369807,
            0.0004518655769061297,
            0.0002905273577198386,
            0.0073206606321036816,
            0.003526900429278612
        ],
        "align_select": "select cars_data.cylinder_number",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Accelerate",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.engine"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9621860384941101,
            0.0013478088658303022,
            0.00046208640560507774,
            0.0002972352667711675,
            0.000418550189351663,
            0.00016310707724187523,
            0.0003600002673920244,
            0.0004106077249161899
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Accelerate",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.engine"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9737866520881653,
            0.0005758209154009819,
            0.00047228322364389896,
            0.00014955762890167534,
            0.0004231985367368907,
            9.957162546925247e-05,
            0.00037151819560676813,
            0.0001787790679372847
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many cars has over 6 cylinders?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.cylinder_number",
            "select count(*), cars_data.cylinder_number, cars_data.engine",
            "select count(*), cars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9940642714500427,
            0.0007791265961714089,
            0.00023126798623707145,
            0.0002664298517629504,
            0.00010159766679862514,
            8.847739809425548e-05,
            0.0002797678462229669,
            0.00024079000286292285
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of carsw ith over 6 cylinders?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.cylinder_number",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.cylinder_number, cars_data.engine"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9932132959365845,
            0.00016561345546506345,
            0.0002127850748365745,
            0.00718937162309885,
            0.00026156759122386575,
            0.0004515148466452956,
            0.00010659656254574656,
            0.0001240805722773075
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, cars_data.cylinder_number",
            "select car_names.Model, car_names.Make",
            "select car_names.MakeId, car_names.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "car_makers cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.9618129134178162,
            0.00010249074694002047,
            0.0004302887537050992,
            6.580581975867972e-05,
            0.0005489091854542494,
            7.199971150839701e-05,
            0.0008643421460874379,
            9.476242848904803e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, cars_data.cylinder_number",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, cars_data.Accelerate"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "car_makers cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.95494145154953,
            0.00011157262633787468,
            0.0009716756758280098,
            7.712271326454356e-05,
            0.0004810009559150785,
            6.589730764972046e-05,
            0.004013170022517443,
            7.746545452391729e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "gold_select": "select car_names.MakeId, car_names.Make",
        "select_candidates": [
            "select car_names.MakeId, car_names.Make",
            "select car_makers.Id, car_names.Make",
            "select car_names.MakeId, car_names.Make",
            "select car_names.Model, car_names.Make"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9007434248924255,
            0.5555253028869629,
            0.7111538648605347,
            0.5436035394668579,
            0.9007434248924255,
            0.5555253028869629,
            0.001049237558618188,
            0.0004926859983243048
        ],
        "align_select": "select car_names.MakeId, car_names.Make",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Among the cars that do not have the minimum horsepower, what are the make ids and names of all those with less than 4 cylinders?",
        "gold_select": "select car_names.MakeId, car_names.Make",
        "select_candidates": [
            "select car_names.MakeId, car_names.Make",
            "select car_names.MakeId, car_names.Model",
            "select car_names.Make, car_names.Model",
            "select car_names.MakeId, car_names.Make, car_names.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9219397306442261,
            0.12498195469379425,
            0.9433760046958923,
            0.2498500496149063,
            0.917999804019928,
            0.25440672039985657,
            0.00225163740105927,
            0.0004456345341168344
        ],
        "align_select": "select car_names.MakeId, car_names.Make",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980?",
        "gold_select": "select max(cars_data.MPG)",
        "select_candidates": [
            "select max(cars_data.MPG)",
            "select max(cars_data.MPG), cars_data.cylinder_number",
            "select max(cars_data.MPG), cars_data.Year",
            "select max(cars_data.MPG), cars_data.Accelerate"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9916421175003052,
            0.00012152449926361442,
            0.00016240793047472835,
            6.774802750442177e-05,
            0.00013197351654525846,
            6.376063538482413e-05,
            0.0001997723593376577,
            6.729613232892007e-05
        ],
        "align_select": "select max(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980?",
        "gold_select": "select max(cars_data.MPG)",
        "select_candidates": [
            "select max(cars_data.MPG)",
            "select max(cars_data.MPG), cars_data.cylinder_number",
            "select max(cars_data.MPG), cars_data.Year",
            "select max(cars_data.MPG), cars_data.engine"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9765095710754395,
            0.1504601389169693,
            0.00017642221064306796,
            0.00014213826216291636,
            0.00011888293374795467,
            7.532150630140677e-05,
            0.00013960998330730945,
            9.030810906551778e-05
        ],
        "align_select": "select max(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "gold_select": "select distinct model_list.model_name",
        "select_candidates": [
            "select model_list.model_name",
            "select car_names.Model",
            "select car_makers.Maker, car_makers.FullName",
            "select model_list.Maker"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list cars_data",
            "car_makers model_list car_names",
            "countries car_makers model_list cars_data",
            "countries car_makers model_list car_names",
            "continents car_makers model_list cars_data",
            "continents car_makers model_list car_names"
        ],
        "align_scores": [
            0.8841568827629089,
            0.6067376732826233,
            0.9264947772026062,
            0.7630136013031006,
            0.0002794498286675662,
            0.0002504316216800362,
            0.9578632116317749,
            0.8697727918624878
        ],
        "align_select": "select model_list.model_name",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "gold_select": "select distinct model_list.model_name",
        "select_candidates": [
            "select distinct model_list.model_name",
            "select distinct car_names.Model",
            "select distinct model_list.Maker",
            "select distinct model_list.model_name, car_makers.Maker"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers model_list cars_data",
            "countries car_makers model_list car_names",
            "continents car_makers model_list car_names"
        ],
        "align_scores": [
            0.3676212430000305,
            0.3676212430000305,
            0.27977851033210754,
            0.27977851033210754,
            0.24596354365348816,
            0.24596354365348816,
            0.0020518330857157707,
            0.0020518330857157707
        ],
        "align_select": "select distinct model_list.model_name",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Which are the car makers which produce at least 2 models and more than 3 car makers? List the id and the maker.",
        "gold_select": "select car_makers.Id, car_makers.Maker",
        "select_candidates": [
            "select car_makers.Id, car_makers.Maker",
            "select car_names.MakeId, car_makers.Maker",
            "select model_list.ModelId, car_makers.Maker",
            "select car_names.Model, car_makers.Maker"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers car_names",
            "model_list car_names",
            "countries model_list car_names"
        ],
        "align_scores": [
            0.03181135281920433,
            0.009719659574329853,
            0.021591808646917343,
            0.007871975190937519,
            0.002623553853482008,
            0.0014104981673881412,
            0.00021205836674198508,
            0.00014102569548413157
        ],
        "align_select": "select car_makers.Id, car_makers.Maker",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "gold_select": "select car_makers.Id, car_makers.Maker",
        "select_candidates": [
            "select car_makers.Id, car_makers.Maker",
            "select model_list.ModelId, car_makers.Maker",
            "select car_names.Model, car_makers.Id",
            "select car_names.Make, car_makers.Maker"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names",
        "table_candidates": [
            "car_makers model_list car_names",
            "countries car_makers model_list car_names",
            "continents car_makers model_list car_names",
            "model_list car_names",
            "countries model_list car_names"
        ],
        "align_scores": [
            0.8882565498352051,
            0.09909139573574066,
            0.00032564191496931016,
            0.0003658570349216461,
            0.0006561435875482857,
            0.0006945886998437345,
            0.0011057256488129497,
            0.0003754174686037004
        ],
        "align_select": "select car_makers.Id, car_makers.Maker",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "gold_select": "select countries.CountryId, countries.CountryName",
        "select_candidates": [
            "select countries.CountryId, countries.CountryName",
            "select car_makers.Id, countries.CountryName",
            "select car_names.Model, countries.CountryId, countries.CountryName",
            "select countries.CountryId, countries.CountryName, car_makers.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "countries car_makers car_names",
            "countries car_makers model_list car_names",
            "countries model_list car_names",
            "countries car_makers",
            "countries car_makers model_list"
        ],
        "align_scores": [
            0.987210750579834,
            0.12918859720230103,
            0.2868495583534241,
            0.007429586257785559,
            0.0002956384269054979,
            0.00016156365745700896,
            0.000373276969185099,
            0.00021555258717853576
        ],
        "align_select": "select countries.CountryId, countries.CountryName",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model?",
        "gold_select": "select countries.CountryId, countries.CountryName",
        "select_candidates": [
            "select countries.CountryId, countries.CountryName",
            "select car_names.Model, countries.CountryId, countries.CountryName",
            "select car_makers.Id, countries.CountryName",
            "select countries.CountryId, countries.CountryName, car_makers.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "countries car_makers model_list car_names",
            "countries car_makers car_names",
            "countries car_makers model_list"
        ],
        "align_scores": [
            0.9835463762283325,
            0.9861204028129578,
            0.00027212969143874943,
            0.0003385879972483963,
            0.11172440648078918,
            0.22549127042293549,
            0.0004425630031619221,
            0.0005675898864865303
        ],
        "align_select": "select countries.CountryId, countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
    },
    {
        "question": "How many models does each car maker produce? List maker full name, id and the number.",
        "gold_select": "select car_makers.FullName, car_makers.Id, count(*)",
        "select_candidates": [
            "select car_makers.FullName, car_names.MakeId, count(*)",
            "select car_makers.FullName, car_names.Model, count(*)",
            "select car_makers.FullName, car_makers.Id, count(*)",
            "select car_makers.FullName, car_names.manufacture, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers car_names",
            "car_makers model_list car_names",
            "car_makers car_makers model_list car_names",
            "car_makers model_list",
            "car_makers car_makers car_names",
            "car_makers model_list car_makers car_names",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.00662577897310257,
            0.0002472844789735973,
            0.0002944502339232713,
            0.00027034900267608464,
            0.9354317784309387,
            0.00031885108910501003,
            0.00027399376267567277,
            0.00026222006999887526
        ],
        "align_select": "select car_makers.FullName, car_makers.Id, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the full name of each car maker, along with its id and how many models it produces?",
        "gold_select": "select car_makers.FullName, car_makers.Id, count(*)",
        "select_candidates": [
            "select car_makers.FullName, car_names.MakeId, count(*)",
            "select car_makers.Maker, car_names.MakeId, count(*)",
            "select car_makers.FullName, car_names.Model, count(*)",
            "select car_makers.Maker, car_names.Model, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers car_names",
            "car_makers model_list car_names"
        ],
        "align_scores": [
            0.005799705162644386,
            0.00024807744193822145,
            0.008971470408141613,
            0.00019331913790665567,
            0.0005162289598956704,
            0.0001676935062278062,
            0.0013299437705427408,
            0.00016093451995402575
        ],
        "align_select": "select car_makers.FullName, car_names.MakeId, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Find the model of the car whose weight is below the average weight.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select car_names.Model",
            "select model_list.ModelId, model_list.Model",
            "select car_names.Model, car_names.manufacture"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "car_makers model_list car_names cars_data",
            "car_names cars_data",
            "continents model_list car_names cars_data",
            "countries car_names cars_data",
            "car_makers car_names cars_data"
        ],
        "align_scores": [
            0.9815342426300049,
            6.790493353037164e-05,
            0.9913051128387451,
            6.780256808269769e-05,
            0.00020242820028215647,
            6.569402466993779e-05,
            0.0002537629334256053,
            6.116998702054843e-05
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the model for the car with a weight smaller than the average?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select model_list.ModelId, model_list.Model",
            "select model_list.Model, car_names.Model",
            "select car_names.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "car_makers model_list car_names cars_data",
            "car_names cars_data",
            "continents model_list car_names cars_data",
            "countries car_names cars_data",
            "model_list cars_data",
            "car_makers car_names cars_data",
            "car_makers model_list cars_data"
        ],
        "align_scores": [
            0.9893448948860168,
            6.25544271315448e-05,
            0.0001798660377971828,
            5.8667919802246615e-05,
            0.0002095951058436185,
            5.809088543173857e-05,
            0.9913359880447388,
            6.32893352303654e-05
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the name of the makers that produced some cars in the year of 1970?",
        "gold_select": "select distinct car_makers.Maker",
        "select_candidates": [
            "select car_makers.FullName, car_makers.Maker",
            "select car_makers.Maker, car_makers.FullName",
            "select car_makers.FullName",
            "select car_makers.Maker"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "car_makers car_names",
            "car_makers model_list car_names cars_data",
            "continents car_makers car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.0003991229459643364,
            7.143658876884729e-05,
            0.0003570220433175564,
            7.233390351757407e-05,
            0.7215805649757385,
            0.0002875046629924327,
            0.9692379236221313,
            0.001314473687671125
        ],
        "align_select": "select car_makers.Maker",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name of the different car makers who produced a car in 1970?",
        "gold_select": "select distinct car_makers.Maker",
        "select_candidates": [
            "select distinct car_makers.FullName, car_makers.Maker",
            "select distinct car_makers.Maker, car_makers.FullName",
            "select distinct car_makers.FullName",
            "select distinct car_makers.Maker"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names",
            "car_makers car_names cars_data",
            "car_makers cars_data",
            "continents car_makers car_names"
        ],
        "align_scores": [
            0.0004664957523345947,
            7.654025102965534e-05,
            0.0005942312418483198,
            7.654076762264594e-05,
            0.9575826525688171,
            0.00029225728940218687,
            0.990705668926239,
            0.000356165983248502
        ],
        "align_select": "select distinct car_makers.Maker",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the make and production time of the cars that were produced in the earliest year?",
        "gold_select": "select car_names.manufacture, cars_data.Year",
        "select_candidates": [
            "select car_names.Model, car_names.manufacture",
            "select car_names.MakeId, car_names.manufacture",
            "select car_names.MakeId, car_names.Model, car_names.manufacture",
            "select car_names.manufacture, car_names.MakeId"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "continents car_names cars_data",
            "countries car_names cars_data"
        ],
        "align_scores": [
            0.4253860414028168,
            7.11614266037941e-05,
            0.8958142399787903,
            6.914952246006578e-05,
            0.0005030185566283762,
            6.180882337503135e-05,
            0.0031172940507531166,
            6.995297007961199e-05
        ],
        "align_select": "select car_names.MakeId, car_names.manufacture",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the maker of the carr produced in the earliest year and what year was it?",
        "gold_select": "select car_names.manufacture, cars_data.Year",
        "select_candidates": [
            "select car_makers.Maker, cars_data.Year",
            "select car_makers.Maker, t4.c7",
            "select car_names.Model, cars_data.Year",
            "select model_list.builder, cars_data.Year"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "model_list car_makers car_names cars_data",
            "countries car_makers car_names cars_data",
            "continents car_makers car_names cars_data",
            "car_names cars_data",
            "car_makers car_names"
        ],
        "align_scores": [
            0.9854918122291565,
            6.989816756686196e-05,
            0.0006452759262174368,
            0.0001228748878929764,
            0.0026338500902056694,
            7.147801079554483e-05,
            0.9244027137756348,
            7.783249748172238e-05
        ],
        "align_select": "select car_makers.Maker, cars_data.Year",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "How many car models are produced by each maker? Only list the count and the maker full name.",
        "gold_select": "select count(*), car_makers.FullName",
        "select_candidates": [
            "select count(*), car_makers.Maker, car_makers.FullName",
            "select count(*), car_makers.FullName",
            "select count(*), car_makers.Maker",
            "select car_makers.Maker, car_makers.FullName"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers car_names",
            "car_makers model_list car_names"
        ],
        "align_scores": [
            0.0006834593950770795,
            0.0001183807835332118,
            0.98117595911026,
            0.00021888513583689928,
            0.99347323179245,
            0.0002408046566415578,
            0.002853330224752426,
            0.0001602295524207875
        ],
        "align_select": "select count(*), car_makers.Maker",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
        "gold_select": "select count(*), car_makers.FullName, car_makers.Id",
        "select_candidates": [
            "select count(*), car_makers.Id, car_makers.FullName",
            "select car_makers.Id, car_makers.Maker, car_makers.FullName",
            "select count(*), car_makers.Maker, car_makers.FullName",
            "select count(*), car_makers.Id, car_makers.Maker, car_makers.FullName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers car_names"
        ],
        "align_scores": [
            0.9560602903366089,
            0.0002456054207868874,
            0.0005134360399097204,
            0.00013598652731161565,
            0.06820999830961227,
            0.00015835254453122616,
            0.00384653196670115,
            0.00011300311598461121
        ],
        "align_select": "select count(*), car_makers.Id, car_makers.FullName",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "gold_select": "select cars_data.Accelerate",
        "select_candidates": [
            "select avg(cars_data.Accelerate)",
            "select max(cars_data.Accelerate)",
            "select cars_data.Accelerate",
            "select accelet(cars_data.Accelerate)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "continents car_names cars_data",
            "countries car_names cars_data"
        ],
        "align_scores": [
            0.010752145200967789,
            6.513155676657334e-05,
            0.001193607342429459,
            7.101452501956373e-05,
            0.9945809245109558,
            9.815517842071131e-05,
            0.001465379260480404,
            7.231251947814599e-05
        ],
        "align_select": "select cars_data.Accelerate",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "gold_select": "select cars_data.Accelerate",
        "select_candidates": [
            "select avg(cars_data.Accelerate)",
            "select cars_data.Accelerate",
            "select accel(cars_data.Accelerate)",
            "select sum(cars_data.Accelerate)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "continents car_names cars_data",
            "countries car_names cars_data"
        ],
        "align_scores": [
            0.032423071563243866,
            6.64397157379426e-05,
            0.9759837985038757,
            0.00012204557424411178,
            0.0010832950938493013,
            8.39977219584398e-05,
            0.9080517292022705,
            7.27323058526963e-05
        ],
        "align_select": "select cars_data.Accelerate",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many car models are produced in the usa?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct car_names.Model)",
            "select count(*), countries.CountryId",
            "select count(*), car_makers.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "countries car_makers car_names",
            "countries car_makers model_list car_names",
            "countries model_list car_names",
            "countries car_names"
        ],
        "align_scores": [
            0.9936060905456543,
            0.0034735859371721745,
            0.16702456772327423,
            0.00017829799617175013,
            0.00020887350547127426,
            0.00025986641412600875,
            0.0002857107319869101,
            0.003852502442896366
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the count of the car models produced in the United States?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct car_names.Model)",
            "select count(*), car_makers.Id",
            "select count(car_names.Model)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "car_makers car_names",
            "countries car_makers car_names",
            "car_makers model_list car_names",
            "continents car_makers car_names",
            "model_list car_makers car_names"
        ],
        "align_scores": [
            0.9917306303977966,
            0.03911377862095833,
            0.03816035017371178,
            0.0001304826873820275,
            0.00023313562269322574,
            0.007470363285392523,
            0.9928596019744873,
            0.002686563180759549
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
        "gold_select": "select avg(cars_data.miles_per_gallon)",
        "select_candidates": [
            "select avg(cars_data.miles_per_gallon)",
            "select an avg(cars_data.miles_per_gallon)",
            "select  avg(cars_data.miles_per_gallon)",
            "select avg(cars_data.miles_per_gallon)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.994941771030426,
            0.00010083844972541556,
            0.00033513919333927333,
            0.00010206075239693746,
            0.994941771030426,
            0.00010083844972541556,
            0.994941771030426,
            0.00010083844972541556
        ],
        "align_select": "select avg(cars_data.miles_per_gallon)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
        "gold_select": "select avg(cars_data.miles_per_gallon)",
        "select_candidates": [
            "select avg(cars_data.miles_per_gallon)",
            "select an avg(cars_data.miles_per_gallon)",
            "select  avg(cars_data.miles_per_gallon)",
            "select avg(avg(cars_data.miles_per_gallon)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9947484135627747,
            0.00046194327296689153,
            0.00031575464527122676,
            0.00011992152576567605,
            0.9947484135627747,
            0.00046194327296689153,
            0.0004017007886432111,
            0.00012376294762361795
        ],
        "align_select": "select avg(cars_data.miles_per_gallon)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the smallest weight of the car produced with 8 cylinders on 1974?",
        "gold_select": "select min(cars_data.heaviness)",
        "select_candidates": [
            "select min(cars_data.heaviness)",
            "select min(cars_data.heaviness), cars_data.Cylinders",
            "select min(cars_data.heaviness), cars_data.Year",
            "select min(cars_data.heaviness), cars_data.Accelerate"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data",
            "countries cars_data",
            "cars_data car_names cars_data"
        ],
        "align_scores": [
            0.994239091873169,
            9.181239875033498e-05,
            0.00017304859647992998,
            6.523486808873713e-05,
            0.00012914348917547613,
            6.203866360010579e-05,
            0.00015382529818452895,
            5.972760482109152e-05
        ],
        "align_select": "select min(cars_data.heaviness)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the minimum weight of the car with 8 cylinders produced in 1974?",
        "gold_select": "select min(cars_data.heaviness)",
        "select_candidates": [
            "select min(cars_data.heaviness)",
            "select min(cars_data.heaviness), cars_data.Year",
            "select min(cars_data.heaviness), cars_data.Accelerate",
            "select min(cars_data.heaviness), cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "model_list car_names cars_data",
            "countries cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9928267002105713,
            8.674033597344533e-05,
            0.00013967989070806652,
            6.447847408708185e-05,
            0.00016873478307388723,
            6.310541357379407e-05,
            0.0002081569837173447,
            6.738424417562783e-05
        ],
        "align_select": "select min(cars_data.heaviness)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are all the makers and models?",
        "gold_select": "select model_list.builder, model_list.Model",
        "select_candidates": [
            "select car_makers.Maker, model_list.Model",
            "select model_list.builder, model_list.Model",
            "select car_makers.Maker, car_makers.FullName",
            "select car_names.Model, model_list.Model"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "model_list car_names",
            "countries model_list car_names",
            "countries car_makers model_list car_names",
            "continents car_makers model_list car_names",
            "car_makers model_list",
            "continents model_list car_names"
        ],
        "align_scores": [
            0.9301478266716003,
            0.00010666600428521633,
            0.8791177868843079,
            0.00014058919623494148,
            0.0006560288602486253,
            0.0001477254554629326,
            0.0013618071097880602,
            0.0001694496750133112
        ],
        "align_select": "select car_makers.Maker, model_list.Model",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the makers and models?",
        "gold_select": "select model_list.builder, model_list.Model",
        "select_candidates": [
            "select car_makers.Maker, model_list.Model",
            "select model_list.builder, model_list.Model",
            "select t2, model_list.builder, model_list.Model",
            "select car_makers.Maker, car_makers.FullName"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "model_list car_names",
            "countries car_makers model_list car_names",
            "countries model_list car_names",
            "continents car_makers model_list car_names",
            "car_makers model_list",
            "countries car_makers model_list"
        ],
        "align_scores": [
            0.984262228012085,
            0.0015050832880660892,
            0.7978619933128357,
            0.005740470252931118,
            0.00035416867467574775,
            0.00021781671966891736,
            0.0006077053840272129,
            0.0002148457133444026
        ],
        "align_select": "select car_makers.Maker, model_list.Model",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the average weight of cars each year?",
        "gold_select": "select avg(cars_data.heaviness), cars_data.Year",
        "select_candidates": [
            "select avg(cars_data.heaviness), cars_data.Year",
            "select cars_data.Year, avg(cars_data.heaviness)",
            "select an avg(cars_data.heaviness), cars_data.Year",
            "select accu(cars_data.heaviness), cars_data.Year"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9930713772773743,
            0.0001363807823508978,
            0.9957925081253052,
            0.00012190391134936363,
            0.00024506135378032923,
            0.00011691833788063377,
            0.0007343604229390621,
            0.00010523912351345643
        ],
        "align_select": "select avg(cars_data.heaviness), cars_data.Year",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the average weight and year for each year?",
        "gold_select": "select avg(cars_data.heaviness), cars_data.Year",
        "select_candidates": [
            "select avg(cars_data.heaviness), avg(cars_data.Year), cars_data.Year",
            "select avg(cars_data.heaviness), cars_data.Year",
            "select avg(cars_data.heaviness), avg(cars_data.Year),",
            "select avg(cars_data.Accelerate), avg(cars_data.Year), cars_data.Year"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.00040084600914269686,
            6.267235585255548e-05,
            0.9583069682121277,
            0.00013812718680128455,
            0.0006605685921385884,
            0.00013031557318754494,
            7.963791722431779e-05,
            6.700407539028674e-05
        ],
        "align_select": "select avg(cars_data.heaviness), cars_data.Year",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "gold_select": "select cars_data.Horsepower, car_names.manufacture",
        "select_candidates": [
            "select max(cars_data.Horsepower), car_names.manufacture",
            "select max(cars_data.Horsepower), car_names.manufacture)",
            "select max(cars_data.Horsepower), car_names.Model",
            "select max(cars_data.Horsepower), cars_data.Cylinders"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "car_makers cars_data",
            "continents car_names cars_data",
            "model_list cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.9880589842796326,
            0.0001567739964229986,
            0.001099820132367313,
            0.00010805553029058501,
            0.9955241680145264,
            0.00015281277592293918,
            0.0005182247259654105,
            8.670040551805869e-05
        ],
        "align_select": "select max(cars_data.Horsepower), car_names.manufacture",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "gold_select": "select cars_data.Horsepower, car_names.manufacture",
        "select_candidates": [
            "select max(cars_data.Horsepower), car_names.manufacture",
            "select car_names.Model, car_names.manufacture",
            "select max(cars_data.Horsepower), car_names.Model",
            "select min(cars_data.Horsepower), car_names.manufacture"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "countries car_names cars_data",
            "car_makers cars_data",
            "model_list car_names cars_data",
            "continents car_names cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.0004144541744608432,
            9.490051161265001e-05,
            0.991638720035553,
            0.0004599852836690843,
            0.00054865179117769,
            9.027332998812199e-05,
            0.0003439307620283216,
            0.00021343813568819314
        ],
        "align_select": "select car_names.Model, car_names.manufacture",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select car_names.Model",
            "select model_list.ModelId, model_list.Model",
            "select model_list.Model, cars_data.miles_per_gallon"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list cars_data",
            "model_list car_names cars_data",
            "car_makers model_list cars_data",
            "countries model_list cars_data",
            "continents model_list cars_data",
            "car_names cars_data"
        ],
        "align_scores": [
            0.9800177812576294,
            0.9930678606033325,
            0.9710935354232788,
            0.9913430213928223,
            0.00048716101446188986,
            0.0008297109743580222,
            0.003163265297189355,
            0.008096984587609768
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the car model with the highest mpg?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.manufacture",
            "select car_names.Model, cars_data.Cylinders",
            "select car_names.Model, cars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.988652765750885,
            7.288894994417205e-05,
            0.0008227900834754109,
            5.713074278901331e-05,
            0.0005842067766934633,
            6.116118311183527e-05,
            0.0003425768227316439,
            6.388882320607081e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "How many car models were produced by the maker with full name American Motor Company?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(car_names.Model)",
            "select count(distinct car_names.Model)",
            "select count(*), car_makers.Maker"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers car_names",
            "car_makers model_list car_names",
            "countries car_makers car_names",
            "car_makers model_list car_makers car_names",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9923270344734192,
            0.0013227274175733328,
            0.9947698712348938,
            0.0011274360585957766,
            0.7856593728065491,
            0.0002827817515935749,
            0.0004235607630107552,
            0.11256683617830276
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of car models created by the car maker American Motor Company?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct car_names.Model)",
            "select count(*), car_makers.Id",
            "select count(*), car_makers.Maker, car_makers.FullName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers car_names",
            "car_makers model_list car_makers car_names",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9931821227073669,
            7.967476267367601e-05,
            0.14026987552642822,
            8.005234849406406e-05,
            0.0004703117301687598,
            7.110911974450573e-05,
            0.00014072573685552925,
            6.048021532478742e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which makers designed more than 3 car models? List full name and the id.",
        "gold_select": "select car_makers.FullName, car_makers.Id",
        "select_candidates": [
            "select car_makers.FullName, car_makers.Id",
            "select car_makers.Maker, car_makers.FullName, car_makers.Id",
            "select t2.c4, car_makers.FullName, car_makers.Id",
            "select car_makers.FullName, model_list.builder, car_makers.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers car_names",
            "car_makers model_list car_names",
            "car_makers car_makers model_list car_names",
            "car_makers car_makers car_names",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9684228897094727,
            0.00012742909893859178,
            0.0004929009592160583,
            8.186310151359066e-05,
            0.000373147486243397,
            7.015959999989718e-05,
            0.0004005074151791632,
            8.414725016336888e-05
        ],
        "align_select": "select car_makers.FullName, car_makers.Id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the names and ids of all makers with more than 3 models?",
        "gold_select": "select car_makers.FullName, car_makers.Id",
        "select_candidates": [
            "select car_makers.FullName, car_makers.Id",
            "select car_makers.Maker, car_makers.Id",
            "select car_makers.FullName, car_names.MakeId",
            "select car_makers.FullName, model_list.ModelId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers car_names",
            "countries model_list car_names",
            "car_makers model_list",
            "model_list car_names"
        ],
        "align_scores": [
            0.9504768252372742,
            0.00011751409329008311,
            0.9803354740142822,
            0.00010370498057454824,
            0.0171353816986084,
            8.824383257888258e-05,
            0.0006227758130989969,
            8.244768832810223e-05
        ],
        "align_select": "select car_makers.FullName, car_makers.Id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select distinct model_list.Model",
            "select distinct car_names.Model",
            "select distinct car_names.Model, car_names.manufacture",
            "select distinct model_list.Model, model_list.ModelId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list car_names cars_data",
            "car_makers model_list car_names",
            "car_makers model_list car_makers car_names cars_data",
            "model_list car_makers car_names cars_data",
            "car_makers model_list cars_data"
        ],
        "align_scores": [
            0.9463996291160583,
            0.015176201239228249,
            0.9651212692260742,
            0.10052487254142761,
            0.00022886425722390413,
            0.0001063060262822546,
            0.00029272970277816057,
            0.00013132499589119107
        ],
        "align_select": "select distinct model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select distinct model_list.Model",
            "select count(distinct model_list.Model)",
            "select distinct model_list.Model, model_list.ModelId",
            "select distinct model_list.Model.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers model_list car_makers car_names cars_data",
            "countries car_makers model_list car_names cars_data",
            "car_makers model_list car_names",
            "continents car_makers model_list car_names cars_data",
            "car_makers model_list cars_data"
        ],
        "align_scores": [
            0.9897012710571289,
            0.00036625354550778866,
            0.0018340975511819124,
            9.18700170586817e-05,
            0.00022617392824031413,
            0.00010012165148509666,
            0.0011739754118025303,
            0.00014801732322666794
        ],
        "align_select": "select distinct model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In which years cars were produced weighing no less than 3000 and no more than 4000?",
        "gold_select": "select distinct cars_data.Year",
        "select_candidates": [
            "select cars_data.Year",
            "select distinct cars_data.Year",
            "select specific cars_data.Year",
            "select years(cars_data.Year)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "model_list cars_data",
            "car_names cars_data"
        ],
        "align_scores": [
            0.9773098230361938,
            0.00044615499791689217,
            0.14043419063091278,
            0.0002846302813850343,
            0.002285911003127694,
            0.00014829053543508053,
            0.001000939984805882,
            9.43959821597673e-05
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000?",
        "gold_select": "select distinct cars_data.Year",
        "select_candidates": [
            "select distinct cars_data.Year",
            "select cars_data.Year",
            "select different cars_data.Year",
            "select distinct cars_data.Year, t5.c8"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.004785803146660328,
            0.015139421448111534,
            0.8248753547668457,
            0.8884948492050171,
            0.002534568542614579,
            0.001202822313643992,
            0.0001234767260029912,
            0.00012239707575645298
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
    },
    {
        "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "gold_select": "select car_names.MakeId, car_names.manufacture",
        "select_candidates": [
            "select car_names.MakeId, car_names.manufacture",
            "select car_makers.Id, car_names.manufacture",
            "select car_names.Model, car_names.manufacture",
            "select car_names.manufacture, car_names.MakeId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "car_makers cars_data",
            "continents car_names cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.004347893875092268,
            0.000596841680817306,
            0.1860765516757965,
            0.05078081786632538,
            0.013198459520936012,
            0.0022246164735406637,
            0.001429561641998589,
            0.0009813728975132108
        ],
        "align_select": "select car_names.MakeId, car_names.manufacture",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Among the cars that do not have the minimum horsepower, what are the make ids and names of all those with less than 4 cylinders?",
        "gold_select": "select car_names.MakeId, car_names.manufacture",
        "select_candidates": [
            "select car_names.MakeId, car_names.Model",
            "select car_names.MakeId, car_names.Model, car_names.manufacture",
            "select car_makers.Id, car_names.Model",
            "select cars_data.Id, car_names.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9433760046958923,
            0.009420209564268589,
            0.0003902809985447675,
            0.00012888663331978023,
            0.8450591564178467,
            0.0069243996404111385,
            0.013039904646575451,
            0.0011911290930584073
        ],
        "align_select": "select car_names.MakeId, car_names.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980?",
        "gold_select": "select max(cars_data.miles_per_gallon)",
        "select_candidates": [
            "select max(cars_data.miles_per_gallon)",
            "select max(cars_data.miles_per_gallon), cars_data.Cylinders",
            "select max(cars_data.miles_per_gallon), cars_data.Year",
            "select max(cars_data.miles_per_gallon) delegated to cars_data.miles_per_gallon"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9922235608100891,
            0.00010113495955010876,
            0.00013848657545167953,
            6.575932638952509e-05,
            0.0001294696266995743,
            6.36702316114679e-05,
            0.000319209648296237,
            6.951090472284704e-05
        ],
        "align_select": "select max(cars_data.miles_per_gallon)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980?",
        "gold_select": "select max(cars_data.miles_per_gallon)",
        "select_candidates": [
            "select max(cars_data.miles_per_gallon)",
            "select max(cars_data.miles_per_gallon), cars_data.Cylinders",
            "select max(cars_data.miles_per_gallon), cars_data.Year",
            "select max(cars_data.miles_per_gallon), t5.c8"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9742480516433716,
            0.02901126816868782,
            0.0002074615185847506,
            0.0001285164908040315,
            0.00015396528760902584,
            8.116375101963058e-05,
            0.00025510514387860894,
            0.000125802107504569
        ],
        "align_select": "select max(cars_data.miles_per_gallon)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select model_list.Model",
            "select car_names.Model",
            "select car_makers.Maker, model_list.Model",
            "select model_list.builder"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list cars_data",
            "countries car_makers model_list cars_data",
            "continents car_makers model_list cars_data",
            "car_makers model_list car_names",
            "car_makers model_list car_names cars_data",
            "car_makers car_names cars_data"
        ],
        "align_scores": [
            0.9067817330360413,
            0.9067817330360413,
            0.9264947772026062,
            0.9264947772026062,
            0.0003647491103038192,
            0.0003647491103038192,
            0.08411496132612228,
            0.08411496132612228
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select distinct model_list.Model",
            "select distinct car_names.Model",
            "select distinct model_list.ModelId",
            "select distinct car_names.manufacture"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list cars_data",
            "countries car_makers model_list cars_data",
            "car_makers model_list car_names cars_data",
            "continents car_makers model_list cars_data",
            "car_makers model_list car_names",
            "car_makers car_names cars_data"
        ],
        "align_scores": [
            0.24196510016918182,
            0.24196510016918182,
            0.27977851033210754,
            0.27977851033210754,
            0.3883489668369293,
            0.3883489668369293,
            0.2890891134738922,
            0.2890891134738922
        ],
        "align_select": "select distinct model_list.Model",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Which are the car makers which produce at least 2 models and more than 3 car makers? List the id and the maker.",
        "gold_select": "select car_makers.Id, car_makers.Maker",
        "select_candidates": [
            "select car_makers.Id, car_makers.Maker",
            "select car_names.MakeId, car_makers.Maker",
            "select model_list.ModelId, car_makers.Maker",
            "select t2, car_makers.Id, car_makers.Maker"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names",
        "table_candidates": [
            "car_makers car_names",
            "car_makers model_list car_names",
            "countries car_makers car_names"
        ],
        "align_scores": [
            0.03181135281920433,
            0.009719659574329853,
            0.021591808646917343,
            0.007871975190937519,
            0.002623553853482008,
            0.0014104981673881412,
            0.00014952541096135974,
            0.00012067450006725267
        ],
        "align_select": "select car_makers.Id, car_makers.Maker",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "gold_select": "select car_makers.Id, car_makers.Maker",
        "select_candidates": [
            "select car_makers.Id, car_makers.Maker",
            "select car_names.manufacture, car_makers.Maker",
            "select car_names.MakeId, car_makers.Maker",
            "select car_names.Model, car_makers.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names",
        "table_candidates": [
            "car_makers car_names",
            "countries car_makers car_names",
            "car_makers model_list car_names",
            "continents car_makers car_names"
        ],
        "align_scores": [
            0.8882565498352051,
            0.09909139573574066,
            0.0009595228475518525,
            0.0005648241494782269,
            0.19609592854976654,
            0.028974371030926704,
            0.0006561435875482857,
            0.0006945886998437345
        ],
        "align_select": "select car_makers.Id, car_makers.Maker",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "gold_select": "select countries.CountryId, countries.CountryName",
        "select_candidates": [
            "select countries.CountryId, countries.CountryName",
            "select car_makers.Id, countries.CountryName",
            "select car_names.Model, countries.CountryId, countries.CountryName",
            "select countries.CountryId, countries.CountryName, car_makers.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "countries car_makers car_names",
            "countries car_makers model_list car_names",
            "countries model_list car_names",
            "countries car_makers"
        ],
        "align_scores": [
            0.987210750579834,
            0.12918859720230103,
            0.2868495583534241,
            0.007429586257785559,
            0.0002956384269054979,
            0.00016156365745700896,
            0.000373276969185099,
            0.00021555258717853576
        ],
        "align_select": "select countries.CountryId, countries.CountryName",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model?",
        "gold_select": "select countries.CountryId, countries.CountryName",
        "select_candidates": [
            "select countries.CountryId, countries.CountryName",
            "select car_names.Model, countries.CountryId, countries.CountryName",
            "select car_makers.Id, countries.CountryName",
            "select countries.CountryId, countries.CountryName, car_makers.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "countries car_makers car_names",
            "countries car_makers model_list car_names",
            "countries model_list car_names",
            "countries car_makers"
        ],
        "align_scores": [
            0.9835463762283325,
            0.1918887197971344,
            0.00027212969143874943,
            0.00019127147970721126,
            0.11172440648078918,
            0.01420933473855257,
            0.0004425630031619221,
            0.000301585765555501
        ],
        "align_select": "select countries.CountryId, countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
    },
    {
        "question": "Which country does Airline \"JetBlue Airways\" belong to?",
        "gold_select": "select airlines.nation",
        "select_candidates": [
            "select airlines.nation",
            "select airlines.nation, airlines.Abbreviation",
            "select airlines.nation, t0.c4",
            "select airlines.air_service, airlines.nation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines",
            "airlines airports",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9893052577972412,
            0.00017934764036908746,
            0.00027653833967633545,
            8.326966053573415e-05,
            0.0003826054453384131,
            7.787527283653617e-05,
            0.0003246626874897629,
            7.433685823343694e-05
        ],
        "align_select": "select airlines.nation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What country is Jetblue Airways affiliated with?",
        "gold_select": "select airlines.nation",
        "select_candidates": [
            "select airlines.nation",
            "select airlines.air_service, airlines.nation",
            "select airlines.nation, airports.Country",
            "select airlines.nation, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines",
            "airlines airports"
        ],
        "align_scores": [
            0.9348958134651184,
            0.0027991123497486115,
            0.000272109464276582,
            0.00010459055192768574,
            0.0003947321092709899,
            0.00015065069601405412,
            0.00033463601721450686,
            0.00012308478471823037
        ],
        "align_select": "select airlines.nation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "gold_select": "select airlines.Abbreviation",
        "select_candidates": [
            "select airlines.Abbreviation",
            "select airlines.air_service, airlines.Abbreviation",
            "select airlines.uid, airlines.Abbreviation",
            "select airlines.Abbreviation, airlines.air_service"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.995121419429779,
            0.00013592794130090624,
            0.00026028993306681514,
            6.805740849813446e-05,
            0.0001704950409475714,
            7.291931979125366e-05,
            0.0002092917711706832,
            6.489387305919081e-05
        ],
        "align_select": "select airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which abbreviation corresponds to Jetblue Airways?",
        "gold_select": "select airlines.Abbreviation",
        "select_candidates": [
            "select airlines.Abbreviation",
            "select airlines.air_service, airlines.Abbreviation",
            "select airlines.uid, airlines.Abbreviation",
            "select airlines.Abbreviation, airlines.air_service"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9751989841461182,
            9.154435247182846e-05,
            0.000276150502031669,
            6.347829184960574e-05,
            0.00016669282922521234,
            6.323492561932653e-05,
            0.00023190675710793585,
            6.42161539872177e-05
        ],
        "align_select": "select airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all airline names and their abbreviations in \"USA\".",
        "gold_select": "select airlines.air_service, airlines.Abbreviation",
        "select_candidates": [
            "select airlines.air_service, airlines.Abbreviation",
            "select airlines.uid, airlines.Abbreviation",
            "select airlines.Abbreviation, airlines.air_service",
            "select airlines.Abbreviation, airlines.nation"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.0016060806810855865,
            0.00010665796435205266,
            0.0004988381406292319,
            9.736502397572622e-05,
            0.001396171748638153,
            7.45144352549687e-05,
            0.0009777657687664032,
            9.683217649580911e-05
        ],
        "align_select": "select airlines.air_service, airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the airline names and abbreviations for airlines in the USA?",
        "gold_select": "select airlines.air_service, airlines.Abbreviation",
        "select_candidates": [
            "select airlines.air_service, airlines.Abbreviation",
            "select airlines.nation, airlines.Abbreviation",
            "select airlines.Abbreviation, airlines.nation",
            "select airlines.Abbreviation, airlines.air_service"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.0008365059038624167,
            0.00011362007353454828,
            0.0008308502146974206,
            9.834602678893134e-05,
            0.0008855644846335053,
            0.00010223373828921467,
            0.0009634914458729327,
            7.007983367657289e-05
        ],
        "align_select": "select airlines.air_service, airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the airport code and name in the city of Anthony.",
        "gold_select": "select airports.AirportCode, airports.airport_designation",
        "select_candidates": [
            "select airports.AirportCode, airports.airport_designation",
            "select airports.AirportCode.c1, airports.airport_designation",
            "select airports.capital, airports.airport_designation",
            "select airports.AirportCode, airports.airport_designation,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.98586106300354,
            7.50749750295654e-05,
            0.0004116409982088953,
            6.061087697162293e-05,
            0.0007734906976111233,
            5.946254532318562e-05,
            0.001167270471341908,
            6.612185097765177e-05
        ],
        "align_select": "select airports.AirportCode, airports.airport_designation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the airport code and airport name corresonding to the city Anthony.",
        "gold_select": "select airports.AirportCode, airports.airport_designation",
        "select_candidates": [
            "select airports.AirportCode, airports.airport_designation",
            "select airports.AirportCode.c1, airports.airport_designation",
            "select airports.capital, airports.airport_designation",
            "select airports.AirportCode, airports.airport_designation,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.9898526072502136,
            8.792740845819935e-05,
            0.00037211476592347026,
            6.649333226960152e-05,
            0.0009955269051715732,
            6.503665645141155e-05,
            0.0011568645713850856,
            6.760597898392007e-05
        ],
        "align_select": "select airports.AirportCode, airports.airport_designation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which airline has abbreviation 'UAL'?",
        "gold_select": "select airlines.air_service",
        "select_candidates": [
            "select airlines.uid",
            "select airlines.air_service",
            "select airlines.uid, airlines.air_service",
            "select t0.c, airlines.nation"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.008869301527738571,
            0.0001108348005800508,
            0.03142751380801201,
            0.00010700147686293349,
            0.00017030736489687115,
            6.39778227196075e-05,
            0.00028946317615918815,
            6.932434916961938e-05
        ],
        "align_select": "select airlines.uid",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the airline with abbreviation 'UAL'.",
        "gold_select": "select airlines.air_service",
        "select_candidates": [
            "select airlines.uid",
            "select airlines.air_service",
            "select airlines.uid, airlines.Abbreviation",
            "select airlines.uid, airlines.air_service"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.007087567821145058,
            7.840737816877663e-05,
            0.014451595954596996,
            8.006600546650589e-05,
            0.0001652837236179039,
            7.196182559709996e-05,
            0.00016775299445725977,
            6.131874397397041e-05
        ],
        "align_select": "select airlines.uid",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many airlines are from USA?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.nation",
            "select count(*), airlines.uid",
            "select count(*), airlines.air_service"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9947322607040405,
            6.864317401777953e-05,
            0.00026883400278165936,
            5.8525256463326514e-05,
            0.00026732016704045236,
            5.709958713850938e-05,
            0.000194468506379053,
            5.171041993889958e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the number of airlines in the USA.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.nation",
            "select count(*), airlines.nation, t0.c4",
            "select count(*), airlines.nation, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9954919815063477,
            0.0005250831018202007,
            0.0002005680580623448,
            0.00018435041420161724,
            0.00017694916459731758,
            9.100879833567888e-05,
            0.00012403240543790162,
            8.081713895080611e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which city and country is the Alton airport at?",
        "gold_select": "select airports.capital, airports.Country",
        "select_candidates": [
            "select airports.capital, airports.Country",
            "select airports.Country, airports.capital",
            "select airports.Country, airports.CountryAbbrev",
            "select airports.AirportCode, airports.Country"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.019303711131215096,
            8.832018647808582e-05,
            0.9534448385238647,
            0.00010041855421150103,
            0.0009491691016592085,
            7.288561027962714e-05,
            0.0004610269970726222,
            7.35121502657421e-05
        ],
        "align_select": "select airports.Country, airports.capital",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the city and country for the Alton airport.",
        "gold_select": "select airports.capital, airports.Country",
        "select_candidates": [
            "select airports.capital, airports.Country",
            "select airports.Country, airports.capital",
            "select airports.AirportCode, airports.Country",
            "select t1.co, airports.Country"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.007959781214594841,
            8.181291923392564e-05,
            0.9696500897407532,
            6.38553174212575e-05,
            0.00033903049188666046,
            7.144462870201096e-05,
            0.0004921724903397262,
            7.338243449339643e-05
        ],
        "align_select": "select airports.Country, airports.capital",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the airport name for airport 'AKO'?",
        "gold_select": "select airports.airport_designation",
        "select_candidates": [
            "select airports.airport_designation",
            "select avg(airports.airport_designation)",
            "select avg_airports.airport_designation",
            "select avg_designation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.9955130219459534,
            7.921770156826824e-05,
            0.0006581264897249639,
            5.403277464210987e-05,
            0.9806206822395325,
            6.0621390730375424e-05,
            0.0015980890020728111,
            6.565713556483388e-05
        ],
        "align_select": "select airports.airport_designation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the name of the airport with code 'AKO'.",
        "gold_select": "select airports.airport_designation",
        "select_candidates": [
            "select airports.airport_designation",
            "select avg(airports.airport_designation)",
            "select airports.airport_designation, airports.Country",
            "select airports.airport_designation, airports.Country, airports.CountryAbbrev"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.9963510036468506,
            0.00013282897998578846,
            0.0008375567267648876,
            6.561758345924318e-05,
            0.00016869908722583205,
            5.3811509133083746e-05,
            0.0001773160183802247,
            5.670217069564387e-05
        ],
        "align_select": "select airports.airport_designation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are airport names at City 'Aberdeen'?",
        "gold_select": "select airports.airport_designation",
        "select_candidates": [
            "select airports.airport_designation",
            "select airports.airport_designation, airports.AirportCode",
            "select airports.airport_designation, airports.AirportCode, airports.Country",
            "select avg_airports.airport_designation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.9960021376609802,
            0.00010311509686289355,
            0.00022312067449092865,
            6.922050670254976e-05,
            0.0001574805792188272,
            6.122302875155583e-05,
            0.9608350396156311,
            7.168628508225083e-05
        ],
        "align_select": "select airports.airport_designation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of airports in Aberdeen?",
        "gold_select": "select airports.airport_designation",
        "select_candidates": [
            "select airports.airport_designation",
            "select airports.airport_designation, airports.AirportCode",
            "select airports.capital, airports.airport_designation",
            "select airports.airport_designation, airports.AirportCode, airports.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.9955839514732361,
            9.592698916094378e-05,
            0.0003034492547158152,
            5.954714652034454e-05,
            0.00019279983825981617,
            6.124324136180803e-05,
            0.00016067002434283495,
            5.6831937399692833e-05
        ],
        "align_select": "select airports.airport_designation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many flights depart from 'APG'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct flights.flight_from)",
            "select count(*), flights.flight_from",
            "select count(flights.flight_from)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "flights",
            "airlines airports flights",
            "airports flights",
            "airlines flights"
        ],
        "align_scores": [
            0.9959380626678467,
            0.0001340210874332115,
            0.003523455234244466,
            8.710280962986872e-05,
            0.00022964963864069432,
            0.00015844800509512424,
            0.9866794943809509,
            0.0001195580989588052
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count the number of flights departing from 'APG'.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), flights.flight_from",
            "select count(*), airports.AirportCode",
            "select count(*), flights.aircraft_company"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "flights",
            "airlines airports flights",
            "airports flights",
            "airlines flights"
        ],
        "align_scores": [
            0.9958303570747375,
            0.00011318903125356883,
            0.00021662458311766386,
            0.000174616405274719,
            0.00030773840262554586,
            0.00015257835912052542,
            0.0003242181846871972,
            0.07046733051538467
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many flights depart from City Aberdeen?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct flights.flight_from)",
            "select count(*), airports.capital",
            "select count(flights.flight_from)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9956960678100586,
            0.0001549486769363284,
            0.0035141888074576855,
            8.998404518933967e-05,
            0.00036740946234203875,
            0.0005075163207948208,
            0.9548446536064148,
            0.0001273548841709271
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the number of flights departing from Aberdeen.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.capital",
            "select count(*), airports.capital, flights.flight_from",
            "select count(distinct flights.flight_from)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9956122636795044,
            0.00013118406059220433,
            0.0003586964448913932,
            0.00017944719002116472,
            0.00011814407480414957,
            7.575442577945068e-05,
            0.0008615304832346737,
            7.589744200231507e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many flights arriving in Aberdeen city?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.capital",
            "select count(avg(flights.flight_from)",
            "select count(flights.flight_from)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9959361553192139,
            0.00016819570737425238,
            0.0003087878867518157,
            0.0002992480876855552,
            0.00020677645807154477,
            0.00011029856977984309,
            0.0007537316414527595,
            9.842576400842518e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the number of flights arriving in Aberdeen.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.capital",
            "select count(flights.flight_from)",
            "select count(avg(flights.flight_from)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9956936836242676,
            0.00014720798935741186,
            0.0003398589324206114,
            0.00011743199138436466,
            0.0003322527918498963,
            8.97286954568699e-05,
            0.00016102952940855175,
            9.46209256653674e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.capital, airports.airport_designation",
            "select count(*), airports.capital (Aberdeen), airports.airport_designation",
            "select count(*), airports.capital (Aberdeen, airports.airport_designation)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9948039650917053,
            9.738313383422792e-05,
            0.00012505732593126595,
            6.649403076153249e-05,
            0.00020624324679374695,
            9.138874884229153e-05,
            0.0002103799779433757,
            0.00011074594658566639
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many flights fly from Aberdeen to Ashley?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.capital, airports.airport_designation",
            "select count(*), airports.capital (Aberdeen, airports.airport_designation)",
            "select count(*), airports.capital, airports.airport_designation, flights.flight_from"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9955410361289978,
            8.609141514170915e-05,
            0.0001167306472780183,
            5.413567123468965e-05,
            0.00018664938397705555,
            6.671912706224248e-05,
            0.00010893357830354944,
            5.550474816118367e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many flights does airline 'JetBlue Airways' have?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.air_service",
            "select count(*), airlines.air_service, airlines.Abbreviation",
            "select count(*) dependant on airlines.air_service, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9957541227340698,
            0.00022261004778556526,
            0.00035074478364549577,
            0.0001910547580337152,
            0.00015522906323894858,
            0.00010209131141891703,
            0.00015244587848428637,
            9.031878289533779e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the number of Jetblue Airways flights.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.air_service",
            "select count(*), airlines.air_service, flights.flight_from",
            "select count(*), airlines.air_service, flights.flight_from"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9959684610366821,
            0.0002755361783783883,
            0.00026776426238939166,
            0.0005875071510672569,
            9.217706974595785e-05,
            6.863656017230824e-05,
            9.217706974595785e-05,
            6.863656017230824e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.air_service",
            "select count(*), airlines.air_service, airports.AirportCode",
            "select count(*), airlines.air_service, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.993281364440918,
            0.00022108116536401212,
            0.00036714249290525913,
            0.00024558481527492404,
            0.00015507386706303805,
            0.00010190397733822465,
            0.00015507386706303805,
            0.00010190397733822465
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count the number of United Airlines flights arriving in ASY Airport.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.air_service",
            "select count(*), airlines.air_service, airports.AirportCode",
            "select count(*), airlines.air_service, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9826706051826477,
            0.0001843296631705016,
            0.00023338805476669222,
            0.0005551441572606564,
            0.00011975148663623258,
            0.00011618316057138145,
            0.00011975148663623258,
            0.00011618316057138145
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.air_service",
            "select count(*), airports.AirportCode",
            "select count(*), airlines.air_service, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9949435591697693,
            0.00022214655473362654,
            0.0003834143572021276,
            0.0004060976207256317,
            0.0002989221829921007,
            0.0003072491381317377,
            0.00015593536954838783,
            0.00010638593812473118
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the number of United Airlines flights leaving from AHD Airport.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.air_service",
            "select count(*), airlines.air_service, airports.AirportCode",
            "select count(*), airlines.air_service"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9861131310462952,
            0.0001793483243091032,
            0.00031126299290917814,
            0.0004744199104607105,
            0.00013823891640640795,
            0.00011755544983316213,
            0.00031126299290917814,
            0.0004744199104607105
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many United Airlines flights go to City 'Aberdeen'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.air_service",
            "select count(*), airlines.air_service, airports.capital",
            "select count(*), airlines.air_service, airports.airport_designation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines airports flights",
        "table_candidates": [
            "airlines airports flights",
            "airlines airports airports flights"
        ],
        "align_scores": [
            0.9951984286308289,
            7.118077337509021e-05,
            0.0003700403613038361,
            5.821571539854631e-05,
            0.00017320821643806994,
            6.726611172780395e-05,
            0.00012503800098784268,
            6.102857878431678e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.air_service",
            "select count(*), airlines.air_service, airports.airport_designation",
            "select count(*), airlines.air_service, airports.capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines airports flights",
        "table_candidates": [
            "airlines airports flights",
            "airlines airports airports flights"
        ],
        "align_scores": [
            0.9947240948677063,
            0.00024097140703815967,
            0.00030283018713817,
            0.0007526714471168816,
            0.00011876216012751684,
            9.031379158841446e-05,
            0.00014260241005104035,
            9.299311204813421e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which city has most number of arriving flights?",
        "gold_select": "select airports.capital",
        "select_candidates": [
            "select airports.capital",
            "select airports.capital, airports.Country",
            "select airports.capital, flights.DestAirport",
            "select airports.capital, flights.flight_from"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.17953559756278992,
            5.748761395807378e-05,
            0.0005168194766156375,
            6.429366476368159e-05,
            0.0002891242038458586,
            5.3465009841602296e-05,
            0.00032846874091774225,
            5.335479727364145e-05
        ],
        "align_select": "select airports.capital",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which city has the most frequent destination airport?",
        "gold_select": "select airports.capital",
        "select_candidates": [
            "select airports.capital",
            "select airports.capital, airports.Country",
            "select airports.capital, airports.airport_designation",
            "select airports.capital, airports.AirportCode, airports.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airports"
        ],
        "align_scores": [
            0.842981219291687,
            6.94858463248238e-05,
            0.0014455959899351,
            7.231686322484165e-05,
            0.0003745650756172836,
            6.223550735739991e-05,
            0.0001899402413982898,
            6.42518061795272e-05
        ],
        "align_select": "select airports.capital",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which city has most number of departing flights?",
        "gold_select": "select airports.capital",
        "select_candidates": [
            "select airports.capital",
            "select airports.capital, flights.flight_from",
            "select airports.capital, airports.Country",
            "select airports.capital, flights.DestAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.16779297590255737,
            5.6534583563916385e-05,
            0.0008622297318652272,
            5.608731953543611e-05,
            0.000715136353392154,
            6.615552410949022e-05,
            0.0003519563178997487,
            5.634480476146564e-05
        ],
        "align_select": "select airports.capital",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which city is the most frequent source airport?",
        "gold_select": "select airports.capital",
        "select_candidates": [
            "select airports.capital",
            "select airports.capital, airports.Country",
            "select airports.capital, airports.AirportCode",
            "select airports.capital, airports.AirportCode, airports.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.4126627743244171,
            7.386293145827949e-05,
            0.00033416738733649254,
            6.858292181277648e-05,
            0.00036183660267852247,
            6.386305176420137e-05,
            0.00016033621795941144,
            6.180782656883821e-05
        ],
        "align_select": "select airports.capital",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which airline has most number of flights?",
        "gold_select": "select airlines.air_service",
        "select_candidates": [
            "select airlines.Abbreviation",
            "select airlines.uid, airlines.Abbreviation",
            "select airlines.Abbreviation, airlines.nation",
            "select airlines.air_service, airlines.Abbreviation"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9928633570671082,
            5.789041460957378e-05,
            0.0016029045218601823,
            6.35040778433904e-05,
            0.001248301356099546,
            6.289189332164824e-05,
            0.0010022249771282077,
            6.439146818593144e-05
        ],
        "align_select": "select airlines.Abbreviation",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What airline serves the most flights?",
        "gold_select": "select airlines.air_service",
        "select_candidates": [
            "select airlines.Abbreviation",
            "select airlines.Abbreviation, airlines.air_service",
            "select airlines.uid, airlines.Abbreviation",
            "select airlines.Abbreviation, airlines.nation"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9937868118286133,
            5.929007238592021e-05,
            0.0010146449785679579,
            6.281242531258613e-05,
            0.0015629037516191602,
            6.40308135189116e-05,
            0.00044928459101356566,
            5.985195821267553e-05
        ],
        "align_select": "select airlines.Abbreviation",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "gold_select": "select airlines.Abbreviation, airlines.nation",
        "select_candidates": [
            "select airlines.Abbreviation, airlines.nation",
            "select airlines.air_service, airlines.nation",
            "select airlines.nation, airlines.Abbreviation",
            "select airlines.Abbreviation), airlines.nation"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9907662868499756,
            7.688964251428843e-05,
            0.06975734978914261,
            8.195275586331263e-05,
            0.9909297823905945,
            7.930477295303717e-05,
            0.007636331953108311,
            7.098595233401284e-05
        ],
        "align_select": "select airlines.Abbreviation, airlines.nation",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "gold_select": "select airlines.Abbreviation, airlines.nation",
        "select_candidates": [
            "select airlines.Abbreviation, airlines.nation",
            "select airlines.nation, airlines.Abbreviation",
            "select airlines.air_service, airlines.nation",
            "select airlines.Abbreviation, airlines.nation, airports.Country"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.988770604133606,
            8.568124030716717e-05,
            0.9891312122344971,
            8.715249714441597e-05,
            0.00782776065170765,
            6.81202654959634e-05,
            0.0004993400652892888,
            7.476533210137859e-05
        ],
        "align_select": "select airlines.Abbreviation, airlines.nation",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are airlines that have some flight departing from airport 'AHD'?",
        "gold_select": "select airlines.air_service",
        "select_candidates": [
            "select airlines.Abbreviation",
            "select airlines.Abbreviation, airlines.nation",
            "select airlines.air_service, airlines.Abbreviation",
            "select airlines.Abbreviation, flights.aircraft_company"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.42851579189300537,
            0.008699467405676842,
            0.0005810291040688753,
            0.0002124173624906689,
            0.0003712618781719357,
            0.00012050247460138053,
            0.0005443045520223677,
            0.0002195157139794901
        ],
        "align_select": "select airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which airlines have a flight with source airport AHD?",
        "gold_select": "select airlines.air_service",
        "select_candidates": [
            "select airlines.Abbreviation",
            "select airlines.Abbreviation, airlines.nation",
            "select airlines.Abbreviation, airlines.air_service",
            "select airlines.air_service, airlines.Abbreviation"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.7010940313339233,
            0.0033666074741631746,
            0.0009437721455469728,
            0.00023080625396687537,
            0.0003808476321864873,
            0.0001303595636272803,
            0.0003619594208430499,
            0.00010709415801102296
        ],
        "align_select": "select airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are airlines that have flights arriving at airport 'AHD'?",
        "gold_select": "select airlines.air_service",
        "select_candidates": [
            "select airlines.Abbreviation",
            "select airlines.Abbreviation, airlines.nation",
            "select airlines.air_service, airlines.Abbreviation",
            "select airlines.Abbreviation, flights.aircraft_company"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.4817849397659302,
            0.008787591010332108,
            0.000736438378226012,
            0.00020768240210600197,
            0.00038892938755452633,
            0.00011678518785629421,
            0.00048278371104970574,
            0.00018172695126850158
        ],
        "align_select": "select airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which airlines have a flight with destination airport AHD?",
        "gold_select": "select airlines.air_service",
        "select_candidates": [
            "select airlines.Abbreviation",
            "select airlines.Abbreviation, airlines.nation",
            "select airlines.Abbreviation, airlines.air_service",
            "select airlines.air_service, airlines.Abbreviation"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.4974612891674042,
            0.009156150743365288,
            0.0011910292087122798,
            0.00025726458989083767,
            0.00041499457438476384,
            0.00014306152297649533,
            0.0003510377719067037,
            0.00011726927186828107
        ],
        "align_select": "select airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "gold_select": "select airlines.air_service",
        "select_candidates": [
            "select airlines.uid",
            "select airlines.Abbreviation",
            "select flights.aircraft_company",
            "select airlines.uid, flights.plane_digits"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights",
            "airlines flights"
        ],
        "align_scores": [
            0.9949101805686951,
            0.9949101805686951,
            0.9820465445518494,
            0.9820465445518494,
            0.9885077476501465,
            0.9885077476501465,
            0.0001821672631194815,
            0.0001821672631194815
        ],
        "align_select": "select airlines.uid",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Which airlines have departing flights from both APG and CVO airports?",
        "gold_select": "select airlines.air_service",
        "select_candidates": [
            "select airlines.Abbreviation",
            "select airlines.uid",
            "select airlines.Abbreviation, airlines.nation",
            "select airlines.air_service, airlines.Abbreviation"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9894722104072571,
            0.9894722104072571,
            0.9841675162315369,
            0.9841675162315369,
            0.0007553682662546635,
            0.0007553682662546635,
            0.00035252817906439304,
            0.00035252817906439304
        ],
        "align_select": "select airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "gold_select": "select airlines.air_service",
        "select_candidates": [
            "select airlines.uid",
            "select airlines.Abbreviation",
            "select flights.aircraft_company",
            "select airlines.air_service"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9925991296768188,
            0.9925991296768188,
            0.9608603715896606,
            0.9608603715896606,
            0.9801502227783203,
            0.9801502227783203,
            0.9883126616477966,
            0.9883126616477966
        ],
        "align_select": "select airlines.uid",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Which airlines have departures from CVO but not from APG airports?",
        "gold_select": "select airlines.air_service",
        "select_candidates": [
            "select airlines.uid",
            "select airlines.Abbreviation",
            "select airlines.uid, airlines.Abbreviation",
            "select airlines.air_service, airlines.Abbreviation"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9833977222442627,
            0.9833977222442627,
            0.9875088334083557,
            0.9875088334083557,
            0.0011352591682225466,
            0.0011352591682225466,
            0.00042227189987897873,
            0.00042227189987897873
        ],
        "align_select": "select airlines.uid",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find all airlines that have at least 10 flights.",
        "gold_select": "select airlines.air_service",
        "select_candidates": [
            "select airlines.Abbreviation",
            "select airlines.uid",
            "select airlines.uid, airlines.Abbreviation",
            "select airlines.Abbreviation, airlines.nation"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9741266369819641,
            0.000106432729808148,
            0.9270811080932617,
            0.0001250037894351408,
            0.0019304832676425576,
            7.478830229956657e-05,
            0.0031840160954743624,
            8.115323726087809e-05
        ],
        "align_select": "select airlines.Abbreviation",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which airlines have at least 10 flights?",
        "gold_select": "select airlines.air_service",
        "select_candidates": [
            "select airlines.Abbreviation",
            "select airlines.uid, airlines.Abbreviation",
            "select airlines.Abbreviation, airlines.nation",
            "select airlines.nation, airlines.Abbreviation"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9762135744094849,
            0.0001258136035175994,
            0.0010056744795292616,
            8.637880091555417e-05,
            0.005390763748437166,
            9.697549103293568e-05,
            0.0009050825610756874,
            9.160215995507315e-05
        ],
        "align_select": "select airlines.Abbreviation",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find all airlines that have fewer than 200 flights.",
        "gold_select": "select airlines.air_service",
        "select_candidates": [
            "select airlines.uid",
            "select airlines.Abbreviation",
            "select airlines.uid, airlines.Abbreviation",
            "select airlines.air_service, airlines.Abbreviation"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.8082088828086853,
            0.00040897016879171133,
            0.949650228023529,
            0.00047643910511396825,
            0.0027583343908190727,
            0.00010221657430520281,
            0.0007883879588916898,
            8.600016008131206e-05
        ],
        "align_select": "select airlines.uid",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which airlines have less than 200 flights?",
        "gold_select": "select airlines.air_service",
        "select_candidates": [
            "select airlines.Abbreviation",
            "select airlines.uid",
            "select airlines.uid, airlines.Abbreviation",
            "select airlines.air_service, airlines.Abbreviation"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9832905530929565,
            0.000457146146800369,
            0.929098904132843,
            0.000498003966640681,
            0.0016479226760566235,
            0.00011251366959186271,
            0.00077642104588449,
            0.00010376451973570511
        ],
        "align_select": "select airlines.Abbreviation",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are flight numbers of Airline \"United Airlines\"?",
        "gold_select": "select flights.plane_digits",
        "select_candidates": [
            "select flights.flight_from",
            "select flights.flight_from, airlines.air_service",
            "select flights.aircraft_company, flights.flight_from",
            "select flights.plane_digits, flights.flight_from"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.014466822147369385,
            8.104696462396532e-05,
            0.00012048891221638769,
            5.344401142792776e-05,
            0.0001105506598833017,
            5.7609118812251836e-05,
            0.0001409848191542551,
            6.143879727460444e-05
        ],
        "align_select": "select flights.flight_from",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which flight numbers correspond to United Airlines flights?",
        "gold_select": "select flights.plane_digits",
        "select_candidates": [
            "select flights.flight_from",
            "select distinct flights.flight_from",
            "select flights.flight_from, airlines.air_service",
            "select flights.aircraft_company"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.02161327749490738,
            0.00010204964928561822,
            0.0006239042268134654,
            6.437949923565611e-05,
            0.00012777246593032032,
            5.688322926289402e-05,
            0.0010827205842360854,
            0.00033319395151920617
        ],
        "align_select": "select flights.flight_from",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are flight numbers of flights departing from Airport \"APG\"?",
        "gold_select": "select flights.plane_digits",
        "select_candidates": [
            "select flights.flight_from",
            "select flights.flight_from, flights.DestAirport",
            "select flights.aircraft_company",
            "select flights.flight_from, airports.AirportCode"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9880979657173157,
            7.466082024620846e-05,
            0.00011188457574462518,
            5.6205808505183086e-05,
            0.0006743241683579981,
            0.00013167608994990587,
            0.00014826792175881565,
            6.037619823473506e-05
        ],
        "align_select": "select flights.flight_from",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the flight numbers of flights leaving from APG.",
        "gold_select": "select flights.plane_digits",
        "select_candidates": [
            "select flights.flight_from",
            "select flights.flight_from, flights.DestAirport",
            "select flights.aircraft_company",
            "select flights.flight_from decrementing flights.DestAirport"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "flights",
            "airlines airports flights",
            "airports flights",
            "airlines flights"
        ],
        "align_scores": [
            0.9934305548667908,
            6.985018262639642e-05,
            0.00015713091124780476,
            5.261287878965959e-05,
            0.0003619280469138175,
            0.00011569263006094843,
            0.0008372527081519365,
            7.245125016197562e-05
        ],
        "align_select": "select flights.flight_from",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
        "gold_select": "select flights.plane_digits",
        "select_candidates": [
            "select flights.flight_from",
            "select flights.flight_from, flights.DestAirport",
            "select flights.flight_from, airports.AirportCode",
            "select flights.aircraft_company"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.0016408805968239903,
            8.229241211665794e-05,
            0.00011383219680283219,
            5.4752927098888904e-05,
            0.00012391891505103558,
            5.796300683869049e-05,
            0.000652930059004575,
            0.00014125785673968494
        ],
        "align_select": "select flights.flight_from",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the flight numbers of flights landing at APG.",
        "gold_select": "select flights.plane_digits",
        "select_candidates": [
            "select flights.flight_from",
            "select flights.flight_from, flights.DestAirport",
            "select flights.aircraft_company",
            "select flights.aircraft_company, flights.flight_from"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "airports flights",
            "flights",
            "airlines airports flights",
            "airlines flights"
        ],
        "align_scores": [
            0.04644903168082237,
            7.486328831873834e-05,
            0.00011672964319586754,
            5.354767563403584e-05,
            0.0005141525180079043,
            0.00012072535901097581,
            0.00011709832324413583,
            6.524345371872187e-05
        ],
        "align_select": "select flights.flight_from",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "gold_select": "select flights.plane_digits",
        "select_candidates": [
            "select flights.flight_from",
            "select flights.flight_from, flights.DestAirport",
            "select flights.flight_from, airports.capital",
            "select flights.flight_from, airports.AirportCode"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9903250932693481,
            7.54940920160152e-05,
            0.00011691310646710917,
            5.3882162319496274e-05,
            0.00014414286124520004,
            5.6232402130262926e-05,
            0.00013992331514600664,
            6.240285438252613e-05
        ],
        "align_select": "select flights.flight_from",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the flight numbers of flights leaving from Aberdeen.",
        "gold_select": "select flights.plane_digits",
        "select_candidates": [
            "select flights.flight_from",
            "select flights.flight_from, flights.DestAirport",
            "select flights.flight_from, airports.capital",
            "select flights.aircraft_company"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.994678258895874,
            6.1365011788439e-05,
            0.00013808110088575631,
            5.1726445235544816e-05,
            0.00014618436398450285,
            5.475381840369664e-05,
            0.0005161084118299186,
            0.00010411579569336027
        ],
        "align_select": "select flights.flight_from",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
        "gold_select": "select flights.plane_digits",
        "select_candidates": [
            "select flights.flight_from",
            "select flights.flight_from, airports.AirportCode",
            "select flights.aircraft_company",
            "select flights.flight_from, airports.capital"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.0012394877849146724,
            7.832427945686504e-05,
            0.00012934832193423063,
            5.8278816140955314e-05,
            0.0008604298927821219,
            0.0001261828001588583,
            0.00013455763109959662,
            5.43291425856296e-05
        ],
        "align_select": "select flights.flight_from",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the flight numbers of flights arriving in Aberdeen.",
        "gold_select": "select flights.plane_digits",
        "select_candidates": [
            "select flights.flight_from",
            "select flights.flight_from, airports.AirportCode",
            "select flights.aircraft_company",
            "select flights.flight_from, airports.capital"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.006623814348131418,
            6.560781912412494e-05,
            0.00012072616664227098,
            5.4243984777713194e-05,
            0.0004755745467264205,
            0.00011204408656340092,
            0.00012010244972771034,
            5.411264646681957e-05
        ],
        "align_select": "select flights.flight_from",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.capital",
            "select count(*) descended in airports.capital",
            "select count(flights.flight_from)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.993893027305603,
            9.267433051718399e-05,
            0.0005069144535809755,
            6.98434523656033e-05,
            0.0008828766876831651,
            9.011576185002923e-05,
            0.0005601146840490401,
            6.625932292081416e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many flights land in Aberdeen or Abilene?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.capital",
            "select count(*), airports.capital, airports.airport_designation",
            "select count(flights.flight_from)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9949042797088623,
            6.928959192009643e-05,
            0.0003426630864851177,
            8.280903421109542e-05,
            0.00012348697055131197,
            6.147442036308348e-05,
            0.0019623814150691032,
            7.409149839077145e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the name of airports which do not have any flight in and out.",
        "gold_select": "select airports.airport_designation",
        "select_candidates": [
            "select airports.airport_designation",
            "select airports.capital, airports.airport_designation",
            "select airports.AirportCode, airports.airport_designation",
            "select airports.airport_designation, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports",
            "airports flights"
        ],
        "align_scores": [
            0.9680450558662415,
            0.001058690482750535,
            0.00017560739070177078,
            7.822105544619262e-05,
            0.00028111113351769745,
            9.95829250314273e-05,
            0.0006367522873915732,
            9.533151023788378e-05
        ],
        "align_select": "select airports.airport_designation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which airports do not have departing or arriving flights?",
        "gold_select": "select airports.airport_designation",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode, airports.airport_designation",
            "select airports.capital, airports.airport_designation",
            "select airports.AirportCode ou airports.airport_designation"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports",
            "airports flights"
        ],
        "align_scores": [
            0.08390932530164719,
            0.9679743647575378,
            0.0019455206347629428,
            0.0029362374916672707,
            0.000329350441461429,
            0.00021453746012412012,
            0.6376168131828308,
            0.8597363829612732
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Which city and country is the Alton airport at?",
        "gold_select": "select airports.City, airports.nation",
        "select_candidates": [
            "select airports.City, airports.nation",
            "select airports.City, airports.nation, airports.CountryAbbrev",
            "select airports.City, airports.CountryAbbrev",
            "select airports.City, airports.nation, airports.CountryAbbrev"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.99393230676651,
            0.00024065734760370106,
            0.0003741476684808731,
            6.66365449433215e-05,
            0.9935187697410583,
            0.00017572229262441397,
            0.0003741476684808731,
            6.66365449433215e-05
        ],
        "align_select": "select airports.City, airports.nation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the city and country for the Alton airport.",
        "gold_select": "select airports.City, airports.nation",
        "select_candidates": [
            "select airports.City, airports.CountryAbbrev",
            "select airports.City, airports.nation",
            "select airports.City, airports.nation, airports.CountryAbbrev",
            "select airports.City, airports.CountryAbbrev, airports.nation"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.9946526288986206,
            0.0001717032864689827,
            0.9952119588851929,
            0.0002686269872356206,
            0.00022301881108433008,
            6.705616397084668e-05,
            0.0002051594346994534,
            6.680451042484492e-05
        ],
        "align_select": "select airports.City, airports.CountryAbbrev",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many flights have destination ATO?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), flights.SourceAirport",
            "select count(*), flights.flying_to",
            "select count(*), flights.SourceAirport, flights.flying_to"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "flights",
            "airports flights",
            "airlines flights"
        ],
        "align_scores": [
            0.9950729012489319,
            0.00019657363009173423,
            0.0002916818775702268,
            0.0001938660570885986,
            0.00021991269022691995,
            0.0004193043860141188,
            0.00012316466018091887,
            9.291988681070507e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count the number of flights into ATO.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), flights.flying_to",
            "select count(flying_to (ATO)",
            "select count(flying_to(flights.flying_to)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "flights",
            "airports flights",
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9801336526870728,
            0.0023187571205198765,
            0.00018710627045948058,
            0.0010824543423950672,
            0.0008036286453716457,
            0.00015870564675424248,
            0.00021305181144271046,
            0.0001003102952381596
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many flights arriving in Aberdeen city?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.City",
            "select count(avg(flights.flying_to)",
            "select count(*), airports.City, flights.SourceAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9959361553192139,
            0.00016819570737425238,
            0.0002130696811946109,
            0.0006460629520006478,
            0.0002306047681486234,
            0.00010896266758209094,
            0.00012119203165639192,
            0.00010350759112043306
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the number of flights arriving in Aberdeen.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.City",
            "select count(*), airports.City, flights.SourceAirport",
            "select count(avg(flights.flying_to)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9956936836242676,
            0.00014720798935741186,
            0.00027529223007149994,
            0.0003211100120097399,
            0.00010750936780823395,
            9.865550964605063e-05,
            0.00019496792810969055,
            9.164593211608008e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.City, airports.AirportName",
            "select count(*), airports.City (Aberdeen, airports.AirportName)",
            "select count(*), airports.City"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9948039650917053,
            0.03101499378681183,
            0.000133371286210604,
            9.676321496954188e-05,
            0.00020989248878322542,
            0.0001491678413003683,
            0.00023933450574986637,
            0.0002912362106144428
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many flights fly from Aberdeen to Ashley?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.City, airports.AirportName",
            "select count(*), airports.City, airports.AirportName, flights.flying_to",
            "select count(*), airports.City, airports.AirportName, flights.flying_to"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9955410361289978,
            8.609141514170915e-05,
            0.00012934795813634992,
            5.452507684822194e-05,
            0.00011631551024038345,
            5.4256193834589794e-05,
            0.00011631551024038345,
            5.4256193834589794e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), airlines.Airline, airports.AirportCode",
            "select count(*), flights.SourceAirport, flights.flying_to"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights",
            "airlines airports airports flights"
        ],
        "align_scores": [
            0.993281364440918,
            0.00022108116536401212,
            0.00032268837094306946,
            0.021125683560967445,
            0.0001658498658798635,
            0.00014714818098582327,
            0.00012807545135729015,
            0.00010171767644351348
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count the number of United Airlines flights arriving in ASY Airport.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), airlines.Airline, airports.AirportCode",
            "select count(*), airlines.Airline, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9826706051826477,
            0.0001843296631705016,
            0.0002478552341926843,
            0.04716525226831436,
            0.00012659440108109266,
            0.00025667998124845326,
            0.00012659440108109266,
            0.00025667998124845326
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many United Airlines flights go to City 'Aberdeen'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), airlines.Airline, airports.City",
            "select count(*), airlines.Airline, airports.City"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines airports flights",
        "table_candidates": [
            "airlines airports flights",
            "airlines airports airports flights"
        ],
        "align_scores": [
            0.9951984286308289,
            0.0001879046903923154,
            0.00029283101321198046,
            0.0009050294756889343,
            0.00015404255827888846,
            0.00017324469808954746,
            0.00015404255827888846,
            0.00017324469808954746
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), airlines.Airline, airports.City",
            "select count(*), airlines.Airline, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines airports flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9947240948677063,
            0.00024097140703815967,
            0.0002709502005018294,
            0.20607233047485352,
            0.00012745535059366375,
            0.0001735166588332504,
            0.00014686812937725335,
            0.00010616815416142344
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which city has most number of arriving flights?",
        "gold_select": "select airports.City",
        "select_candidates": [
            "select airports.City",
            "select airports.City, flights.SourceAirport",
            "select airports.City, airports.AirportName",
            "select airports.City, flights.SourceAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.992913544178009,
            5.990580393699929e-05,
            0.0005821904051117599,
            6.156974995974451e-05,
            0.00022034042922314256,
            5.588977364823222e-05,
            0.0005821904051117599,
            6.156974995974451e-05
        ],
        "align_select": "select airports.City",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which city has the most frequent destination airport?",
        "gold_select": "select airports.City",
        "select_candidates": [
            "select airports.City",
            "select airports.City, airports.AirportName",
            "select airports.City, airports.AirportCode, airports.AirportName",
            "select airports.City, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airports"
        ],
        "align_scores": [
            0.9944097399711609,
            6.858540291432291e-05,
            0.0009733374463394284,
            6.80320372339338e-05,
            0.0002516177773941308,
            6.71216839691624e-05,
            0.0021245607640594244,
            7.153666228987277e-05
        ],
        "align_select": "select airports.City",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the code of airport that has the highest number of flights?",
        "gold_select": "select airports.AirportCode",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode, airports.AirportName, airports.nation",
            "select airports.AirportCode, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9888505339622498,
            7.189762982307002e-05,
            0.00813409872353077,
            8.111910574370995e-05,
            0.000839760759845376,
            8.643730689072981e-05,
            0.00813409872353077,
            8.111910574370995e-05
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the airport code of the airport with the most flights?",
        "gold_select": "select airports.AirportCode",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode (airports.AirportName)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9937195777893066,
            8.271331171272323e-05,
            0.007085295859724283,
            6.787360325688496e-05,
            0.007085295859724283,
            6.787360325688496e-05,
            0.023200836032629013,
            6.607608520425856e-05
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the code of airport that has fewest number of flights?",
        "gold_select": "select airports.AirportCode",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode, airports.AirportName, airports.nation",
            "select airports.AirportCode (airports.AirportName)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9908728003501892,
            6.950228271307424e-05,
            0.0067567238584160805,
            6.954047421459109e-05,
            0.0008661163155920804,
            7.282071601366624e-05,
            0.014715208671987057,
            5.963165676803328e-05
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Give the code of the airport with the least flights.",
        "gold_select": "select airports.AirportCode",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode, airports.AirportName, airports.nation",
            "select airports.AirportCode, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9946069121360779,
            7.807342626620084e-05,
            0.003580890828743577,
            6.067726280889474e-05,
            0.00043779012048617005,
            6.24682943453081e-05,
            0.003580890828743577,
            6.067726280889474e-05
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are airlines that have flights arriving at airport 'AHD'?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select flights.Airline",
            "select airlines.Airline, airports.AirportName",
            "select flights.Airline, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.989578902721405,
            0.0017352384747937322,
            0.9919220209121704,
            0.0014503940474241972,
            0.00020602252334356308,
            0.00011376427573850378,
            0.0005404263501986861,
            0.000132762870634906
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which airlines have a flight with destination airport AHD?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select flights.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights",
            "airports flights",
            "flights"
        ],
        "align_scores": [
            0.9651451110839844,
            0.0017848450224846601,
            0.9885097146034241,
            0.002948820823803544,
            0.00042131615919061005,
            0.00013792004028800875,
            0.0005311498534865677,
            0.00010950837167911232
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are flight numbers of Airline \"United Airlines\"?",
        "gold_select": "select flights.aircraft_code",
        "select_candidates": [
            "select flights.aircraft_code",
            "select flights.Airline",
            "select flights.aircraft_code, airlines.Airline",
            "select flights.aircraft_code, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.0063955835066735744,
            0.00012730133312288672,
            0.0018979496089741588,
            0.00011091514170402661,
            0.00014544355508405715,
            6.249421130632982e-05,
            0.0001765437045833096,
            6.177059549372643e-05
        ],
        "align_select": "select flights.aircraft_code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which flight numbers correspond to United Airlines flights?",
        "gold_select": "select flights.aircraft_code",
        "select_candidates": [
            "select flights.Airline",
            "select flights.aircraft_code",
            "select flights.flying_to",
            "select flights.aircraft_code, airlines.Airline"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.006915837526321411,
            0.025855761021375656,
            0.11042915284633636,
            0.0733540803194046,
            0.0562901496887207,
            0.006395947188138962,
            0.00030215075821615756,
            0.00017778767505660653
        ],
        "align_select": "select flights.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are flight numbers of flights departing from Airport \"APG\"?",
        "gold_select": "select flights.aircraft_code",
        "select_candidates": [
            "select flights.flying_to",
            "select flights.Airline",
            "select flights.flying_to, airports.AirportName",
            "select flights.flying_to, airports.AirportCode"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights",
            "flights"
        ],
        "align_scores": [
            0.0007928311824798584,
            8.059072570176795e-05,
            0.0015171329723671079,
            0.00011826107220258564,
            0.00017646525520831347,
            5.860551027581096e-05,
            0.00016865500947460532,
            5.959004192845896e-05
        ],
        "align_select": "select flights.flying_to",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the flight numbers of flights leaving from APG.",
        "gold_select": "select flights.aircraft_code",
        "select_candidates": [
            "select flights.flying_to",
            "select flights.Airline",
            "select flights.flying_to, flights.SourceAirport",
            "select flights.flying_toavg(flights.SourceAirport)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "flights",
            "airports flights",
            "airlines airports flights",
            "airlines flights"
        ],
        "align_scores": [
            0.003390337573364377,
            8.275781146949157e-05,
            0.001049621612764895,
            7.666896271985024e-05,
            0.00012900246656499803,
            5.8947582147084177e-05,
            0.0002503838622942567,
            6.816841050749645e-05
        ],
        "align_select": "select flights.flying_to",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
        "gold_select": "select flights.aircraft_code",
        "select_candidates": [
            "select flights.flying_to",
            "select flights.flying_to, airports.AirportName",
            "select flights.Airline",
            "select flights.flying_to, flights.SourceAirport"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.014443915337324142,
            8.134399104164913e-05,
            0.00013246003072708845,
            5.959896225249395e-05,
            0.0013256263919174671,
            0.00013574710465036333,
            0.00012352055637165904,
            5.744892405346036e-05
        ],
        "align_select": "select flights.flying_to",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the flight numbers of flights landing at APG.",
        "gold_select": "select flights.aircraft_code",
        "select_candidates": [
            "select flights.flying_to",
            "select flights.Airline",
            "select flights.aircraft_code",
            "select flights.Airline3"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "flights",
            "airports flights",
            "airlines airports flights",
            "airlines flights"
        ],
        "align_scores": [
            0.03307944908738136,
            7.94755615061149e-05,
            0.0012936544371768832,
            9.347373270429671e-05,
            0.3108658492565155,
            0.00011830663424916565,
            0.0008361053769476712,
            6.547331577166915e-05
        ],
        "align_select": "select flights.aircraft_code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "gold_select": "select flights.aircraft_code",
        "select_candidates": [
            "select flights.flying_to",
            "select flights.aircraft_code",
            "select flights.Airline",
            "select flights.SourceAirport"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.0006033654208295047,
            0.00011466693104011938,
            0.9904627203941345,
            0.00010804152407217771,
            0.0017122974386438727,
            0.00012698514910880476,
            0.0008400524384342134,
            8.950087067205459e-05
        ],
        "align_select": "select flights.aircraft_code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the flight numbers of flights leaving from Aberdeen.",
        "gold_select": "select flights.aircraft_code",
        "select_candidates": [
            "select flights.flying_to",
            "select flights.Airline",
            "select flights.aircraft_code",
            "select flights.SourceAirport"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.00235557253472507,
            8.53149249451235e-05,
            0.0013268889160826802,
            7.347304926952347e-05,
            0.9888532161712646,
            9.973059059120715e-05,
            0.0010745135368779302,
            6.441395089495927e-05
        ],
        "align_select": "select flights.aircraft_code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
        "gold_select": "select flights.aircraft_code",
        "select_candidates": [
            "select flights.flying_to",
            "select flights.aircraft_code",
            "select flights.Airline",
            "select flights.flying_to, airports.AirportName"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.035935647785663605,
            7.930477295303717e-05,
            0.9770064949989319,
            0.00010257463145535439,
            0.0014450213639065623,
            0.00010377669241279364,
            0.00014660872693639249,
            5.7729444961296394e-05
        ],
        "align_select": "select flights.aircraft_code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the flight numbers of flights arriving in Aberdeen.",
        "gold_select": "select flights.aircraft_code",
        "select_candidates": [
            "select flights.flying_to",
            "select flights.flying_to, airports.City",
            "select flights.Airline",
            "select flights.aircraft_code"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights",
            "airports airports flights"
        ],
        "align_scores": [
            0.0496908575296402,
            7.462032226612791e-05,
            0.00014544882287736982,
            5.6774355471134186e-05,
            0.0009228253620676696,
            7.884374645072967e-05,
            0.9454715847969055,
            0.00010680575360311195
        ],
        "align_select": "select flights.aircraft_code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.City",
            "select count(*), airports.City",
            "select count(*) dependant on airports.City"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.993893027305603,
            9.267433051718399e-05,
            0.00036688477848656476,
            7.255482341861352e-05,
            0.00036688477848656476,
            7.255482341861352e-05,
            0.0010614168131724,
            0.0001109131335397251
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many flights land in Aberdeen or Abilene?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.City",
            "select count(*), airports.City-UNION-SELECT-FROM-WHERE",
            "select count(*), airports.City-aberdeen, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9949042797088623,
            6.928959192009643e-05,
            0.0002676218282431364,
            8.039852400543168e-05,
            0.00021210647537373006,
            6.504317570943385e-05,
            0.00015948631335049868,
            6.087396468501538e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the name of airports which do not have any flight in and out.",
        "gold_select": "select airports.AirportName",
        "select_candidates": [
            "select airports.AirportName",
            "select airports.AirportName, airports.AirportCode",
            "select airports.AirportName, airports.AirportCode, airports.nation",
            "select airports.AirportCode, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.10226774215698242,
            0.4184403121471405,
            0.00039972722879610956,
            0.0007718914421275258,
            0.00017141342686954886,
            0.00019275832164566964,
            0.000384388433303684,
            0.0007202186388894916
        ],
        "align_select": "select airports.AirportName",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Which airports do not have departing or arriving flights?",
        "gold_select": "select airports.AirportName",
        "select_candidates": [
            "select airports.AirportName",
            "select airports.AirportCode, airports.AirportName",
            "select airports.City, airports.AirportName",
            "select airports.AirportName, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports",
            "airports flights"
        ],
        "align_scores": [
            0.06038232520222664,
            0.9096308946609497,
            0.0053443918004632,
            0.2898472249507904,
            0.0006886113551445305,
            0.001204386237077415,
            0.006683859508484602,
            0.2899104058742523
        ],
        "align_select": "select airports.AirportName",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "How many flights does airline 'JetBlue Airways' have?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), airlines.Airline, flights.SourceAirport",
            "select count(*), airlines.Airline, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9957541227340698,
            0.00022261004778556526,
            0.0003111831611022353,
            0.0015865619061514735,
            0.00014101022679824382,
            9.966566722141579e-05,
            0.00015423214063048363,
            0.00010541007213760167
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the number of Jetblue Airways flights.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), airlines.Airline, flights.FlightNo",
            "select count(*), airlines.Airline, flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9959684610366821,
            0.0002755361783783883,
            0.00024916077381931245,
            0.17776240408420563,
            0.00012024948227917776,
            0.00013464617950376123,
            0.00012024948227917776,
            0.00013464617950376123
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), airlines.Airline, airports.AirportCode",
            "select count(*), airlines.Airline, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.993281364440918,
            0.00022108116536401212,
            0.00032268837094306946,
            0.021125683560967445,
            0.0001658498658798635,
            0.00014714818098582327,
            0.0001658498658798635,
            0.00014714818098582327
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count the number of United Airlines flights arriving in ASY Airport.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), airlines.Airline, airports.AirportCode",
            "select count(*) the flights.SourceAirport, flights.DestAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9826706051826477,
            0.0001843296631705016,
            0.0002478552341926843,
            0.04716525226831436,
            0.00012659440108109266,
            0.00025667998124845326,
            0.00013918887998443097,
            8.29131095088087e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.AirportCode",
            "select count(*), flights.SourceAirport, flights.DestAirport",
            "select count(*), airlines.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9949435591697693,
            0.00022214655473362654,
            0.0002989221829921007,
            0.0003072491381317377,
            0.00012931047240272164,
            0.00019360415171831846,
            0.00036072207149118185,
            0.07682077586650848
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the number of United Airlines flights leaving from AHD Airport.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), flights.SourceAirport, flights.DestAirport",
            "select count(*), airlines.Airline, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9861131310462952,
            0.0001793483243091032,
            0.0002722734643612057,
            0.02148565649986267,
            0.00010178238881053403,
            8.163897291524336e-05,
            0.00013578389189206064,
            0.00024521510931663215
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many United Airlines flights go to City 'Aberdeen'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), airlines.Airline, airports.City",
            "select count(*), airlines.Airline, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines airports flights",
        "table_candidates": [
            "airlines airports flights",
            "airlines airports airports flights"
        ],
        "align_scores": [
            0.9951984286308289,
            0.0001879046903923154,
            0.00029283101321198046,
            0.0009050294756889343,
            0.00015404255827888846,
            0.00017324469808954746,
            0.0001597930386196822,
            8.56045589898713e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), airlines.Airline, airports.City",
            "select count(*), airlines.Airline, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines airports flights",
        "table_candidates": [
            "airlines airports flights",
            "airlines airports airports flights"
        ],
        "align_scores": [
            0.9947240948677063,
            0.00024097140703815967,
            0.0002709502005018294,
            0.20607233047485352,
            0.00012745535059366375,
            0.0001735166588332504,
            0.00014686812937725335,
            0.00010616815416142344
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which airline has most number of flights?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.SourceAirport",
            "select airlines.Airline, flights.DestAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9928815364837646,
            5.2749470341950655e-05,
            0.0034320461563766003,
            5.970459824311547e-05,
            0.001536908675916493,
            5.243335908744484e-05,
            0.0002909062313847244,
            5.039199095335789e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What airline serves the most flights?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.SourceAirport",
            "select airlines.Airline, flights.DestAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9942187070846558,
            5.4415995691670105e-05,
            0.003093746956437826,
            6.062636384740472e-05,
            0.0012869591591879725,
            5.1746035751421005e-05,
            0.0002155478432541713,
            5.1067570893792436e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "gold_select": "select airlines.Abbreviation, airlines.Country",
        "select_candidates": [
            "select airlines.Abbreviation, airlines.Country",
            "select airlines.Airline, airlines.Abbreviation, airlines.Country",
            "select airlines.Country, airlines.Abbreviation",
            "select airlines.Airline, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9911106824874878,
            7.649784674867988e-05,
            0.0023093512281775475,
            8.658993465360254e-05,
            0.9914689064025879,
            8.08910044725053e-05,
            0.9871097803115845,
            8.044974674703553e-05
        ],
        "align_select": "select airlines.Abbreviation, airlines.Country",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "gold_select": "select airlines.Abbreviation, airlines.Country",
        "select_candidates": [
            "select airlines.Abbreviation, airlines.Country",
            "select airlines.Airline, airlines.Country",
            "select airlines.Country, airlines.Abbreviation",
            "select airlines.Abbreviation-, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9886012673377991,
            8.802321826806292e-05,
            0.9840400815010071,
            8.313947182614356e-05,
            0.9894130825996399,
            8.620090375188738e-05,
            0.2146110236644745,
            7.379844464594498e-05
        ],
        "align_select": "select airlines.Abbreviation, airlines.Country",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are airlines that have some flight departing from airport 'AHD'?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airports.AirportName",
            "select airlines.Airline, airlines.Abbreviation",
            "select flights.FlightNo, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9899006485939026,
            0.002849580254405737,
            0.00022843043552711606,
            0.00011420011287555099,
            0.0003821150166913867,
            0.00011972741049248725,
            0.0002987612097058445,
            0.0001399441243847832
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which airlines have a flight with source airport AHD?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airports.AirportName",
            "select airlines.Airline, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights",
            "airlines flights"
        ],
        "align_scores": [
            0.9841853976249695,
            0.9935619831085205,
            0.00039689609548076987,
            0.0008448964217677712,
            0.00020839528588112444,
            0.0002505777811165899,
            0.0002478772075846791,
            0.0004474899033084512
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are airlines that have flights arriving at airport 'AHD'?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airports.AirportName",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airports.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.989578902721405,
            0.0017352384747937322,
            0.00020602252334356308,
            0.00011376427573850378,
            0.00040453937253914773,
            0.00011595924297580495,
            0.0003445120819378644,
            0.00013579451479017735
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which airlines have a flight with destination airport AHD?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airports.AirportName",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airports.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights",
            "airlines flights"
        ],
        "align_scores": [
            0.9651451110839844,
            0.0017848450224846601,
            0.0002528162731323391,
            0.00011485251889098436,
            0.00042131615919061005,
            0.00013792004028800875,
            0.00029442974482662976,
            0.00013934452726971358
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.SourceAirport",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights",
            "airlines flights"
        ],
        "align_scores": [
            0.9951124787330627,
            0.9951124787330627,
            0.0003960214089602232,
            0.0003960214089602232,
            0.0003536431468091905,
            0.0003536431468091905,
            0.000207315621082671,
            0.000207315621082671
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Which airlines have departing flights from both APG and CVO airports?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.SourceAirport",
            "select airlines.Airline, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights",
            "airlines flights"
        ],
        "align_scores": [
            0.9950999617576599,
            0.9950999617576599,
            0.00046198247582651675,
            0.00046198247582651675,
            0.0006348804454319179,
            0.0006348804454319179,
            0.0002265052025904879,
            0.0002265052025904879
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airports.AirportName",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.SourceAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9936217665672302,
            0.9936217665672302,
            0.0001878907496575266,
            0.0001878907496575266,
            0.00043075968278571963,
            0.00043075968278571963,
            0.0004250533238518983,
            0.0004250533238518983
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Which airlines have departures from CVO but not from APG airports?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airports.AirportName",
            "select airlines.uid, airlines.Airline",
            "select airlines.Airline, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9928431510925293,
            0.979820191860199,
            0.00020196568220853806,
            0.0001871034037321806,
            0.0003105743962805718,
            0.0002881632244680077,
            0.0004841376794502139,
            0.0005047625745646656
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find all airlines that have at least 10 flights.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.SourceAirport",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9920614957809448,
            0.00010793730325531214,
            0.0021071035880595446,
            6.169535481603816e-05,
            0.002687569707632065,
            6.734326598234475e-05,
            0.0002717081515584141,
            5.687981320079416e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which airlines have at least 10 flights?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.SourceAirport",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9902194142341614,
            0.00012706738198176026,
            0.001436447724699974,
            6.968451634747908e-05,
            0.0016778670251369476,
            7.700704736635089e-05,
            0.00030823462293483317,
            7.182628178270534e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find all airlines that have fewer than 200 flights.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.SourceAirport",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.uid, airlines.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9866717457771301,
            0.00027445281739346683,
            0.000857837381772697,
            7.040100899757817e-05,
            0.0022487554233521223,
            8.79096332937479e-05,
            0.000366831140127033,
            6.87356005073525e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which airlines have less than 200 flights?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.SourceAirport",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.uid, airlines.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9915968775749207,
            0.00035407213727012277,
            0.0008348360424861312,
            7.852665294194594e-05,
            0.001502446597442031,
            9.608170512365177e-05,
            0.0003544003702700138,
            8.26488176244311e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are flight numbers of Airline \"United Airlines\"?",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airlines.Abbreviation",
            "select flights.FlightNo, airlines.Airline",
            "select flights.FlightNo, airlines.Airline, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9946150183677673,
            0.0002876225335057825,
            0.000414408918004483,
            7.740166620351374e-05,
            0.0002623363398015499,
            6.587739335373044e-05,
            0.00019749642524402589,
            7.512718002544716e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which flight numbers correspond to United Airlines flights?",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select distinct flights.FlightNo",
            "select flights.FlightNo, airlines.Airline",
            "select flights.FlightNo, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9935764670372009,
            0.10797977447509766,
            0.03115139901638031,
            0.0002328535047126934,
            0.0005007771542295814,
            0.00011759647895814851,
            0.0005480747786350548,
            0.00014314011787064373
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which country does Airline \"JetBlue Airways\" belong to?",
        "gold_select": "select airlines.Country",
        "select_candidates": [
            "select airlines.Country",
            "select airlines.Country, airlines.Abbreviation",
            "select airlines.Country, t0.c4",
            "select airlines.Country, airlines.air_company_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9937167763710022,
            0.00015018972044344991,
            0.00026596488896757364,
            7.908418774604797e-05,
            0.00035568111343309283,
            7.581440877402201e-05,
            0.00015562208136543632,
            6.68657521600835e-05
        ],
        "align_select": "select airlines.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What country is Jetblue Airways affiliated with?",
        "gold_select": "select airlines.Country",
        "select_candidates": [
            "select airlines.Country",
            "select airlines.Country, airlines.Abbreviation",
            "select airlines.Country, t0.c4",
            "select airlines.Country (symbol airlines.Abbreviation)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines",
            "airlines airports"
        ],
        "align_scores": [
            0.9673209190368652,
            0.00014420018123928457,
            0.0002927372115664184,
            8.270203397842124e-05,
            0.0002989181666634977,
            7.503081724280491e-05,
            0.002265490358695388,
            8.22504298412241e-05
        ],
        "align_select": "select airlines.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "gold_select": "select airlines.Abbreviation",
        "select_candidates": [
            "select airlines.Abbreviation",
            "select airlines.air_company_name, airlines.Abbreviation",
            "select airlines.Abbreviation, airlines.air_company_name",
            "select airlines.airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.995121419429779,
            0.00013592794130090624,
            0.0002500136324670166,
            7.330410153372213e-05,
            0.0002116145915351808,
            6.613812001887709e-05,
            0.10306800901889801,
            7.508270209655166e-05
        ],
        "align_select": "select airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which abbreviation corresponds to Jetblue Airways?",
        "gold_select": "select airlines.Abbreviation",
        "select_candidates": [
            "select airlines.Abbreviation",
            "select airlines.air_company_name, airlines.Abbreviation",
            "select airlines.Abbreviation, airlines.air_company_name",
            "select airlines.airline, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9751989841461182,
            9.154435247182846e-05,
            0.0002711233391892165,
            6.88464569975622e-05,
            0.00023653171956539154,
            6.516373832710087e-05,
            0.0002592371020000428,
            6.317657243926078e-05
        ],
        "align_select": "select airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all airline names and their abbreviations in \"USA\".",
        "gold_select": "select airlines.air_company_name, airlines.Abbreviation",
        "select_candidates": [
            "select airlines.air_company_name, airlines.Abbreviation",
            "select airlines.airline, airlines.Abbreviation",
            "select airlines.air_company_name.c1, airlines.Abbreviation",
            "select t0.c 1, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9954525828361511,
            0.00015268460265360773,
            0.9952444434165955,
            0.0002558990672696382,
            0.00023155478993430734,
            7.655960507690907e-05,
            0.00043897420982830226,
            8.681433246238157e-05
        ],
        "align_select": "select airlines.air_company_name, airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the airline names and abbreviations for airlines in the USA?",
        "gold_select": "select airlines.air_company_name, airlines.Abbreviation",
        "select_candidates": [
            "select airlines.air_company_name, airlines.Abbreviation",
            "select airlines.airline, airlines.Abbreviation",
            "select airlines.air_company_name, airlines.Abbreviation, airlines.Country",
            "select airlines.air_company_name.c1, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9944796562194824,
            0.00021736817143391818,
            0.9940529465675354,
            0.00024437770480290055,
            0.00022672017803415656,
            6.260706868488342e-05,
            0.00031416831188835204,
            7.826111686881632e-05
        ],
        "align_select": "select airlines.air_company_name, airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the airport code and name in the city of Anthony.",
        "gold_select": "select airports.AirportCode, airports.airdrome",
        "select_candidates": [
            "select airports.AirportCode, airports.airdrome",
            "select airports.AirportCode.c1, airports.airdrome",
            "select airports.City, airports.airdrome",
            "select airports.AirportCode, airports.airdrome,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports",
            "airlines airports"
        ],
        "align_scores": [
            0.3258332312107086,
            7.613318302901462e-05,
            0.00044622711720876396,
            6.444528116844594e-05,
            0.0015600498300045729,
            5.7766119425650686e-05,
            0.0008063353016041219,
            5.948341640760191e-05
        ],
        "align_select": "select airports.AirportCode, airports.airdrome",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the airport code and airport name corresonding to the city Anthony.",
        "gold_select": "select airports.AirportCode, airports.airdrome",
        "select_candidates": [
            "select airports.AirportCode, airports.airdrome",
            "select airports.AirportCode, airports.airdrome, airports.state",
            "select airports.AirportCode.c1, airports.airdrome",
            "select airports.City, airports.airdrome"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.20556864142417908,
            8.159158460330218e-05,
            0.0001767212088452652,
            6.935715646250173e-05,
            0.0003548762178979814,
            6.547463271999732e-05,
            0.0009706097189337015,
            6.46193147986196e-05
        ],
        "align_select": "select airports.AirportCode, airports.airdrome",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which airline has abbreviation 'UAL'?",
        "gold_select": "select airlines.air_company_name",
        "select_candidates": [
            "select airlines.airline",
            "select airlines.air_company_name",
            "select airlines.airline, airlines.air_company_name",
            "select airlines.air_company_name, airlines.Abbreviation"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9400124549865723,
            0.00011691220424836501,
            0.9908046722412109,
            0.00010744870087364689,
            0.0002554549428168684,
            6.725148705299944e-05,
            0.00036616725265048444,
            7.430950790876523e-05
        ],
        "align_select": "select airlines.airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the airline with abbreviation 'UAL'.",
        "gold_select": "select airlines.air_company_name",
        "select_candidates": [
            "select airlines.airline",
            "select airlines.air_company_name",
            "select airlines.airline, airlines.air_company_name",
            "select airlines.airline, airlines.air_company_name, airlines.Abbreviation"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.8919081091880798,
            8.04787632660009e-05,
            0.9840040802955627,
            7.981840462889522e-05,
            0.00020504268468357623,
            5.9999227232765406e-05,
            0.00014780068886466324,
            6.745444261468947e-05
        ],
        "align_select": "select airlines.airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which city and country is the Alton airport at?",
        "gold_select": "select airports.City, airports.state",
        "select_candidates": [
            "select airports.City, airports.CountryAbbrev",
            "select airports.City, airports.CountryAbbrev)",
            "select t1.co, airports.CountryAbbrev",
            "select airports.City, airports.CountryAbbrev."
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.9935187697410583,
            0.00017572229262441397,
            0.003492338815703988,
            9.362574928672984e-05,
            0.0010472354479134083,
            7.749508949927986e-05,
            0.04979198798537254,
            0.00010572334576863796
        ],
        "align_select": "select airports.City, airports.CountryAbbrev",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the city and country for the Alton airport.",
        "gold_select": "select airports.City, airports.state",
        "select_candidates": [
            "select airports.City, airports.CountryAbbrev",
            "select airports.City, airports.CountryAbbrev)",
            "select t1.co, airports.CountryAbbrev",
            "select airports.City, airports.CountryAbbrev."
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.9946526288986206,
            0.0001717032864689827,
            0.002249044133350253,
            9.459367720410228e-05,
            0.0006663884851150215,
            6.662097439402714e-05,
            0.04738100990653038,
            0.00011997619731118903
        ],
        "align_select": "select airports.City, airports.CountryAbbrev",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the airport name for airport 'AKO'?",
        "gold_select": "select airports.airdrome",
        "select_candidates": [
            "select airports.airdrome",
            "select airports.airdrome, airports.state",
            "select avg(airports.airdrome)",
            "select airports.airdrome, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports",
            "airports flights"
        ],
        "align_scores": [
            0.12334028631448746,
            7.223078137030825e-05,
            0.00016928270633798093,
            5.872803012607619e-05,
            0.0006483882898464799,
            5.847432476002723e-05,
            0.0001661566348047927,
            5.688805686077103e-05
        ],
        "align_select": "select airports.airdrome",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the name of the airport with code 'AKO'.",
        "gold_select": "select airports.airdrome",
        "select_candidates": [
            "select airports.airdrome",
            "select airports.City, airports.airdrome",
            "select airports.airdrome, airports.state",
            "select airports.airdrome, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.07224948704242706,
            8.158325363183394e-05,
            0.00025212974287569523,
            6.224679236765951e-05,
            0.00015181674098130316,
            5.8632456784835085e-05,
            0.00015786290168762207,
            6.416436372091994e-05
        ],
        "align_select": "select airports.airdrome",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are airport names at City 'Aberdeen'?",
        "gold_select": "select airports.airdrome",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode, airports.airdrome",
            "select airports.City, airports.AirportCode",
            "select avg(airports.AirportCode)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.01173974759876728,
            0.0001350125967292115,
            0.00025286737945862114,
            6.909309740876779e-05,
            0.00017055406351573765,
            7.159084634622559e-05,
            0.0027570154052227736,
            6.303732516244054e-05
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of airports in Aberdeen?",
        "gold_select": "select airports.airdrome",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode, airports.airdrome",
            "select airports.City, airports.AirportCode",
            "select airports.AirportCode, airports.state"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.025732746347784996,
            0.00013463333016261458,
            0.00037267786683514714,
            6.016663974151015e-05,
            0.00039356318302452564,
            5.7288078096462414e-05,
            0.0001707813935354352,
            5.5826549214543775e-05
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many flights does airline 'JetBlue Airways' have?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.air_company_name",
            "select count(*), airlines.air_company_name, airlines.Abbreviation",
            "select count(*), airlines.air_company_name, flights.SourceAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9957541227340698,
            0.00022261004778556526,
            0.00035287061473354697,
            0.00015094174887053668,
            0.00013468354882206768,
            9.717728971736506e-05,
            0.00014403391105588526,
            8.734343282412738e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the number of Jetblue Airways flights.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.air_company_name",
            "select count(*), airlines.air_company_name, flights.FlightNo",
            "select count(*), airlines.air_company_name, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9959684610366821,
            0.0002755361783783883,
            0.00026905632694251835,
            0.0006644966779276729,
            0.0001211332346429117,
            0.0001062207156792283,
            0.00011996978719253093,
            0.00013669142208527774
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.air_company_name",
            "select count(*), airlines.air_company_name, airports.AirportCode",
            "select count(*), flights.SourceAirport, flights.DestAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.993281364440918,
            0.00022108116536401212,
            0.0002492310886736959,
            0.0010137473000213504,
            0.0001594768837094307,
            0.0001464519591536373,
            0.00011823559179902077,
            0.00010030189150711522
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count the number of United Airlines flights arriving in ASY Airport.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.air_company_name",
            "select count(*), airlines.air_company_name, airports.AirportCode",
            "select count(*), flights.SourceAirport, flights.DestAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9826706051826477,
            0.0001843296631705016,
            0.00020580083946697414,
            0.0010146672138944268,
            0.00013689933985006064,
            0.00017942838894668967,
            9.999475150834769e-05,
            0.00013997549831401557
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), flights.SourceAirport, flights.DestAirport",
            "select count(*), airlines.air_company_name",
            "select count(*), airlines.air_company_name, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9949435591697693,
            0.00022214655473362654,
            0.00012931047240272164,
            0.00019360415171831846,
            0.00029135114164091647,
            0.0015716060297563672,
            0.00016927205433603376,
            0.00015322510444093496
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the number of United Airlines flights leaving from AHD Airport.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.air_company_name",
            "select count(*), flights.SourceAirport, flights.DestAirport",
            "select count(*) the flights.SourceAirport, flights.DestAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9861131310462952,
            0.0001793483243091032,
            0.0002461769909132272,
            0.0009385237353853881,
            0.00010178238881053403,
            8.163897291524336e-05,
            0.00017779784684535116,
            8.688463276484981e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many United Airlines flights go to City 'Aberdeen'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.air_company_name",
            "select count(*), airlines.air_company_name, airports.City",
            "select count(*), airlines.air_company_name, airports.City"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines airports flights",
        "table_candidates": [
            "airlines airports flights",
            "airlines airports airports flights"
        ],
        "align_scores": [
            0.9951984286308289,
            0.0001879046903923154,
            0.00024962087627500296,
            0.00023966767184901983,
            0.00014526877203024924,
            0.00012392945063766092,
            0.00014526877203024924,
            0.00012392945063766092
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.air_company_name",
            "select count(*), airlines.air_company_name, airports.City",
            "select count(*), airlines.air_company_name, airports.City"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines airports flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9947240948677063,
            0.00024097140703815967,
            0.00023877016792539507,
            0.0011468471493571997,
            0.0001261230354430154,
            0.00012051649537170306,
            0.0001261230354430154,
            0.00012051649537170306
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which airline has most number of flights?",
        "gold_select": "select airlines.air_company_name",
        "select_candidates": [
            "select airlines.air_company_name",
            "select airlines.airline",
            "select airlines.air_company_name, flights.Airline",
            "select airlines.air_company_name, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9934262037277222,
            6.403740553651005e-05,
            0.9928815364837646,
            5.2749470341950655e-05,
            0.0018830030458047986,
            6.150380067992955e-05,
            0.004630258772522211,
            6.963629857636988e-05
        ],
        "align_select": "select airlines.air_company_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What airline serves the most flights?",
        "gold_select": "select airlines.air_company_name",
        "select_candidates": [
            "select airlines.air_company_name",
            "select airlines.airline",
            "select airlines.air_company_name, airlines.Country",
            "select airlines.air_company_name, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9933233857154846,
            6.522379408124834e-05,
            0.9942187070846558,
            5.4415995691670105e-05,
            0.0003810328198596835,
            6.035881597199477e-05,
            0.0048918589018285275,
            7.349111547227949e-05
        ],
        "align_select": "select airlines.air_company_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "gold_select": "select airlines.Abbreviation, airlines.Country",
        "select_candidates": [
            "select airlines.Abbreviation, airlines.Country",
            "select airlines.airline, airlines.Abbreviation, airlines.Country",
            "select airlines.air_company_name, airlines.Abbreviation, airlines.Country",
            "select airlines.Country, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9911106824874878,
            7.649784674867988e-05,
            0.0023093512281775475,
            8.658993465360254e-05,
            0.0025713499635457993,
            9.522884647594765e-05,
            0.9914689064025879,
            8.08910044725053e-05
        ],
        "align_select": "select airlines.Abbreviation, airlines.Country",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "gold_select": "select airlines.Abbreviation, airlines.Country",
        "select_candidates": [
            "select airlines.Abbreviation, airlines.Country",
            "select airlines.air_company_name, airlines.Abbreviation, airlines.Country",
            "select airlines.airline, airlines.Abbreviation, airlines.Country",
            "select airlines.air_company_name, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9886012673377991,
            8.802321826806292e-05,
            0.0035744095221161842,
            8.840427472023293e-05,
            0.0016245098086073995,
            8.027809235500172e-05,
            0.0020137804094702005,
            8.138370321830735e-05
        ],
        "align_select": "select airlines.Abbreviation, airlines.Country",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are airlines that have some flight departing from airport 'AHD'?",
        "gold_select": "select airlines.air_company_name",
        "select_candidates": [
            "select flights.Airline",
            "select airlines.air_company_name",
            "select airlines.airline",
            "select airlines.air_company_name, airlines.Abbreviation"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights",
            "airports flights"
        ],
        "align_scores": [
            0.9909543395042419,
            0.0023152651265263557,
            0.9866276383399963,
            0.00335251004435122,
            0.9899006485939026,
            0.002849580254405737,
            0.0006074340781196952,
            0.00012890150537714362
        ],
        "align_select": "select flights.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which airlines have a flight with source airport AHD?",
        "gold_select": "select airlines.air_company_name",
        "select_candidates": [
            "select flights.Airline",
            "select airlines.air_company_name",
            "select airlines.airline",
            "select airlines.air_company_name, airlines.Abbreviation"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights",
            "airports flights"
        ],
        "align_scores": [
            0.9891325831413269,
            0.0013080936623737216,
            0.9665969610214233,
            0.0013888076646253467,
            0.9841853976249695,
            0.0008553364896215498,
            0.0006321104010567069,
            0.00012731639435514808
        ],
        "align_select": "select flights.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are airlines that have flights arriving at airport 'AHD'?",
        "gold_select": "select airlines.air_company_name",
        "select_candidates": [
            "select flights.Airline",
            "select airlines.air_company_name",
            "select airlines.airline",
            "select airlines.air_company_name, airports.AirportCode"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9919220209121704,
            0.0014503940474241972,
            0.9868840575218201,
            0.0028510463889688253,
            0.989578902721405,
            0.0017352384747937322,
            0.00021555011335294694,
            0.00012348897871561348
        ],
        "align_select": "select flights.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which airlines have a flight with destination airport AHD?",
        "gold_select": "select airlines.air_company_name",
        "select_candidates": [
            "select flights.Airline",
            "select airlines.air_company_name",
            "select airlines.airline",
            "select airlines.air_company_name, airlines.Abbreviation"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights",
            "airports flights",
            "flights",
            "airlines flights"
        ],
        "align_scores": [
            0.9885097146034241,
            0.002948820823803544,
            0.8044010400772095,
            0.0017880677478387952,
            0.9651451110839844,
            0.0017848450224846601,
            0.0005088159232400358,
            0.00014303819625638425
        ],
        "align_select": "select flights.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "gold_select": "select airlines.air_company_name",
        "select_candidates": [
            "select flights.Airline",
            "select flights.Airline, flights.SourceAirport",
            "select airlines.air_company_name",
            "select airlines.airline"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights",
            "airlines flights",
            "flights",
            "airports flights"
        ],
        "align_scores": [
            0.995053231716156,
            0.995053231716156,
            0.0002986042818520218,
            0.0002986042818520218,
            0.9939531683921814,
            0.9939531683921814,
            0.9951124787330627,
            0.9951124787330627
        ],
        "align_select": "select flights.Airline",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Which airlines have departing flights from both APG and CVO airports?",
        "gold_select": "select airlines.air_company_name",
        "select_candidates": [
            "select airlines.air_company_name",
            "select flights.Airline",
            "select airlines.airline",
            "select airlines.air_company_name, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights",
            "airports flights",
            "flights"
        ],
        "align_scores": [
            0.9937663078308105,
            0.9937663078308105,
            0.995305597782135,
            0.995305597782135,
            0.9950999617576599,
            0.9950999617576599,
            0.0006865105242468417,
            0.0006865105242468417
        ],
        "align_select": "select airlines.air_company_name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "gold_select": "select airlines.air_company_name",
        "select_candidates": [
            "select flights.Airline",
            "select airlines.air_company_name",
            "select airlines.airline",
            "select airlines.air_company_name, airlines.Abbreviation"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights",
            "airports flights",
            "flights"
        ],
        "align_scores": [
            0.993320107460022,
            0.993320107460022,
            0.9928262233734131,
            0.9928262233734131,
            0.9936217665672302,
            0.9936217665672302,
            0.0006609830306842923,
            0.0006609830306842923
        ],
        "align_select": "select flights.Airline",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Which airlines have departures from CVO but not from APG airports?",
        "gold_select": "select airlines.air_company_name",
        "select_candidates": [
            "select airlines.air_company_name",
            "select airlines.airline",
            "select flights.Airline",
            "select airlines.air_company_name, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9909248352050781,
            0.9856621623039246,
            0.9928431510925293,
            0.979820191860199,
            0.9933832287788391,
            0.981373131275177,
            0.0009016452240757644,
            0.0009092344553209841
        ],
        "align_select": "select airlines.air_company_name",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find all airlines that have at least 10 flights.",
        "gold_select": "select airlines.air_company_name",
        "select_candidates": [
            "select airlines.airline",
            "select airlines.air_company_name",
            "select airlines.airline, flights.Airline",
            "select airlines.air_company_name, flights.Airline"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9920614957809448,
            0.00010793730325531214,
            0.9881666302680969,
            0.0001366773503832519,
            0.0005978220724500716,
            6.13737283856608e-05,
            0.0013604705454781651,
            7.213062781374902e-05
        ],
        "align_select": "select airlines.airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which airlines have at least 10 flights?",
        "gold_select": "select airlines.air_company_name",
        "select_candidates": [
            "select airlines.air_company_name",
            "select airlines.airline",
            "select airlines.air_company_name, flights.Airline",
            "select airlines.air_company_name, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9863422513008118,
            0.0001568973675603047,
            0.9902194142341614,
            0.00012706738198176026,
            0.0015519268345087767,
            8.120285929180682e-05,
            0.0037801938597112894,
            9.514570410829037e-05
        ],
        "align_select": "select airlines.air_company_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find all airlines that have fewer than 200 flights.",
        "gold_select": "select airlines.air_company_name",
        "select_candidates": [
            "select airlines.airline",
            "select airlines.air_company_name",
            "select airlines.airline, flights.Airline",
            "select airlines.air_company_name, flights.Airline"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9866717457771301,
            7.146805728552863e-05,
            0.9855624437332153,
            8.230026287492365e-05,
            0.0004250529455021024,
            5.679081368725747e-05,
            0.0010062946239486337,
            5.618695286102593e-05
        ],
        "align_select": "select airlines.airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which airlines have less than 200 flights?",
        "gold_select": "select airlines.air_company_name",
        "select_candidates": [
            "select airlines.air_company_name",
            "select airlines.airline",
            "select airlines.air_company_name, airlines.Abbreviation",
            "select airlines.air_company_name, flights.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9900934100151062,
            0.0004893558798357844,
            0.9915968775749207,
            0.00035407213727012277,
            0.0032979645766317844,
            0.00012644937669392675,
            0.0010712867369875312,
            9.813702490646392e-05
        ],
        "align_select": "select airlines.air_company_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are flight numbers of Airline \"United Airlines\"?",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airlines.air_company_name",
            "select flights.Airline, flights.FlightNo",
            "select flights.FlightNo, airlines.air_company_name, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9946150183677673,
            0.0002876225335057825,
            0.00014227656356524676,
            6.307617150014266e-05,
            0.00020863325335085392,
            7.25194186088629e-05,
            0.0001380899193463847,
            5.9152280300622806e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which flight numbers correspond to United Airlines flights?",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.Airline, flights.FlightNo",
            "select flights.FlightNo, airlines.air_company_name",
            "select distinct flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9935764670372009,
            0.10797977447509766,
            0.00018185660883318633,
            9.076682181330398e-05,
            0.00019044219516217709,
            0.00010653436766006052,
            0.03115139901638031,
            0.0002328535047126934
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the name of airports which do not have any flight in and out.",
        "gold_select": "select airports.airdrome",
        "select_candidates": [
            "select airports.airdrome",
            "select airports.AirportCode",
            "select airports.airdrome, airports.AirportCode",
            "select airports.City, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports",
            "airports flights"
        ],
        "align_scores": [
            0.17259645462036133,
            0.3085106313228607,
            0.026777781546115875,
            0.6973363757133484,
            0.00043507450027391315,
            0.00044018312473781407,
            0.00042441400000825524,
            0.0004785111523233354
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Which airports do not have departing or arriving flights?",
        "gold_select": "select airports.airdrome",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode, airports.airdrome",
            "select airports.airdrome, airports.AirportCode",
            "select airports.airdrome"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airports"
        ],
        "align_scores": [
            0.08390932530164719,
            0.9679743647575378,
            0.0012549739331007004,
            0.0016231897752732038,
            0.0008271273109130561,
            0.0005799446371383965,
            0.1340261995792389,
            0.34645989537239075
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Which country does Airline \"JetBlue Airways\" belong to?",
        "gold_select": "select airlines.nation",
        "select_candidates": [
            "select airlines.nation",
            "select airlines.nation, airlines.Abbreviation",
            "select airlines.Airline, airlines.nation",
            "select airlines.nation, t0.c4"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines",
            "airlines airports",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9893052577972412,
            0.00017934764036908746,
            0.00027653833967633545,
            8.326966053573415e-05,
            0.000293149147182703,
            7.652098429389298e-05,
            0.0003826054453384131,
            7.787527283653617e-05
        ],
        "align_select": "select airlines.nation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What country is Jetblue Airways affiliated with?",
        "gold_select": "select airlines.nation",
        "select_candidates": [
            "select airlines.nation",
            "select airlines.Airline, airlines.nation",
            "select airlines.nation, airports.Country",
            "select airlines.nation, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines",
            "airlines airports"
        ],
        "align_scores": [
            0.9348958134651184,
            0.0027991123497486115,
            0.0002798115892801434,
            0.00012258888455107808,
            0.0003947321092709899,
            0.00015065069601405412,
            0.00033463601721450686,
            0.00012308478471823037
        ],
        "align_select": "select airlines.nation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all airline names and their abbreviations in \"USA\".",
        "gold_select": "select airlines.Airline, airlines.Abbreviation",
        "select_candidates": [
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airlines.Abbreviation,",
            "select airlines.Airline, airlines.Abbreviation2",
            "select airlines.Airline, airlines.uid2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9952444434165955,
            0.0002558990672696382,
            0.0019098668126389384,
            8.38532650959678e-05,
            0.08120405673980713,
            0.0001819096942199394,
            0.00135309889446944,
            7.114785694284365e-05
        ],
        "align_select": "select airlines.Airline, airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the airline names and abbreviations for airlines in the USA?",
        "gold_select": "select airlines.Airline, airlines.Abbreviation",
        "select_candidates": [
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airlines.Abbreviation, airlines.nation",
            "select t0, airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airlines.Abbreviation,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9940529465675354,
            0.00024437770480290055,
            0.0002695909352041781,
            6.232471787370741e-05,
            0.00033326575066894293,
            7.137189822969958e-05,
            0.0036560024600476027,
            7.692176586715505e-05
        ],
        "align_select": "select airlines.Airline, airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the airport code and name in the city of Anthony.",
        "gold_select": "select airports.AirportCode, airports.airfield_designation",
        "select_candidates": [
            "select airports.AirportCode, airports.airfield_designation",
            "select airports.AirportCode.c1, airports.airfield_designation",
            "select airports.City, airports.airfield_designation",
            "select airports.AirportCode, airports.airfield_designation,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.9891119599342346,
            8.603074820712209e-05,
            0.0004941863589920104,
            6.764228601241484e-05,
            0.0009354820940643549,
            6.505856435978785e-05,
            0.0012752467300742865,
            6.707919237669557e-05
        ],
        "align_select": "select airports.AirportCode, airports.airfield_designation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the airport code and airport name corresonding to the city Anthony.",
        "gold_select": "select airports.AirportCode, airports.airfield_designation",
        "select_candidates": [
            "select airports.AirportCode, airports.airfield_designation",
            "select airports.AirportCode, airports.airfield_designation, airports.Country",
            "select airports.AirportCode.c1, airports.airfield_designation",
            "select airports.AirportCode, airports.airfield_designation, airports.City"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.9746741652488708,
            0.00010453401046106592,
            0.00015264282410498708,
            6.723994738422334e-05,
            0.0003844652383122593,
            7.59615286369808e-05,
            0.00022811528469901532,
            7.523285603383556e-05
        ],
        "align_select": "select airports.AirportCode, airports.airfield_designation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many airlines are from USA?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.nation",
            "select count(*), airlines.Airline",
            "select count(*), airlines.uid"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9947322607040405,
            6.864317401777953e-05,
            0.00026883400278165936,
            5.8525256463326514e-05,
            0.0002371866285102442,
            5.304805745254271e-05,
            0.00026732016704045236,
            5.709958713850938e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the number of airlines in the USA.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.nation",
            "select count(*), airlines.nation, airlines.Abbreviation",
            "select count(*), airlines.nation, t0.c4"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9954919815063477,
            0.0005250831018202007,
            0.0002005680580623448,
            0.00018435041420161724,
            0.00012403240543790162,
            8.081713895080611e-05,
            0.00017694916459731758,
            9.100879833567888e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which city and country is the Alton airport at?",
        "gold_select": "select airports.City, airports.Country",
        "select_candidates": [
            "select airports.City, airports.Country",
            "select airports.Country, airports.City",
            "select airports.AirportCode, airports.Country",
            "select t1.co, airports.Country"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.9936670660972595,
            0.00018372847989667207,
            0.9951102137565613,
            0.0001787783985491842,
            0.0004610269970726222,
            7.35121502657421e-05,
            0.0007136303465813398,
            6.652752199443057e-05
        ],
        "align_select": "select airports.City, airports.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the city and country for the Alton airport.",
        "gold_select": "select airports.City, airports.Country",
        "select_candidates": [
            "select airports.City, airports.Country",
            "select t1.co, airports.Country",
            "select airports.AirportCode, airports.Country",
            "select airports.Country, airports.City"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.9950358271598816,
            0.00020950959878973663,
            0.0004921724903397262,
            7.338243449339643e-05,
            0.00033903049188666046,
            7.144462870201096e-05,
            0.9954143762588501,
            0.0001380161993438378
        ],
        "align_select": "select airports.City, airports.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the airport name for airport 'AKO'?",
        "gold_select": "select airports.airfield_designation",
        "select_candidates": [
            "select airports.airfield_designation",
            "select avg(airports.airfield_designation)",
            "select airports.airfield_designation, airports.AirportCode",
            "select afbd.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.9946170449256897,
            7.710433419561014e-05,
            0.0007253250223584473,
            5.629721999866888e-05,
            0.00023015314945951104,
            5.7793666201177984e-05,
            0.000991033622995019,
            7.654580258531496e-05
        ],
        "align_select": "select airports.airfield_designation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the name of the airport with code 'AKO'.",
        "gold_select": "select airports.airfield_designation",
        "select_candidates": [
            "select airports.airfield_designation",
            "select airports.City, airports.airfield_designation",
            "select airports.airfield_designation, airports.Country",
            "select airports.City"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.9958990216255188,
            9.926170605467632e-05,
            0.00021425573504529893,
            6.15223398199305e-05,
            0.00017739467148203403,
            5.4319451010087505e-05,
            0.6414106488227844,
            9.313030022894964e-05
        ],
        "align_select": "select airports.airfield_designation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are airport names at City 'Aberdeen'?",
        "gold_select": "select airports.airfield_designation",
        "select_candidates": [
            "select airports.airfield_designation",
            "select airports.AirportCode, airports.airfield_designation",
            "select airports.City, airports.AirportCode, airports.airfield_designation",
            "select airports.airfield_designation, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.9957683086395264,
            9.860077989287674e-05,
            0.00020282308105379343,
            6.975726137170568e-05,
            0.00014863851538393646,
            7.271246431628242e-05,
            0.00028194321203045547,
            6.783181015634909e-05
        ],
        "align_select": "select airports.airfield_designation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of airports in Aberdeen?",
        "gold_select": "select airports.airfield_designation",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode, airports.airfield_designation",
            "select airports.City, airports.AirportCode, airports.airfield_designation",
            "select airports.City, airports.AirportCode"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.025732746347784996,
            0.00013463333016261458,
            0.0002721618511714041,
            6.598754407605156e-05,
            0.00016949186101555824,
            6.459010910475627e-05,
            0.00039356318302452564,
            5.7288078096462414e-05
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many flights depart from 'APG'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.AirportCode",
            "select count(*), flights.source_airfield, flights.DestAirport",
            "select count(*), flights.source_airfield"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "flights",
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9959380626678467,
            0.0001340210874332115,
            0.0003178386250510812,
            0.0001728808565530926,
            0.00010688888869481161,
            0.00011791830911533907,
            0.00038643329753540456,
            0.0004848317475989461
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count the number of flights departing from 'APG'.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), flights.source_airfield, flights.DestAirport",
            "select count(*), flights.source_airfield",
            "select count(*), airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "flights",
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9958303570747375,
            0.00011318903125356883,
            0.00010931119322776794,
            0.0001377816079184413,
            0.0003973041893914342,
            0.0006952809053473175,
            0.00030773840262554586,
            0.00015257835912052542
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many flights depart from City Aberdeen?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.City",
            "select count(distinct flights.FlightNo)",
            "select count(flights.FlightNo)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9956960678100586,
            0.0001549486769363284,
            0.00021447280596476048,
            0.0007377230213023722,
            0.0041637844406068325,
            8.619836444268003e-05,
            0.009391041472554207,
            0.00011573488882277161
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the number of flights departing from Aberdeen.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.City",
            "select count(distinct flights.FlightNo)",
            "select count(*), airports.City, flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9956122636795044,
            0.00013118406059220433,
            0.0003008176281582564,
            0.00040345866000279784,
            0.0013719205744564533,
            7.359576557064429e-05,
            0.00011491638724692166,
            7.426140655297786e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.City, airports.airfield_designation",
            "select count(*), airports.City (Aberdeen, airports.airfield_designation)",
            "select count(*), airports.City"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9948039650917053,
            9.738313383422792e-05,
            0.0001259158889297396,
            6.284183473326266e-05,
            0.0001749857619870454,
            8.824972610455006e-05,
            0.00023933450574986637,
            6.842873699497432e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many flights fly from Aberdeen to Ashley?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.City, airports.airfield_designation",
            "select count(*), airports.City (Aberdeen), airports.airfield_designation",
            "select count(*), airports.City (Aberdeen, airports.airfield_designation)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9955410361289978,
            8.609141514170915e-05,
            0.00011900474055437371,
            5.739164771512151e-05,
            0.00016688383766449988,
            6.116771692177281e-05,
            0.0001924362004501745,
            6.406464672181755e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many flights does airline 'JetBlue Airways' have?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), airlines.Airline, flights.source_airfield",
            "select count(*), airlines.Airline, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9957541227340698,
            0.00022261004778556526,
            0.0003111831611022353,
            0.0015865619061514735,
            0.00012637597683351487,
            0.00011298759636702016,
            0.00015423214063048363,
            0.00010541007213760167
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the number of Jetblue Airways flights.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), airlines.Airline, flights.FlightNo",
            "select count(*), airlines.Airline, flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9959684610366821,
            0.0002755361783783883,
            0.00024916077381931245,
            0.17776240408420563,
            0.00012024948227917776,
            0.00013464617950376123,
            0.00012024948227917776,
            0.00013464617950376123
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), airlines.Airline, airports.AirportCode",
            "select count(*), airlines.Airline, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.993281364440918,
            0.00022108116536401212,
            0.00032268837094306946,
            0.021125683560967445,
            0.0001658498658798635,
            0.00014714818098582327,
            0.0001658498658798635,
            0.00014714818098582327
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count the number of United Airlines flights arriving in ASY Airport.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), airlines.Airline, airports.AirportCode",
            "select count(*), airlines.Airline, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9826706051826477,
            0.0001843296631705016,
            0.0002478552341926843,
            0.04716525226831436,
            0.00012659440108109266,
            0.00025667998124845326,
            0.00012659440108109266,
            0.00025667998124845326
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), flights.source_airfield, flights.DestAirport",
            "select count(*), airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9949435591697693,
            0.00022214655473362654,
            0.00036072207149118185,
            0.07682077586650848,
            0.0001123682814068161,
            0.00014555774396285415,
            0.0002989221829921007,
            0.0003072491381317377
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the number of United Airlines flights leaving from AHD Airport.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), flights.source_airfield, flights.DestAirport",
            "select count(*), airlines.Airline, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9861131310462952,
            0.0001793483243091032,
            0.0002722734643612057,
            0.02148565649986267,
            0.00010297085100319237,
            9.667430276749656e-05,
            0.00013578389189206064,
            0.00024521510931663215
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many United Airlines flights go to City 'Aberdeen'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), airlines.Airline, airports.City",
            "select count(*), airlines.Airline, airports.City"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines airports flights",
        "table_candidates": [
            "airlines airports flights",
            "airlines airports airports flights"
        ],
        "align_scores": [
            0.9951984286308289,
            0.0001879046903923154,
            0.00029283101321198046,
            0.0009050294756889343,
            0.00015404255827888846,
            0.00017324469808954746,
            0.00015404255827888846,
            0.00017324469808954746
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), airlines.Airline, airports.City",
            "select count(*), airlines.Airline, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines airports flights",
        "table_candidates": [
            "airlines airports flights",
            "airlines airports airports flights"
        ],
        "align_scores": [
            0.9947240948677063,
            0.00024097140703815967,
            0.0002709502005018294,
            0.20607233047485352,
            0.00012745535059366375,
            0.0001735166588332504,
            0.0001444252993678674,
            0.00017306704830843955
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which city has most number of departing flights?",
        "gold_select": "select airports.City",
        "select_candidates": [
            "select airports.City",
            "select airports.City, flights.source_airfield",
            "select airports.City, flights.source_airfield, flights.DestAirport",
            "select airports.City, flights.DestAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9925544857978821,
            6.0049591411370784e-05,
            0.004779902286827564,
            6.902914901729673e-05,
            0.0002651003887876868,
            6.0501726693473756e-05,
            0.0008820090442895889,
            5.881732067791745e-05
        ],
        "align_select": "select airports.City",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which city is the most frequent source airport?",
        "gold_select": "select airports.City",
        "select_candidates": [
            "select airports.City",
            "select airports.City, flights.source_airfield",
            "select airports.City, airports.AirportCode",
            "select airports.City, airports.AirportCode, airports.airfield_designation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9954745173454285,
            6.854263483546674e-05,
            0.0032246524933725595,
            5.9437712479848415e-05,
            0.0016059491317719221,
            6.456005939980969e-05,
            0.00032266220659948885,
            6.513323751278222e-05
        ],
        "align_select": "select airports.City",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which airline has most number of flights?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.source_airfield",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.DestAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9928815364837646,
            5.2749470341950655e-05,
            0.0013161239912733436,
            5.37324340257328e-05,
            0.0034320461563766003,
            5.970459824311547e-05,
            0.0002909062313847244,
            5.039199095335789e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What airline serves the most flights?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.DestAirport",
            "select airlines.Airline, flights.source_airfield"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9942187070846558,
            5.4415995691670105e-05,
            0.003093746956437826,
            6.062636384740472e-05,
            0.0002155478432541713,
            5.1067570893792436e-05,
            0.0010061872890219092,
            5.2546587539836764e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "gold_select": "select airlines.Abbreviation, airlines.nation",
        "select_candidates": [
            "select airlines.Abbreviation, airlines.nation",
            "select airlines.Airline, airlines.Abbreviation, airlines.nation",
            "select airlines.uid, airlines.Abbreviation, airlines.nation",
            "select airlines.Airline, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9907662868499756,
            7.688964251428843e-05,
            0.0017012195894494653,
            8.715490548638627e-05,
            0.0004608648014254868,
            8.121230348479003e-05,
            0.0072798882611095905,
            7.405449287034571e-05
        ],
        "align_select": "select airlines.Abbreviation, airlines.nation",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "gold_select": "select airlines.Abbreviation, airlines.nation",
        "select_candidates": [
            "select airlines.Abbreviation, airlines.nation",
            "select airlines.Airline, airlines.nation",
            "select flights.FlightNo, airlines.Abbreviation, airlines.nation",
            "select airlines.Airline, airlines.Abbreviation, airlines.nation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights",
            "airlines flights",
            "airlines airports"
        ],
        "align_scores": [
            0.988770604133606,
            8.568124030716717e-05,
            0.9844598770141602,
            8.343283843714744e-05,
            0.00041799736209213734,
            7.539150101365522e-05,
            0.0020658583380281925,
            8.132754010148346e-05
        ],
        "align_select": "select airlines.Abbreviation, airlines.nation",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are airlines that have some flight departing from airport 'AHD'?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airports.airfield_designation",
            "select airlines.Airline, airports.Country",
            "select airlines.Airline, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9899006485939026,
            0.002849580254405737,
            0.0003449875221122056,
            0.00015398056712001562,
            0.00033421418629586697,
            0.0001452949654776603,
            0.0003821150166913867,
            0.00011972741049248725
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which airlines have a flight with source airport AHD?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airports.airfield_designation",
            "select airlines.Airline, airlines.nation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights",
            "airlines flights"
        ],
        "align_scores": [
            0.9841853976249695,
            0.9935619831085205,
            0.00039689609548076987,
            0.0008448964217677712,
            0.0005406483542174101,
            0.0010694696102291346,
            0.0002847619471140206,
            0.0007770531228743494
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are airlines that have flights arriving at airport 'AHD'?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airports.airfield_designation",
            "select airlines.Airline, airports.Country",
            "select airlines.Airline, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.989578902721405,
            0.0017352384747937322,
            0.00031113275326788425,
            0.00014517683302983642,
            0.0003445120819378644,
            0.00013579451479017735,
            0.00040453937253914773,
            0.00011595924297580495
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which airlines have a flight with destination airport AHD?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airports.airfield_designation",
            "select airlines.Airline, airports.Country",
            "select airlines.Airline, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9651451110839844,
            0.0017848450224846601,
            0.0005963777075521648,
            0.00015512887330260128,
            0.00029442974482662976,
            0.00013934452726971358,
            0.00042131615919061005,
            0.00013792004028800875
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airports.airfield_designation",
            "select airlines.Airline, flights.source_airfield",
            "select airlines.Airline, airports.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights",
            "airlines flights"
        ],
        "align_scores": [
            0.9951124787330627,
            0.9951124787330627,
            0.0003775537188630551,
            0.0003775537188630551,
            0.0004140991368331015,
            0.0004140991368331015,
            0.000210430909646675,
            0.000210430909646675
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Which airlines have departing flights from both APG and CVO airports?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.source_airfield",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airports.airfield_designation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights",
            "airlines flights"
        ],
        "align_scores": [
            0.9950999617576599,
            0.9950999617576599,
            0.0006970034446567297,
            0.0006970034446567297,
            0.00046198247582651675,
            0.00046198247582651675,
            0.00036511142388917506,
            0.00036511142388917506
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airports.airfield_designation",
            "select airlines.Airline, airports.Country",
            "select airlines.uid, airlines.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9936217665672302,
            0.9936217665672302,
            0.0004641551058739424,
            0.0004641551058739424,
            0.0001662648719502613,
            0.0001662648719502613,
            0.00026952847838401794,
            0.00026952847838401794
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Which airlines have departures from CVO but not from APG airports?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airports.airfield_designation",
            "select airlines.uid, airlines.Airline",
            "select airlines.Airline, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9928431510925293,
            0.9928431510925293,
            0.00042817910434678197,
            0.00042817910434678197,
            0.0003105743962805718,
            0.0003105743962805718,
            0.0004841376794502139,
            0.0004841376794502139
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find all airlines that have at least 10 flights.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.source_airfield",
            "select airlines.Airline, flights.FlightNo",
            "select airlines.Airline, flights.DestAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9920614957809448,
            0.00010793730325531214,
            0.001727228402160108,
            6.0544207372004166e-05,
            0.0002717081515584141,
            5.687981320079416e-05,
            0.00019147257262375206,
            5.247307490208186e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which airlines have at least 10 flights?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.source_airfield",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9902194142341614,
            0.00012706738198176026,
            0.001389215118251741,
            7.111969898687676e-05,
            0.0016778670251369476,
            7.700704736635089e-05,
            0.00020254289847798645,
            6.29397836746648e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find all airlines that have fewer than 200 flights.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.FlightNo",
            "select airlines.Airline, flights.source_airfield",
            "select airlines.Airline, flights.DestAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9866717457771301,
            0.00027445281739346683,
            0.00024085173208732158,
            6.991255941102281e-05,
            0.0009239809005521238,
            6.840394780738279e-05,
            0.00018447086040396243,
            6.119875615695491e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which airlines have less than 200 flights?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.source_airfield",
            "select airlines.Airline, flights.FlightNo",
            "select airlines.Airline, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9915968775749207,
            0.00035407213727012277,
            0.0008160162251442671,
            7.684184674872085e-05,
            0.00019513531879056245,
            7.156612991821021e-05,
            0.001502446597442031,
            9.608170512365177e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are flight numbers of Airline \"United Airlines\"?",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airlines.Abbreviation",
            "select flights.FlightNo, airlines.Airline",
            "select flights.FlightNo, airlines.nation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9946150183677673,
            0.0002876225335057825,
            0.000414408918004483,
            7.740166620351374e-05,
            0.0002623363398015499,
            6.587739335373044e-05,
            0.00022567740234080702,
            6.302626570686698e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which flight numbers correspond to United Airlines flights?",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select distinct flights.FlightNo",
            "select flights.FlightNo, airlines.Abbreviation",
            "select flights.FlightNo, airlines.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9935764670372009,
            0.10797977447509766,
            0.03115139901638031,
            0.0002328535047126934,
            0.0005480747786350548,
            0.00014314011787064373,
            0.0005007771542295814,
            0.00011759647895814851
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are flight numbers of flights departing from Airport \"APG\"?",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airports.AirportCode",
            "select flights.FlightNo, airports.AirportCode, flights.DestAirport",
            "select flights.FlightNo, flights.source_airfield"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9953077435493469,
            0.0001876973401522264,
            0.0001746089110383764,
            6.563172064488754e-05,
            0.00014958229439798743,
            7.008203829172999e-05,
            0.0002034547069342807,
            6.061815292923711e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the flight numbers of flights leaving from APG.",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, flights.source_airfield",
            "select flights.FlightNo, flights.DestAirport",
            "select flights.FlightNo, flights.source_airfield, flights.DestAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "flights",
            "airports flights",
            "airlines airports flights",
            "airlines flights"
        ],
        "align_scores": [
            0.990564227104187,
            8.05582239991054e-05,
            0.0002574790851213038,
            5.424331175163388e-05,
            0.00023848646378610283,
            5.7471497711958364e-05,
            0.0002445254649501294,
            5.786122346762568e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airports.City",
            "select flights.FlightNo, airports.City, flights.FlightNo",
            "select flights.FlightNo, airports.City, flights.DestAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9940394163131714,
            0.0001435055601177737,
            0.0001754865370457992,
            6.410803325707093e-05,
            0.00014707610534969717,
            8.693843119544908e-05,
            0.00014359889610204846,
            6.349275645334274e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the flight numbers of flights leaving from Aberdeen.",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airports.City",
            "select flights.FlightNo, airports.City, airports.AirportCode",
            "select flights.FlightNo, airports.City, flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9918286204338074,
            0.0001242067664861679,
            0.00020197128469590098,
            5.4456901125377044e-05,
            0.0001611982297617942,
            6.270840822253376e-05,
            0.00017295208817813545,
            7.182935951277614e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the name of airports which do not have any flight in and out.",
        "gold_select": "select airports.airfield_designation",
        "select_candidates": [
            "select airports.airfield_designation",
            "select airports.City, airports.airfield_designation",
            "select airports.City, airports.AirportCode",
            "select airports.airfield_designation, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports",
            "airports flights"
        ],
        "align_scores": [
            0.9685086607933044,
            0.790098249912262,
            0.0001956943015102297,
            0.00020122354908380657,
            0.00042441400000825524,
            0.0004785111523233354,
            0.0010266761528328061,
            0.0008250853279605508
        ],
        "align_select": "select airports.airfield_designation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which airports do not have departing or arriving flights?",
        "gold_select": "select airports.airfield_designation",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode, airports.airfield_designation",
            "select airports.AirportCode, airports.airfield_designation, airports.Country",
            "select airports.AirportCode, airports.airfield_designation, airports.Country"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports",
            "airports flights"
        ],
        "align_scores": [
            0.08390932530164719,
            0.9679743647575378,
            0.001818944583646953,
            0.003905342658981681,
            0.0003231159644201398,
            0.0002600958978291601,
            0.0003231159644201398,
            0.0002600958978291601
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "What is the number of employees from each city?",
        "gold_select": "select count(*), employee.metropolis",
        "select_candidates": [
            "select employee.metropolis, count(*)",
            "select count(*), employee.metropolis",
            "select employee.metropolis, count(*), employee.Employee_ID",
            "select employee.metropolis.c3, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.9958429932594299,
            0.00014295760774984956,
            0.9959995746612549,
            0.00015416686073876917,
            0.00014878739602863789,
            7.57771049393341e-05,
            0.0006702872342430055,
            0.00021548538643401116
        ],
        "align_select": "select employee.metropolis, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Count the number of employees for each city.",
        "gold_select": "select count(*), employee.metropolis",
        "select_candidates": [
            "select employee.metropolis, count(*)",
            "select count(*), employee.metropolis",
            "select employee.metropolis, count(*), employee.Employee_ID",
            "select employee.metropolis.c3, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.995180606842041,
            0.0001205028165713884,
            0.9955226182937622,
            0.00015178779722191393,
            0.00012059109576512128,
            7.509988790843636e-05,
            0.0008135201642289758,
            0.00012154060823377222
        ],
        "align_select": "select employee.metropolis, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Which cities do more than one employee under age 30 come from?",
        "gold_select": "select employee.metropolis",
        "select_candidates": [
            "select employee.metropolis",
            "select employee.metropolis, employee.Age",
            "select employee.metropolis, count(*)",
            "select employee.Age, employee.metropolis"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.9846659898757935,
            0.00016294400847982615,
            0.0001832983980420977,
            6.909711373737082e-05,
            0.0020614524837583303,
            7.187362643890083e-05,
            0.00020138784020673484,
            7.334039401030168e-05
        ],
        "align_select": "select employee.metropolis",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Find the cities that have more than one employee under age 30.",
        "gold_select": "select employee.metropolis",
        "select_candidates": [
            "select employee.metropolis",
            "select employee.metropolis, count(*)",
            "select count(*), employee.metropolis",
            "select employee.metropolis for employee.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.9809039235115051,
            9.09803420654498e-05,
            0.01911545917391777,
            8.25897222966887e-05,
            0.0010181157849729061,
            7.874381117289886e-05,
            0.00030551926465705037,
            6.881207082187757e-05
        ],
        "align_select": "select employee.metropolis",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Find the number of shops in each location.",
        "gold_select": "select count(*), shop.whereabouts",
        "select_candidates": [
            "select shop.whereabouts, count(*)",
            "select count(*), shop.whereabouts",
            "select shop.whereabouts, count(*), shop.area",
            "select shop.whereabouts.c3, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9946897029876709,
            0.00015399069525301456,
            0.994556188583374,
            0.0001405732473358512,
            0.0002080550038954243,
            8.8174594566226e-05,
            0.0004788805381394923,
            0.00020865455735474825
        ],
        "align_select": "select shop.whereabouts, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How many shops are there in each location?",
        "gold_select": "select count(*), shop.whereabouts",
        "select_candidates": [
            "select shop.whereabouts, count(*)",
            "select count(*), shop.whereabouts",
            "select shop.whereabouts, count(*), shop.area",
            "select shop.whereabouts.c3, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9939591884613037,
            0.00017665214545559138,
            0.9943723678588867,
            0.00015694853209424764,
            0.00030303062521852553,
            9.117583249462768e-05,
            0.0005510206101462245,
            0.00018991960678249598
        ],
        "align_select": "select shop.whereabouts, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Find the manager name and district of the shop whose number of products is the largest.",
        "gold_select": "select shop.head, shop.area",
        "select_candidates": [
            "select shop.head, shop.whereabouts",
            "select shop.head, shop.area",
            "select hiring.Employee_ID, shop.whereabouts",
            "select employee.Name, shop.whereabouts"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop",
            "shop hiring"
        ],
        "align_scores": [
            0.9649951457977295,
            6.359208055073395e-05,
            0.9816261529922485,
            6.645547546213493e-05,
            0.0005710350233130157,
            7.560727681266144e-05,
            0.40528273582458496,
            7.181881665019318e-05
        ],
        "align_select": "select shop.head, shop.whereabouts",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the manager name and district of the shop that sells the largest number of products?",
        "gold_select": "select shop.head, shop.area",
        "select_candidates": [
            "select shop.head, shop.whereabouts",
            "select shop.head, shop.area",
            "select hiring.Employee_ID, shop.whereabouts",
            "select employee.Name, shop.whereabouts"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop",
            "shop hiring",
            "shop evaluation",
            "employee shop",
            "shop hiring evaluation",
            "shop employee shop"
        ],
        "align_scores": [
            0.969254732131958,
            0.0001128411604440771,
            0.9778150916099548,
            0.00011282846389804035,
            0.0006733573973178864,
            9.680326911620796e-05,
            0.128778874874115,
            0.00013854692224413157
        ],
        "align_select": "select shop.head, shop.whereabouts",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "find the minimum and maximum number of products of all stores.",
        "gold_select": "select min(shop.commodity_quantity), max(shop.commodity_quantity)",
        "select_candidates": [
            "select min(shop.commodity_quantity), max(shop.commodity_quantity)",
            "select min(shop.commodity_quantity), max(shop.commodity_quantity), shop.Name",
            "select min(shop.area), max(shop.commodity_quantity)",
            "select min(shop.whereabouts), max(shop.commodity_quantity)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9945171475410461,
            6.405780732166022e-05,
            0.0001681373396422714,
            5.2039133151993155e-05,
            0.00034019153099507093,
            6.646726978942752e-05,
            0.0002496637462172657,
            7.17641887604259e-05
        ],
        "align_select": "select min(shop.commodity_quantity), max(shop.commodity_quantity)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the minimum and maximum number of products across all the shops?",
        "gold_select": "select min(shop.commodity_quantity), max(shop.commodity_quantity)",
        "select_candidates": [
            "select min(shop.commodity_quantity), max(shop.commodity_quantity)",
            "select min(shop.commodity_quantity), max(shop.commodity_quantity), shop.Shop_ID",
            "select min(shop.commodity_quantity), max(shop.commodity_quantity), shop.Name",
            "select min(shop.area), max(shop.commodity_quantity)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9912034273147583,
            0.00018141551117878407,
            0.00018702207307796925,
            7.558644574601203e-05,
            0.00023456907365471125,
            6.422478327294812e-05,
            0.00041707116179168224,
            7.960504444781691e-05
        ],
        "align_select": "select min(shop.commodity_quantity), max(shop.commodity_quantity)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Return the name, location and district of all shops in descending order of number of products.",
        "gold_select": "select shop.Name, shop.whereabouts, shop.area",
        "select_candidates": [
            "select shop.Name, shop.whereabouts, shop.area",
            "select shop.Name, shop.whereabouts, shop.area",
            "select shop.Name, shop.area, shop.whereabouts",
            "select shop.Name, shop.whereabouts, shop.area"
        ],
        "select_labels": [
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9920703768730164,
            0.9920703768730164,
            0.9920703768730164,
            0.9920703768730164,
            0.9924690127372742,
            0.9924690127372742,
            0.9920703768730164,
            0.9920703768730164
        ],
        "align_select": "select shop.Name, shop.whereabouts, shop.area",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "gold_select": "select shop.Name, shop.whereabouts, shop.area",
        "select_candidates": [
            "select shop.Name, shop.whereabouts, shop.area",
            "select shop.Name, shop.whereabouts, shop.area",
            "select shop.Name, shop.area, shop.whereabouts",
            "select shop.Name, shop.whereabouts, shop.area"
        ],
        "select_labels": [
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9889096617698669,
            0.9889096617698669,
            0.9889096617698669,
            0.9889096617698669,
            0.9877669811248779,
            0.9877669811248779,
            0.9889096617698669,
            0.9889096617698669
        ],
        "align_select": "select shop.Name, shop.whereabouts, shop.area",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Find the names of stores whose number products is more than the average number of products.",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.whereabouts",
            "select shop.Name, shop.area",
            "select shop.Name, shop.head"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.2260889858007431,
            0.9843063354492188,
            0.0014719946775585413,
            0.0004847167001571506,
            0.00017131636559497565,
            0.00018117418221663684,
            0.0002794127503875643,
            0.00019559207430575043
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which shops' number products is above the average? Give me the shop names.",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.whereabouts",
            "select shop.Name, shop.area",
            "select shop.Name, shop.commodity_quantity"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9783323407173157,
            0.17347294092178345,
            0.00043504664790816605,
            0.000566121656447649,
            0.00022396855638362467,
            0.0001970284793060273,
            0.00021845733863301575,
            0.0005555612151511014
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
        "gold_select": "select shop.area",
        "select_candidates": [
            "select shop.area",
            "select shop.whereabouts",
            "select shop.area, shop.commodity_quantity",
            "select shop.area, shop.whereabouts"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9753764271736145,
            0.9753764271736145,
            0.9428938627243042,
            0.9428938627243042,
            0.00011771383287850767,
            0.00011771383287850767,
            0.00015361365512944758,
            0.00015361365512944758
        ],
        "align_select": "select shop.area",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
        "gold_select": "select shop.area",
        "select_candidates": [
            "select shop.area",
            "select shop.whereabouts",
            "select shop.area, shop.whereabouts",
            "select shop.area, shop.commodity_quantity"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.7850379943847656,
            0.7850379943847656,
            0.9700105786323547,
            0.9700105786323547,
            0.00020349449187051505,
            0.00020349449187051505,
            0.00016142064123414457,
            0.00016142064123414457
        ],
        "align_select": "select shop.area",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "How many different store locations are there?",
        "gold_select": "select count(distinct shop.whereabouts)",
        "select_candidates": [
            "select count(distinct shop.whereabouts)",
            "select count(distinct t1.c6)",
            "select count(distinct t1.c 2)",
            "select count(distinct shop.area)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9939644932746887,
            0.9939644932746887,
            0.0005023005651310086,
            0.0005023005651310086,
            0.0005815049516968429,
            0.0005815049516968429,
            0.444953590631485,
            0.444953590631485
        ],
        "align_select": "select count(distinct shop.whereabouts)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Count the number of distinct store locations.",
        "gold_select": "select count(distinct shop.whereabouts)",
        "select_candidates": [
            "select count(distinct shop.whereabouts)",
            "select count(count(distinct shop.whereabouts)",
            "select count(shop.whereabouts)",
            "select count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9961734414100647,
            0.9961734414100647,
            0.00040176953189074993,
            0.00040176953189074993,
            0.358856737613678,
            0.358856737613678,
            0.9757128357887268,
            0.9757128357887268
        ],
        "align_select": "select count(distinct shop.whereabouts)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find the manager name and district of the shop whose number of products is the largest.",
        "gold_select": "select shop.Manager_name, shop.District",
        "select_candidates": [
            "select shop.Manager_name, shop.District",
            "select shop.Name, shop.District",
            "select shop.Manager_name, shop.Location",
            "select shop.Location, shop.Manager_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9851682186126709,
            0.9933949112892151,
            0.013090084306895733,
            0.27641117572784424,
            0.9475806355476379,
            0.9879264831542969,
            0.9559779167175293,
            0.9913871884346008
        ],
        "align_select": "select shop.Manager_name, shop.District",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the manager name and district of the shop that sells the largest number of products?",
        "gold_select": "select shop.Manager_name, shop.District",
        "select_candidates": [
            "select shop.Manager_name, shop.District",
            "select shop.Name, shop.District",
            "select shop.Manager_name, shop.Location",
            "select shop.Location, shop.Manager_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9917959570884705,
            0.9847096800804138,
            0.14349892735481262,
            0.007233886979520321,
            0.9762006998062134,
            0.9140664339065552,
            0.981376588344574,
            0.8965566158294678
        ],
        "align_select": "select shop.Manager_name, shop.District",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "find the minimum and maximum number of products of all stores.",
        "gold_select": "select min(shop.products_number), max(shop.products_number)",
        "select_candidates": [
            "select min(shop.products_number), max(shop.products_number)",
            "select min(shop.District), max(shop.products_number)",
            "select min(shop.Location), max(shop.Location)",
            "select min(shop.Location), max(shop.products_number)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9948611855506897,
            6.414509698515758e-05,
            0.0003493308322504163,
            7.948738493723795e-05,
            0.0007913712761364877,
            0.0001228788896696642,
            0.0007475840393453836,
            0.00011085614823969081
        ],
        "align_select": "select min(shop.products_number), max(shop.products_number)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the minimum and maximum number of products across all the shops?",
        "gold_select": "select min(shop.products_number), max(shop.products_number)",
        "select_candidates": [
            "select min(shop.products_number), max(shop.products_number)",
            "select min(shop.District), max(shop.products_number)",
            "select min(shop.Location), max(shop.products_number)",
            "select min(shop.Location), max(shop.Location)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9896823763847351,
            0.0001342794712400064,
            0.00041419031913392246,
            8.589270146330819e-05,
            0.0008365703979507089,
            0.00012748439621645957,
            0.0014003223041072488,
            0.000460106588434428
        ],
        "align_select": "select min(shop.products_number), max(shop.products_number)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Return the name, location and district of all shops in descending order of number of products.",
        "gold_select": "select shop.Name, shop.Location, shop.District",
        "select_candidates": [
            "select shop.Name, shop.Location, shop.District",
            "select shop.Name, shop.Location, shop.District",
            "select shop.Name, shop.District, shop.Location",
            "select shop.Name, shop.Location, shop.District"
        ],
        "select_labels": [
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9937412142753601,
            0.9937412142753601,
            0.9937412142753601,
            0.9937412142753601,
            0.9947459697723389,
            0.9947459697723389,
            0.9937412142753601,
            0.9937412142753601
        ],
        "align_select": "select shop.Name, shop.Location, shop.District",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "gold_select": "select shop.Name, shop.Location, shop.District",
        "select_candidates": [
            "select shop.Name, shop.Location, shop.District",
            "select shop.Name, shop.Location, shop.District",
            "select shop.Name, shop.Location, shop.District",
            "select shop.Name, shop.District, shop.Location"
        ],
        "select_labels": [
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9884735941886902,
            0.9884735941886902,
            0.9884735941886902,
            0.9884735941886902,
            0.9884735941886902,
            0.9884735941886902,
            0.9904078841209412,
            0.9904078841209412
        ],
        "align_select": "select shop.Name, shop.Location, shop.District",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Find the names of stores whose number products is more than the average number of products.",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.Manager_name",
            "select shop.Name, shop.District",
            "select shop.Name, shop.Location"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9843063354492188,
            0.2260889858007431,
            0.00022812899260316044,
            0.00047434057341888547,
            0.00019816153508145362,
            0.00023169834457803518,
            0.00018340662063565105,
            0.00018389133037999272
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which shops' number products is above the average? Give me the shop names.",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.Location",
            "select shop.Name, shop.products_number",
            "select shop.Name, shop.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9783323407173157,
            7.434005237882957e-05,
            0.00021268911950755864,
            7.984710828168318e-05,
            0.0002408122381893918,
            6.447915075113997e-05,
            0.00021500865113921463,
            7.978812209330499e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
        "gold_select": "select shop.District",
        "select_candidates": [
            "select shop.District",
            "select shop.District, shop.products_number",
            "select shop.District, shop.Location",
            "select shop.District, shop.Manager_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9943463206291199,
            0.9943463206291199,
            0.0001449436240363866,
            0.0001449436240363866,
            0.0001877320755738765,
            0.0001877320755738765,
            0.00014829322753939778,
            0.00014829322753939778
        ],
        "align_select": "select shop.District",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
        "gold_select": "select shop.District",
        "select_candidates": [
            "select shop.District",
            "select shop.District, shop.products_number",
            "select shop.District, shop.Location",
            "select shop.District Then shop.products_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9922119379043579,
            0.9922119379043579,
            0.00014143103908281773,
            0.00014143103908281773,
            0.0002657904988154769,
            0.0002657904988154769,
            0.0005736409220844507,
            0.0005736409220844507
        ],
        "align_select": "select shop.District",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of employees from each city?",
        "gold_select": "select count(*), employee.metropolis",
        "select_candidates": [
            "select employee.metropolis, count(*)",
            "select count(*), employee.metropolis",
            "select employee.metropolis, count(*), employee.Employee_ID",
            "select employee.metropolis.c3, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.9958429932594299,
            0.00014295760774984956,
            0.9959995746612549,
            0.00015416686073876917,
            0.00014878739602863789,
            7.57771049393341e-05,
            0.0006702872342430055,
            0.00021548538643401116
        ],
        "align_select": "select employee.metropolis, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Count the number of employees for each city.",
        "gold_select": "select count(*), employee.metropolis",
        "select_candidates": [
            "select employee.metropolis, count(*)",
            "select count(*), employee.metropolis",
            "select employee.metropolis, count(*), employee.Employee_ID",
            "select employee.metropolis.c3, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.995180606842041,
            0.0001205028165713884,
            0.9955226182937622,
            0.00015178779722191393,
            0.00012059109576512128,
            7.509988790843636e-05,
            0.0008135201642289758,
            0.00012154060823377222
        ],
        "align_select": "select employee.metropolis, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Which cities do more than one employee under age 30 come from?",
        "gold_select": "select employee.metropolis",
        "select_candidates": [
            "select employee.metropolis",
            "select employee.metropolis, employee.Age",
            "select employee.metropolis, count(*)",
            "select employee.metropolis, do-sequence-employee.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.9846659898757935,
            0.00016294400847982615,
            0.0001832983980420977,
            6.909711373737082e-05,
            0.0020614524837583303,
            7.187362643890083e-05,
            0.00016759728896431625,
            6.447662599384785e-05
        ],
        "align_select": "select employee.metropolis",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Find the cities that have more than one employee under age 30.",
        "gold_select": "select employee.metropolis",
        "select_candidates": [
            "select employee.metropolis",
            "select employee.metropolis, count(*)",
            "select count(*), employee.metropolis",
            "select employee.metropolis for employee.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.9809039235115051,
            9.09803420654498e-05,
            0.01911545917391777,
            8.25897222966887e-05,
            0.0010181157849729061,
            7.874381117289886e-05,
            0.00030551926465705037,
            6.881207082187757e-05
        ],
        "align_select": "select employee.metropolis",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Find the number of shops in each location.",
        "gold_select": "select count(*), shop.position",
        "select_candidates": [
            "select shop.District, count(*)",
            "select count(*), shop.District",
            "select shop.position, count(*)",
            "select count(*), shop.position"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.993462085723877,
            0.00012591636914294213,
            0.9943192601203918,
            0.00012824741133954376,
            0.9953866600990295,
            0.00015922616876196116,
            0.9947683811187744,
            0.00017256333376280963
        ],
        "align_select": "select shop.District, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How many shops are there in each location?",
        "gold_select": "select count(*), shop.position",
        "select_candidates": [
            "select shop.District, count(*)",
            "select shop.position, count(*)",
            "select count(*), shop.District",
            "select count(*), shop.position"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9932430386543274,
            0.00013910238340031356,
            0.9950312376022339,
            0.00018444463785272092,
            0.9942923784255981,
            0.0001542358222650364,
            0.9930045008659363,
            0.0002038121601799503
        ],
        "align_select": "select shop.District, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Return the name, location and district of all shops in descending order of number of products.",
        "gold_select": "select shop.Name, shop.position, shop.District",
        "select_candidates": [
            "select shop.Name, shop.position, shop.District",
            "select shop.Name, shop.District, shop.position",
            "select shop.Name, shop.position, shop.District",
            "select shop.Name, shop.position, shop.District"
        ],
        "select_labels": [
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9868319034576416,
            0.9868319034576416,
            0.06709997355937958,
            0.06709997355937958,
            0.9868319034576416,
            0.9868319034576416,
            0.9868319034576416,
            0.9868319034576416
        ],
        "align_select": "select shop.Name, shop.position, shop.District",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "gold_select": "select shop.Name, shop.position, shop.District",
        "select_candidates": [
            "select shop.Name, shop.position, shop.District",
            "select shop.Name, shop.District, shop.position",
            "select shop.Name, shop.position, shop.District",
            "select shop.Name, shop.position, shop.District"
        ],
        "select_labels": [
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.23595961928367615,
            0.23595961928367615,
            0.0015249685384333134,
            0.0015249685384333134,
            0.23595961928367615,
            0.23595961928367615,
            0.23595961928367615,
            0.23595961928367615
        ],
        "align_select": "select shop.Name, shop.position, shop.District",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "How many different store locations are there?",
        "gold_select": "select count(distinct shop.position)",
        "select_candidates": [
            "select count(distinct shop.position)",
            "select count(distinct t1.c6)",
            "select count(distinct shop.District)",
            "select count(distinct shop.Number_products)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9954734444618225,
            0.9954734444618225,
            0.0005023005651310086,
            0.0005023005651310086,
            0.9409889578819275,
            0.9409889578819275,
            0.0006901572924107313,
            0.0006901572924107313
        ],
        "align_select": "select count(distinct shop.position)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Count the number of distinct store locations.",
        "gold_select": "select count(distinct shop.position)",
        "select_candidates": [
            "select count(distinct shop.position)",
            "select count(distinct shop.Shop_ID)",
            "select count(distinct shop.District)",
            "select count(distinct shop.Number_products)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9966642260551453,
            0.9966642260551453,
            0.0003797205281443894,
            0.0003797205281443894,
            0.9363899230957031,
            0.9363899230957031,
            0.0005041933618485928,
            0.0005041933618485928
        ],
        "align_select": "select count(distinct shop.position)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find the number of shops in each location.",
        "gold_select": "select count(*), shop.whereabouts",
        "select_candidates": [
            "select shop.whereabouts, count(*)",
            "select count(*), shop.whereabouts",
            "select shop_shop.whereabouts, count(*)",
            "select shop.whereabouts, count(*), shop.region"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9946897029876709,
            0.00015399069525301456,
            0.994556188583374,
            0.0001405732473358512,
            0.0008405284606851637,
            0.00015411483764182776,
            0.0004061309155076742,
            9.165388473775238e-05
        ],
        "align_select": "select shop.whereabouts, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How many shops are there in each location?",
        "gold_select": "select count(*), shop.whereabouts",
        "select_candidates": [
            "select shop.whereabouts, count(*)",
            "select count(*), shop.whereabouts",
            "select shop.whereabouts, count(*), shop.region",
            "select shop.region, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9939591884613037,
            0.00017665214545559138,
            0.9943723678588867,
            0.00015694853209424764,
            0.0006200313218869269,
            8.753521979087964e-05,
            0.995200514793396,
            0.00013581600796896964
        ],
        "align_select": "select shop.whereabouts, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Find the manager name and district of the shop whose number of products is the largest.",
        "gold_select": "select shop.Manager_name, shop.region",
        "select_candidates": [
            "select shop.Manager_name, shop.region",
            "select shop.Manager_name, shop.whereabouts",
            "select shop.Manager_name, shop.whereabouts, shop.region",
            "select shop.Manager_name, shop.region, shop.whereabouts"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9843624830245972,
            7.964232645463198e-05,
            0.7452389597892761,
            7.956262561492622e-05,
            0.0003125151270069182,
            7.306654151761904e-05,
            0.00028596114134415984,
            6.897933781147003e-05
        ],
        "align_select": "select shop.Manager_name, shop.region",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the manager name and district of the shop that sells the largest number of products?",
        "gold_select": "select shop.Manager_name, shop.region",
        "select_candidates": [
            "select shop.Manager_name, shop.region",
            "select shop.Manager_name, shop.whereabouts",
            "select shop.Manager_name, shop.whereabouts, shop.region",
            "select shop.Name, shop.whereabouts"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9820127487182617,
            0.00011205091868760064,
            0.2036110758781433,
            0.00010044104419648647,
            0.000340070080710575,
            9.557445446262136e-05,
            0.005089840851724148,
            9.743915870785713e-05
        ],
        "align_select": "select shop.Manager_name, shop.region",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Return the name, location and district of all shops in descending order of number of products.",
        "gold_select": "select shop.Name, shop.whereabouts, shop.region",
        "select_candidates": [
            "select shop.Name, shop.whereabouts, shop.region",
            "select shop.Name, shop.region, shop.whereabouts",
            "select shop.Name, shop.whereabouts, shop.region",
            "select shop.Name, shop.whereabouts, shop.region"
        ],
        "select_labels": [
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9903938174247742,
            0.9903938174247742,
            0.9866140484809875,
            0.9866140484809875,
            0.9903938174247742,
            0.9903938174247742,
            0.9903938174247742,
            0.9903938174247742
        ],
        "align_select": "select shop.Name, shop.whereabouts, shop.region",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "gold_select": "select shop.Name, shop.whereabouts, shop.region",
        "select_candidates": [
            "select shop.Name, shop.whereabouts, shop.region",
            "select shop.Name, shop.whereabouts, shop.region",
            "select shop.Name, shop.region, shop.whereabouts",
            "select shop.Name, shop.whereabouts, shop.region"
        ],
        "select_labels": [
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9544708132743835,
            0.9544708132743835,
            0.9544708132743835,
            0.9544708132743835,
            0.8087008595466614,
            0.8087008595466614,
            0.9544708132743835,
            0.9544708132743835
        ],
        "align_select": "select shop.Name, shop.whereabouts, shop.region",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
        "gold_select": "select shop.region",
        "select_candidates": [
            "select shop.region",
            "select shop.whereabouts",
            "select shop.region, shop.Number_products",
            "select shop.region, shop.whereabouts"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9938157796859741,
            0.9938157796859741,
            0.9428938627243042,
            0.9428938627243042,
            0.00014590597129426897,
            0.00014590597129426897,
            0.000274690828518942,
            0.000274690828518942
        ],
        "align_select": "select shop.region",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
        "gold_select": "select shop.region",
        "select_candidates": [
            "select shop.region",
            "select shop.whereabouts",
            "select shop.region, shop.whereabouts",
            "select shop.whereabouts, shop.region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9906065464019775,
            0.9906065464019775,
            0.9700105786323547,
            0.9700105786323547,
            0.00034187990240752697,
            0.00034187990240752697,
            0.00035844655940309167,
            0.00035844655940309167
        ],
        "align_select": "select shop.region",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "How many different store locations are there?",
        "gold_select": "select count(distinct shop.whereabouts)",
        "select_candidates": [
            "select count(distinct shop.whereabouts)",
            "select count(distinct t1.c6)",
            "select count(distinct shop.region)",
            "select count (distinct shop.whereabouts)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9939644932746887,
            0.9939644932746887,
            0.0005023005651310086,
            0.0005023005651310086,
            0.9552552103996277,
            0.9552552103996277,
            0.01450776495039463,
            0.01450776495039463
        ],
        "align_select": "select count(distinct shop.whereabouts)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Count the number of distinct store locations.",
        "gold_select": "select count(distinct shop.whereabouts)",
        "select_candidates": [
            "select count(distinct shop.whereabouts)",
            "select count(count(distinct shop.whereabouts)",
            "select count(distinct t1.c6)",
            "select count(distant shop.whereabouts)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9961734414100647,
            0.9961734414100647,
            0.00040176953189074993,
            0.00040176953189074993,
            0.0004083898675162345,
            0.0004083898675162345,
            0.00629536435008049,
            0.00629536435008049
        ],
        "align_select": "select count(distinct shop.whereabouts)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List document IDs, document names, and document descriptions for all documents.",
        "gold_select": "select Documents.Document_ID, Documents.document_designation, Documents.explanation",
        "select_candidates": [
            "select Documents.Document_ID, Documents.document_designation, Documents.explanation",
            "select Documents.Document_ID, Documents.Template_ID, Documents.explanation",
            "select Documents.Document_ID, Documents.document_designation, Documents.explanation",
            "select Documents.Document_ID, Documents.explanation, Documents.Other_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.0009740586974658072,
            9.140949259744957e-05,
            0.00034372578375041485,
            0.00010069172276416793,
            0.0009740586974658072,
            9.140949259744957e-05,
            0.00036954961251467466,
            8.30544377095066e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.document_designation, Documents.explanation",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the ids, names, and descriptions for all documents?",
        "gold_select": "select Documents.Document_ID, Documents.document_designation, Documents.explanation",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Template_ID, Documents.explanation",
            "select Documents.Document_ID, Documents.document_designation, Documents.explanation",
            "select Documents.Document_ID, Documents.explanation, Documents.Other_Details",
            "select Documents.Document_ID, Documents.explanation, Documents.document_designation"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.00043035371345467865,
            9.998741734307259e-05,
            0.0021538916043937206,
            8.462620462523773e-05,
            0.0006371648632921278,
            7.879715121816844e-05,
            0.0006303314585238695,
            7.722619193373248e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.Template_ID, Documents.explanation",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the document name and template id for document with description with the letter 'w' in it?",
        "gold_select": "select Documents.document_designation, Documents.Template_ID",
        "select_candidates": [
            "select Documents.Template_ID, Documents.document_designation",
            "select Documents.explanation, Documents.Template_ID",
            "select Documents.Other_Details, Documents.Template_ID",
            "select Documents.Template_ID, Documents.explanation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Ref_Template_Types Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.994597315788269,
            0.00011898115189978853,
            0.0072990418411791325,
            0.00012091938697267324,
            0.00044279955909587443,
            9.548600064590573e-05,
            0.9649854898452759,
            8.877639629645273e-05
        ],
        "align_select": "select Documents.Template_ID, Documents.document_designation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the names and template ids for documents that contain the letter w in their description.",
        "gold_select": "select Documents.document_designation, Documents.Template_ID",
        "select_candidates": [
            "select Documents.explanation, Documents.Template_ID",
            "select Documents.Template_ID, Documents.document_designation",
            "select Documents.Other_Details, Documents.Template_ID",
            "select Documents.Template_ID, Documents.explanation"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Ref_Template_Types Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.029000021517276764,
            0.00010985603148583323,
            0.9941878318786621,
            9.391652565682307e-05,
            0.0010823996271938086,
            0.00010108800051966682,
            0.9705678224563599,
            8.071255433605984e-05
        ],
        "align_select": "select Documents.Template_ID, Documents.document_designation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "gold_select": "select Documents.Document_ID, Documents.Template_ID, Documents.explanation",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Template_ID, Documents.explanation",
            "select Documents.Document_ID, Documents.Template_ID, Ref_Template_Types.description",
            "select Documents.Document_ID, Documents.Template_ID, Documents.document_designation",
            "select Documents.Document_ID, Documents.Template_ID & Documents.explanation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents",
            "Ref_Template_Types Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.995506763458252,
            0.0001340650487691164,
            0.9398354291915894,
            0.0001073774037649855,
            0.9925422668457031,
            0.00012242929369676858,
            0.9300631880760193,
            9.817745740292594e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.Template_ID, Documents.explanation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "gold_select": "select Documents.Document_ID, Documents.Template_ID, Documents.explanation",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Template_ID, Documents.explanation",
            "select Documents.Document_ID, Documents.Template_ID, Ref_Template_Types.description",
            "select Documents.Document_ID, Documents.Template_ID, Documents.Template_ID",
            "select Documents.Document_ID, Documents.Template_ID, Documents.document_designation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Ref_Template_Types Documents",
            "Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9953528642654419,
            0.0001142153560067527,
            0.9704601168632507,
            0.00010046287934528664,
            0.0001913149026222527,
            8.507688471581787e-05,
            0.989858090877533,
            0.00011328655091347173
        ],
        "align_select": "select Documents.Document_ID, Documents.Template_ID, Documents.explanation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many documents are using the template with type code 'PPT'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.Template_ID",
            "select count(*), Templates.tempalte_class_cipher",
            "select count(*), Templates.Template_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9945511221885681,
            0.00019862272893078625,
            0.00022490217816084623,
            0.0004028333642054349,
            0.0002671046240720898,
            0.00033732998417690396,
            0.0003582637873478234,
            0.0049310182221233845
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count the number of documents that use the PPT template type.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.tempalte_class_cipher",
            "select count(Documents.Document_ID)",
            "select count(*), Templates.Template_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9952329993247986,
            0.00014943860878702253,
            0.0002160983276553452,
            0.00034686876460909843,
            0.0016365601914003491,
            0.00010716178803704679,
            0.00020055484492331743,
            0.0009050993830896914
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the id and type code for the template used by the most documents?",
        "gold_select": "select Documents.Template_ID, Templates.tempalte_class_cipher",
        "select_candidates": [
            "select Templates.Template_ID, Templates.Template_ID",
            "select Documents.Template_ID, Templates.Template_ID",
            "select Documents.Template_ID, Templates.tempalte_class_cipher",
            "select Templates.Template_ID, Templates.tempalte_class_cipher"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.00027055368991568685,
            7.089881546562538e-05,
            0.0002424195408821106,
            7.26494035916403e-05,
            0.15241414308547974,
            0.00010129246220458299,
            0.5100359320640564,
            9.829313057707623e-05
        ],
        "align_select": "select Templates.Template_ID, Templates.tempalte_class_cipher",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Return the id and type code of the template that is used for the greatest number of documents.",
        "gold_select": "select Documents.Template_ID, Templates.tempalte_class_cipher",
        "select_candidates": [
            "select Templates.Template_ID, Templates.Template_ID",
            "select Documents.Template_ID, Templates.Template_ID",
            "select Documents.Template_ID, Templates.tempalte_class_cipher",
            "select Templates.Template_ID, Templates.tempalte_class_cipher"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.0002108575135935098,
            6.539088644785807e-05,
            0.00019831350073218346,
            6.616795872105286e-05,
            0.016895923763513565,
            7.934243330964819e-05,
            0.01996568962931633,
            7.57331945351325e-05
        ],
        "align_select": "select Templates.Template_ID, Templates.Template_ID",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show template ids, version numbers, and template type codes for all templates.",
        "gold_select": "select Templates.Template_ID, Templates.Version_Number, Templates.tempalte_class_cipher",
        "select_candidates": [
            "select Templates.Template_ID, Templates.Version_Number, Templates.tempalte_class_cipher",
            "select Templates.Template_ID, Templates.Version_Number, Templates.Template_ID",
            "select Templates.Template_ID, Templates.Version_Number, Templates.tempalte_class_cipher",
            "select Templates.Template_ID, Templates.Version_Number.c1, Templates.tempalte_class_cipher"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.004237782675772905,
            0.00010219154501101002,
            0.0003778017999138683,
            8.051407348830253e-05,
            0.004237782675772905,
            0.00010219154501101002,
            0.0007111016311682761,
            0.00010443816427141428
        ],
        "align_select": "select Templates.Template_ID, Templates.Version_Number, Templates.tempalte_class_cipher",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the ids, version numbers, and type codes for each template?",
        "gold_select": "select Templates.Template_ID, Templates.Version_Number, Templates.tempalte_class_cipher",
        "select_candidates": [
            "select Templates.Template_ID, Templates.Version_Number, Templates.tempalte_class_cipher",
            "select Templates.Template_ID, Templates.Version_Number, Templates.Template_ID",
            "select Templates.Template_ID, Templates.Version_Number, Templates.Date_Effective_To",
            "select Templates.Template_ID, Templates.Version_Number, Templates.tempalte_class_cipher"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.019035089761018753,
            0.00011440895468695089,
            0.0003594817244447768,
            0.00010920503700617701,
            0.0004819850146304816,
            0.00016224989667534828,
            0.019035089761018753,
            0.00011440895468695089
        ],
        "align_select": "select Templates.Template_ID, Templates.Version_Number, Templates.tempalte_class_cipher",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show all distinct template type codes for all templates.",
        "gold_select": "select distinct Templates.tempalte_class_cipher",
        "select_candidates": [
            "select distinct Templates.tempalte_class_cipher",
            "select distinct Templates.tempalte_class_cipher, Templates.Template_Details",
            "select distinct Templates.tempalte_class_cipher, Templates.Date_Effective_From",
            "select distinct Templates.tempalte_class_cipher, Templates.Date_Effective_To"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.0011325748637318611,
            0.0001431857090210542,
            0.0001749413786455989,
            7.253296644194052e-05,
            0.0001648468169150874,
            7.730576180620119e-05,
            0.00016592325118836015,
            7.497209298890084e-05
        ],
        "align_select": "select distinct Templates.tempalte_class_cipher",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the different template type codes?",
        "gold_select": "select distinct Templates.tempalte_class_cipher",
        "select_candidates": [
            "select distinct Ref_Template_Types.category_code",
            "select distinct Ref_Template_Types.description",
            "select distinct t0.c, Ref_Template_Types.description",
            "select distinct t0.c2"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Ref_Template_Types",
            "Ref_Template_Types Templates",
            "Templates",
            "Templates Paragraphs",
            "Templates Documents"
        ],
        "align_scores": [
            0.004716327413916588,
            6.832976214354858e-05,
            0.0017051640897989273,
            5.9846195654245093e-05,
            0.0002603539323899895,
            6.989629764575511e-05,
            0.005850071087479591,
            8.937992970459163e-05
        ],
        "align_select": "select distinct Ref_Template_Types.category_code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the ids of templates with template type code PP or PPT?",
        "gold_select": "select Templates.Template_ID",
        "select_candidates": [
            "select Templates.Template_ID",
            "select Templates.Template_ID, Templates.tempalte_class_cipher",
            "select Templates.Template_ID, Templates.Template_Details",
            "select Templates.Template_ID, Templates.Date_Effective_From"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9960924983024597,
            0.0013654031790792942,
            0.0001226003369083628,
            7.580588135169819e-05,
            0.00016818159201648086,
            8.213514229282737e-05,
            0.00019706755119841546,
            7.910958811407909e-05
        ],
        "align_select": "select Templates.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the ids of templates that have the code PP or PPT.",
        "gold_select": "select Templates.Template_ID",
        "select_candidates": [
            "select Templates.Template_ID",
            "select Templates.Template_ID, Templates.tempalte_class_cipher",
            "select Templates.Template_ID, Templates.Date_Effective_From",
            "select Templates.Template_ID - Templates.tempalte_class_cipher"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.995911717414856,
            0.0006334008648991585,
            0.0001149134332081303,
            6.856761319795623e-05,
            0.00018068285135086626,
            6.855557876406237e-05,
            0.0001501484657637775,
            6.890399527037516e-05
        ],
        "align_select": "select Templates.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many templates have template type code CV?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.Template_ID",
            "select count(*), Templates.tempalte_class_cipher",
            "select count(*), Templates.Version_Number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9942767024040222,
            0.0001025287710945122,
            0.00019795096886809915,
            6.638258491875604e-05,
            0.0001754361583152786,
            5.0148169975727797e-05,
            0.00021785308490507305,
            8.329269621754065e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count the number of templates of the type CV.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.tempalte_class_cipher",
            "select count(*), Templates.Template_ID",
            "select count(*), Templates.Version_Number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9959606528282166,
            0.00010813934204634279,
            0.00018203201761934906,
            0.00029201470897533,
            0.00017387475236319005,
            0.00011130420170957223,
            0.0001750969240674749,
            0.0009666557307355106
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the version number and template type code for the template with version number later than 5?",
        "gold_select": "select Templates.Version_Number, Templates.tempalte_class_cipher",
        "select_candidates": [
            "select Templates.Version_Number, Templates.tempalte_class_cipher",
            "select Templates.Version_Number, Templates.Template_ID",
            "select Templates.Version_Number, Templates.Template_Details",
            "select Templates.Version_Number, Templates.Version_Number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.25464892387390137,
            0.00010703372390707955,
            0.0010297205299139023,
            0.00012356105435173959,
            0.0018945651827380061,
            9.490358206676319e-05,
            0.0002841463137883693,
            7.278405973920599e-05
        ],
        "align_select": "select Templates.Version_Number, Templates.tempalte_class_cipher",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "gold_select": "select Templates.Version_Number, Templates.tempalte_class_cipher",
        "select_candidates": [
            "select Templates.Version_Number, Templates.tempalte_class_cipher",
            "select Templates.Version_Number, Templates.Template_ID",
            "select Templates.Version_Number, Templates.Template_Details",
            "select Templates.Version_Number, Templates.Date_Effective_From"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.00496442848816514,
            8.235489804064855e-05,
            0.000374302122509107,
            8.845808042678982e-05,
            0.0017724742647260427,
            6.681590457446873e-05,
            0.00017980187840294093,
            6.397953984560445e-05
        ],
        "align_select": "select Templates.Version_Number, Templates.tempalte_class_cipher",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all template type codes and number of templates for each.",
        "gold_select": "select Templates.tempalte_class_cipher, count(*)",
        "select_candidates": [
            "select Templates.tempalte_class_cipher, count(*)",
            "select Ref_Template_Types.category_code, count(*)",
            "select Ref_Template_Types.description, count(*)",
            "select t0.c2, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.002725316910073161,
            0.00015872791118454188,
            0.003083133837208152,
            0.00016875746950972825,
            0.00039884677971713245,
            0.00011257678124820814,
            0.00033271018764935434,
            0.00027066413895227015
        ],
        "align_select": "select Templates.tempalte_class_cipher, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the different template type codes, and how many templates correspond to each?",
        "gold_select": "select Templates.tempalte_class_cipher, count(*)",
        "select_candidates": [
            "select Templates.tempalte_class_cipher, count(*)",
            "select Ref_Template_Types.description, count(*)",
            "select Ref_Template_Types.category_code, count(*)",
            "select t0.c2, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.05413174629211426,
            0.0003276355564594269,
            0.0034591355361044407,
            0.00015617287135683,
            0.7114736437797546,
            0.00019324691675137728,
            0.0007895551971159875,
            0.0002274361759191379
        ],
        "align_select": "select Ref_Template_Types.category_code, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Which template type code has most number of templates?",
        "gold_select": "select Templates.tempalte_class_cipher",
        "select_candidates": [
            "select Ref_Template_Types.category_code",
            "select Templates.tempalte_class_cipher",
            "select Ref_Template_Types.description",
            "select t0.c2"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates",
            "Ref_Template_Types Templates",
            "Templates Documents",
            "Templates Documents Paragraphs",
            "Documents Templates"
        ],
        "align_scores": [
            0.028934571892023087,
            7.756502600386739e-05,
            0.013823898509144783,
            8.039399835979566e-05,
            0.0006459311116486788,
            6.454835965996608e-05,
            0.0010499716736376286,
            6.860031135147437e-05
        ],
        "align_select": "select Ref_Template_Types.category_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Return the type code of the template type that the most templates belong to.",
        "gold_select": "select Templates.tempalte_class_cipher",
        "select_candidates": [
            "select Templates.tempalte_class_cipher",
            "select Ref_Template_Types.category_code",
            "select Ref_Template_Types.description",
            "select t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates",
            "Ref_Template_Types Templates",
            "Templates Documents",
            "Templates Documents Paragraphs",
            "Templates Paragraphs"
        ],
        "align_scores": [
            0.020645245909690857,
            8.250267273979262e-05,
            0.010210568085312843,
            7.279169949470088e-05,
            0.0003986692463513464,
            6.664295506197959e-05,
            0.0005993127706460655,
            7.059442577883601e-05
        ],
        "align_select": "select Templates.tempalte_class_cipher",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show all template type codes with less than three templates.",
        "gold_select": "select Templates.tempalte_class_cipher",
        "select_candidates": [
            "select Templates.tempalte_class_cipher",
            "select Ref_Template_Types.category_code",
            "select Ref_Template_Types.description",
            "select t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates",
            "Ref_Template_Types Templates",
            "Templates Ref_Template_Types",
            "Paragraphs Templates",
            "Templates Documents",
            "Documents Templates",
            "Templates Paragraphs"
        ],
        "align_scores": [
            0.009964308701455593,
            0.00011286204244242981,
            0.0102804871276021,
            0.00016434724966529757,
            0.0007240739651024342,
            0.00010656911763362586,
            0.0004288937197998166,
            0.00015605674707330763
        ],
        "align_select": "select Templates.tempalte_class_cipher",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the codes of template types that have fewer than 3 templates?",
        "gold_select": "select Templates.tempalte_class_cipher",
        "select_candidates": [
            "select Ref_Template_Types.category_code",
            "select Ref_Template_Types.description, Templates.tempalte_class_cipher",
            "select Ref_Template_Types.category_code, Templates.tempalte_class_cipher",
            "select Documents.Template_ID, Ref_Template_Types.category_code"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates",
            "Ref_Template_Types Templates",
            "Paragraphs Templates",
            "Templates Ref_Template_Types",
            "Documents Templates"
        ],
        "align_scores": [
            0.9932193160057068,
            0.00014554386143572628,
            0.0012454540701583028,
            7.3771778261289e-05,
            0.0004663872823584825,
            7.493735756725073e-05,
            0.00043112837010994554,
            9.777963714441285e-05
        ],
        "align_select": "select Ref_Template_Types.category_code",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What the smallest version number and its template type code?",
        "gold_select": "select min(Templates.Version_Number), Templates.tempalte_class_cipher",
        "select_candidates": [
            "select min(Templates.Version_Number), Templates.tempalte_class_cipher",
            "select min(Templates.Version_Number), min(Templates.tempalte_class_cipher)",
            "select Templates.Version_Number, Templates.tempalte_class_cipher",
            "select min(Templates.Version_Number), max(Templates.tempalte_class_cipher)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.00010676023521227762,
            6.966624641790986e-05,
            0.00014800771896261722,
            0.00016535735630895942,
            0.6185111403465271,
            0.9179505705833435,
            0.00014859258953947574,
            0.0001654587686061859
        ],
        "align_select": "select Templates.Version_Number, Templates.tempalte_class_cipher",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Return the lowest version number, along with its corresponding template type code.",
        "gold_select": "select min(Templates.Version_Number), Templates.tempalte_class_cipher",
        "select_candidates": [
            "select Templates.Version_Number, Templates.tempalte_class_cipher",
            "select min(Templates.Version_Number), Templates.tempalte_class_cipher",
            "select Templates.Template_ID, Templates.tempalte_class_cipher",
            "select lowest(Templates.Version_Number), Templates.tempalte_class_cipher"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.05337164178490639,
            6.036100603523664e-05,
            8.332741708727553e-05,
            6.616681639570743e-05,
            0.0001718159473966807,
            6.35278265690431e-05,
            0.0001229711197083816,
            7.862728671170771e-05
        ],
        "align_select": "select Templates.Version_Number, Templates.tempalte_class_cipher",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the template type code of the template used by document with the name \"Data base\"?",
        "gold_select": "select Templates.tempalte_class_cipher",
        "select_candidates": [
            "select Templates.tempalte_class_cipher",
            "select Templates.Template_ID",
            "select Templates.Template_Details",
            "select Templates.Date_Effective_From"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.004697504919022322,
            8.872638863977045e-05,
            0.010345050133764744,
            0.00010065678361570463,
            0.4736616611480713,
            9.432715160073712e-05,
            0.035023033618927,
            8.5335188487079e-05
        ],
        "align_select": "select Templates.Template_Details",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the template type code of the template that is used by a document named Data base.",
        "gold_select": "select Templates.tempalte_class_cipher",
        "select_candidates": [
            "select Templates.tempalte_class_cipher",
            "select Templates.Template_Details",
            "select Templates.Template_ID",
            "select Templates.Version_Number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.0014635426923632622,
            8.132382208714262e-05,
            0.011885966174304485,
            0.00011577142868191004,
            0.018479501828551292,
            9.846923057921231e-05,
            0.0005063290591351688,
            0.00021516901324503124
        ],
        "align_select": "select Templates.tempalte_class_cipher",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all document names using templates with template type code BK.",
        "gold_select": "select Documents.document_designation",
        "select_candidates": [
            "select Documents.document_designation",
            "select Documents.document_designation, Documents.explanation",
            "select Documents.Document_ID, Documents.document_designation",
            "select Documents.document_designation, Templates.Template_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.996442973613739,
            8.092062489595264e-05,
            0.00035909266443923116,
            6.477911665569991e-05,
            0.00013347332424018532,
            6.337981903925538e-05,
            0.0003889546205755323,
            6.326647417154163e-05
        ],
        "align_select": "select Documents.document_designation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of documents that use templates with the code BK?",
        "gold_select": "select Documents.document_designation",
        "select_candidates": [
            "select Documents.Template_ID",
            "select Documents.explanation",
            "select Documents.Other_Details",
            "select Documents.explanation, Documents.Other_Details"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.0009781366679817438,
            0.00030085546313785017,
            0.9661385416984558,
            0.0001024708035402,
            0.9422098398208618,
            7.933925371617079e-05,
            0.023450544103980064,
            6.601795030292124e-05
        ],
        "align_select": "select Documents.explanation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all template type codes and the number of documents using each type.",
        "gold_select": "select Templates.tempalte_class_cipher, count(*)",
        "select_candidates": [
            "select Documents.document_designation, count(*)",
            "select Documents.Template_ID, count(*)",
            "select Documents.document_designation, count(Documents.Document_ID)",
            "select Documents.document_designation, count(Documents.Template_ID)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Documents",
            "Templates Documents"
        ],
        "align_scores": [
            0.0008971939678303897,
            0.00025387207278981805,
            0.016072668135166168,
            0.0003684736730065197,
            0.00022295181406661868,
            0.00015762554539833218,
            0.0002541992871556431,
            0.00020557944662868977
        ],
        "align_select": "select Documents.document_designation, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the different template type codes, and how many documents use each type?",
        "gold_select": "select Templates.tempalte_class_cipher, count(*)",
        "select_candidates": [
            "select Documents.document_designation, count(*)",
            "select Documents.Template_ID, count(*)",
            "select t2.c5, count(*)",
            "select Documents.Other_Details, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Documents",
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.001118871383368969,
            0.00028561512590385973,
            0.28764113783836365,
            0.0006728987209498882,
            0.0011496340157464147,
            0.00020187847258057445,
            0.3726999759674072,
            0.00035959726665169
        ],
        "align_select": "select Documents.Other_Details, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Which template type code is used by most number of documents?",
        "gold_select": "select Templates.tempalte_class_cipher",
        "select_candidates": [
            "select Templates.tempalte_class_cipher",
            "select Documents.document_designation",
            "select Templates.Template_ID",
            "select Templates.Version_Number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents",
            "Documents",
            "Paragraphs Documents"
        ],
        "align_scores": [
            0.011995918117463589,
            7.914438174339011e-05,
            0.03679085522890091,
            6.806805322412401e-05,
            0.22011488676071167,
            8.723023347556591e-05,
            0.0005707931122742593,
            7.125153206288815e-05
        ],
        "align_select": "select Templates.Template_ID",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Return the code of the template type that is most commonly used in documents.",
        "gold_select": "select Templates.tempalte_class_cipher",
        "select_candidates": [
            "select Templates.tempalte_class_cipher",
            "select Documents.Template_ID",
            "select Templates.Template_Details",
            "select Documents.document_designation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents",
            "Documents"
        ],
        "align_scores": [
            0.05760626867413521,
            6.566502270288765e-05,
            0.989750325679779,
            7.829552487237379e-05,
            0.8378630876541138,
            6.730679160682485e-05,
            0.0194708164781332,
            6.988096720306203e-05
        ],
        "align_select": "select Documents.Template_ID",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show all template type codes that are not used by any document.",
        "gold_select": "select Templates.tempalte_class_cipher",
        "select_candidates": [
            "select Templates.tempalte_class_cipher",
            "select Ref_Template_Types.category_code",
            "select Ref_Template_Types.description",
            "select t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Templates",
            "Templates",
            "Paragraphs Templates Documents"
        ],
        "align_scores": [
            0.00403665890917182,
            0.0004647941968869418,
            0.09616170823574066,
            0.002229927573353052,
            0.026281671598553658,
            0.0016106885159388185,
            0.0036075760144740343,
            0.0007801240426488221
        ],
        "align_select": "select Templates.tempalte_class_cipher",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "What are the codes of template types that are not used for any document?",
        "gold_select": "select Templates.tempalte_class_cipher",
        "select_candidates": [
            "select Ref_Template_Types.category_code",
            "select Ref_Template_Types.description, Templates.tempalte_class_cipher",
            "select Documents.Template_ID, t0.c2",
            "select Documents.Template_ID, Ref_Template_Types.category_code"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Templates",
            "Templates Documents",
            "Paragraphs Templates Documents"
        ],
        "align_scores": [
            0.9461792707443237,
            0.9612076282501221,
            0.0007122145034372807,
            0.0004902285290881991,
            0.00035142115666531026,
            0.0003256925265304744,
            0.00025323216686956584,
            0.00020871883316431195
        ],
        "align_select": "select Ref_Template_Types.category_code",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Show all template type codes and descriptions.",
        "gold_select": "select Ref_Template_Types.category_code, Ref_Template_Types.description",
        "select_candidates": [
            "select Ref_Template_Types.category_code, Ref_Template_Types.description",
            "select Ref_Template_Types.description, Ref_Template_Types.category_code",
            "select t0.c2, Ref_Template_Types.description",
            "select t0.co, Ref_Template_Types.description"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types"
        ],
        "align_scores": [
            0.0006724499398842454,
            0.00022332053049467504,
            0.0006871772930026054,
            0.0002100242127198726,
            0.0009014055831357837,
            0.00033598009031265974,
            0.002019734587520361,
            0.0005283247446641326
        ],
        "align_select": "select Ref_Template_Types.category_code, Ref_Template_Types.description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the type codes and descriptions for all template types?",
        "gold_select": "select Ref_Template_Types.category_code, Ref_Template_Types.description",
        "select_candidates": [
            "select Ref_Template_Types.category_code, Ref_Template_Types.description",
            "select Ref_Template_Types.description, Ref_Template_Types.category_code",
            "select t0.c2, Ref_Template_Types.description",
            "select Ref_Template_Types.description, t0.c2"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types"
        ],
        "align_scores": [
            0.0010264745214954019,
            0.00011179328430444002,
            0.000986273167654872,
            0.0001081728478311561,
            0.0008157619740813971,
            0.00011118019028799608,
            0.0010693452786654234,
            0.00010877475142478943
        ],
        "align_select": "select Ref_Template_Types.category_code, Ref_Template_Types.description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the template type descriptions for template type code \"AD\".",
        "gold_select": "select Ref_Template_Types.description",
        "select_candidates": [
            "select Ref_Template_Types.description",
            "select Ref_Template_Types.description, t0.c2",
            "select Ref_Template_Types.category_code, Ref_Template_Types.description",
            "select Ref_Template_Types.description, Ref_Template_Types.category_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types"
        ],
        "align_scores": [
            0.9960368275642395,
            9.012332884594798e-05,
            0.0002551372745074332,
            7.793284021317959e-05,
            0.0001545524864923209,
            7.759690925013274e-05,
            0.00013662053970620036,
            6.990936526563019e-05
        ],
        "align_select": "select Ref_Template_Types.description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the template type description of the template type with the code AD.",
        "gold_select": "select Ref_Template_Types.description",
        "select_candidates": [
            "select Ref_Template_Types.description",
            "select Ref_Template_Types.category_code, Ref_Template_Types.description",
            "select Ref_Template_Types.description, t0.c2",
            "select Ref_Template_Types.description, Ref_Template_Types.category_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types",
            "Ref_Template_Types Templates",
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Templates Paragraphs"
        ],
        "align_scores": [
            0.9963628649711609,
            6.657270569121465e-05,
            0.00012057326966896653,
            6.226696859812364e-05,
            0.00025177374482154846,
            6.755525100743398e-05,
            0.00011292470298940316,
            6.22199586359784e-05
        ],
        "align_select": "select Ref_Template_Types.description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the template type code for template type description \"Book\".",
        "gold_select": "select Ref_Template_Types.category_code",
        "select_candidates": [
            "select Ref_Template_Types.category_code",
            "select t0.c, Ref_Template_Types.description",
            "select Ref_Template_Types.category_code, Ref_Template_Types.description",
            "select t0.c, Ref_Template_Types.category_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.000951949623413384,
            7.30514875613153e-05,
            0.00022360048023983836,
            7.427769742207602e-05,
            0.00013191877224016935,
            6.061838212190196e-05,
            0.00029340109904296696,
            7.704510062467307e-05
        ],
        "align_select": "select Ref_Template_Types.category_code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the type code of the template type with the description \"Book\".",
        "gold_select": "select Ref_Template_Types.category_code",
        "select_candidates": [
            "select Ref_Template_Types.category_code",
            "select t0.c, Ref_Template_Types.description",
            "select Ref_Template_Types.description, Ref_Template_Types.category_code",
            "select Ref_Template_Types.category_code, Ref_Template_Types.description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types"
        ],
        "align_scores": [
            0.0006619701744057238,
            7.66895100241527e-05,
            0.00017820960783865303,
            7.94360094005242e-05,
            0.0001379575114697218,
            7.041544449748471e-05,
            0.0001432702410966158,
            6.193520675878972e-05
        ],
        "align_select": "select Ref_Template_Types.category_code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the distinct template type descriptions for the templates ever used by any document?",
        "gold_select": "select distinct Ref_Template_Types.description",
        "select_candidates": [
            "select distinct Ref_Template_Types.description",
            "select distinct Ref_Template_Types.description, Templates.Template_Details",
            "select distinct Ref_Template_Types.category_code, Ref_Template_Types.description",
            "select distinct Ref_Template_Types.description, Templates.tempalte_class_cipher"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types Templates Documents",
        "table_candidates": [
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9639469981193542,
            0.02498757280409336,
            0.0005373368039727211,
            0.00014840354560874403,
            0.00023881386732682586,
            0.00010912060679402202,
            0.0002769035054370761,
            0.00016790565859992057
        ],
        "align_select": "select distinct Ref_Template_Types.description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Return the different descriptions for templates that have been used in a document.",
        "gold_select": "select distinct Ref_Template_Types.description",
        "select_candidates": [
            "select distinct Ref_Template_Types.description",
            "select distinct Ref_Template_Types.description, Documents.document_designation",
            "select distinct Ref_Template_Types.description, Documents.explanation",
            "select different Ref_Template_Types.description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types Templates Documents",
        "table_candidates": [
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Documents",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9774061441421509,
            0.0076300399377942085,
            0.0008361085783690214,
            0.00016726204194128513,
            0.0009659123606979847,
            0.00016014584980439395,
            0.09120302647352219,
            0.0003264762053731829
        ],
        "align_select": "select distinct Ref_Template_Types.description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the template ids with template type description \"Presentation\".",
        "gold_select": "select Templates.Template_ID",
        "select_candidates": [
            "select Templates.Template_ID",
            "select Templates.Template_ID, Ref_Template_Types.description",
            "select Templates.Template_ID, Templates.Template_Details",
            "select Templates.Template_ID, Templates.tempalte_class_cipher"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types Templates",
        "table_candidates": [
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9966046810150146,
            0.00011624456237768754,
            0.0001630417536944151,
            6.84514525346458e-05,
            0.000139736250275746,
            6.459478754550219e-05,
            0.00010928815754596144,
            6.0992621001787484e-05
        ],
        "align_select": "select Templates.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the ids corresponding to templates with the description 'Presentation'.",
        "gold_select": "select Templates.Template_ID",
        "select_candidates": [
            "select Templates.Template_ID",
            "select Templates.Template_ID, Ref_Template_Types.description",
            "select Templates.Template_ID - Ref_Template_Types.description",
            "select Templates.Template_ID, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types Templates",
        "table_candidates": [
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9966578483581543,
            0.00010485127131687477,
            0.00017019682854879647,
            7.293344242498279e-05,
            0.00038854137528687716,
            0.00010400702740298584,
            0.000277933431789279,
            7.91252896306105e-05
        ],
        "align_select": "select Templates.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many paragraphs for the document with name 'Summer Show'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Documents.Document_ID",
            "select count(*), Documents.Template_ID",
            "select count(*), Paragraphs.Document_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9955456256866455,
            6.71743109705858e-05,
            0.0001688278280198574,
            6.108541128924116e-05,
            0.00019535089086275548,
            6.486392521765083e-05,
            0.00016299278649967164,
            6.175945600261912e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count the number of paragraphs in the document named 'Summer Show'.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Documents.Document_ID",
            "select count(distinct Paragraphs.Paragraph_ID)",
            "select count(*), Documents.Template_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.996163010597229,
            6.970465619815513e-05,
            0.00016680809494573623,
            5.83914625167381e-05,
            0.0003239913785364479,
            6.280853267526254e-05,
            0.00020684055925812572,
            6.448868225561455e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show paragraph details for paragraph with text 'Korea '.",
        "gold_select": "select Paragraphs.particularities",
        "select_candidates": [
            "select Paragraphs.particularities",
            "select Paragraphs.content, Paragraphs.particularities",
            "select Paragraphs.Document_ID, Paragraphs.particularities",
            "select Paragraphs.Document_ID, Paragraphs.content"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs"
        ],
        "align_scores": [
            0.9949671626091003,
            0.00019468614482320845,
            0.0002869060554075986,
            8.73963363119401e-05,
            0.00024172020494006574,
            8.745303057366982e-05,
            0.0002365263062529266,
            9.96688031591475e-05
        ],
        "align_select": "select Paragraphs.particularities",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the details for the paragraph that includes the text 'Korea '?",
        "gold_select": "select Paragraphs.particularities",
        "select_candidates": [
            "select Paragraphs.particularities",
            "select Paragraphs.content, Paragraphs.particularities",
            "select Paragraphs.Document_ID, Paragraphs.content",
            "select Paragraphs.Document_ID, Paragraphs.particularities"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.993316650390625,
            0.00014494819333776832,
            0.0002839196240529418,
            7.097891648299992e-05,
            0.0002453035267535597,
            7.967810961417854e-05,
            0.0002842343528755009,
            8.697059820406139e-05
        ],
        "align_select": "select Paragraphs.particularities",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "gold_select": "select Paragraphs.Paragraph_ID, Paragraphs.content",
        "select_candidates": [
            "select Paragraphs.Paragraph_ID, Paragraphs.content",
            "select Documents.Document_ID, Paragraphs.content",
            "select Documents.Document_ID, Documents.document_designation",
            "select Paragraphs.Document_ID, Paragraphs.content"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs"
        ],
        "align_scores": [
            0.9951959252357483,
            0.0002560415887273848,
            0.0006073058466427028,
            0.00027402094565331936,
            0.00032919415389187634,
            0.00016219621466007084,
            0.0005423568072728813,
            0.0002783373056445271
        ],
        "align_select": "select Paragraphs.Paragraph_ID, Paragraphs.content",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "gold_select": "select Paragraphs.Paragraph_ID, Paragraphs.content",
        "select_candidates": [
            "select Paragraphs.Paragraph_ID, Paragraphs.content",
            "select Documents.Document_ID, Paragraphs.content",
            "select Documents.Document_ID, Documents.document_designation",
            "select Paragraphs.Paragraph_ID, Paragraphs.content, Paragraphs.particularities"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9930309653282166,
            0.00017227695207111537,
            0.0005858854856342077,
            0.00010126870620297268,
            0.0003552692069206387,
            7.584232662338763e-05,
            0.0002245131036033854,
            8.613368845544755e-05
        ],
        "align_select": "select Paragraphs.Paragraph_ID, Paragraphs.content",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all paragraph texts for the document \"Customer reviews\".",
        "gold_select": "select Paragraphs.content",
        "select_candidates": [
            "select Paragraphs.content",
            "select Paragraphs.content, Paragraphs.particularities",
            "select Paragraphs.Document_ID, Paragraphs.content",
            "select Paragraphs.Paragraph_ID, Paragraphs.content"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9949727058410645,
            7.798577280482277e-05,
            0.0002334530436201021,
            5.675941065419465e-05,
            0.0002899954852182418,
            6.905581540195271e-05,
            0.0001795895950635895,
            6.22777224634774e-05
        ],
        "align_select": "select Paragraphs.content",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "gold_select": "select Paragraphs.content",
        "select_candidates": [
            "select Paragraphs.content",
            "select Paragraphs.content, Paragraphs.particularities",
            "select Paragraphs.Document_ID, Paragraphs.content",
            "select Paragraphs.Paragraph_ID, Paragraphs.content"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9944145679473877,
            9.456770931137726e-05,
            0.0002546016767155379,
            6.223907257663086e-05,
            0.00021432277571875602,
            6.630660936934873e-05,
            0.00019081607752013952,
            6.650620343862101e-05
        ],
        "align_select": "select Paragraphs.content",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all document ids, names and the number of paragraphs in each document.",
        "gold_select": "select Paragraphs.Document_ID, Documents.document_designation, count(*)",
        "select_candidates": [
            "select Documents.Document_ID, Documents.document_designation, count(*)",
            "select Paragraphs.Document_ID, Documents.document_designation, count(*)",
            "select Documents.Document_ID, Documents.document_designation, count(*)",
            "select Documents.Document_ID, Documents.Template_ID, count(*)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9880395531654358,
            0.00018259069474879652,
            0.9806755185127258,
            0.00017802583170123398,
            0.9880395531654358,
            0.00018259069474879652,
            0.00013217954256106168,
            0.0001218771722051315
        ],
        "align_select": "select Documents.Document_ID, Documents.document_designation, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
        "gold_select": "select Paragraphs.Document_ID, Documents.document_designation, count(*)",
        "select_candidates": [
            "select Documents.Document_ID, Documents.document_designation, count(*)",
            "select Documents.Document_ID, Documents.document_designation, count(*)",
            "select Paragraphs.Document_ID, Documents.document_designation, count(*)",
            "select Documents.Document_ID, Documents.explanation, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9908328652381897,
            0.0002953268704004586,
            0.9908328652381897,
            0.0002953268704004586,
            0.9404709935188293,
            0.0002803951210808009,
            0.9638508558273315,
            0.00024846993619576097
        ],
        "align_select": "select Documents.Document_ID, Documents.document_designation, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the document id and name with greatest number of paragraphs?",
        "gold_select": "select Paragraphs.Document_ID, Documents.document_designation",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Template_ID",
            "select Paragraphs.Document_ID, Documents.document_designation",
            "select Documents.Document_ID, Documents.document_designation",
            "select Paragraphs.Document_ID, Documents.Template_ID"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.00022699292458128184,
            5.846579733770341e-05,
            0.00845074001699686,
            6.573231803486124e-05,
            0.992749035358429,
            6.133359420346096e-05,
            0.00017268380906898528,
            5.875122587895021e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.document_designation",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Return the id and name of the document with the most paragraphs.",
        "gold_select": "select Paragraphs.Document_ID, Documents.document_designation",
        "select_candidates": [
            "select Documents.Document_ID, Documents.explanation",
            "select Documents.Document_ID, Documents.document_designation",
            "select Documents.Document_ID, Documents.Template_ID",
            "select Documents.Document_ID, t2.c5"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.991797685623169,
            6.136605952633545e-05,
            0.9951240420341492,
            6.484233745140955e-05,
            0.00014747690875083208,
            5.8002751757157966e-05,
            0.0002848444855771959,
            6.054669211152941e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.explanation",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.content",
            "select Paragraphs.Paragraph_ID",
            "select Paragraphs.Document_ID, Paragraphs.content, Paragraphs.particularities"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9963451027870178,
            9.076387505047023e-05,
            0.00015282983076758683,
            6.668338755844161e-05,
            0.0030907539185136557,
            8.442599209956825e-05,
            0.0001403909409418702,
            6.215757457539439e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.content",
            "select Paragraphs.Paragraph_ID",
            "select Paragraphs.Document_ID, Paragraphs.particularities"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs"
        ],
        "align_scores": [
            0.9941238760948181,
            0.00020039983792230487,
            0.00014546935562975705,
            6.495615525636822e-05,
            0.9937969446182251,
            0.00037327874451875687,
            0.00014868925791233778,
            6.493001274066046e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "List document IDs, document names, and document descriptions for all documents.",
        "gold_select": "select Documents.Document_ID, Documents.filename, Documents.Document_Description",
        "select_candidates": [
            "select Documents.Document_ID, Documents.filename, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID, Documents.filename, Documents.Document_Description",
            "select Documents.Document_ID, Documents.filename.c2, Documents.Document_Description",
            "select Documents.Document_ID, Documents.filename, Documents.Document_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9951075315475464,
            0.00010510093125049025,
            0.00027882412541657686,
            7.250213093357161e-05,
            0.0003466294438112527,
            7.82827555667609e-05,
            0.9951075315475464,
            0.00010510093125049025
        ],
        "align_select": "select Documents.Document_ID, Documents.filename, Documents.Document_Description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the ids, names, and descriptions for all documents?",
        "gold_select": "select Documents.Document_ID, Documents.filename, Documents.Document_Description",
        "select_candidates": [
            "select Documents.Document_ID, Documents.filename, Documents.Document_Description",
            "select Documents.Document_ID, Documents.filename, Documents.Document_Description",
            "select Documents.Document_ID, Documents.filename.c3, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Document_Description, Documents.filename"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9922829270362854,
            0.00013965285324957222,
            0.9922829270362854,
            0.00013965285324957222,
            0.0004699404234997928,
            8.488547609886155e-05,
            0.0006248787394724786,
            9.546751243760809e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.filename, Documents.Document_Description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the document name and template id for document with description with the letter 'w' in it?",
        "gold_select": "select Documents.filename, Documents.Template_ID",
        "select_candidates": [
            "select Documents.filename, Documents.Template_ID",
            "select Documents.Document_ID, Documents.filename",
            "select Documents.Template_ID, Documents.filename",
            "select Documents.Other_Details, Documents.filename"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9944725632667542,
            0.00014926913718227297,
            0.1735062599182129,
            9.116531145991758e-05,
            0.994972825050354,
            0.00013373921683523804,
            0.0003723894478753209,
            7.86155869718641e-05
        ],
        "align_select": "select Documents.filename, Documents.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the names and template ids for documents that contain the letter w in their description.",
        "gold_select": "select Documents.filename, Documents.Template_ID",
        "select_candidates": [
            "select Documents.filename, Documents.Template_ID",
            "select Documents.Document_ID, Documents.filename",
            "select Documents.Template_ID, Documents.filename",
            "select Documents.Other_Details, Documents.filename"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.8843050599098206,
            0.00015064697072375566,
            0.004476915579289198,
            9.41829857765697e-05,
            0.2613165080547333,
            0.00010111238952958956,
            0.00036396877840161324,
            7.267150067491457e-05
        ],
        "align_select": "select Documents.filename, Documents.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "gold_select": "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID.c1, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID & Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description."
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9956185221672058,
            0.0001151810065493919,
            0.0013532134471461177,
            8.331454591825604e-05,
            0.9166044592857361,
            7.753611134830862e-05,
            0.0014928232412785292,
            8.03700095275417e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "gold_select": "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID.c1, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description.",
            "select Documents.Document_ID-, Documents.Template_ID, Documents.Document_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9954683780670166,
            0.00011053336493205279,
            0.0017106573795899749,
            8.265937503892928e-05,
            0.0018878290429711342,
            7.778330473229289e-05,
            0.0011566570028662682,
            9.035721450345591e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the template type code of the template used by document with the name \"Data base\"?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Documents.Template_ID",
            "select Templates.Template_Type_Code, Documents.Document_ID",
            "select Templates.Template_Type_Code (ref. Templates.Template_Details)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9945762157440186,
            9.507387585472316e-05,
            0.0001748953654896468,
            6.952296826057136e-05,
            0.00020961549307685345,
            6.584724906133488e-05,
            0.0010720003629103303,
            7.10448730387725e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the template type code of the template that is used by a document named Data base.",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Documents.Template_ID",
            "select Templates.Template_Type_Code, Documents.Document_ID",
            "select Templates.Template_Type_Code (ref. Templates.Template_Details)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9928170442581177,
            9.590046101948246e-05,
            0.00026398428599350154,
            6.991989357629791e-05,
            0.0002614798431750387,
            6.920229498064145e-05,
            0.0007491065771318972,
            6.863911403343081e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all document names using templates with template type code BK.",
        "gold_select": "select Documents.filename",
        "select_candidates": [
            "select Documents.filename",
            "select Documents.Document_ID, Documents.filename",
            "select Documents.filename, Documents.Document_Description",
            "select Documents.filename, Templates.Template_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9958747029304504,
            7.487107359338552e-05,
            0.00012622818758245558,
            6.789172039134428e-05,
            0.00020826321269851178,
            6.635695172008127e-05,
            0.0003844813327305019,
            6.52098678983748e-05
        ],
        "align_select": "select Documents.filename",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of documents that use templates with the code BK?",
        "gold_select": "select Documents.filename",
        "select_candidates": [
            "select Documents.filename",
            "select Documents.Document_ID, Documents.filename",
            "select Documents.filename, Documents.Document_Description",
            "select Documents.Template_ID, Documents.filename"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents",
            "Documents"
        ],
        "align_scores": [
            0.938467800617218,
            0.0001030073908623308,
            0.00016796829004306346,
            6.547169323312119e-05,
            0.00024849839974194765,
            6.28679190413095e-05,
            0.00022323260782286525,
            7.06505888956599e-05
        ],
        "align_select": "select Documents.filename",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many paragraphs for the document with name 'Summer Show'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Documents.Document_ID",
            "select count(*), Documents.Template_ID",
            "select count(*), Documents.Document_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9955456256866455,
            6.71743109705858e-05,
            0.0001688278280198574,
            6.108541128924116e-05,
            0.00019535089086275548,
            6.486392521765083e-05,
            0.00027530299848876894,
            5.9805228374898434e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count the number of paragraphs in the document named 'Summer Show'.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Documents.Document_ID",
            "select count(*), Documents.Template_ID",
            "select count(*), Documents.Document_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.996163010597229,
            7.369914965238422e-05,
            0.00016680809494573623,
            6.284310074988753e-05,
            0.00020684055925812572,
            6.825225136708468e-05,
            0.00028465306968428195,
            5.807260822621174e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show paragraph details for paragraph with text 'Korea '.",
        "gold_select": "select Paragraphs.else_details",
        "select_candidates": [
            "select Paragraphs.else_details",
            "select Paragraphs.Paragraph_Text, Paragraphs.else_details",
            "select Paragraphs.Document_ID, Paragraphs.else_details",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs"
        ],
        "align_scores": [
            0.014531790278851986,
            0.00035421494976617396,
            0.0001936783519340679,
            0.00013504015805665404,
            0.0002115252282237634,
            0.0001423905632691458,
            0.00021780178940389305,
            0.0001436306774849072
        ],
        "align_select": "select Paragraphs.else_details",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the details for the paragraph that includes the text 'Korea '?",
        "gold_select": "select Paragraphs.else_details",
        "select_candidates": [
            "select Paragraphs.else_details",
            "select Paragraphs.Paragraph_Text, Paragraphs.else_details",
            "select Paragraphs.Document_ID, Paragraphs.else_details",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.1706976443529129,
            0.0001325243356404826,
            0.00023637346748728305,
            7.631839980604127e-05,
            0.000284802372334525,
            7.557462231488898e-05,
            0.00033882918069139123,
            7.850291149225086e-05
        ],
        "align_select": "select Paragraphs.else_details",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "gold_select": "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
        "select_candidates": [
            "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
            "select Documents.Document_ID, Paragraphs.Paragraph_Text",
            "select Documents.Document_ID, Documents.filename",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9957453608512878,
            0.000140949065098539,
            0.0004935350734740496,
            9.035049879457802e-05,
            0.0007118466892279685,
            0.00020749514806084335,
            0.0008069605682976544,
            9.101894829655066e-05
        ],
        "align_select": "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "gold_select": "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
        "select_candidates": [
            "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
            "select Documents.Document_ID, Paragraphs.Paragraph_Text",
            "select param_Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
            "select Documents.Document_ID, Documents.filename"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9949996471405029,
            0.00017912274051923305,
            0.0005559312994591892,
            0.00012161563063273206,
            0.0005957873654551804,
            9.011963265947998e-05,
            0.0005078270332887769,
            0.00010199400276178494
        ],
        "align_select": "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all paragraph texts for the document \"Customer reviews\".",
        "gold_select": "select Paragraphs.Paragraph_Text",
        "select_candidates": [
            "select Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Paragraph_Text, Documents.Document_Description",
            "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9960095882415771,
            9.113585110753775e-05,
            0.00019150432490278035,
            7.043599907774478e-05,
            0.0001990198652492836,
            6.362664862535894e-05,
            0.00014570188068319112,
            6.146755913505331e-05
        ],
        "align_select": "select Paragraphs.Paragraph_Text",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "gold_select": "select Paragraphs.Paragraph_Text",
        "select_candidates": [
            "select Paragraphs.Paragraph_Text",
            "select Paragraphs.Paragraph_Text, Documents.Document_Description",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Paragraph_Text, Paragraphs.Document_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9953705668449402,
            0.00011120193084934726,
            0.0002199835580540821,
            6.446864426834509e-05,
            0.00016113689343910664,
            6.931549432920292e-05,
            0.0001290451327804476,
            6.177041359478608e-05
        ],
        "align_select": "select Paragraphs.Paragraph_Text",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all document ids, names and the number of paragraphs in each document.",
        "gold_select": "select Paragraphs.Document_ID, Documents.filename, count(*)",
        "select_candidates": [
            "select Documents.Document_ID, Documents.filename, count(*)",
            "select Documents.Document_ID, Documents.filename, count(*)",
            "select Paragraphs.Document_ID, Documents.filename, count(*)",
            "select Documents.Document_ID, Documents.filename.c2, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9932453036308289,
            0.0002101915015373379,
            0.9932453036308289,
            0.0002101915015373379,
            0.9753770232200623,
            0.00018656237807590514,
            0.00033875342342071235,
            0.00019382190657779574
        ],
        "align_select": "select Documents.Document_ID, Documents.filename, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
        "gold_select": "select Paragraphs.Document_ID, Documents.filename, count(*)",
        "select_candidates": [
            "select Documents.Document_ID, Documents.filename, count(*)",
            "select Documents.Document_ID, Documents.filename, count(*)",
            "select Paragraphs.Document_ID, Documents.filename, count(*)",
            "select Documents.Document_ID, Documents.filename.c2, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9935101866722107,
            0.00025119492784142494,
            0.9935101866722107,
            0.00025119492784142494,
            0.932613730430603,
            0.00024390305043198168,
            0.0003292779147159308,
            0.00018459207785781473
        ],
        "align_select": "select Documents.Document_ID, Documents.filename, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the document id and name with greatest number of paragraphs?",
        "gold_select": "select Paragraphs.Document_ID, Documents.filename",
        "select_candidates": [
            "select Documents.Document_ID, Documents.filename",
            "select Paragraphs.Document_ID, Documents.filename",
            "select Documents.Document_ID, Documents.filename, Documents.Document_Description",
            "select Documents.Template_ID, Documents.filename"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.994453489780426,
            5.785813118563965e-05,
            0.07611294090747833,
            6.533061241498217e-05,
            0.004114542156457901,
            5.6130716984625906e-05,
            0.06811901181936264,
            6.18188496446237e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.filename",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Return the id and name of the document with the most paragraphs.",
        "gold_select": "select Paragraphs.Document_ID, Documents.filename",
        "select_candidates": [
            "select Documents.Document_ID, Documents.filename",
            "select Documents.Document_ID, Documents.filename, Documents.Document_Description",
            "select Paragraphs.Document_ID, Documents.filename",
            "select Documents.Template_ID, Documents.filename"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9953216910362244,
            6.971762195462361e-05,
            0.0008660898311063647,
            5.864425838808529e-05,
            0.1927722692489624,
            7.475935126421973e-05,
            0.1314682960510254,
            6.565838702954352e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.filename",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List document IDs, document names, and document descriptions for all documents.",
        "gold_select": "select Documents.Document_ID, Documents.file_designation, Documents.file_elaboration",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Template_ID, Ref_Template_Types.description",
            "select Documents.Document_ID, Documents.file_designation, Ref_Template_Types.description",
            "select Documents.Document_ID, Documents.file_elaboration, Ref_Template_Types.description",
            "select Documents.Document_ID, Documents.Other_Details, Ref_Template_Types.description"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Ref_Template_Types Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.0002925120934378356,
            9.521395986666903e-05,
            0.000561971275601536,
            0.00010296289110556245,
            0.0003334666253067553,
            0.00011128785263281316,
            0.0006159475306048989,
            9.633014997234568e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.Template_ID, Ref_Template_Types.description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the ids, names, and descriptions for all documents?",
        "gold_select": "select Documents.Document_ID, Documents.file_designation, Documents.file_elaboration",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Template_ID, Ref_Template_Types.description",
            "select Documents.Document_ID, Documents.file_designation, Ref_Template_Types.description",
            "select Documents.Document_ID, Ref_Template_Types.description, t0.c2",
            "select Documents.Document_ID, Documents.file_elaboration, Ref_Template_Types.description"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Ref_Template_Types Documents",
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Documents Paragraphs",
            "Ref_Template_Types Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.00032620871206745505,
            9.09499722183682e-05,
            0.002426218008622527,
            0.00013107240374665707,
            0.0005390686565078795,
            0.00011200412700418383,
            0.0004599655803758651,
            0.00010407240188214928
        ],
        "align_select": "select Documents.Document_ID, Documents.Template_ID, Ref_Template_Types.description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the document name and template id for document with description with the letter 'w' in it?",
        "gold_select": "select Documents.file_designation, Documents.Template_ID",
        "select_candidates": [
            "select Documents.Template_ID, Documents.file_designation",
            "select Documents.Other_Details, Documents.Template_ID",
            "select Documents.file_designation, Documents.Template_ID",
            "select Documents.Document_ID, Documents.Template_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Documents",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9929608702659607,
            0.00010246386227663606,
            0.00044279955909587443,
            9.548600064590573e-05,
            0.9926550388336182,
            0.00014192791422829032,
            0.00046231530723161995,
            8.567871554987505e-05
        ],
        "align_select": "select Documents.Template_ID, Documents.file_designation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the names and template ids for documents that contain the letter w in their description.",
        "gold_select": "select Documents.file_designation, Documents.Template_ID",
        "select_candidates": [
            "select Documents.file_designation, Documents.Template_ID",
            "select Documents.Template_ID, Documents.file_designation",
            "select Documents.Other_Details, Documents.Template_ID",
            "select t2.c5, Documents.Template_ID"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Documents",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9549099802970886,
            0.00011752182035706937,
            0.020428476855158806,
            8.507704478688538e-05,
            0.0010823996271938086,
            0.00010108800051966682,
            0.0003215110336896032,
            9.72015768638812e-05
        ],
        "align_select": "select Documents.file_designation, Documents.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "gold_select": "select Documents.Document_ID, Documents.Template_ID, Documents.file_elaboration",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Template_ID, Ref_Template_Types.description",
            "select Documents.Document_ID, Documents.Template_ID, Documents.Template_ID",
            "select Ref_Template_Types.category_cipher, Ref_Template_Types.description, t0.c2",
            "select Documents.Document_ID, Documents.Template_ID, Ref_Template_Types.description, Documents.file_elaboration"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Documents",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9398354291915894,
            0.0001073774037649855,
            0.00020827115804422647,
            9.385761950397864e-05,
            0.0002789110876619816,
            8.031912875594571e-05,
            0.0011948210885748267,
            7.680756971240044e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.Template_ID, Ref_Template_Types.description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "gold_select": "select Documents.Document_ID, Documents.Template_ID, Documents.file_elaboration",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Template_ID, Ref_Template_Types.description",
            "select Documents.Document_ID, Documents.Template_ID, Documents.Template_ID",
            "select Documents.Document_ID, Documents.Template_ID, Ref_Template_Types.description, Documents.file_elaboration",
            "select Documents.Document_ID, Documents.Template_ID, Ref_Template_Types.category_cipher, Ref_Template_Types.description"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Documents",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9704601168632507,
            0.00010046287934528664,
            0.0001913149026222527,
            8.507688471581787e-05,
            0.0005079063703306019,
            7.41999683668837e-05,
            0.00014236316201277077,
            7.573788752779365e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.Template_ID, Ref_Template_Types.description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many documents are using the template with type code 'PPT'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.Template_ID",
            "select count(*), Templates.Template_Details",
            "select count(*), Templates.template_kind_codification"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9945511221885681,
            0.00019862272893078625,
            0.00022490217816084623,
            0.0004028333642054349,
            0.0003582637873478234,
            0.0049310182221233845,
            0.00028309712070040405,
            0.0013992845779284835
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count the number of documents that use the PPT template type.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.template_kind_codification",
            "select count(Documents.Document_ID)",
            "select count(*), Templates.Template_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9952329993247986,
            0.00014943860878702253,
            0.00023686799977440387,
            0.0018924276810139418,
            0.0016365601914003491,
            0.00010716178803704679,
            0.0002679647586774081,
            0.0075084492564201355
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the id and type code for the template used by the most documents?",
        "gold_select": "select Documents.Template_ID, Templates.template_kind_codification",
        "select_candidates": [
            "select Templates.Template_ID, Templates.template_kind_codification",
            "select Documents.Template_ID, Templates.template_kind_codification",
            "select Templates.Template_ID, Templates.template_kind_codification, Templates.Template_Details",
            "select Documents.Template_ID, Templates.Template_ID, Templates.template_kind_codification"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9929419755935669,
            9.049276559380814e-05,
            0.9596012830734253,
            9.189367847284302e-05,
            0.0003009891661349684,
            7.367201760644093e-05,
            0.0003175281744915992,
            7.975511107360944e-05
        ],
        "align_select": "select Templates.Template_ID, Templates.template_kind_codification",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Return the id and type code of the template that is used for the greatest number of documents.",
        "gold_select": "select Documents.Template_ID, Templates.template_kind_codification",
        "select_candidates": [
            "select Templates.Template_ID, Templates.template_kind_codification",
            "select Documents.Template_ID, Templates.template_kind_codification",
            "select Templates.Template_ID, Templates.template_kind_codification, Templates.Template_Details",
            "select Templates.Template_ID, Templates.template_kind_codification, Templates.Date_Effective_From"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9921407103538513,
            0.00011932358756894246,
            0.9687623381614685,
            0.00011780434579122812,
            0.00022817922581452876,
            8.016716310521588e-05,
            0.00015020504361018538,
            5.8373258070787415e-05
        ],
        "align_select": "select Templates.Template_ID, Templates.template_kind_codification",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show template ids, version numbers, and template type codes for all templates.",
        "gold_select": "select Templates.Template_ID, Templates.Version_Number, Templates.template_kind_codification",
        "select_candidates": [
            "select Templates.Template_ID, Templates.Version_Number, Templates.template_kind_codification",
            "select Templates.Template_ID, Templates.Version_Number, Templates.template_kind_codification",
            "select Templates.Template_ID, Templates.Version_Number.c2, Templates.template_kind_codification",
            "select Templates.Template_ID, t1.1.c1, Templates.template_kind_codification"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9943642616271973,
            0.00010352642857469618,
            0.9943642616271973,
            0.00010352642857469618,
            0.0008023118134588003,
            9.668628626968712e-05,
            0.00043150747660547495,
            0.00010393683623988181
        ],
        "align_select": "select Templates.Template_ID, Templates.Version_Number, Templates.template_kind_codification",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the ids, version numbers, and type codes for each template?",
        "gold_select": "select Templates.Template_ID, Templates.Version_Number, Templates.template_kind_codification",
        "select_candidates": [
            "select Templates.Template_ID, Templates.Version_Number, Templates.template_kind_codification",
            "select Templates.Template_ID, Templates.Version_Number, Templates.template_kind_codification",
            "select Templates.Template_ID, Templates.Version_Number.c1, Templates.template_kind_codification",
            "select Templates.Template_ID, t1.1.c1, Templates.template_kind_codification"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9941155910491943,
            9.143914212472737e-05,
            0.9941155910491943,
            9.143914212472737e-05,
            0.0012254385510459542,
            9.211361611960456e-05,
            0.0004670944472309202,
            0.00011264485510764644
        ],
        "align_select": "select Templates.Template_ID, Templates.Version_Number, Templates.template_kind_codification",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show all distinct template type codes for all templates.",
        "gold_select": "select distinct Templates.template_kind_codification",
        "select_candidates": [
            "select distinct Templates.template_kind_codification",
            "select distinct Templates.template_kind_codification, Templates.Date_Effective_From",
            "select distinct Templates.template_kind_codification, Templates.Date_Effective_From, Templates.Date_Effective_To",
            "select distinct Templates.template_kind_codification (or Templates.Date_Effective_From)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9946404099464417,
            0.0006688717985525727,
            0.000330485898302868,
            7.652317435713485e-05,
            0.0002872870536521077,
            0.00010022481728810817,
            0.05756561458110809,
            0.00014288742386270314
        ],
        "align_select": "select distinct Templates.template_kind_codification",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the different template type codes?",
        "gold_select": "select distinct Templates.template_kind_codification",
        "select_candidates": [
            "select distinct Templates.template_kind_codification",
            "select count(distinct Templates.template_kind_codification)",
            "select different Templates.template_kind_codification",
            "select distinct Templates.template_kind_codification, Templates.Date_Effective_From"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates",
            "Ref_Template_Types Templates",
            "Templates Documents",
            "Paragraphs Templates",
            "Templates Paragraphs",
            "Ref_Template_Types"
        ],
        "align_scores": [
            0.9938868880271912,
            0.00013625534484162927,
            0.006448185537010431,
            9.598335600458086e-05,
            0.9574848413467407,
            9.78702082647942e-05,
            0.00035733968252316117,
            5.966850949334912e-05
        ],
        "align_select": "select distinct Templates.template_kind_codification",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the ids of templates with template type code PP or PPT?",
        "gold_select": "select Templates.Template_ID",
        "select_candidates": [
            "select Templates.Template_ID",
            "select Templates.Template_ID, Templates.template_kind_codification",
            "select Templates.Template_ID, Templates.Template_Details",
            "select Templates.Template_ID, Templates.Date_Effective_From"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates",
            "Ref_Template_Types Templates",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9960924983024597,
            0.0013654031790792942,
            0.00017682705947663635,
            8.174881077138707e-05,
            0.00016818159201648086,
            8.213514229282737e-05,
            0.00019706755119841546,
            7.910958811407909e-05
        ],
        "align_select": "select Templates.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the ids of templates that have the code PP or PPT.",
        "gold_select": "select Templates.Template_ID",
        "select_candidates": [
            "select Templates.Template_ID",
            "select Templates.Template_ID, Templates.template_kind_codification",
            "select Templates.Template_ID, Templates.Date_Effective_From",
            "select Templates.Template_ID, Templates.Template_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.995911717414856,
            0.0006334008648991585,
            0.00012210426211822778,
            7.132923929020762e-05,
            0.00018068285135086626,
            6.855557876406237e-05,
            0.00017226117779500782,
            7.299760181922466e-05
        ],
        "align_select": "select Templates.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many templates have template type code CV?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.Template_ID",
            "select count(*), Templates.Template_ID",
            "select count(*), Templates.Version_Number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9942767024040222,
            0.0001025287710945122,
            0.00019795096886809915,
            6.638258491875604e-05,
            0.00019795096886809915,
            6.638258491875604e-05,
            0.00021785308490507305,
            8.329269621754065e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count the number of templates of the type CV.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.Template_ID",
            "select count(*), Templates.template_kind_codification",
            "select count(*), Templates.Version_Number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9959606528282166,
            0.00010813934204634279,
            0.00017387475236319005,
            0.00011130420170957223,
            0.00017596960242372006,
            0.000474850443424657,
            0.0001750969240674749,
            0.0009666557307355106
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the version number and template type code for the template with version number later than 5?",
        "gold_select": "select Templates.Version_Number, Templates.template_kind_codification",
        "select_candidates": [
            "select Templates.Version_Number, Templates.template_kind_codification",
            "select Templates.Version_Number, Templates.template_kind_codification, Templates.Template_Details",
            "select Templates.Template_ID, Templates.template_kind_codification",
            "select Templates.Version_Number, Templates.template_kind_codification, Templates.Date_Effective_From"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9930819869041443,
            0.0001088587159756571,
            0.00020933110499754548,
            7.833152631064877e-05,
            0.0006280015804804862,
            0.00010047754039987922,
            0.00022014891146682203,
            6.6998771217186e-05
        ],
        "align_select": "select Templates.Version_Number, Templates.template_kind_codification",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "gold_select": "select Templates.Version_Number, Templates.template_kind_codification",
        "select_candidates": [
            "select Templates.Version_Number, Templates.template_kind_codification",
            "select Templates.Version_Number, Templates.template_kind_codification, Templates.Template_Details",
            "select Templates.Template_ID, Templates.template_kind_codification",
            "select Templates.Version_Number, Templates.template_kind_codification, Templates.Date_Effective_From"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9951514005661011,
            0.0001434104924555868,
            0.00017641969316173345,
            6.764132558600977e-05,
            0.00032258592545986176,
            8.476786751998588e-05,
            0.00016985685215331614,
            6.657778430962935e-05
        ],
        "align_select": "select Templates.Version_Number, Templates.template_kind_codification",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all template type codes and number of templates for each.",
        "gold_select": "select Templates.template_kind_codification, count(*)",
        "select_candidates": [
            "select Templates.template_kind_codification, count(*)",
            "select Templates.template_kind_codification, count(*), Templates.Date_Effective_From",
            "select Templates.template_kind_codification, count(**)",
            "select Templates.template_kind_codification.c2, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9954769015312195,
            0.0002449053281452507,
            0.00025777550763450563,
            0.00018721850938163698,
            0.9941421151161194,
            0.00022027910745237023,
            0.0007825870416127145,
            0.00021049675706308335
        ],
        "align_select": "select Templates.template_kind_codification, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the different template type codes, and how many templates correspond to each?",
        "gold_select": "select Templates.template_kind_codification, count(*)",
        "select_candidates": [
            "select Templates.template_kind_codification, count(*)",
            "select Templates.template_kind_codification, count(*), Templates.Date_Effective_From",
            "select Templates.template_kind_codification.c2, count(*)",
            "select Templates.template_kind_codification, count(*),"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9951285123825073,
            0.0002734444278758019,
            0.00027229113038629293,
            0.00013718291302211583,
            0.0015331563772633672,
            0.00022803830506745726,
            0.0015994940185919404,
            0.000184599295607768
        ],
        "align_select": "select Templates.template_kind_codification, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Which template type code has most number of templates?",
        "gold_select": "select Templates.template_kind_codification",
        "select_candidates": [
            "select Templates.template_kind_codification",
            "select Templates.template_kind_codification, Templates.Date_Effective_From",
            "select Templates.template_kind_codification, Templates.Date_Effective_From, Templates.Date_Effective_To",
            "select Templates.template_kind_codification (http://www.Templates.template_kind_codification)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9943035840988159,
            7.62495692470111e-05,
            0.0005257045850157738,
            5.901244003325701e-05,
            0.001135707483626902,
            6.814624066464603e-05,
            0.011545789428055286,
            8.471905312035233e-05
        ],
        "align_select": "select Templates.template_kind_codification",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Return the type code of the template type that the most templates belong to.",
        "gold_select": "select Templates.template_kind_codification",
        "select_candidates": [
            "select Templates.template_kind_codification",
            "select Templates.template_kind_codification, Templates.Date_Effective_From",
            "select Templates.template_kind_codification (or Templates.Date_Effective_From)",
            "select Templates.template_kind_codification, Templates.Template_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9934871196746826,
            7.524110696977004e-05,
            0.00031324918381869793,
            5.787628469988704e-05,
            0.0043060434982180595,
            8.935402001952752e-05,
            0.00029907264979556203,
            6.157268944662064e-05
        ],
        "align_select": "select Templates.template_kind_codification",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show all template type codes with less than three templates.",
        "gold_select": "select Templates.template_kind_codification",
        "select_candidates": [
            "select Templates.template_kind_codification",
            "select Templates.template_kind_codification, Templates.Date_Effective_From",
            "select Templates.template_kind_codification, max(Templates.Template_Details)",
            "select Templates.template_kind_codification, max(Templates.Date_Effective_From)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9943681359291077,
            0.00017152067448478192,
            0.0002064823202090338,
            5.4219264711719006e-05,
            0.0001611101470189169,
            5.531980423256755e-05,
            0.0001459940685890615,
            5.918928945902735e-05
        ],
        "align_select": "select Templates.template_kind_codification",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the codes of template types that have fewer than 3 templates?",
        "gold_select": "select Templates.template_kind_codification",
        "select_candidates": [
            "select Templates.template_kind_codification",
            "select Templates.template_kind_codification, Templates.Date_Effective_From",
            "select Templates.Version_Number, Templates.template_kind_codification",
            "select Templates.template_kind_codification (ref. Templates.Date_Effective_From)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9940811991691589,
            0.0002229218662250787,
            0.00038948855944909155,
            7.296029070857912e-05,
            0.0002678597520571202,
            6.466844206443056e-05,
            0.0006694209296256304,
            8.15694875200279e-05
        ],
        "align_select": "select Templates.template_kind_codification",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What the smallest version number and its template type code?",
        "gold_select": "select min(Templates.Version_Number), Templates.template_kind_codification",
        "select_candidates": [
            "select min(Templates.Version_Number), min(Templates.template_kind_codification)",
            "select min(Templates.Version_Number), Templates.template_kind_codification",
            "select Templates.Version_Number, Templates.template_kind_codification",
            "select min(Templates.Version_Number), max(Templates.template_kind_codification)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.00032068969449028373,
            0.0002915740478783846,
            0.0001124808331951499,
            7.2937757067848e-05,
            0.9892116785049438,
            0.9895824193954468,
            0.00024807368754409254,
            0.00021094860858283937
        ],
        "align_select": "select Templates.Version_Number, Templates.template_kind_codification",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Return the lowest version number, along with its corresponding template type code.",
        "gold_select": "select min(Templates.Version_Number), Templates.template_kind_codification",
        "select_candidates": [
            "select Templates.Version_Number, Templates.template_kind_codification",
            "select min(Templates.Version_Number), Templates.template_kind_codification",
            "select min(Templates.Version_Number), min(Templates.template_kind_codification)",
            "select Templates.Template_ID, Templates.template_kind_codification"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9958121180534363,
            6.314856727840379e-05,
            8.567789336666465e-05,
            7.031673158053309e-05,
            9.64092614594847e-05,
            7.016636664047837e-05,
            0.0002669653913471848,
            7.411376282107085e-05
        ],
        "align_select": "select Templates.Version_Number, Templates.template_kind_codification",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the template type code of the template used by document with the name \"Data base\"?",
        "gold_select": "select Templates.template_kind_codification",
        "select_candidates": [
            "select Templates.template_kind_codification",
            "select Templates.template_kind_codification, Templates.Template_Details",
            "select Templates.template_kind_codification, Documents.Document_ID",
            "select Templates.template_kind_codification, Documents.Template_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9919227361679077,
            9.369683539262041e-05,
            0.0002326315880054608,
            6.822727300459519e-05,
            0.0001788998197298497,
            6.780211697332561e-05,
            0.00017621372535359114,
            6.865175237180665e-05
        ],
        "align_select": "select Templates.template_kind_codification",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the template type code of the template that is used by a document named Data base.",
        "gold_select": "select Templates.template_kind_codification",
        "select_candidates": [
            "select Templates.template_kind_codification",
            "select Templates.Template_ID",
            "select Templates.Date_Effective_From",
            "select Templates.Template_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9879400730133057,
            0.00010089491843245924,
            0.018479501828551292,
            9.846923057921231e-05,
            0.0074525512754917145,
            9.25932326936163e-05,
            0.011885966174304485,
            0.00011577142868191004
        ],
        "align_select": "select Templates.template_kind_codification",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all document names using templates with template type code BK.",
        "gold_select": "select Documents.file_designation",
        "select_candidates": [
            "select Documents.file_designation",
            "select Documents.file_designation, Documents.file_elaboration",
            "select Documents.Template_ID",
            "select Documents.Document_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9964293837547302,
            8.19317574496381e-05,
            0.00022093702864367515,
            6.371674680849537e-05,
            0.0010370115051046014,
            0.00010875485168071464,
            0.0006765688303858042,
            0.00010542183736106381
        ],
        "align_select": "select Documents.file_designation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of documents that use templates with the code BK?",
        "gold_select": "select Documents.file_designation",
        "select_candidates": [
            "select Documents.Template_ID",
            "select Documents.file_designation",
            "select Documents.file_elaboration",
            "select Documents.Other_Details"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.0009781366679817438,
            0.00030085546313785017,
            0.9820322394371033,
            9.752094774739817e-05,
            0.7989391088485718,
            0.00010155853669857606,
            0.9422098398208618,
            7.933925371617079e-05
        ],
        "align_select": "select Documents.file_designation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all template type codes and the number of documents using each type.",
        "gold_select": "select Templates.template_kind_codification, count(*)",
        "select_candidates": [
            "select Templates.template_kind_codification, count(*)",
            "select Documents.file_designation, count(*)",
            "select Templates.template_kind_codification, count(Documents.Template_ID)",
            "select Templates.template_kind_codification, count(*), Documents.Template_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9946893453598022,
            0.0002591394877526909,
            0.0014793862355872989,
            0.0002792604500427842,
            0.0007451713900081813,
            0.00020002071687486023,
            0.00015959370648488402,
            0.00011215417907806113
        ],
        "align_select": "select Templates.template_kind_codification, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the different template type codes, and how many documents use each type?",
        "gold_select": "select Templates.template_kind_codification, count(*)",
        "select_candidates": [
            "select Templates.template_kind_codification, count(*)",
            "select Templates.template_kind_codification, count(*), Documents.Template_ID",
            "select Documents.file_designation, count(*)",
            "select Templates.template_kind_codification, count(*), Templates.Date_Effective_From"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9950397610664368,
            0.00031378274434246123,
            0.00016680524277035147,
            0.00012662445078603923,
            0.0016459760954603553,
            0.0003215898177586496,
            0.00025629266747273505,
            0.00012576754670590162
        ],
        "align_select": "select Templates.template_kind_codification, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Which template type code is used by most number of documents?",
        "gold_select": "select Templates.template_kind_codification",
        "select_candidates": [
            "select Templates.template_kind_codification",
            "select Templates.template_kind_codification, Documents.Template_ID",
            "select Templates.template_kind_codification, Templates.Date_Effective_From",
            "select Templates.template_kind_codification (or Templates.Date_Effective_From)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents",
            "Templates"
        ],
        "align_scores": [
            0.9935810565948486,
            7.427642412949353e-05,
            0.00020149059128016233,
            6.081119136069901e-05,
            0.0005460161482915282,
            5.633169348584488e-05,
            0.009929566644132137,
            0.00010861089685931802
        ],
        "align_select": "select Templates.template_kind_codification",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Return the code of the template type that is most commonly used in documents.",
        "gold_select": "select Templates.template_kind_codification",
        "select_candidates": [
            "select Templates.template_kind_codification",
            "select Templates.Template_ID",
            "select Documents.file_designation",
            "select Templates.Version_Number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents",
            "Templates"
        ],
        "align_scores": [
            0.9872803092002869,
            7.101493247319013e-05,
            0.9554327726364136,
            8.033644553506747e-05,
            0.0883973240852356,
            6.911787204444408e-05,
            0.0006919954321347177,
            6.795825174776837e-05
        ],
        "align_select": "select Templates.template_kind_codification",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show all template type codes that are not used by any document.",
        "gold_select": "select Templates.template_kind_codification",
        "select_candidates": [
            "select Templates.template_kind_codification",
            "select Templates.template_kind_codification, Templates.Date_Effective_From",
            "select Templates.template_kind_codification, Documents.Template_ID",
            "select Templates.template_kind_codification, Documents.file_elaboration"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates",
            "Templates Documents",
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9751802682876587,
            0.022397171705961227,
            0.0005385822732932866,
            0.00024100382870528847,
            0.0001725325419101864,
            0.00012760405661538243,
            0.000564341142307967,
            0.0002202454925281927
        ],
        "align_select": "select Templates.template_kind_codification",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "What are the codes of template types that are not used for any document?",
        "gold_select": "select Templates.template_kind_codification",
        "select_candidates": [
            "select Templates.template_kind_codification",
            "select Templates.template_kind_codification, Templates.Date_Effective_From",
            "select Templates.Version_Number, Templates.template_kind_codification",
            "select Templates.template_kind_codification, Templates.Template_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Templates",
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9768651723861694,
            0.9778503775596619,
            0.0005603453610092402,
            0.0005717803724110126,
            0.00023554715153295547,
            0.0002055177028523758,
            0.0004899295163340867,
            0.00035934828338213265
        ],
        "align_select": "select Templates.template_kind_codification",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Show all template type codes and descriptions.",
        "gold_select": "select Ref_Template_Types.category_cipher, Ref_Template_Types.description",
        "select_candidates": [
            "select Ref_Template_Types.category_cipher, Ref_Template_Types.description",
            "select Ref_Template_Types.description, Ref_Template_Types.category_cipher",
            "select t0.co, Ref_Template_Types.description",
            "select t0.c2, Ref_Template_Types.description"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types"
        ],
        "align_scores": [
            0.0008150532958097756,
            9.997969027608633e-05,
            0.0007935049361549318,
            9.403875446878374e-05,
            0.002019734587520361,
            0.00012214359594509006,
            0.0009014055831357837,
            0.0001273863308597356
        ],
        "align_select": "select Ref_Template_Types.category_cipher, Ref_Template_Types.description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the type codes and descriptions for all template types?",
        "gold_select": "select Ref_Template_Types.category_cipher, Ref_Template_Types.description",
        "select_candidates": [
            "select Ref_Template_Types.category_cipher, Ref_Template_Types.description",
            "select Ref_Template_Types.description, Ref_Template_Types.category_cipher",
            "select t0.c2, Ref_Template_Types.description",
            "select t0.c, Ref_Template_Types.description"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types"
        ],
        "align_scores": [
            0.0006594646256417036,
            0.00011983877629972994,
            0.0006270019221119583,
            0.00012189472909085453,
            0.0008157619740813971,
            0.00011118019028799608,
            0.0008951839408837259,
            0.00010395745630376041
        ],
        "align_select": "select Ref_Template_Types.category_cipher, Ref_Template_Types.description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the template type descriptions for template type code \"AD\".",
        "gold_select": "select Ref_Template_Types.description",
        "select_candidates": [
            "select Ref_Template_Types.description",
            "select Ref_Template_Types.description, t0.c2",
            "select Ref_Template_Types.category_cipher, Ref_Template_Types.description",
            "select Ref_Template_Types.description, Ref_Template_Types.category_cipher"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9960368275642395,
            9.012332884594798e-05,
            0.0002551372745074332,
            7.793284021317959e-05,
            0.00015820706903468817,
            7.826455112081021e-05,
            0.00014285648649092764,
            7.583357364637777e-05
        ],
        "align_select": "select Ref_Template_Types.description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the template type description of the template type with the code AD.",
        "gold_select": "select Ref_Template_Types.description",
        "select_candidates": [
            "select Ref_Template_Types.description",
            "select Ref_Template_Types.description, t0.c2",
            "select Ref_Template_Types.category_cipher, Ref_Template_Types.description",
            "select Ref_Template_Types.description, Ref_Template_Types.category_cipher"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9963628649711609,
            6.657270569121465e-05,
            0.00025177374482154846,
            6.755525100743398e-05,
            0.00011074563371948898,
            6.45656036795117e-05,
            0.0001076424159691669,
            6.447153282351792e-05
        ],
        "align_select": "select Ref_Template_Types.description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the template type code for template type description \"Book\".",
        "gold_select": "select Ref_Template_Types.category_cipher",
        "select_candidates": [
            "select Templates.template_kind_codification",
            "select Templates.Version_Number",
            "select Templates.Date_Effective_From",
            "select Templates.Template_ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types Templates",
            "Ref_Template_Types"
        ],
        "align_scores": [
            0.9956604838371277,
            7.400937465718016e-05,
            0.00042059263796545565,
            7.0587957452517e-05,
            0.002453461056575179,
            6.471761298598722e-05,
            0.001119897235184908,
            8.995263488031924e-05
        ],
        "align_select": "select Templates.template_kind_codification",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the type code of the template type with the description \"Book\".",
        "gold_select": "select Ref_Template_Types.category_cipher",
        "select_candidates": [
            "select Templates.template_kind_codification",
            "select Ref_Template_Types.category_cipher",
            "select Templates.Template_ID",
            "select Templates.Version_Number"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.995032548904419,
            7.777271093800664e-05,
            0.0006836267421022058,
            7.344475307036191e-05,
            0.0009256979101337492,
            7.537511555710807e-05,
            0.00027027371106669307,
            6.985144864302129e-05
        ],
        "align_select": "select Templates.template_kind_codification",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the distinct template type descriptions for the templates ever used by any document?",
        "gold_select": "select distinct Ref_Template_Types.description",
        "select_candidates": [
            "select distinct Ref_Template_Types.description",
            "select distinct Ref_Template_Types.description, Templates.Template_Details",
            "select distinct Ref_Template_Types.description, Templates.template_kind_codification",
            "select distinct Ref_Template_Types.description, Documents.Template_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types Templates Documents",
        "table_candidates": [
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9639469981193542,
            0.02498757280409336,
            0.0005373368039727211,
            0.00014840354560874403,
            0.0005331909633241594,
            0.00015729220467619598,
            0.001716324593871832,
            0.00022938814072404057
        ],
        "align_select": "select distinct Ref_Template_Types.description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Return the different descriptions for templates that have been used in a document.",
        "gold_select": "select distinct Ref_Template_Types.description",
        "select_candidates": [
            "select distinct Ref_Template_Types.description",
            "select distinct Ref_Template_Types.description, Documents.file_designation",
            "select different Ref_Template_Types.description",
            "select distinct Ref_Template_Types.description, Templates.Template_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types Templates Documents",
        "table_candidates": [
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9774061441421509,
            0.0076300399377942085,
            0.0006835410604253411,
            0.00016160003724507987,
            0.09120302647352219,
            0.0003264762053731829,
            0.0006716435309499502,
            0.00015039951540529728
        ],
        "align_select": "select distinct Ref_Template_Types.description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the template ids with template type description \"Presentation\".",
        "gold_select": "select Templates.Template_ID",
        "select_candidates": [
            "select Templates.Template_ID",
            "select Templates.Template_ID, Ref_Template_Types.description",
            "select Templates.Template_ID, Templates.Template_Details",
            "select Templates.Template_ID, Templates.template_kind_codification"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types Templates",
        "table_candidates": [
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9966046810150146,
            0.00011624456237768754,
            0.0001630417536944151,
            6.84514525346458e-05,
            0.000139736250275746,
            6.459478754550219e-05,
            0.0001456253376090899,
            6.441395089495927e-05
        ],
        "align_select": "select Templates.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the ids corresponding to templates with the description 'Presentation'.",
        "gold_select": "select Templates.Template_ID",
        "select_candidates": [
            "select Templates.Template_ID",
            "select Templates.Template_ID, Ref_Template_Types.description",
            "select Templates.Template_ID - Ref_Template_Types.description",
            "select Templates.Template_ID, Templates.Template_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types Templates",
        "table_candidates": [
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9966578483581543,
            0.00011376210750313476,
            0.00017019682854879647,
            6.666926492471248e-05,
            0.00038854137528687716,
            7.229734910652041e-05,
            0.00014395150355994701,
            6.3661667809356e-05
        ],
        "align_select": "select Templates.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many paragraphs for the document with name 'Summer Show'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Documents.Document_ID",
            "select count(*), Documents.Template_ID",
            "select count(*), Paragraphs.Document_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9955456256866455,
            6.71743109705858e-05,
            0.0001688278280198574,
            6.108541128924116e-05,
            0.00019535089086275548,
            6.486392521765083e-05,
            0.00016299278649967164,
            6.175945600261912e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count the number of paragraphs in the document named 'Summer Show'.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Documents.Document_ID",
            "select count(*), Documents.Template_ID",
            "select count(*), Paragraphs.Document_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.996163010597229,
            0.00013219568063504994,
            0.00016680809494573623,
            9.839001722866669e-05,
            0.00020684055925812572,
            0.00010307833144906908,
            0.00015746059943921864,
            0.00022497122699860483
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show paragraph details for paragraph with text 'Korea '.",
        "gold_select": "select Paragraphs.particularities",
        "select_candidates": [
            "select Paragraphs.particularities",
            "select Paragraphs.content, Paragraphs.particularities",
            "select Paragraphs.Document_ID, Paragraphs.particularities",
            "select Paragraphs.Document_ID, Paragraphs.content"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs"
        ],
        "align_scores": [
            0.9949671626091003,
            0.00019468614482320845,
            0.0002869060554075986,
            8.73963363119401e-05,
            0.00024172020494006574,
            8.745303057366982e-05,
            0.0002365263062529266,
            9.96688031591475e-05
        ],
        "align_select": "select Paragraphs.particularities",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the details for the paragraph that includes the text 'Korea '?",
        "gold_select": "select Paragraphs.particularities",
        "select_candidates": [
            "select Paragraphs.particularities",
            "select Paragraphs.content, Paragraphs.particularities",
            "select Paragraphs.Document_ID, Paragraphs.content",
            "select Paragraphs.Document_ID, Paragraphs.particularities"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs"
        ],
        "align_scores": [
            0.993316650390625,
            0.00014494819333776832,
            0.0002839196240529418,
            7.097891648299992e-05,
            0.0002453035267535597,
            7.967810961417854e-05,
            0.0002842343528755009,
            8.697059820406139e-05
        ],
        "align_select": "select Paragraphs.particularities",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "gold_select": "select Paragraphs.Paragraph_ID, Paragraphs.content",
        "select_candidates": [
            "select Paragraphs.Paragraph_ID, Paragraphs.content",
            "select Documents.Document_ID, Paragraphs.content",
            "select Documents.Document_ID, Documents.file_designation",
            "select Paragraphs.Document_ID, Paragraphs.content"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs"
        ],
        "align_scores": [
            0.9951959252357483,
            0.0002560415887273848,
            0.0006073058466427028,
            0.00027402094565331936,
            0.00045586461783386767,
            0.0001488644484197721,
            0.0005423568072728813,
            0.0002783373056445271
        ],
        "align_select": "select Paragraphs.Paragraph_ID, Paragraphs.content",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "gold_select": "select Paragraphs.Paragraph_ID, Paragraphs.content",
        "select_candidates": [
            "select Paragraphs.Paragraph_ID, Paragraphs.content",
            "select Documents.Document_ID, Paragraphs.content",
            "select Paragraphs.Document_ID, Paragraphs.content",
            "select Paragraphs.Paragraph_ID, Paragraphs.content, Paragraphs.particularities"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9930309653282166,
            0.00017227695207111537,
            0.0005858854856342077,
            0.00010126870620297268,
            0.0006764599238522351,
            9.268210123991594e-05,
            0.0002245131036033854,
            8.613368845544755e-05
        ],
        "align_select": "select Paragraphs.Paragraph_ID, Paragraphs.content",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all paragraph texts for the document \"Customer reviews\".",
        "gold_select": "select Paragraphs.content",
        "select_candidates": [
            "select Paragraphs.content",
            "select Paragraphs.content, Paragraphs.particularities",
            "select Paragraphs.Document_ID, Paragraphs.content",
            "select Paragraphs.Paragraph_ID, Paragraphs.content"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9949727058410645,
            7.798577280482277e-05,
            0.0002334530436201021,
            5.675941065419465e-05,
            0.0002899954852182418,
            6.905581540195271e-05,
            0.0001795895950635895,
            6.22777224634774e-05
        ],
        "align_select": "select Paragraphs.content",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "gold_select": "select Paragraphs.content",
        "select_candidates": [
            "select Paragraphs.content",
            "select Paragraphs.content, Paragraphs.particularities",
            "select Paragraphs.Document_ID, Paragraphs.content",
            "select Paragraphs.Paragraph_ID, Paragraphs.content"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9944145679473877,
            9.456770931137726e-05,
            0.0002546016767155379,
            6.223907257663086e-05,
            0.00021432277571875602,
            6.630660936934873e-05,
            0.00019081607752013952,
            6.650620343862101e-05
        ],
        "align_select": "select Paragraphs.content",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all document ids, names and the number of paragraphs in each document.",
        "gold_select": "select Paragraphs.Document_ID, Documents.file_designation, count(*)",
        "select_candidates": [
            "select Paragraphs.Document_ID, Paragraphs.content, count(*)",
            "select Paragraphs.Document_ID, Documents.file_designation, count(*)",
            "select Paragraphs.Document_ID, Documents.Template_ID, count(*)",
            "select Documents.Document_ID, Documents.Template_ID, count(*)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.0014570686034858227,
            0.0001958712819032371,
            0.011996076442301273,
            0.0002140366705134511,
            0.00013302519801072776,
            0.00010750896035460755,
            0.00013217954256106168,
            0.0001218771722051315
        ],
        "align_select": "select Paragraphs.Document_ID, Paragraphs.content, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
        "gold_select": "select Paragraphs.Document_ID, Documents.file_designation, count(*)",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Template_ID, count(*)",
            "select Documents.Document_ID, Documents.file_designation, count(*)",
            "select Paragraphs.Document_ID, Documents.file_designation, count(*)",
            "select Documents.Document_ID, Documents.file_elaboration, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.00020997315004933625,
            0.0001392054691677913,
            0.010932037606835365,
            0.00026605394668877125,
            0.6656368970870972,
            0.0003327939484734088,
            0.000836946361232549,
            0.00024575862335041165
        ],
        "align_select": "select Paragraphs.Document_ID, Documents.file_designation, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the document id and name with greatest number of paragraphs?",
        "gold_select": "select Paragraphs.Document_ID, Documents.file_designation",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Template_ID",
            "select Paragraphs.Document_ID, Paragraphs.content",
            "select Paragraphs.Document_ID, Documents.file_designation",
            "select Paragraphs.Document_ID, Documents.Template_ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Paragraphs",
            "Templates Documents Paragraphs",
            "Templates Paragraphs"
        ],
        "align_scores": [
            0.00022699292458128184,
            5.846579733770341e-05,
            0.007471314165741205,
            6.228241545613855e-05,
            0.056074243038892746,
            6.726841820636764e-05,
            0.00017268380906898528,
            5.875122587895021e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.Template_ID",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Return the id and name of the document with the most paragraphs.",
        "gold_select": "select Paragraphs.Document_ID, Documents.file_designation",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Template_ID",
            "select Paragraphs.Document_ID, Documents.file_designation",
            "select Documents.Document_ID, Documents.file_designation",
            "select Paragraphs.Document_ID, Paragraphs.content"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Templates Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs"
        ],
        "align_scores": [
            0.00014747690875083208,
            5.464730566018261e-05,
            0.053935639560222626,
            6.31229777354747e-05,
            0.954020619392395,
            5.831028101965785e-05,
            0.008883489295840263,
            5.666271681548096e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.file_designation",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.content",
            "select Paragraphs.Paragraph_ID",
            "select Paragraphs.Document_ID, Paragraphs.content, Paragraphs.particularities"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9963451027870178,
            9.076387505047023e-05,
            0.00015282983076758683,
            6.668338755844161e-05,
            0.0030907539185136557,
            8.442599209956825e-05,
            0.0001403909409418702,
            6.215757457539439e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.content",
            "select Paragraphs.Paragraph_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs"
        ],
        "align_scores": [
            0.9941238760948181,
            0.00020039983792230487,
            0.00014546935562975705,
            6.495615525636822e-05,
            0.9937969446182251,
            0.00037327874451875687,
            0.00015287894348148257,
            7.230962364701554e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "How many documents are using the template with type code 'PPT'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.Template_Details",
            "select count(*), Templates.template_kind_codification",
            "select count(*), Templates.Template_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9945511221885681,
            0.00019862272893078625,
            0.0003582637873478234,
            0.0049310182221233845,
            0.00028309712070040405,
            0.0013992845779284835,
            0.00022490217816084623,
            0.0004028333642054349
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count the number of documents that use the PPT template type.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.template_kind_codification",
            "select count(*), Templates.Template_Details",
            "select count(*), Templates.Date_Effective_To"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9952329993247986,
            0.00014943860878702253,
            0.00023686799977440387,
            0.0018924276810139418,
            0.0002679647586774081,
            0.0075084492564201355,
            0.00018894874665420502,
            0.0025887377560138702
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the id and type code for the template used by the most documents?",
        "gold_select": "select Documents.Template_ID, Templates.template_kind_codification",
        "select_candidates": [
            "select Documents.Template_ID, Templates.template_kind_codification",
            "select Templates.Template_ID, Templates.template_kind_codification",
            "select Documents.Document_ID, Templates.template_kind_codification",
            "select Documents.Template_ID, Templates.template_kind_codification, Templates.Date_Effective_From"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9596012830734253,
            9.189367847284302e-05,
            0.9929419755935669,
            9.049276559380814e-05,
            0.0005327078979462385,
            8.685489592608064e-05,
            0.00016901658091228455,
            5.491633783094585e-05
        ],
        "align_select": "select Documents.Template_ID, Templates.template_kind_codification",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Return the id and type code of the template that is used for the greatest number of documents.",
        "gold_select": "select Documents.Template_ID, Templates.template_kind_codification",
        "select_candidates": [
            "select Templates.Template_ID, Templates.template_kind_codification",
            "select Documents.Template_ID, Templates.template_kind_codification",
            "select Templates.Template_ID, Templates.template_kind_codification, Templates.Date_Effective_From",
            "select Templates.Template_ID, Templates.template_kind_codification, Templates.Template_Details"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9921407103538513,
            0.00011932358756894246,
            0.9687623381614685,
            0.00011780434579122812,
            0.00015020504361018538,
            5.8373258070787415e-05,
            0.00022817922581452876,
            8.016716310521588e-05
        ],
        "align_select": "select Templates.Template_ID, Templates.template_kind_codification",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show template ids, version numbers, and template type codes for all templates.",
        "gold_select": "select Templates.Template_ID, Templates.Version_Number, Templates.template_kind_codification",
        "select_candidates": [
            "select Templates.Template_ID, Templates.Version_Number, Templates.template_kind_codification",
            "select Templates.Template_ID, Templates.Version_Number, Templates.template_kind_codification",
            "select Templates.Template_ID, Templates.Version_Number.c1, Templates.template_kind_codification",
            "select Templates.Template_ID, t1.1.c1, Templates.template_kind_codification"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9943642616271973,
            0.00010352642857469618,
            0.9943642616271973,
            0.00010352642857469618,
            0.0006469482323154807,
            0.00010129748261533678,
            0.00043150747660547495,
            0.00010393683623988181
        ],
        "align_select": "select Templates.Template_ID, Templates.Version_Number, Templates.template_kind_codification",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the ids, version numbers, and type codes for each template?",
        "gold_select": "select Templates.Template_ID, Templates.Version_Number, Templates.template_kind_codification",
        "select_candidates": [
            "select Templates.Template_ID, Templates.Version_Number, Templates.template_kind_codification",
            "select Templates.Template_ID, Templates.Version_Number, Templates.template_kind_codification",
            "select Templates.Template_ID, Templates.Version_Number.c1, Templates.template_kind_codification",
            "select Templates.Template_ID, t1.1.c1, Templates.template_kind_codification"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9941155910491943,
            9.143914212472737e-05,
            0.9941155910491943,
            9.143914212472737e-05,
            0.0012254385510459542,
            9.211361611960456e-05,
            0.0004670944472309202,
            0.00011264485510764644
        ],
        "align_select": "select Templates.Template_ID, Templates.Version_Number, Templates.template_kind_codification",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show all distinct template type codes for all templates.",
        "gold_select": "select distinct Templates.template_kind_codification",
        "select_candidates": [
            "select distinct Templates.template_kind_codification",
            "select distinct Templates.template_kind_codification, Templates.Date_Effective_From",
            "select distinct Templates.template_kind_codification,",
            "select distinct Templates.template_kind_codification (or Templates.Date_Effective_From)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9946404099464417,
            0.0006688717985525727,
            0.000330485898302868,
            7.652317435713485e-05,
            0.0013312636874616146,
            0.0001904429227579385,
            0.05756561458110809,
            0.00014288742386270314
        ],
        "align_select": "select distinct Templates.template_kind_codification",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the different template type codes?",
        "gold_select": "select distinct Templates.template_kind_codification",
        "select_candidates": [
            "select distinct Templates.template_kind_codification",
            "select distinct Ref_Template_Types.category_cipher",
            "select distinct Ref_Template_Types.Template_Type_Description",
            "select distinct t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Ref_Template_Types",
            "Templates",
            "Ref_Template_Types Templates",
            "Documents",
            "Paragraphs"
        ],
        "align_scores": [
            0.9938868880271912,
            0.00013625534484162927,
            0.03152512386441231,
            9.59581884671934e-05,
            0.0007433716673403978,
            9.364145080326125e-05,
            0.005850071087479591,
            9.848341869655997e-05
        ],
        "align_select": "select distinct Templates.template_kind_codification",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the ids of templates with template type code PP or PPT?",
        "gold_select": "select Templates.Template_ID",
        "select_candidates": [
            "select Templates.Template_ID",
            "select Templates.Template_ID, Templates.template_kind_codification",
            "select Templates.Template_ID, Templates.Date_Effective_From",
            "select Templates.Template_ID, Templates.Template_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates",
            "Ref_Template_Types Templates",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9960924983024597,
            0.0013654031790792942,
            0.00017682705947663635,
            8.174881077138707e-05,
            0.00019706755119841546,
            7.910958811407909e-05,
            0.00016818159201648086,
            8.213514229282737e-05
        ],
        "align_select": "select Templates.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the ids of templates that have the code PP or PPT.",
        "gold_select": "select Templates.Template_ID",
        "select_candidates": [
            "select Templates.Template_ID",
            "select Templates.Template_ID, Templates.template_kind_codification",
            "select Templates.Template_ID, Templates.Date_Effective_From",
            "select Templates.Template_ID - Templates.template_kind_codification"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.995911717414856,
            0.0006334008648991585,
            0.00012210426211822778,
            7.132923929020762e-05,
            0.00018068285135086626,
            6.855557876406237e-05,
            0.00014225947961676866,
            7.038174953777343e-05
        ],
        "align_select": "select Templates.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many templates have template type code CV?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.Template_ID",
            "select count(*), Templates.Template_ID",
            "select count(*), Templates.Version_Number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9942767024040222,
            0.0001025287710945122,
            0.00019795096886809915,
            6.638258491875604e-05,
            0.00019795096886809915,
            6.638258491875604e-05,
            0.00021785308490507305,
            8.329269621754065e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count the number of templates of the type CV.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.Template_ID",
            "select count(*), Templates.template_kind_codification",
            "select count(*), Templates.Version_Number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9959606528282166,
            0.00010813934204634279,
            0.00017387475236319005,
            0.00011130420170957223,
            0.00017596960242372006,
            0.000474850443424657,
            0.0001750969240674749,
            0.0009666557307355106
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the version number and template type code for the template with version number later than 5?",
        "gold_select": "select Templates.Version_Number, Templates.template_kind_codification",
        "select_candidates": [
            "select Templates.Version_Number, Templates.template_kind_codification",
            "select Templates.Version_Number, Templates.template_kind_codification, Templates.Template_Details",
            "select Templates.Template_ID, Templates.template_kind_codification",
            "select Templates.Version_Number, Templates.template_kind_codification, Templates.Date_Effective_From"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9930819869041443,
            0.0001088587159756571,
            0.00020933110499754548,
            7.833152631064877e-05,
            0.0006280015804804862,
            0.00010047754039987922,
            0.00022014891146682203,
            6.6998771217186e-05
        ],
        "align_select": "select Templates.Version_Number, Templates.template_kind_codification",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "gold_select": "select Templates.Version_Number, Templates.template_kind_codification",
        "select_candidates": [
            "select Templates.Version_Number, Templates.template_kind_codification",
            "select Templates.Version_Number, Templates.template_kind_codification, Templates.Template_Details",
            "select Templates.Template_ID, Templates.template_kind_codification",
            "select Templates.Version_Number, Templates.template_kind_codification, Templates.Date_Effective_From"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9951514005661011,
            0.0001434104924555868,
            0.00017641969316173345,
            6.764132558600977e-05,
            0.00032258592545986176,
            8.476786751998588e-05,
            0.00016985685215331614,
            6.657778430962935e-05
        ],
        "align_select": "select Templates.Version_Number, Templates.template_kind_codification",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all template type codes and number of templates for each.",
        "gold_select": "select Templates.template_kind_codification, count(*)",
        "select_candidates": [
            "select Templates.template_kind_codification, count(*)",
            "select Templates.template_kind_codification, count(*), Templates.Date_Effective_From",
            "select Templates.template_kind_codification, count(**)",
            "select Templates.template_kind_codification.c2, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9954769015312195,
            0.0002449053281452507,
            0.00025777550763450563,
            0.00018721850938163698,
            0.9941421151161194,
            0.00022027910745237023,
            0.0007825870416127145,
            0.00021049675706308335
        ],
        "align_select": "select Templates.template_kind_codification, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the different template type codes, and how many templates correspond to each?",
        "gold_select": "select Templates.template_kind_codification, count(*)",
        "select_candidates": [
            "select Templates.template_kind_codification, count(*)",
            "select Templates.template_kind_codification, count(*), Templates.Date_Effective_From",
            "select Templates.template_kind_codification.c2, count(*)",
            "select Templates.template_kind_codification, count(*), Templates.Version_Number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9951285123825073,
            0.0002734444278758019,
            0.00027229113038629293,
            0.00013718291302211583,
            0.0015331563772633672,
            0.00022803830506745726,
            0.0002178044815082103,
            0.00021307294082362205
        ],
        "align_select": "select Templates.template_kind_codification, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Which template type code has most number of templates?",
        "gold_select": "select Templates.template_kind_codification",
        "select_candidates": [
            "select Templates.template_kind_codification",
            "select Templates.template_kind_codification, Templates.Date_Effective_From",
            "select Templates.template_kind_codification, Templates.Date_Effective_From, Templates.Date_Effective_To",
            "select Templates.template_kind_codification (http://www.Templates.template_kind_codification)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9943035840988159,
            7.62495692470111e-05,
            0.0005257045850157738,
            5.901244003325701e-05,
            0.001135707483626902,
            6.814624066464603e-05,
            0.011545789428055286,
            8.471905312035233e-05
        ],
        "align_select": "select Templates.template_kind_codification",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Return the type code of the template type that the most templates belong to.",
        "gold_select": "select Templates.template_kind_codification",
        "select_candidates": [
            "select Templates.template_kind_codification",
            "select Templates.template_kind_codification, Templates.Date_Effective_From",
            "select Templates.template_kind_codification (http://www.Templates.template_kind_codification)",
            "select Templates.template_kind_codification (http://Templates.template_kind_codification)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9934871196746826,
            7.524110696977004e-05,
            0.00031324918381869793,
            5.787628469988704e-05,
            0.0043954383581876755,
            8.356454054592177e-05,
            0.0009459551656618714,
            6.81139063090086e-05
        ],
        "align_select": "select Templates.template_kind_codification",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show all template type codes with less than three templates.",
        "gold_select": "select Templates.template_kind_codification",
        "select_candidates": [
            "select Templates.template_kind_codification",
            "select Templates.template_kind_codification, Templates.Date_Effective_From",
            "select Templates.template_kind_codification, Templates.Date_Effective_From, Templates.Date_Effective_To",
            "select Templates.template_kind_codification, Templates.Date_Effective_From, max(Templates.Date_Effective_To)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9943681359291077,
            0.00017152067448478192,
            0.0002064823202090338,
            5.4219264711719006e-05,
            0.0003159048792440444,
            5.779509592684917e-05,
            0.00012524241174105555,
            5.5883589084260166e-05
        ],
        "align_select": "select Templates.template_kind_codification",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the codes of template types that have fewer than 3 templates?",
        "gold_select": "select Templates.template_kind_codification",
        "select_candidates": [
            "select Templates.template_kind_codification",
            "select Ref_Template_Types.Template_Type_Description, Templates.template_kind_codification",
            "select Templates.template_kind_codification, Templates.Date_Effective_From",
            "select Templates.Version_Number, Templates.template_kind_codification"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9940811991691589,
            0.0002229218662250787,
            0.0010252270149067044,
            7.89051191532053e-05,
            0.00038948855944909155,
            7.296029070857912e-05,
            0.0002678597520571202,
            6.466844206443056e-05
        ],
        "align_select": "select Templates.template_kind_codification",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What the smallest version number and its template type code?",
        "gold_select": "select min(Templates.Version_Number), Templates.template_kind_codification",
        "select_candidates": [
            "select min(Templates.Version_Number), min(Templates.template_kind_codification)",
            "select min(Templates.Version_Number), Templates.template_kind_codification",
            "select Templates.Version_Number, Templates.template_kind_codification",
            "select min(Templates.Version_Number), max(Templates.template_kind_codification)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.00032068969449028373,
            0.0002915740478783846,
            0.0001124808331951499,
            7.2937757067848e-05,
            0.9892116785049438,
            0.9895824193954468,
            0.00024807368754409254,
            0.00021094860858283937
        ],
        "align_select": "select Templates.Version_Number, Templates.template_kind_codification",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Return the lowest version number, along with its corresponding template type code.",
        "gold_select": "select min(Templates.Version_Number), Templates.template_kind_codification",
        "select_candidates": [
            "select Templates.Version_Number, Templates.template_kind_codification",
            "select min(Templates.Version_Number), Templates.template_kind_codification",
            "select min(Templates.Version_Number), min(Templates.template_kind_codification)",
            "select Templates.Template_ID, Templates.template_kind_codification"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9958121180534363,
            6.314856727840379e-05,
            8.567789336666465e-05,
            7.031673158053309e-05,
            9.64092614594847e-05,
            7.016636664047837e-05,
            0.0002669653913471848,
            7.411376282107085e-05
        ],
        "align_select": "select Templates.Version_Number, Templates.template_kind_codification",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the template type code of the template used by document with the name \"Data base\"?",
        "gold_select": "select Templates.template_kind_codification",
        "select_candidates": [
            "select Templates.template_kind_codification",
            "select Templates.Template_ID",
            "select Templates.Version_Number",
            "select Templates.Date_Effective_From"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9919227361679077,
            9.369683539262041e-05,
            0.010345050133764744,
            0.00010065678361570463,
            0.0004879785410594195,
            0.00010963333625113592,
            0.035023033618927,
            8.5335188487079e-05
        ],
        "align_select": "select Templates.template_kind_codification",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the template type code of the template that is used by a document named Data base.",
        "gold_select": "select Templates.template_kind_codification",
        "select_candidates": [
            "select Templates.template_kind_codification",
            "select Templates.Template_ID",
            "select Templates.Date_Effective_From",
            "select Templates.Version_Number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9879400730133057,
            0.00010089491843245924,
            0.018479501828551292,
            9.846923057921231e-05,
            0.0074525512754917145,
            9.25932326936163e-05,
            0.0005063290591351688,
            0.00021516901324503124
        ],
        "align_select": "select Templates.template_kind_codification",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all document names using templates with template type code BK.",
        "gold_select": "select Documents.Document_Name",
        "select_candidates": [
            "select Documents.Document_Name",
            "select Documents.Document_ID, Documents.Document_Name",
            "select Documents.Document_Name, Documents.Document_Description",
            "select Documents.Document_Name, Templates.Template_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9965587258338928,
            8.041155524551868e-05,
            0.00013192897313274443,
            6.645396933890879e-05,
            0.0001627322199055925,
            6.371802737703547e-05,
            0.000411804678151384,
            6.391965871443972e-05
        ],
        "align_select": "select Documents.Document_Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of documents that use templates with the code BK?",
        "gold_select": "select Documents.Document_Name",
        "select_candidates": [
            "select Documents.Document_Name",
            "select Documents.Document_Name, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Document_Name",
            "select Documents.Template_ID, Documents.Document_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9201329350471497,
            0.00011450783495092764,
            0.00020106723241042346,
            6.114327698014677e-05,
            0.00015357192023657262,
            6.51714435662143e-05,
            0.00021060554718133062,
            6.656978803221136e-05
        ],
        "align_select": "select Documents.Document_Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all template type codes and the number of documents using each type.",
        "gold_select": "select Templates.template_kind_codification, count(*)",
        "select_candidates": [
            "select Templates.template_kind_codification, count(*)",
            "select Documents.Document_Name, count(*)",
            "select Templates.template_kind_codification, count(*), Documents.Template_ID",
            "select Templates.template_kind_codification, count(Documents.Template_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9946893453598022,
            0.0002591394877526909,
            0.0003589389962144196,
            0.0001839712931541726,
            0.00015959370648488402,
            0.00011215417907806113,
            0.0007451713900081813,
            0.00020002071687486023
        ],
        "align_select": "select Templates.template_kind_codification, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the different template type codes, and how many documents use each type?",
        "gold_select": "select Templates.template_kind_codification, count(*)",
        "select_candidates": [
            "select Templates.template_kind_codification, count(*)",
            "select Documents.Document_Name, count(*)",
            "select Templates.template_kind_codification, count(*), Documents.Template_ID",
            "select Documents.Template_ID, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents",
            "Templates"
        ],
        "align_scores": [
            0.9950397610664368,
            0.00031378274434246123,
            0.00048174249241128564,
            0.0002177405112888664,
            0.00016680524277035147,
            0.00012662445078603923,
            0.28764113783836365,
            0.0006728987209498882
        ],
        "align_select": "select Templates.template_kind_codification, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Which template type code is used by most number of documents?",
        "gold_select": "select Templates.template_kind_codification",
        "select_candidates": [
            "select Templates.template_kind_codification",
            "select Templates.template_kind_codification, Documents.Template_ID",
            "select Templates.template_kind_codification (ref. Templates.Date_Effective_From)",
            "select Templates.template_kind_codification (ref. Templates.Template_Details)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents",
            "Templates"
        ],
        "align_scores": [
            0.9935810565948486,
            7.427642412949353e-05,
            0.00020149059128016233,
            6.081119136069901e-05,
            0.0011365998070687056,
            6.685790867777541e-05,
            0.0011770764831453562,
            6.290101737249643e-05
        ],
        "align_select": "select Templates.template_kind_codification",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Return the code of the template type that is most commonly used in documents.",
        "gold_select": "select Templates.template_kind_codification",
        "select_candidates": [
            "select Templates.template_kind_codification",
            "select Documents.Document_Name",
            "select Documents.Template_ID",
            "select Templates.Template_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents",
            "Templates"
        ],
        "align_scores": [
            0.9872803092002869,
            7.101493247319013e-05,
            0.0005823402316309512,
            7.286018080776557e-05,
            0.989750325679779,
            7.829552487237379e-05,
            0.9554327726364136,
            8.033644553506747e-05
        ],
        "align_select": "select Templates.template_kind_codification",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show all template type codes that are not used by any document.",
        "gold_select": "select Templates.template_kind_codification",
        "select_candidates": [
            "select Templates.template_kind_codification",
            "select Templates.template_kind_codification, Templates.Date_Effective_From",
            "select Templates.template_kind_codification, Documents.Template_ID",
            "select Templates.template_kind_codification, Documents.Document_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Templates",
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9751802682876587,
            0.022397171705961227,
            0.0005385822732932866,
            0.00024100382870528847,
            0.0001725325419101864,
            0.00012760405661538243,
            0.0006727339350618422,
            0.000257655861787498
        ],
        "align_select": "select Templates.template_kind_codification",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "What are the codes of template types that are not used for any document?",
        "gold_select": "select Templates.template_kind_codification",
        "select_candidates": [
            "select Templates.template_kind_codification",
            "select Templates.template_kind_codification, Templates.Date_Effective_From",
            "select Templates.Version_Number, Templates.template_kind_codification",
            "select Ref_Template_Types.Template_Type_Description, Templates.template_kind_codification"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents",
            "Templates",
            "Ref_Template_Types Templates",
            "Paragraphs Templates Documents"
        ],
        "align_scores": [
            0.9768651723861694,
            0.9778503775596619,
            0.0005603453610092402,
            0.0005717803724110126,
            0.00023554715153295547,
            0.0002055177028523758,
            0.0007490405696444213,
            0.0005311262793838978
        ],
        "align_select": "select Templates.template_kind_codification",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Show all template type codes and descriptions.",
        "gold_select": "select Ref_Template_Types.category_cipher, Ref_Template_Types.Template_Type_Description",
        "select_candidates": [
            "select Ref_Template_Types.category_cipher, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Description, Ref_Template_Types.category_cipher",
            "select Paragraphs.Paragraph_ID, Ref_Template_Types.Template_Type_Description",
            "select t0.co, Ref_Template_Types.Template_Type_Description"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types"
        ],
        "align_scores": [
            0.0007706514443270862,
            0.00010958045459119603,
            0.00046840778668411076,
            0.00011133742373203859,
            0.00024131398822646588,
            0.00010391839896328747,
            0.0006779060931876302,
            0.00014060661487746984
        ],
        "align_select": "select Ref_Template_Types.category_cipher, Ref_Template_Types.Template_Type_Description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the type codes and descriptions for all template types?",
        "gold_select": "select Ref_Template_Types.category_cipher, Ref_Template_Types.Template_Type_Description",
        "select_candidates": [
            "select Ref_Template_Types.category_cipher, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Description, Ref_Template_Types.category_cipher",
            "select t0.c2, Ref_Template_Types.Template_Type_Description",
            "select Paragraphs.Paragraph_ID, Ref_Template_Types.Template_Type_Description"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types"
        ],
        "align_scores": [
            0.0006136271404102445,
            0.00011978358088526875,
            0.0004413698916323483,
            0.0001234691881109029,
            0.0006462485180236399,
            0.00011883804836543277,
            0.00034562041400931776,
            0.00013282697182148695
        ],
        "align_select": "select Ref_Template_Types.category_cipher, Ref_Template_Types.Template_Type_Description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the template type descriptions for template type code \"AD\".",
        "gold_select": "select Ref_Template_Types.Template_Type_Description",
        "select_candidates": [
            "select Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Description, t0.c2",
            "select Ref_Template_Types.category_cipher, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Description, t0.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.995912492275238,
            9.373902139486745e-05,
            0.00025155828916467726,
            7.785455090925097e-05,
            0.0001447266695322469,
            7.478923362214118e-05,
            0.00029488065047189593,
            7.985441334312782e-05
        ],
        "align_select": "select Ref_Template_Types.Template_Type_Description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the template type description of the template type with the code AD.",
        "gold_select": "select Ref_Template_Types.Template_Type_Description",
        "select_candidates": [
            "select Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.category_cipher, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Description, t0.c2",
            "select Ref_Template_Types.Template_Type_Description, Ref_Template_Types.category_cipher"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9961712956428528,
            6.975772703299299e-05,
            0.00011153284140164033,
            6.280188245000318e-05,
            0.00020736560691148043,
            6.963755731703714e-05,
            0.00010388442024122924,
            6.637461046921089e-05
        ],
        "align_select": "select Ref_Template_Types.Template_Type_Description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the template type code for template type description \"Book\".",
        "gold_select": "select Ref_Template_Types.category_cipher",
        "select_candidates": [
            "select Templates.template_kind_codification",
            "select Templates.Version_Number",
            "select Templates.Template_ID",
            "select Templates.Date_Effective_From"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9956604838371277,
            7.400937465718016e-05,
            0.00042059263796545565,
            7.0587957452517e-05,
            0.001119897235184908,
            8.995263488031924e-05,
            0.002453461056575179,
            6.471761298598722e-05
        ],
        "align_select": "select Templates.template_kind_codification",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the type code of the template type with the description \"Book\".",
        "gold_select": "select Ref_Template_Types.category_cipher",
        "select_candidates": [
            "select Ref_Template_Types.category_cipher",
            "select Templates.template_kind_codification",
            "select t0.c, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.0006836267421022058,
            7.344475307036191e-05,
            0.995032548904419,
            7.777271093800664e-05,
            0.00016603482072241604,
            8.082685235422105e-05,
            0.00020038876391481608,
            9.36405558604747e-05
        ],
        "align_select": "select Templates.template_kind_codification",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the distinct template type descriptions for the templates ever used by any document?",
        "gold_select": "select distinct Ref_Template_Types.Template_Type_Description",
        "select_candidates": [
            "select distinct Ref_Template_Types.Template_Type_Description",
            "select distinct Ref_Template_Types.Template_Type_Description, Templates.Template_Details",
            "select distinct Ref_Template_Types.Template_Type_Description, t0.c2",
            "select distinct Ref_Template_Types.Template_Type_Description, Templates.template_kind_codification"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types Templates Documents",
        "table_candidates": [
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9682401418685913,
            0.028136415407061577,
            0.000363407947588712,
            0.000132026121718809,
            0.00046559746260754764,
            0.0002099091070704162,
            0.00043060342431999743,
            0.00013404498167801648
        ],
        "align_select": "select distinct Ref_Template_Types.Template_Type_Description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Return the different descriptions for templates that have been used in a document.",
        "gold_select": "select distinct Ref_Template_Types.Template_Type_Description",
        "select_candidates": [
            "select distinct Ref_Template_Types.Template_Type_Description",
            "select distinct Documents.Document_Description",
            "select distinct Ref_Template_Types.Template_Type_Description, Documents.Document_Description",
            "select distinct Templates.Version_Number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types Templates Documents",
        "table_candidates": [
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Documents",
            "Templates Documents",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9785464406013489,
            0.0061761378310620785,
            0.04052594304084778,
            0.004137503448873758,
            0.003888395382091403,
            0.00014504994032904506,
            0.0009835726814344525,
            0.0010223239660263062
        ],
        "align_select": "select distinct Ref_Template_Types.Template_Type_Description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the template ids with template type description \"Presentation\".",
        "gold_select": "select Templates.Template_ID",
        "select_candidates": [
            "select Templates.Template_ID",
            "select Templates.Template_ID, Ref_Template_Types.Template_Type_Description",
            "select Templates.Template_ID, Templates.Template_Details",
            "select Templates.Template_ID, Templates.template_kind_codification"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types Templates",
        "table_candidates": [
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9966046810150146,
            0.00011624456237768754,
            0.0001506450935266912,
            6.927268259460106e-05,
            0.000139736250275746,
            6.459478754550219e-05,
            0.0001456253376090899,
            6.441395089495927e-05
        ],
        "align_select": "select Templates.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the ids corresponding to templates with the description 'Presentation'.",
        "gold_select": "select Templates.Template_ID",
        "select_candidates": [
            "select Templates.Template_ID",
            "select Templates.Template_ID ",
            "select Templates.Template_IDs",
            "select Templates.Version_Number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types Templates",
        "table_candidates": [
            "Ref_Template_Types Templates",
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Templates Paragraphs"
        ],
        "align_scores": [
            0.9966578483581543,
            0.00011376210750313476,
            0.9966578483581543,
            0.00011376210750313476,
            0.9965102076530457,
            0.00010146202839678153,
            0.0014702805783599615,
            7.301423465833068e-05
        ],
        "align_select": "select Templates.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List document IDs, document names, and document descriptions for all documents.",
        "gold_select": "select Documents.Document_ID, Documents.Document_Name, Documents.detailing",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Document_Name, Documents.detailing",
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.detailing",
            "select Documents.Document_ID, Documents.Document_Name.c2, Documents.detailing",
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9192518591880798,
            0.00010227254824712873,
            0.0004262633447069675,
            7.790103700244799e-05,
            0.0007093175081536174,
            8.887321746442467e-05,
            0.00019380729645490646,
            9.151833364740014e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.Document_Name, Documents.detailing",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the ids, names, and descriptions for all documents?",
        "gold_select": "select Documents.Document_ID, Documents.Document_Name, Documents.detailing",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Document_Name, Documents.detailing",
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.detailing",
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Name",
            "select Documents.Document_ID, Documents.Document_Name, Documents.detailing"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.972754955291748,
            0.00010939753701677546,
            0.0003981398476753384,
            7.216248923214152e-05,
            0.0003072886320296675,
            7.57590532884933e-05,
            0.972754955291748,
            0.00010939753701677546
        ],
        "align_select": "select Documents.Document_ID, Documents.Document_Name, Documents.detailing",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the document name and template id for document with description with the letter 'w' in it?",
        "gold_select": "select Documents.Document_Name, Documents.Template_ID",
        "select_candidates": [
            "select Documents.Document_Name, Documents.Template_ID",
            "select Documents.Document_ID, Documents.Document_Name",
            "select Documents.Template_ID, Documents.Document_Name",
            "select Documents.Other_Details, Documents.Document_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Ref_Template_Types Documents",
            "Ref_Template_Types Templates Documents",
            "Templates Documents",
            "Paragraphs Documents",
            "Documents"
        ],
        "align_scores": [
            0.9946887493133545,
            0.00013691683125216514,
            0.003181474981829524,
            8.722150232642889e-05,
            0.9945384860038757,
            0.00013734390086028725,
            0.0003334561188239604,
            7.870214903960004e-05
        ],
        "align_select": "select Documents.Document_Name, Documents.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the names and template ids for documents that contain the letter w in their description.",
        "gold_select": "select Documents.Document_Name, Documents.Template_ID",
        "select_candidates": [
            "select Documents.Document_Name, Documents.Template_ID",
            "select Documents.Other_Details, Documents.Document_Name, Documents.Template_ID",
            "select Documents.Document_ID, Documents.Document_Name",
            "select Documents.Document_ID, Documents.Document_Name, Documents.Template_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Documents",
            "Ref_Template_Types Templates",
            "Templates Documents"
        ],
        "align_scores": [
            0.9956401586532593,
            0.00012680896907113492,
            0.0002874826896004379,
            6.0066202422603965e-05,
            0.003726476337760687,
            9.411537030246109e-05,
            0.0005417231004685163,
            6.543542258441448e-05
        ],
        "align_select": "select Documents.Document_Name, Documents.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "gold_select": "select Documents.Document_ID, Documents.Template_ID, Documents.detailing",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Template_ID, Documents.detailing",
            "select Documents.Document_ID, Documents.Template_ID, Ref_Template_Types.Template_Type_Description",
            "select Documents.Document_ID, Documents.Template_ID, Documents.Other_Details",
            "select Documents.Document_ID, Documents.Template_ID, Documents.Template_ID, Documents.detailing"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Documents",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9821142554283142,
            0.00013656947703566402,
            0.9809478521347046,
            0.00011789311975007877,
            0.9929991960525513,
            0.00010224075231235474,
            0.0003527628432493657,
            8.595122199039906e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.Template_ID, Documents.detailing",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "gold_select": "select Documents.Document_ID, Documents.Template_ID, Documents.detailing",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Template_ID, Documents.detailing",
            "select Documents.Document_ID, Documents.Template_ID, Ref_Template_Types.Template_Type_Description",
            "select Documents.Document_ID, Documents.Template_ID, Documents.Other_Details",
            "select Documents.Document_ID, Documents.Template_ID, Documents.Template_ID, Documents.detailing"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Documents",
            "Templates Documents",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9870784282684326,
            0.00013285760360304266,
            0.9757802486419678,
            0.00010969503637170419,
            0.9937722086906433,
            0.00010742298036348075,
            0.0002824834955390543,
            8.267009252449498e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.Template_ID, Documents.detailing",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show paragraph details for paragraph with text 'Korea '.",
        "gold_select": "select Paragraphs.Other_Details",
        "select_candidates": [
            "select Paragraphs.Other_Details",
            "select Paragraphs.content, Paragraphs.Other_Details",
            "select Paragraphs.Document_ID, Paragraphs.Other_Details",
            "select Paragraphs.Other_Details, Paragraphs.content"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs"
        ],
        "align_scores": [
            0.9958556294441223,
            0.0001748289942042902,
            0.0003031600499525666,
            8.757637260714546e-05,
            0.00022336268739309162,
            8.985798922367394e-05,
            0.00026049945154227316,
            8.071994670899585e-05
        ],
        "align_select": "select Paragraphs.Other_Details",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the details for the paragraph that includes the text 'Korea '?",
        "gold_select": "select Paragraphs.Other_Details",
        "select_candidates": [
            "select Documents.detailing",
            "select Documents.detailing, Documents.Other_Details",
            "select Documents.Template_ID, Documents.detailing",
            "select Documents.Document_Name, Documents.detailing"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Paragraphs",
            "Ref_Template_Types Paragraphs"
        ],
        "align_scores": [
            0.9872716069221497,
            9.758736996445805e-05,
            0.00032780953915789723,
            6.767285958630964e-05,
            0.0002709654509089887,
            8.781320502748713e-05,
            0.000262732821283862,
            7.453221041942015e-05
        ],
        "align_select": "select Documents.detailing",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "gold_select": "select Paragraphs.Paragraph_ID, Paragraphs.content",
        "select_candidates": [
            "select Paragraphs.Paragraph_ID, Paragraphs.content",
            "select Documents.Document_ID, Paragraphs.content",
            "select Documents.Document_ID, Documents.Document_Name",
            "select Paragraphs.Document_ID, Paragraphs.content"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs"
        ],
        "align_scores": [
            0.9951959252357483,
            0.0002560415887273848,
            0.0006073058466427028,
            0.00027402094565331936,
            0.0002868009905796498,
            0.000209717036341317,
            0.0005423568072728813,
            0.0002783373056445271
        ],
        "align_select": "select Paragraphs.Paragraph_ID, Paragraphs.content",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "gold_select": "select Paragraphs.Paragraph_ID, Paragraphs.content",
        "select_candidates": [
            "select Paragraphs.Paragraph_ID, Paragraphs.content",
            "select Documents.Document_ID, Paragraphs.content",
            "select Documents.Document_ID, Documents.Document_Name",
            "select Paragraphs.Document_ID, Paragraphs.content"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9930309653282166,
            0.00017227695207111537,
            0.0005858854856342077,
            0.00010126870620297268,
            0.00048715935554355383,
            7.32774060452357e-05,
            0.0006764599238522351,
            9.268210123991594e-05
        ],
        "align_select": "select Paragraphs.Paragraph_ID, Paragraphs.content",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all paragraph texts for the document \"Customer reviews\".",
        "gold_select": "select Paragraphs.content",
        "select_candidates": [
            "select Paragraphs.content",
            "select Paragraphs.Paragraph_ID, Paragraphs.content",
            "select Paragraphs.content, Paragraphs.Other_Details",
            "select Paragraphs.content, Documents.detailing"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9949727058410645,
            7.798577280482277e-05,
            0.0001795895950635895,
            6.22777224634774e-05,
            0.00023595239326823503,
            6.092031253501773e-05,
            0.00035781849874183536,
            6.184025551192462e-05
        ],
        "align_select": "select Paragraphs.content",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "gold_select": "select Paragraphs.content",
        "select_candidates": [
            "select Paragraphs.content",
            "select Paragraphs.content, Paragraphs.Other_Details",
            "select Paragraphs.Document_ID, Paragraphs.content",
            "select Paragraphs.Paragraph_ID, Paragraphs.content"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9944145679473877,
            9.456770931137726e-05,
            0.00023619727289769799,
            6.533646956086159e-05,
            0.00021432277571875602,
            6.630660936934873e-05,
            0.00019081607752013952,
            6.650620343862101e-05
        ],
        "align_select": "select Paragraphs.content",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.content",
            "select Paragraphs.Paragraph_ID",
            "select Paragraphs.Document_ID, Paragraphs.content, Paragraphs.Other_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9963451027870178,
            9.076387505047023e-05,
            0.00015282983076758683,
            6.668338755844161e-05,
            0.0030907539185136557,
            8.442599209956825e-05,
            0.00015095224080141634,
            5.9930942370556295e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.content",
            "select Paragraphs.Paragraph_ID",
            "select Paragraphs.Document_ID, Paragraphs.Other_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9941238760948181,
            0.00020039983792230487,
            0.00014546935562975705,
            6.495615525636822e-05,
            0.9937969446182251,
            0.00037327874451875687,
            0.0001440422929590568,
            6.101385588408448e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "gold_select": "select visitor.Name",
        "select_candidates": [
            "select visitor.Name",
            "select visitor.Name, visitor.type_of_membership",
            "select visitor.Name, t1.c4",
            "select visitor.Name-ORDER BY"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-WHERE-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor"
        ],
        "align_scores": [
            0.7516910433769226,
            0.7516910433769226,
            0.00015922814782243222,
            0.00015922814782243222,
            0.00022566516418009996,
            0.00022566516418009996,
            0.0024401440750807524,
            0.0024401440750807524
        ],
        "align_select": "select visitor.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "What is the average age of the visitors whose membership level is not higher than 4?",
        "gold_select": "select avg(visitor.Age)",
        "select_candidates": [
            "select avg(visitor.Age)",
            "select an avg(visitor.Age)",
            "select  avg(visitor.Age)",
            "select the avg(visitor.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor"
        ],
        "align_scores": [
            0.9946604371070862,
            0.00010646896407706663,
            0.0005353149608708918,
            0.00010390611714683473,
            0.9946604371070862,
            0.00010646896407706663,
            0.0005787585396319628,
            0.00011905081919394433
        ],
        "align_select": "select avg(visitor.Age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "gold_select": "select visitor.Name, visitor.type_of_membership",
        "select_candidates": [
            "select visitor.Name, visitor.type_of_membership",
            "select visitor.Name, visitor.type_of_membership, visitor.Age",
            "select visitor.Name, visitor.type_of_membership sort by visitor.Age",
            "select visitor.Name, t1.c4"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor"
        ],
        "align_scores": [
            0.9898563623428345,
            0.0004058537888340652,
            0.00041618707473389804,
            0.00010698984260670841,
            0.00217646942473948,
            0.0001591733453096822,
            0.0003722808323800564,
            0.00021513024694286287
        ],
        "align_select": "select visitor.Name, visitor.type_of_membership",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "Find the id and name of the museum that has the most staff members?",
        "gold_select": "select museum.Museum_ID, museum.Name",
        "select_candidates": [
            "select museum.Museum_ID, museum.Name",
            "select museum.Name, museum.Museum_ID",
            "select museum.Museum_ID, museum.Name, museum.staff_num",
            "select museum.Museum_ID, museum.Name, museum.staff_num"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.9901532530784607,
            0.0001283244782825932,
            0.9905842542648315,
            0.00013405494973994792,
            0.0008209344232454896,
            8.111825445666909e-05,
            0.0008209344232454896,
            8.111825445666909e-05
        ],
        "align_select": "select museum.Museum_ID, museum.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the average number of staff working for the museums that were open before 2009.",
        "gold_select": "select avg(museum.staff_num)",
        "select_candidates": [
            "select avg(museum.staff_num)",
            "select avg(t0.c4)",
            "select avg(museum.accessible_from)",
            "select an avg(museum.staff_num)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum",
            "museum visitor",
            "museum visit"
        ],
        "align_scores": [
            0.9899386167526245,
            0.00022343509772326797,
            0.0011398721253499389,
            0.00018135305435862392,
            0.23837104439735413,
            0.0007589477463625371,
            0.0004949024878442287,
            0.00013002661580685526
        ],
        "align_select": "select avg(museum.staff_num)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "gold_select": "select museum.staff_num, museum.accessible_from",
        "select_candidates": [
            "select museum.accessible_from, museum.staff_num",
            "select museum.Museum_ID, museum.staff_num",
            "select museum.staff_num, museum.accessible_from",
            "select museum.Name, museum.staff_num"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.025544660165905952,
            7.017017196631059e-05,
            0.0010342129971832037,
            0.00010840148024726659,
            0.013180196285247803,
            6.98717703926377e-05,
            0.0015144187491387129,
            0.00014704999921377748
        ],
        "align_select": "select museum.accessible_from, museum.staff_num",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
        "gold_select": "select museum.Name",
        "select_candidates": [
            "select museum.Name",
            "select museum.Name, museum.staff_num",
            "select museum.Name (or museum.staff_num)",
            "select museum.Name - museum.staff_num"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.7708609104156494,
            0.00015849663759581745,
            0.000367231376003474,
            7.499497587559745e-05,
            0.0026592251379042864,
            8.808526763459668e-05,
            0.0006261434755288064,
            9.12043615244329e-05
        ],
        "align_select": "select museum.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "gold_select": "select visit.visitor_ID, visitor.Name, visitor.type_of_membership",
        "select_candidates": [
            "select visit.visitor_ID, visitor.Name, visitor.type_of_membership",
            "select visitor.ID, visitor.Name, visitor.type_of_membership",
            "select visit.visitor_ID, visitor.ID, visitor.Name, visitor.type_of_membership",
            "select visitor.ID, visitor.Name, visitor.type_of_membership"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor visit",
        "table_candidates": [
            "visitor visit"
        ],
        "align_scores": [
            0.8356232643127441,
            0.6321763396263123,
            0.9083107113838196,
            0.8354032039642334,
            0.0009548571542836726,
            0.0008035199134610593,
            0.9083107113838196,
            0.8354032039642334
        ],
        "align_select": "select visit.visitor_ID, visitor.Name, visitor.type_of_membership",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the name and age of the visitor who bought the most tickets at once.",
        "gold_select": "select visitor.Name, visitor.Age",
        "select_candidates": [
            "select visitor.Name, visitor.Age",
            "select visitor.Name, visitor.Age, visitor.ID",
            "select visitor.Name, visitor.Age, visit.visitor_ID",
            "select visitor.Name, visitor.Age, t1.c4"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "visitor visit",
        "table_candidates": [
            "visitor visit"
        ],
        "align_scores": [
            0.9879531264305115,
            6.614815356442705e-05,
            0.00019628593872766942,
            5.8652422012528405e-05,
            0.00024402377312071621,
            5.979763955110684e-05,
            0.00034145600511692464,
            5.494158904184587e-05
        ],
        "align_select": "select visitor.Name, visitor.Age",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the average and maximum number of tickets bought in all visits?",
        "gold_select": "select avg(visit.coupon_quantity), max(visit.coupon_quantity)",
        "select_candidates": [
            "select avg(visit.coupon_quantity), max(visit.coupon_quantity)",
            "select avg(visit.coupon_quantity), max(visit.Total_spent)",
            "select avg(visit.Total_spent), max(visit.Total_spent)",
            "select avg(t2.c4), max(t2.c4)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visit",
        "table_candidates": [
            "visit"
        ],
        "align_scores": [
            0.9850414395332336,
            9.045843034982681e-05,
            0.0007497465121559799,
            8.847292338032275e-05,
            0.9852921366691589,
            9.558785677654669e-05,
            0.06467790901660919,
            9.362734999740496e-05
        ],
        "align_select": "select avg(visit.coupon_quantity), max(visit.coupon_quantity)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the total ticket expense of the visitors whose membership level is 1?",
        "gold_select": "select sum(visit.Total_spent)",
        "select_candidates": [
            "select sum(visit.Total_spent)",
            "select sum(visit.Total_spent), visitor.ID",
            "select sum(visit.Total_spent), visitor.Name",
            "select sum(visit.Total_spent)aft visitor.ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor visit",
        "table_candidates": [
            "visitor visit"
        ],
        "align_scores": [
            0.990676760673523,
            7.741864101262763e-05,
            0.00015764671843498945,
            5.842026075697504e-05,
            0.00017070291505660862,
            6.140728510217741e-05,
            0.0002890861651394516,
            7.928859122330323e-05
        ],
        "align_select": "select sum(visit.Total_spent)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
        "gold_select": "select visitor.Name",
        "select_candidates": [
            "select visitor.Name",
            "select visitor.Name, museum.Name",
            "select visitor.Name, visit.visitor_ID",
            "select visitor.Name, visit.Museum_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum visitor visit",
        "table_candidates": [
            "museum visitor visit"
        ],
        "align_scores": [
            0.990402102470398,
            0.3128165602684021,
            0.0004460875934455544,
            0.00031357340048998594,
            0.00022046988306101412,
            0.00015960527525749058,
            0.0002840425877366215,
            0.00021881880820728838
        ],
        "align_select": "select visitor.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the number of visitors who did not visit any museum opened after 2010.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), museum.Name",
            "select count(*), visit.visitor_ID",
            "select count(*), visitor.ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum visitor visit",
        "table_candidates": [
            "visitor visit",
            "museum visitor visit",
            "museum visitor"
        ],
        "align_scores": [
            0.9358334541320801,
            0.0014483993873000145,
            0.0003375688393134624,
            0.0028836228884756565,
            0.00025238707894459367,
            0.0005131673533469439,
            0.00032778235618025064,
            0.0004884250811301172
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many museums were opened after 2013 or before 2008?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), museum.Name",
            "select count(*), museum.Museum_ID",
            "select count(*), museum.accessible_from"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum",
            "museum visitor"
        ],
        "align_scores": [
            0.9362574219703674,
            0.0016157450154423714,
            0.00022664344578515738,
            0.0007902518264017999,
            0.00018649852427188307,
            0.00017892011965159327,
            0.00020058297377545387,
            0.0006139933248050511
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the id and name of the museum that has the most staff members?",
        "gold_select": "select museum.Museum_ID, museum.Name",
        "select_candidates": [
            "select museum.Museum_ID, museum.Name",
            "select museum.Name, museum.Museum_ID",
            "select museum.Museum_ID, museum.Name, museum.staff_num",
            "select museum.Museum_ID, museum.Name, museum.staff_num"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.9901532530784607,
            0.0001283244782825932,
            0.9905842542648315,
            0.00013405494973994792,
            0.0008209344232454896,
            8.111825445666909e-05,
            0.0008209344232454896,
            8.111825445666909e-05
        ],
        "align_select": "select museum.Museum_ID, museum.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the average number of staff working for the museums that were open before 2009.",
        "gold_select": "select avg(museum.staff_num)",
        "select_candidates": [
            "select avg(museum.staff_num)",
            "select an avg(museum.staff_num)",
            "select avg(t0.c4)",
            "select  avg(museum.staff_num)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.9899386167526245,
            0.00022343509772326797,
            0.0004949024878442287,
            0.00013002661580685526,
            0.0011398721253499389,
            0.00018135305435862392,
            0.9899386167526245,
            0.00022343509772326797
        ],
        "align_select": "select avg(museum.staff_num)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "gold_select": "select museum.staff_num, museum.Open_Year",
        "select_candidates": [
            "select museum.Open_Year, museum.staff_num",
            "select museum.Museum_ID, museum.Open_Year, museum.staff_num",
            "select museum.Name, museum.staff_num",
            "select museum.staff_num, museum.Open_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.9958640336990356,
            9.34015479288064e-05,
            0.00018345961871091276,
            6.559330358868465e-05,
            0.0015144187491387129,
            0.00014704999921377748,
            0.9956749081611633,
            8.218661969294772e-05
        ],
        "align_select": "select museum.Open_Year, museum.staff_num",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
        "gold_select": "select museum.Name",
        "select_candidates": [
            "select museum.Name",
            "select museum.Name, museum.staff_num",
            "select museum.Name, museum.staff_num, museum.Open_Year",
            "select museum.Name, museum.staff_num, museum.Open_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.7708609104156494,
            0.00015849663759581745,
            0.000367231376003474,
            7.499497587559745e-05,
            0.0001654687075642869,
            6.290161400102079e-05,
            0.0001654687075642869,
            6.290161400102079e-05
        ],
        "align_select": "select museum.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the name and age of the visitor who bought the most tickets at once.",
        "gold_select": "select visitor.Name, visitor.Age",
        "select_candidates": [
            "select visitor.Name, visitor.Age",
            "select visitor.Name, visitor.Age, visitor.ID",
            "select visitor.Name, visitor.Age, visit.visitor_ID",
            "select visitor.Name, visitor.Age, t1.c4"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "visitor visit",
        "table_candidates": [
            "visitor visit"
        ],
        "align_scores": [
            0.9879531264305115,
            6.614815356442705e-05,
            0.00019628593872766942,
            5.8652422012528405e-05,
            0.00024402377312071621,
            5.979763955110684e-05,
            0.00034145600511692464,
            5.494158904184587e-05
        ],
        "align_select": "select visitor.Name, visitor.Age",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the average and maximum number of tickets bought in all visits?",
        "gold_select": "select avg(visit.coupon_quantity), max(visit.coupon_quantity)",
        "select_candidates": [
            "select avg(visit.coupon_quantity), max(visit.coupon_quantity)",
            "select avg(visit.coupon_quantity), max(visit.Total_spent)",
            "select avg(visit.Total_spent), max(visit.Total_spent)",
            "select avg(t2.c4), max(t2.c4)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visit",
        "table_candidates": [
            "visit"
        ],
        "align_scores": [
            0.9850414395332336,
            9.045843034982681e-05,
            0.0007497465121559799,
            8.847292338032275e-05,
            0.9852921366691589,
            9.558785677654669e-05,
            0.06467790901660919,
            9.362734999740496e-05
        ],
        "align_select": "select avg(visit.coupon_quantity), max(visit.coupon_quantity)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find the average number of staff working for the museums that were open before 2009.",
        "gold_select": "select avg(museum.Num_of_Staff)",
        "select_candidates": [
            "select avg(museum.Num_of_Staff)",
            "select avg(t0.c4)",
            "select an avg(museum.Num_of_Staff)",
            "select  avg(museum.Num_of_Staff)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.9905879497528076,
            0.000148215884109959,
            0.0011398721253499389,
            0.0001791288668755442,
            0.00043334346264600754,
            0.00011623369209701195,
            0.9905879497528076,
            0.000148215884109959
        ],
        "align_select": "select avg(museum.Num_of_Staff)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "gold_select": "select museum.Num_of_Staff, museum.airing_year",
        "select_candidates": [
            "select museum.airing_year, museum.Num_of_Staff",
            "select museum.Museum_ID, museum.airing_year, museum.Num_of_Staff",
            "select museum.Name, museum.Num_of_Staff",
            "select museum.Num_of_Staff, museum.airing_year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.004493842367082834,
            9.22297258512117e-05,
            0.00022948134574107826,
            6.867951742606238e-05,
            0.0016444933135062456,
            0.00011590895883273333,
            0.0026118906680494547,
            8.25131282908842e-05
        ],
        "align_select": "select museum.airing_year, museum.Num_of_Staff",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
        "gold_select": "select museum.Name",
        "select_candidates": [
            "select museum.Name",
            "select museum.Name, museum.Num_of_Staff",
            "select museum.Name, museum.Num_of_Staff, museum.airing_year",
            "select museum.Name, museum.Num_of_Staff, museum.airing_year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.7708609104156494,
            0.00015849663759581745,
            0.0002910757903009653,
            7.37236114218831e-05,
            0.00013089069398120046,
            5.7219287555199116e-05,
            0.00013089069398120046,
            5.7219287555199116e-05
        ],
        "align_select": "select museum.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
        "gold_select": "select visitor.Name",
        "select_candidates": [
            "select visitor.Name",
            "select visitor.Name, museum.Name",
            "select visitor.Name, visit.visitor_ID",
            "select visitor.Name, museum.Num_of_Staff"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "museum visitor visit",
        "table_candidates": [
            "museum visitor visit"
        ],
        "align_scores": [
            0.990402102470398,
            0.990402102470398,
            0.0004460875934455544,
            0.0004460875934455544,
            0.00022046988306101412,
            0.00022046988306101412,
            0.00013208026939537376,
            0.00013208026939537376
        ],
        "align_select": "select visitor.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the number of visitors who did not visit any museum opened after 2010.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), museum.Name",
            "select count(distinct visitor.ID)",
            "select count(*), museum.Museum_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum visitor visit",
        "table_candidates": [
            "museum visitor visit",
            "museum visitor"
        ],
        "align_scores": [
            0.9358334541320801,
            0.0014483993873000145,
            0.0003375688393134624,
            0.0028836228884756565,
            0.007422591559588909,
            0.0002125729515682906,
            0.00020464581029955298,
            0.00037563120713457465
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many museums were opened after 2013 or before 2008?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), museum.Museum_ID",
            "select count(*), museum.Name",
            "select count(*), museum.airing_year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.9362574219703674,
            7.595218630740419e-05,
            0.00018649852427188307,
            5.9368489019107074e-05,
            0.00022664344578515738,
            6.155139271868393e-05,
            0.00021593128622043878,
            5.9579015214694664e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the id and name of the museum that has the most staff members?",
        "gold_select": "select museum.Museum_ID, museum.Name",
        "select_candidates": [
            "select museum.Museum_ID, museum.Name",
            "select museum.Name, museum.Museum_ID",
            "select museum.Museum_ID, museum.Name, museum.how_many_workers",
            "select museum.Museum_ID, museum.Name, museum.Open_Year"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.9386711120605469,
            9.212135046254843e-05,
            0.9532191753387451,
            9.693628817331046e-05,
            0.0004203928110655397,
            6.501310417661443e-05,
            0.000281153479591012,
            6.817810208303854e-05
        ],
        "align_select": "select museum.Museum_ID, museum.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the average number of staff working for the museums that were open before 2009.",
        "gold_select": "select avg(museum.how_many_workers)",
        "select_candidates": [
            "select avg(museum.how_many_workers)",
            "select avg(t0.c4)",
            "select avg(museum.Open_Year)",
            "select an avg(museum.how_many_workers)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.9892818927764893,
            0.000128541374579072,
            0.0011398721253499389,
            0.0001791288668755442,
            0.0014822982484474778,
            0.00010679902334231883,
            0.00044534954940900207,
            0.00011485416325740516
        ],
        "align_select": "select avg(museum.how_many_workers)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "gold_select": "select museum.how_many_workers, museum.Open_Year",
        "select_candidates": [
            "select museum.Open_Year, museum.how_many_workers",
            "select museum.Museum_ID, museum.Open_Year, museum.how_many_workers",
            "select museum.Name, museum.how_many_workers",
            "select museum.Name, museum.Open_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.9952588677406311,
            7.933403685456142e-05,
            0.00019190409511793405,
            6.826618482591584e-05,
            0.001646006596274674,
            0.00011800986976595595,
            0.001225869869813323,
            0.00012644552043639123
        ],
        "align_select": "select museum.Open_Year, museum.how_many_workers",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
        "gold_select": "select museum.Name",
        "select_candidates": [
            "select museum.Name",
            "select museum.Name, museum.how_many_workers",
            "select museum.Name, museum.how_many_workers, museum.Open_Year",
            "select museum.Name, museum.how_many_workers, museum.Open_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.7708609104156494,
            0.00015849663759581745,
            0.0002498597023077309,
            7.098568312358111e-05,
            0.00015095382696017623,
            6.263704563025385e-05,
            0.00015095382696017623,
            6.263704563025385e-05
        ],
        "align_select": "select museum.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the name and age of the visitor who bought the most tickets at once.",
        "gold_select": "select visitor.Name, visitor.Age",
        "select_candidates": [
            "select visitor.Name, visitor.Age",
            "select visitor.Name, visitor.Age, visitor.ID",
            "select visitor.Name, visitor.Age, visit.visitor_ID",
            "select visitor.Name, visitor.Age, t1.c4"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "visitor visit",
        "table_candidates": [
            "visitor visit"
        ],
        "align_scores": [
            0.9879531264305115,
            6.614815356442705e-05,
            0.00019628593872766942,
            5.8652422012528405e-05,
            0.00024402377312071621,
            5.979763955110684e-05,
            0.00034145600511692464,
            5.494158904184587e-05
        ],
        "align_select": "select visitor.Name, visitor.Age",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the average and maximum number of tickets bought in all visits?",
        "gold_select": "select avg(visit.coupon_quantity), max(visit.coupon_quantity)",
        "select_candidates": [
            "select avg(visit.coupon_quantity), max(visit.coupon_quantity)",
            "select avg(visit.coupon_quantity), max(visit.Total_spent)",
            "select avg(visit.Total_spent), max(visit.Total_spent)",
            "select avg(t2.c4), max(t2.c4)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visit",
        "table_candidates": [
            "visit"
        ],
        "align_scores": [
            0.9850414395332336,
            9.045843034982681e-05,
            0.0007497465121559799,
            8.847292338032275e-05,
            0.9852921366691589,
            9.558785677654669e-05,
            0.06467790901660919,
            9.362734999740496e-05
        ],
        "align_select": "select avg(visit.coupon_quantity), max(visit.coupon_quantity)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "gold_select": "select visitor.Name",
        "select_candidates": [
            "select visitor.Name",
            "select visitor.Name, visitor.fellowship_classification",
            "select visitor.Name-ORDER BY",
            "select visitor.Name, t1.c4"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-WHERE-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor"
        ],
        "align_scores": [
            0.7516910433769226,
            0.7516910433769226,
            0.00017385103274136782,
            0.00017385103274136782,
            0.0024401440750807524,
            0.0024401440750807524,
            0.00022566516418009996,
            0.00022566516418009996
        ],
        "align_select": "select visitor.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "What is the average age of the visitors whose membership level is not higher than 4?",
        "gold_select": "select avg(visitor.Age)",
        "select_candidates": [
            "select avg(visitor.Age)",
            "select an avg(visitor.Age)",
            "select  avg(visitor.Age)",
            "select the avg(visitor.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor"
        ],
        "align_scores": [
            0.9946604371070862,
            0.0001228794571943581,
            0.0005353149608708918,
            0.00010752065281849355,
            0.9946604371070862,
            0.0001228794571943581,
            0.0005787585396319628,
            0.00011903516133315861
        ],
        "align_select": "select avg(visitor.Age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "gold_select": "select visitor.Name, visitor.fellowship_classification",
        "select_candidates": [
            "select visitor.Name, visitor.fellowship_classification",
            "select visitor.Name, visitor.fellowship_classification, visitor.Age",
            "select visitor.Name, visitor.fellowship_classification sort by visitor.Age",
            "select visitor.Name, t1.c4"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor"
        ],
        "align_scores": [
            0.9915334582328796,
            0.00036813292535953224,
            0.00044947676360607147,
            0.00011140761489514261,
            0.0030649418476969004,
            0.00017396877228748053,
            0.0003722808323800564,
            0.00021513024694286287
        ],
        "align_select": "select visitor.Name, visitor.fellowship_classification",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "Find the id and name of the museum that has the most staff members?",
        "gold_select": "select museum.Museum_ID, museum.Name",
        "select_candidates": [
            "select museum.Museum_ID, museum.Name",
            "select museum.Name, museum.Museum_ID",
            "select museum.Museum_ID, museum.Name, museum.staff_num",
            "select museum.Museum_ID, museum.Name, museum.staff_num"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.9901532530784607,
            0.0001283244782825932,
            0.9905842542648315,
            0.00013405494973994792,
            0.0008209344232454896,
            8.111825445666909e-05,
            0.0008209344232454896,
            8.111825445666909e-05
        ],
        "align_select": "select museum.Museum_ID, museum.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the average number of staff working for the museums that were open before 2009.",
        "gold_select": "select avg(museum.staff_num)",
        "select_candidates": [
            "select avg(museum.staff_num)",
            "select avg(t0.c4)",
            "select an avg(museum.staff_num)",
            "select  avg(museum.staff_num)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.9899386167526245,
            0.00022343509772326797,
            0.0011398721253499389,
            0.00018135305435862392,
            0.0004949024878442287,
            0.00013002661580685526,
            0.9899386167526245,
            0.00022343509772326797
        ],
        "align_select": "select avg(museum.staff_num)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "gold_select": "select museum.staff_num, museum.Open_Year",
        "select_candidates": [
            "select museum.Open_Year, museum.staff_num",
            "select museum.Museum_ID, museum.Open_Year, museum.staff_num",
            "select museum.Name, museum.staff_num",
            "select museum.staff_num, museum.Open_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.9958640336990356,
            9.34015479288064e-05,
            0.00018345961871091276,
            6.559330358868465e-05,
            0.0015144187491387129,
            0.00014704999921377748,
            0.9956749081611633,
            8.218661969294772e-05
        ],
        "align_select": "select museum.Open_Year, museum.staff_num",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
        "gold_select": "select museum.Name",
        "select_candidates": [
            "select museum.Name",
            "select museum.Name, museum.staff_num",
            "select museum.Name, museum.staff_num, museum.Open_Year",
            "select museum.Name, museum.staff_num, museum.Open_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.7708609104156494,
            0.00015849663759581745,
            0.000367231376003474,
            7.499497587559745e-05,
            0.0001654687075642869,
            6.290161400102079e-05,
            0.0001654687075642869,
            6.290161400102079e-05
        ],
        "align_select": "select museum.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "gold_select": "select visit.visitor_ID, visitor.Name, visitor.fellowship_classification",
        "select_candidates": [
            "select visit.visitor_ID, visitor.Name, visitor.fellowship_classification",
            "select visitor.ID, visitor.Name, visitor.fellowship_classification",
            "select visit.Museum_ID, visitor.Name, visitor.fellowship_classification",
            "select visitor.ID, visitor.Name, visitor.fellowship_classification"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor visit",
        "table_candidates": [
            "visitor visit"
        ],
        "align_scores": [
            0.845298707485199,
            0.6304594278335571,
            0.9268963932991028,
            0.8639840483665466,
            0.0009218468330800533,
            0.0009869968052953482,
            0.9268963932991028,
            0.8639840483665466
        ],
        "align_select": "select visit.visitor_ID, visitor.Name, visitor.fellowship_classification",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the total ticket expense of the visitors whose membership level is 1?",
        "gold_select": "select sum(visit.Total_spent)",
        "select_candidates": [
            "select sum(visit.Total_spent)",
            "select sum(visit.Total_spent), visitor.ID",
            "select sum(visit.Num_of_Ticket)",
            "select sum(visit.Total_spent), visitor.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor visit",
        "table_candidates": [
            "visitor visit"
        ],
        "align_scores": [
            0.990676760673523,
            7.741864101262763e-05,
            0.00015764671843498945,
            5.842026075697504e-05,
            0.21342526376247406,
            7.47269150451757e-05,
            0.00017070291505660862,
            6.140728510217741e-05
        ],
        "align_select": "select sum(visit.Total_spent)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the first name and birth date of all players from the country with code USA.",
        "gold_select": "select players.given_name, players.birthday",
        "select_candidates": [
            "select players.given_name, players.birthday",
            "select distinct players.given_name, players.birthday",
            "select players.player_id, players.given_name, players.birthday",
            "select players.given_name.c1, players.birthday"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.993240237236023,
            0.0001649219630053267,
            0.017660506069660187,
            0.0001056229739333503,
            0.00014187935448717326,
            7.172840560087934e-05,
            0.0003622485091909766,
            8.141491707647219e-05
        ],
        "align_select": "select players.given_name, players.birthday",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the first names and birth dates of players from the USA?",
        "gold_select": "select players.given_name, players.birthday",
        "select_candidates": [
            "select players.given_name, players.birthday",
            "select players.given_name, players.final_name, players.birthday",
            "select players.given_name, players.hand, players.birthday",
            "select players.player_id, players.given_name, players.birthday"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9936809539794922,
            0.00012287699792068452,
            0.0002544228336773813,
            6.24402382527478e-05,
            0.00021880083659198135,
            6.829523044871166e-05,
            0.00014524675498250872,
            6.629971176153049e-05
        ],
        "align_select": "select players.given_name, players.birthday",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the average age of losers and winners of all matches.",
        "gold_select": "select avg(matches.total_loss), avg(matches.victor_how_old)",
        "select_candidates": [
            "select avg(matches.loser_ht), matches.victor_how_old",
            "select avg(matches.loser_ht), matches.winner_entry",
            "select avg(matches.loser_ht), avg(matches.victor_how_old)",
            "select avg(matches.loser_ht), avg(matches.total_loss)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.0048533715307712555,
            0.04179276525974274,
            0.0009792873170226812,
            0.0019228755263611674,
            0.3534623384475708,
            0.02722008153796196,
            0.00022546469699591398,
            0.00016778786084614694
        ],
        "align_select": "select avg(matches.loser_ht), avg(matches.victor_how_old)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the average ages of losers and winners across matches?",
        "gold_select": "select avg(matches.total_loss), avg(matches.victor_how_old)",
        "select_candidates": [
            "select avg(matches.loser_ht), avg(matches.victor_how_old)",
            "select avg(matches.loser_ht), avg(matches.total_loss)",
            "select avg(matches.loser_ht), avg(matches.loser_id)",
            "select avg(matches.loser_ht), avg(matches.victor_how_old"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.45603716373443604,
            0.1284010261297226,
            0.00029037115746177733,
            0.00020876301277894527,
            0.00036988340434618294,
            0.0003354242944624275,
            0.033939260989427567,
            0.005850359797477722
        ],
        "align_select": "select avg(matches.loser_ht), avg(matches.victor_how_old)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find the average rank of winners in all matches.",
        "gold_select": "select avg(matches.achiever_ranking)",
        "select_candidates": [
            "select avg(matches.loser_rank)",
            "select avg(matches.failure)",
            "select avg(matches.loser_rank_points)",
            "select avg(matches.loser_ioc)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings"
        ],
        "align_scores": [
            0.001967933028936386,
            8.665568748256192e-05,
            0.0006773129571229219,
            0.00012131181574659422,
            0.01210113801062107,
            8.303963113576174e-05,
            0.005699834320694208,
            9.797674283618107e-05
        ],
        "align_select": "select avg(matches.loser_rank)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the average rank for winners in all matches?",
        "gold_select": "select avg(matches.achiever_ranking)",
        "select_candidates": [
            "select avg(matches.loser_rank)",
            "select avg(matches.failure)",
            "select avg(matches.loser_rank_points)",
            "select avg(matches.loser_ioc)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings"
        ],
        "align_scores": [
            0.0023535797372460365,
            0.0003291991597507149,
            0.0008899927488528192,
            0.0003370556514710188,
            0.004825160838663578,
            0.00046753077185712755,
            0.007965490221977234,
            0.0009210987482219934
        ],
        "align_select": "select avg(matches.loser_rank)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "find the number of distinct country codes of all players.",
        "gold_select": "select count(distinct players.state_code)",
        "select_candidates": [
            "select count(distinct players.state_code)",
            "select count(distinct t0.c6)",
            "select count(distinct players.birthday)",
            "select count(distinct players.final_name)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.0007397819426842034,
            0.0007397819426842034,
            0.0008434344199486077,
            0.0008434344199486077,
            0.0007122756214812398,
            0.0007122756214812398,
            0.0003903133620042354,
            0.0003903133620042354
        ],
        "align_select": "select count(distinct players.state_code)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many distinct countries do players come from?",
        "gold_select": "select count(distinct players.state_code)",
        "select_candidates": [
            "select count(distinct players.state_code)",
            "select count(distinct players.birthday)",
            "select count(distinct t0.c6)",
            "select count(distinct players.given_name)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players",
            "players rankings",
            "players matches"
        ],
        "align_scores": [
            0.0005603963509202003,
            0.0005603963509202003,
            0.0006311808829195797,
            0.0006311808829195797,
            0.0008065497386269271,
            0.0008065497386269271,
            0.00034060433972626925,
            0.00034060433972626925
        ],
        "align_select": "select count(distinct players.state_code)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find the number of distinct name of losers.",
        "gold_select": "select count(distinct matches.failure)",
        "select_candidates": [
            "select count(distinct players.given_name)",
            "select count(distinct players.final_name)",
            "select count(distinct players.given_name, players.final_name)",
            "select count(distinct matches.total_loss)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players matches",
            "players"
        ],
        "align_scores": [
            0.9416396617889404,
            0.00015251552395056933,
            0.9935070276260376,
            7.647911115782335e-05,
            0.00014846384874545038,
            6.974727875785902e-05,
            0.0007536698249168694,
            8.611973316874355e-05
        ],
        "align_select": "select count(distinct players.given_name)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many different loser names are there?",
        "gold_select": "select count(distinct matches.failure)",
        "select_candidates": [
            "select count(distinct matches.victor_name)",
            "select count(distinct matches.total_loss)",
            "select count(distinct matches.loser_ioc)",
            "select count(distinct matches.achiever_ranking)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings",
            "rankings"
        ],
        "align_scores": [
            0.001571074826642871,
            0.001571074826642871,
            0.0013410431565716863,
            0.0013410431565716863,
            0.23498135805130005,
            0.23498135805130005,
            0.0012348549207672477,
            0.0012348549207672477
        ],
        "align_select": "select count(distinct matches.loser_ioc)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find the name of tourney that has more than 10 matches.",
        "gold_select": "select matches.event_name",
        "select_candidates": [
            "select matches.event_name",
            "select matches.event_name, matches.tourney_date",
            "select matches.event_name (http://matches.event_name.c17)",
            "select matches.event_name (http://matches.event_name.c13)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.984348475933075,
            0.00010204469435848296,
            0.0001850365224527195,
            5.6908891565399244e-05,
            0.0005123442970216274,
            6.979744648560882e-05,
            0.0003195492026861757,
            6.729446613462642e-05
        ],
        "align_select": "select matches.event_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the names of tournaments that have more than 10 matches?",
        "gold_select": "select matches.event_name",
        "select_candidates": [
            "select matches.event_name",
            "select matches.event_name, matches.tourney_date",
            "select matches.event_name, matches.victor_side",
            "select matches.event_name, matches.victor_how_old"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9858830571174622,
            0.00016460398910567164,
            0.0002400070079602301,
            6.0935417423024774e-05,
            0.000735782494302839,
            7.5825686508324e-05,
            0.00018264277605339885,
            6.288403528742492e-05
        ],
        "align_select": "select matches.event_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List the names of all winners who played in both 2013 and 2016.",
        "gold_select": "select matches.victor_name",
        "select_candidates": [
            "select matches.victor_name",
            "select matches.victor_name, matches.winner_ioc",
            "select matches.victor_name, matches.winner_entry",
            "select matches.victor_name, matches.victor_side"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9937253594398499,
            0.12630528211593628,
            0.0002756509929895401,
            0.00010549111175350845,
            0.00020567452884279191,
            0.00010792475950438529,
            0.0002391353773418814,
            0.00012298166984692216
        ],
        "align_select": "select matches.victor_name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of players who won in both 2013 and 2016?",
        "gold_select": "select matches.victor_name",
        "select_candidates": [
            "select players.given_name, players.final_name",
            "select players.player_id, players.given_name, players.final_name",
            "select players.given_name, players.final_name, players.player_id",
            "select players.given_name, players.final_name, players.hand"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players matches",
            "players matches rankings"
        ],
        "align_scores": [
            0.0004869767290074378,
            0.0004869767290074378,
            0.00013675661466550082,
            0.00013675661466550082,
            0.00016023506759665906,
            0.00016023506759665906,
            0.0001684847811702639,
            0.0001684847811702639
        ],
        "align_select": "select players.given_name, players.final_name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "gold_select": "select players.state_code, players.given_name",
        "select_candidates": [
            "select players.state_code, players.given_name",
            "select players.birthday, players.given_name",
            "select players.given_name, players.state_code",
            "select players.final_name, players.state_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players matches",
        "table_candidates": [
            "players matches"
        ],
        "align_scores": [
            0.0008604807662777603,
            0.00018549298692960292,
            0.0007680195267312229,
            0.00016871289699338377,
            0.0004966831183992326,
            0.00011978141264989972,
            0.0005477397353388369,
            0.00012438406702131033
        ],
        "align_select": "select players.state_code, players.given_name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "gold_select": "select players.state_code, players.given_name",
        "select_candidates": [
            "select players.given_name, players.state_code",
            "select players.player_id, players.given_name, players.state_code",
            "select players.given_name, players.state_code, players.player_id",
            "select players.given_name, players.state_code, t0.c6"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players matches",
        "table_candidates": [
            "players matches"
        ],
        "align_scores": [
            0.002075021853670478,
            0.00025008016382344067,
            0.00015794418868608773,
            0.00011381721560610458,
            0.0001369743113173172,
            9.526609210297465e-05,
            0.0001881960779428482,
            0.0001359049929305911
        ],
        "align_select": "select players.given_name, players.state_code",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the first name and country code of the oldest player.",
        "gold_select": "select players.given_name, players.state_code",
        "select_candidates": [
            "select players.given_name, players.state_code",
            "select players.player_id, players.given_name, players.state_code",
            "select players.given_name, players.state_code, players.player_id",
            "select players.final_name, players.state_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.0010573455365374684,
            8.048966265050694e-05,
            0.0001427962997695431,
            6.572523125214502e-05,
            0.00012164867075625807,
            5.950974809820764e-05,
            0.0007655767258256674,
            8.820151560939848e-05
        ],
        "align_select": "select players.given_name, players.state_code",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the first name and country code of the oldest player?",
        "gold_select": "select players.given_name, players.state_code",
        "select_candidates": [
            "select players.given_name, players.state_code",
            "select players.player_id, players.given_name, players.state_code",
            "select players.given_name, players.state_code, players.player_id",
            "select players.birthday, players.state_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.0011414031032472849,
            7.656858360860497e-05,
            0.00016452364798169583,
            7.044748053885996e-05,
            0.00013678465620614588,
            6.22826482867822e-05,
            0.0009145386866293848,
            9.11866154638119e-05
        ],
        "align_select": "select players.given_name, players.state_code",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "List the first and last name of all players in the order of birth date.",
        "gold_select": "select players.given_name, players.final_name",
        "select_candidates": [
            "select players.given_name, players.final_name",
            "select players.given_name, players.final_name, players.birthday",
            "select players.given_name, players.final_name (Order BY",
            "select players.given_name, players.final_name (Date, Last)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9917649626731873,
            0.9917649626731873,
            0.00015677697956562042,
            0.00015677697956562042,
            0.0021062935702502728,
            0.0021062935702502728,
            0.00045214363490231335,
            0.00045214363490231335
        ],
        "align_select": "select players.given_name, players.final_name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the full names of all players, sorted by birth date?",
        "gold_select": "select players.given_name, players.final_name",
        "select_candidates": [
            "select players.given_name, players.final_name",
            "select players.given_name, players.final_name, players.birthday",
            "select players.given_name, players.final_name (ORDER BY",
            "select players.given_name, players.final_name (Order BY"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9412294626235962,
            0.9412294626235962,
            0.00030436451197601855,
            0.00030436451197601855,
            0.0018783754203468561,
            0.0018783754203468561,
            0.0018783754203468561,
            0.0018783754203468561
        ],
        "align_select": "select players.given_name, players.final_name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "gold_select": "select players.given_name, players.final_name",
        "select_candidates": [
            "select players.given_name, players.final_name",
            "select players.given_name, players.final_name, players.birthday",
            "select players.given_name, players.final_name, players.hand",
            "select players.given_name, players.final_name, players.hand, players.birthday"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-GROUP BY-HAVING-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9864209890365601,
            0.0023201052099466324,
            0.0001457773323636502,
            0.00012532807886600494,
            0.0003883029567077756,
            0.0003073226544074714,
            0.0001801973266992718,
            0.00021315831691026688
        ],
        "align_select": "select players.given_name, players.final_name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "What are the full names of all left handed players, in order of birth date?",
        "gold_select": "select players.given_name, players.final_name",
        "select_candidates": [
            "select players.given_name, players.final_name",
            "select players.given_name, players.final_name, players.hand",
            "select players.given_name, players.final_name, players.birthday",
            "select players.given_name, players.final_name (Date)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.5414490699768066,
            0.000184700358659029,
            0.0001359699381282553,
            7.689330959692597e-05,
            0.00024471766664646566,
            8.603707101428881e-05,
            0.00041275954572483897,
            0.0001766642672009766
        ],
        "align_select": "select players.given_name, players.final_name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "Find the first name and country code of the player who did the most number of tours.",
        "gold_select": "select players.state_code, players.given_name",
        "select_candidates": [
            "select players.given_name, players.state_code",
            "select players.player_id, players.given_name, players.state_code",
            "select players.given_name, players.state_code, players.player_id",
            "select players.given_name, players.final_name, players.state_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.02858479879796505,
            8.582754526287317e-05,
            0.0002589964715298265,
            8.155385148711503e-05,
            0.00016480124031659216,
            6.79541626595892e-05,
            0.0003611487045418471,
            9.274248441215605e-05
        ],
        "align_select": "select players.given_name, players.state_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the first name and country code of the player with the most tours?",
        "gold_select": "select players.state_code, players.given_name",
        "select_candidates": [
            "select players.given_name, players.state_code",
            "select players.player_id, players.given_name, players.state_code",
            "select players.given_name, players.final_name, players.state_code",
            "select players.given_name, players.state_code, players.player_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.01881428249180317,
            8.215456909965724e-05,
            0.00021792227926198393,
            7.816326979082078e-05,
            0.0002987731422763318,
            7.29776147636585e-05,
            0.0001431326090823859,
            6.550722901010886e-05
        ],
        "align_select": "select players.given_name, players.state_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the name and rank points of the winner who won the most times.",
        "gold_select": "select matches.victor_name, matches.winner_rank_points",
        "select_candidates": [
            "select matches.victor_name, rankings.player_id9",
            "select matches.victor_name, rankings.ranking_points",
            "select matches.victor_name, matches.winner_rank_points",
            "select rankings.player_id7, rankings.player_id9"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches rankings",
            "players matches rankings",
            "matches"
        ],
        "align_scores": [
            0.00048021256225183606,
            9.073731052922085e-05,
            0.9935094714164734,
            9.22853359952569e-05,
            0.991942286491394,
            7.959160575410351e-05,
            0.0002081861748592928,
            6.060451778466813e-05
        ],
        "align_select": "select matches.victor_name, rankings.ranking_points",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "gold_select": "select matches.victor_name, matches.winner_rank_points",
        "select_candidates": [
            "select matches.victor_name, rankings.ranking_points",
            "select players.given_name, players.final_name, rankings.ranking_points",
            "select matches.victor_name, rankings.player_id9",
            "select players.given_name, players.final_name, rankings.player_id9"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches rankings",
            "players matches rankings",
            "matches"
        ],
        "align_scores": [
            0.9884951710700989,
            0.00011173244274687022,
            0.0020924618002027273,
            9.823645814321935e-05,
            0.0017110751941800117,
            0.00011387497215764597,
            0.000523055496159941,
            8.671512478031218e-05
        ],
        "align_select": "select matches.victor_name, rankings.ranking_points",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "gold_select": "select matches.victor_name",
        "select_candidates": [
            "select matches.victor_name",
            "select matches.victor_name, matches.winner_entry",
            "select matches.event_name, matches.victor_name",
            "select matches.victor_name, matches.winner_ioc"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches rankings",
            "players matches rankings"
        ],
        "align_scores": [
            0.7971816062927246,
            0.2751132547855377,
            0.0003207838744856417,
            0.0002789496211335063,
            0.00027468660846352577,
            0.00018772170005831867,
            0.00043465159251354635,
            0.000282386812614277
        ],
        "align_select": "select matches.victor_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "gold_select": "select matches.victor_name",
        "select_candidates": [
            "select matches.victor_name",
            "select matches.victor_name, rankings.ranking_points",
            "select matches.victor_name, matches.winner_ioc",
            "select matches.victor_name, rankings.player_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches rankings",
            "players matches rankings",
            "matches"
        ],
        "align_scores": [
            0.9578487873077393,
            0.0014592570951208472,
            0.002064690925180912,
            0.00019825680647045374,
            0.0006322215776890516,
            0.00015999871538951993,
            0.000964611885137856,
            0.0002572160155978054
        ],
        "align_select": "select matches.victor_name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
        "gold_select": "select matches.victor_name, matches.failure",
        "select_candidates": [
            "select players.given_name, players.final_name",
            "select matches.minutes, matches.victor_name",
            "select matches.loser_id, matches.victor_name",
            "select matches.loser_entry, matches.victor_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.09520124644041061,
            0.0006331485928967595,
            0.000478685658890754,
            7.792317774146795e-05,
            0.0013172607868909836,
            6.928370567038655e-05,
            0.004679032601416111,
            9.72776033449918e-05
        ],
        "align_select": "select players.given_name, players.final_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the names of the winner and loser who played in the longest match?",
        "gold_select": "select matches.victor_name, matches.failure",
        "select_candidates": [
            "select matches.victor_name, matches.loser_id",
            "select players.given_name, players.final_name",
            "select matches.winner_entry, matches.victor_side",
            "select matches.victor_name, matches.loser_entry"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.0007801804458722472,
            8.816702757030725e-05,
            0.8680700659751892,
            0.00042970298090949655,
            0.0009888248750939965,
            0.0002607140922918916,
            0.004454025998711586,
            0.00014610854850616306
        ],
        "align_select": "select players.given_name, players.final_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the average ranking for each player and their first name.",
        "gold_select": "select avg(rankings.position), players.given_name",
        "select_candidates": [
            "select avg(rankings.position), players.given_name",
            "select rankings.player_id, avg(rankings.ranking_points)",
            "select players.player_id, players.given_name",
            "select avg(rankings.ranking_points), players.given_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.9964486360549927,
            0.00018843704310711473,
            0.00037602995871566236,
            0.0001708213094389066,
            0.0010165927233174443,
            0.007463708985596895,
            0.9961347579956055,
            0.00017882921383716166
        ],
        "align_select": "select avg(rankings.position), players.given_name",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the first names of all players, and their average rankings?",
        "gold_select": "select avg(rankings.position), players.given_name",
        "select_candidates": [
            "select players.given_name, avg(rankings.ranking_points)",
            "select players.given_name, avg(rankings.position)",
            "select players.given_name, avg(rankings.player_id)",
            "select rankings.position, avg(rankings.ranking_points)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings",
            "players matches rankings"
        ],
        "align_scores": [
            0.9677706360816956,
            0.00029965778230689466,
            0.9871180057525635,
            0.0002523235743865371,
            0.02349734865128994,
            0.00040828558849170804,
            0.00027662640786729753,
            0.00021892396034672856
        ],
        "align_select": "select players.given_name, avg(rankings.ranking_points)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Find the total ranking points for each player and their first name.",
        "gold_select": "select sum(rankings.ranking_points), players.given_name",
        "select_candidates": [
            "select sum(rankings.ranking_points), players.given_name",
            "select rankings.player_id, sum(rankings.ranking_points)",
            "select rankings.ranking_points, players.given_name",
            "select total(rankings.ranking_points), players.given_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.9961519837379456,
            0.00022211582108866423,
            0.0002841975074261427,
            0.00015061075100675225,
            0.983950138092041,
            0.0006297504878602922,
            0.000677283329423517,
            0.0001269416679861024
        ],
        "align_select": "select sum(rankings.ranking_points), players.given_name",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the first names of all players, and their total ranking points?",
        "gold_select": "select sum(rankings.ranking_points), players.given_name",
        "select_candidates": [
            "select players.given_name, sum(rankings.ranking_points)",
            "select rankings.player_id, sum(rankings.ranking_points)",
            "select players.player_id, sum(rankings.ranking_points)",
            "select players.given_name, sum(rankings.ranking_points)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.9560582637786865,
            0.00026084762066602707,
            0.00027060374850407243,
            0.00015340346726588905,
            0.00030570197850465775,
            0.00015353296475950629,
            0.9560582637786865,
            0.00026084762066602707
        ],
        "align_select": "select players.given_name, sum(rankings.ranking_points)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "find the number of players for each country.",
        "gold_select": "select count(*), players.state_code",
        "select_candidates": [
            "select players.state_code, count(*)",
            "select count(*), players.state_code",
            "select country_players.state_code, count(*)",
            "select country players.state_code, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9886060357093811,
            0.0001361868780804798,
            0.19187073409557343,
            0.00015802643611095846,
            0.00019181813695468009,
            0.00012422761938069016,
            0.00032871245639398694,
            0.00014902053226251155
        ],
        "align_select": "select players.state_code, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How many players are from each country?",
        "gold_select": "select count(*), players.state_code",
        "select_candidates": [
            "select players.state_code, count(*)",
            "select count(*), players.state_code",
            "select country_players.state_code, count(*)",
            "select distinct players.state_code, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9414418339729309,
            0.00015875801909714937,
            0.018473459407687187,
            0.0001502885716035962,
            0.00025151294539682567,
            0.00011449756857473403,
            0.00026061368407681584,
            8.688148955116048e-05
        ],
        "align_select": "select players.state_code, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "find the code of the country where has the greatest number of players.",
        "gold_select": "select players.state_code",
        "select_candidates": [
            "select players.state_code",
            "select players.state_code, t0.c6",
            "select players.state_code, players.birthday",
            "select players.state_code, t0.c7"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players",
            "players rankings",
            "players matches"
        ],
        "align_scores": [
            0.38361993432044983,
            9.419888374395669e-05,
            0.0006261622183956206,
            6.508841033792123e-05,
            0.00024168148229364306,
            5.942478674114682e-05,
            0.0006337477825582027,
            6.520470924442634e-05
        ],
        "align_select": "select players.state_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the code of the country with the most players?",
        "gold_select": "select players.state_code",
        "select_candidates": [
            "select players.state_code",
            "select players.state_code, t0.c6",
            "select players.state_code, t0.c7",
            "select players.state_code, players.birthday"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9625793099403381,
            9.9523676908575e-05,
            0.0005046333535574377,
            6.895251135574654e-05,
            0.0005130714853294194,
            6.89017033437267e-05,
            0.00023132639762479812,
            6.045155896572396e-05
        ],
        "align_select": "select players.state_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the codes of countries that have more than 50 players.",
        "gold_select": "select players.state_code",
        "select_candidates": [
            "select players.state_code",
            "select players.state_code, t0.c6",
            "select players.state_code, max(t0.c6)",
            "select players.state_code, max(players.birthday)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players",
            "players rankings",
            "players matches"
        ],
        "align_scores": [
            0.9888812899589539,
            0.00014244977501221,
            0.00040951103437691927,
            7.26683865650557e-05,
            0.0003108569944743067,
            6.92592075210996e-05,
            0.0002063707070192322,
            6.781337287975475e-05
        ],
        "align_select": "select players.state_code",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the codes of countries with more than 50 players?",
        "gold_select": "select players.state_code",
        "select_candidates": [
            "select players.state_code",
            "select players.state_code, t0.c6",
            "select players.state_code, max(t0.c6)",
            "select players.state_code, t0.c7"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players",
            "players matches",
            "players rankings",
            "players matches rankings"
        ],
        "align_scores": [
            0.9452381730079651,
            0.0001527390704723075,
            0.00043357256799936295,
            6.822870636824518e-05,
            0.00034030844108201563,
            6.471403321484104e-05,
            0.0004412419511936605,
            6.772541382815689e-05
        ],
        "align_select": "select players.state_code",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the total number of tours for each ranking date.",
        "gold_select": "select sum(rankings.tours), rankings.ranking_time",
        "select_candidates": [
            "select rankings.ranking_time, sum(rankings.tours)",
            "select tour_rankings.ranking_time, sum(rankings.tours)",
            "select rankings.position, sum(rankings.tours)",
            "select sum(rankings.tours), rankings.ranking_time"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "rankings",
        "table_candidates": [
            "rankings",
            "players rankings"
        ],
        "align_scores": [
            0.996055006980896,
            0.00016153010074049234,
            0.9900534749031067,
            0.00014786609972361475,
            0.0019798476714640856,
            0.00011404731776565313,
            0.9957191348075867,
            0.00012791997869499028
        ],
        "align_select": "select rankings.ranking_time, sum(rankings.tours)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How many total tours were there for each ranking date?",
        "gold_select": "select sum(rankings.tours), rankings.ranking_time",
        "select_candidates": [
            "select rankings.ranking_time, sum(rankings.tours)",
            "select tour_rankings.ranking_time, sum(rankings.tours)",
            "select rankings.position, sum(rankings.tours)",
            "select distinct rankings.ranking_time, sum(rankings.tours)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "rankings",
        "table_candidates": [
            "rankings",
            "players rankings"
        ],
        "align_scores": [
            0.9958051443099976,
            0.00019210437312722206,
            0.9932503700256348,
            0.0001578478404553607,
            0.015658892691135406,
            0.00011552264913916588,
            0.00016635446809232235,
            7.981825910974294e-05
        ],
        "align_select": "select rankings.ranking_time, sum(rankings.tours)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Find the name and rank of the 3 youngest winners across all matches.",
        "gold_select": "select distinct matches.victor_name, matches.achiever_ranking",
        "select_candidates": [
            "select matches.victor_name, matches.achiever_ranking",
            "select matches.victor_name, matches.winner_rank_points",
            "select matches.winner_ioc, matches.achiever_ranking",
            "select matches.total_loss, matches.achiever_ranking"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.971304714679718,
            6.809006299590692e-05,
            0.990744948387146,
            6.725662387907505e-05,
            0.0018144154455512762,
            6.614758603973314e-05,
            0.0002505570009816438,
            7.253545481944457e-05
        ],
        "align_select": "select matches.victor_name, matches.achiever_ranking",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the names and ranks of the three youngest winners across all matches?",
        "gold_select": "select distinct matches.victor_name, matches.achiever_ranking",
        "select_candidates": [
            "select matches.victor_name, matches.achiever_ranking",
            "select matches.victor_name, matches.winner_rank_points",
            "select matches.winner_ioc, matches.achiever_ranking",
            "select matches.loser_ioc, matches.achiever_ranking"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9783545732498169,
            6.6349733970128e-05,
            0.9903371334075928,
            6.489572842838243e-05,
            0.0010950779542326927,
            6.922882312210277e-05,
            0.000360196630936116,
            7.439423643518239e-05
        ],
        "align_select": "select matches.victor_name, matches.achiever_ranking",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "How many different winners both participated in the WTA Championships and were left handed?",
        "gold_select": "select count(distinct matches.victor_name)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct matches.winner_id)",
            "select count(*), matches.winner_entry",
            "select count(distinct matches.total_loss)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players matches",
            "matches"
        ],
        "align_scores": [
            0.9866130948066711,
            0.7868349552154541,
            0.9052455425262451,
            0.016437362879514694,
            0.0005377287743613124,
            0.0025109155103564262,
            0.0005929679027758539,
            0.00015860582061577588
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the number of left handed winners who participated in the WTA Championships.",
        "gold_select": "select count(distinct matches.victor_name)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct matches.winner_entry)",
            "select count(distinct matches.total_loss)",
            "select count(*), matches.winner_entry"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "players matches",
            "matches rankings"
        ],
        "align_scores": [
            0.981842041015625,
            0.000777689041569829,
            0.013932560570538044,
            0.00010755521361716092,
            0.000513241218868643,
            0.00010200285032624379,
            0.0002413415932096541,
            0.001101770089007914
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "gold_select": "select players.given_name, players.state_code, players.birthday",
        "select_candidates": [
            "select players.given_name, players.state_code, players.birthday",
            "select players.given_name, players.birthday, players.state_code",
            "select players.given_name, players.final_name, players.birthday",
            "select players.given_name, players.state_code, players.birthday"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players matches",
        "table_candidates": [
            "players matches",
            "players matches rankings"
        ],
        "align_scores": [
            0.008076495490968227,
            0.00018827126768883318,
            0.004894612357020378,
            0.00018782408733386546,
            0.0009000383433885872,
            0.00011544775043148547,
            0.008076495490968227,
            0.00018827126768883318
        ],
        "align_select": "select players.given_name, players.state_code, players.birthday",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "gold_select": "select players.given_name, players.state_code, players.birthday",
        "select_candidates": [
            "select players.given_name, players.state_code, players.birthday",
            "select players.given_name, players.birthday, players.state_code",
            "select players.given_name, players.final_name, players.birthday",
            "select players.given_name, players.state_code, players.birthday"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "players matches",
        "table_candidates": [
            "players matches"
        ],
        "align_scores": [
            0.00420786440372467,
            0.00010243026918033138,
            0.003566377330571413,
            0.00010625232971506193,
            0.0006790272891521454,
            0.00013317062985152006,
            0.00420786440372467,
            0.00010243026918033138
        ],
        "align_select": "select players.given_name, players.state_code, players.birthday",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List the first name and birth date of all players from the country with code USA.",
        "gold_select": "select players.given_name, players.born_date",
        "select_candidates": [
            "select players.given_name, players.born_date",
            "select players.given_name, players.last_name, players.born_date",
            "select distinct players.given_name, players.born_date",
            "select players.given_name, players.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9892354607582092,
            0.00015038345009088516,
            0.0002638838777784258,
            6.701896199956536e-05,
            0.017631078138947487,
            8.762641664361581e-05,
            0.00034797421540133655,
            7.902469951659441e-05
        ],
        "align_select": "select players.given_name, players.born_date",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the first names and birth dates of players from the USA?",
        "gold_select": "select players.given_name, players.born_date",
        "select_candidates": [
            "select players.given_name, players.born_date",
            "select players.given_name, players.last_name, players.born_date",
            "select players.given_name, players.hand, players.born_date",
            "select players.given_name, players.last_name, players.hand, players.born_date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9915224313735962,
            0.00013323490566108376,
            0.00024343862605746835,
            6.142620259197429e-05,
            0.00039988954085856676,
            7.688084588153288e-05,
            0.00021449940686579794,
            7.094717147992924e-05
        ],
        "align_select": "select players.given_name, players.born_date",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the highest rank of losers in all matches.",
        "gold_select": "select min(matches.loser_position)",
        "select_candidates": [
            "select min(matches.loser_rank_points)",
            "select max(matches.loser_rank_points)",
            "select min(matches.loser_name)",
            "select min(matches.loser_position)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings"
        ],
        "align_scores": [
            0.08734272420406342,
            0.0002122236037394032,
            0.9826367497444153,
            0.00012177843746030703,
            0.0014538246905431151,
            0.0003017669660039246,
            0.9606565833091736,
            0.00019877275917679071
        ],
        "align_select": "select max(matches.loser_rank_points)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the best rank of losers across all matches?",
        "gold_select": "select min(matches.loser_position)",
        "select_candidates": [
            "select min(matches.loser_rank_points)",
            "select matches.winner_rank",
            "select min(matches.loser_name)",
            "select min(matches.loser_position)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings",
            "players matches"
        ],
        "align_scores": [
            0.19494906067848206,
            0.00027053256053477526,
            0.005187354516237974,
            0.005401115398854017,
            0.0007651682826690376,
            0.0002901896368712187,
            0.07858715206384659,
            0.0002476511290296912
        ],
        "align_select": "select min(matches.loser_rank_points)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the names of all winners who played in both 2013 and 2016.",
        "gold_select": "select matches.champ_name",
        "select_candidates": [
            "select matches.loser_name",
            "select players.given_name, players.last_name",
            "select matches.loser_ioc, players.given_name",
            "select matches.winner_hand, matches.winner_ioc"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "players matches",
            "matches rankings",
            "matches players matches"
        ],
        "align_scores": [
            0.6109267473220825,
            0.00360478600487113,
            0.9083361625671387,
            0.019418049603700638,
            0.00039332130108959973,
            0.00015674304449930787,
            0.00032573260250501335,
            0.00012368282477837056
        ],
        "align_select": "select players.given_name, players.last_name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of players who won in both 2013 and 2016?",
        "gold_select": "select matches.champ_name",
        "select_candidates": [
            "select players.given_name, players.last_name",
            "select players.player_id, players.given_name, players.last_name",
            "select players.given_name, players.last_name, players.player_id",
            "select players.given_name, players.given_name, players.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players matches",
            "players matches rankings"
        ],
        "align_scores": [
            0.9209117293357849,
            0.017575416713953018,
            0.0002221033355453983,
            0.00018300920783076435,
            0.0001439235347788781,
            0.00011268106027273461,
            0.00019080171477980912,
            0.00014132495562080294
        ],
        "align_select": "select players.given_name, players.last_name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "gold_select": "select players.country_code, players.given_name",
        "select_candidates": [
            "select players.country_code, players.given_name",
            "select players.given_name, players.country_code",
            "select t0-c5, players.given_name",
            "select t 0.c5, players.given_name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "players matches",
        "table_candidates": [
            "players matches"
        ],
        "align_scores": [
            0.9800915122032166,
            0.9800915122032166,
            0.9811212420463562,
            0.9811212420463562,
            0.0003024009056389332,
            0.0003024009056389332,
            0.00045348601997829974,
            0.00045348601997829974
        ],
        "align_select": "select players.country_code, players.given_name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "gold_select": "select players.country_code, players.given_name",
        "select_candidates": [
            "select players.given_name, players.country_code",
            "select players.player_id, players.given_name, players.country_code",
            "select players.given_name, players.last_name, players.country_code",
            "select players.given_name, players.country_code, players.player_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players matches",
        "table_candidates": [
            "players matches"
        ],
        "align_scores": [
            0.9890881776809692,
            0.0014196984702721238,
            0.00019829800294246525,
            0.00012885319301858544,
            0.0004781233728863299,
            0.00027125468477606773,
            0.00014153857773635536,
            9.234360186383128e-05
        ],
        "align_select": "select players.given_name, players.country_code",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the first name and country code of the oldest player.",
        "gold_select": "select players.given_name, players.country_code",
        "select_candidates": [
            "select players.given_name, players.country_code",
            "select players.player_id, players.given_name, players.country_code",
            "select players.given_name, players.country_code, players.player_id",
            "select players.given_name.c1, players.country_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9933748841285706,
            8.216905553126708e-05,
            0.00015938871365506202,
            7.828589878045022e-05,
            0.00014258867304306477,
            6.292219768511131e-05,
            0.00089731888147071,
            7.617689698236063e-05
        ],
        "align_select": "select players.given_name, players.country_code",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the first name and country code of the oldest player?",
        "gold_select": "select players.given_name, players.country_code",
        "select_candidates": [
            "select players.given_name, players.country_code",
            "select players.player_id, players.given_name, players.country_code",
            "select players.given_name, players.country_code, players.player_id",
            "select players.given_name.c1, players.country_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9932576417922974,
            8.412846364080906e-05,
            0.00017870920419227332,
            8.318189065903425e-05,
            0.0001439780171494931,
            6.639828643528745e-05,
            0.0009653317974880338,
            7.90518315625377e-05
        ],
        "align_select": "select players.given_name, players.country_code",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "List the first and last name of all players in the order of birth date.",
        "gold_select": "select players.given_name, players.last_name",
        "select_candidates": [
            "select players.given_name, players.last_name",
            "select players.given_name, players.last_name, players.born_date",
            "select players.given_name, players.last_name (Date, Last)",
            "select players.given_name, players.last_name (Date, Last"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9895546436309814,
            0.9895546436309814,
            0.00024166626099031419,
            0.00024166626099031419,
            0.00047486310359090567,
            0.00047486310359090567,
            0.0003127186791971326,
            0.0003127186791971326
        ],
        "align_select": "select players.given_name, players.last_name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the full names of all players, sorted by birth date?",
        "gold_select": "select players.given_name, players.last_name",
        "select_candidates": [
            "select players.given_name, players.last_name",
            "select players.given_name, players.last_name, players.born_date",
            "select players.given_name, players.last_name, players.born_date",
            "select players.given_name, players.last_name and players.born_date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.994403064250946,
            0.994403064250946,
            0.00037398579297587276,
            0.00037398579297587276,
            0.00037398579297587276,
            0.00037398579297587276,
            0.0020044585689902306,
            0.0020044585689902306
        ],
        "align_select": "select players.given_name, players.last_name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "gold_select": "select players.given_name, players.last_name",
        "select_candidates": [
            "select players.given_name, players.last_name",
            "select players.given_name, players.last_name (Date, Last)",
            "select players.given_name, players.last_name, players.hand",
            "select players.given_name, players.last_name (Date, Last), players.hand"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-GROUP BY-HAVING-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9829800128936768,
            0.00407272856682539,
            0.00030861777486279607,
            0.00019424722995609045,
            0.00037631180020980537,
            0.00036918907426297665,
            0.00018677576736081392,
            0.00013793529069516808
        ],
        "align_select": "select players.given_name, players.last_name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "What are the full names of all left handed players, in order of birth date?",
        "gold_select": "select players.given_name, players.last_name",
        "select_candidates": [
            "select players.given_name, players.last_name",
            "select players.given_name, players.last_name, players.hand",
            "select players.given_name, players.hand, players.last_name",
            "select players.given_name, players.last_name and players.hand"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9944467544555664,
            0.00011999632988590747,
            0.00021315018238965422,
            7.954684406286106e-05,
            0.0002777226036414504,
            8.387181878788397e-05,
            0.0006702320533804595,
            9.444297756999731e-05
        ],
        "align_select": "select players.given_name, players.last_name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "Find the first name and country code of the player who did the most number of tours.",
        "gold_select": "select players.country_code, players.given_name",
        "select_candidates": [
            "select players.given_name, players.country_code",
            "select players.player_id, players.given_name, players.country_code",
            "select players.given_name, players.last_name, players.country_code",
            "select players.given_name, players.country_code, players.player_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.9744071960449219,
            9.983944619307294e-05,
            0.00032116088550537825,
            8.504809375153854e-05,
            0.0005741248023696244,
            7.93329018051736e-05,
            0.00019828211225103587,
            6.592673162231222e-05
        ],
        "align_select": "select players.given_name, players.country_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the first name and country code of the player with the most tours?",
        "gold_select": "select players.country_code, players.given_name",
        "select_candidates": [
            "select players.given_name, players.country_code",
            "select players.player_id, players.given_name, players.country_code",
            "select players.given_name, players.last_name, players.country_code",
            "select players.given_name, players.country_code, players.player_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.9892850518226624,
            9.433335799258202e-05,
            0.00024454365484416485,
            8.05577656137757e-05,
            0.00044345256173983216,
            7.528200512751937e-05,
            0.00016299000708386302,
            6.438716809498146e-05
        ],
        "align_select": "select players.given_name, players.country_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the name and rank points of the winner who won the most times.",
        "gold_select": "select matches.champ_name, matches.winner_rank_points",
        "select_candidates": [
            "select matches.champ_name, matches.winner_rank_points",
            "select players.given_name, players.last_name, matches.winner_rank_points",
            "select matches.loser_name, matches.winner_rank_points",
            "select players.given_name, players.last_name, matches.winner_rank, matches.winner_rank_points"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings",
            "players matches rankings",
            "players matches"
        ],
        "align_scores": [
            0.9259461164474487,
            8.423916733590886e-05,
            0.9921980500221252,
            9.127482189796865e-05,
            0.0017308562528342009,
            6.307243893388659e-05,
            0.0026631446089595556,
            8.568754128646106e-05
        ],
        "align_select": "select matches.champ_name, matches.winner_rank_points",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "gold_select": "select matches.champ_name, matches.winner_rank_points",
        "select_candidates": [
            "select players.given_name, players.last_name, rankings.ranking_points",
            "select players.given_name, players.last_name, matches.winner_rank_points",
            "select players.given_name, players.last_name, rankings.player_id9",
            "select players.given_name, players.last_name, players.last_name9"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players matches rankings",
            "players matches",
            "matches rankings"
        ],
        "align_scores": [
            0.9523473978042603,
            0.00011191594239789993,
            0.9771648049354553,
            0.0001006375823635608,
            0.0026503936387598515,
            0.00010039279004558921,
            0.0005203086766414344,
            7.653317879885435e-05
        ],
        "align_select": "select players.given_name, players.last_name, rankings.ranking_points",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "gold_select": "select matches.champ_name",
        "select_candidates": [
            "select matches.champ_name",
            "select matches.loser_name",
            "select matches.tourney_name, matches.champ_name",
            "select matches.champ_name, matches.loser_age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches rankings",
            "players matches rankings",
            "matches"
        ],
        "align_scores": [
            0.6418023705482483,
            0.834228515625,
            0.005718581844121218,
            0.009285314939916134,
            0.0003818543045781553,
            0.000298305822070688,
            0.00021776607900392264,
            0.0002102145372191444
        ],
        "align_select": "select matches.champ_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "gold_select": "select matches.champ_name",
        "select_candidates": [
            "select matches.champ_name",
            "select matches.champ_name, rankings.ranking_points",
            "select matches.champ_name, matches.winner_ioc",
            "select matches.champ_name, matches.winner_entry"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches rankings",
            "matches"
        ],
        "align_scores": [
            0.9412747025489807,
            0.0022845936473459005,
            0.0011959210969507694,
            0.00022407279175240546,
            0.0006139609613455832,
            0.0001732420496409759,
            0.00036792820901609957,
            0.00017291367112193257
        ],
        "align_select": "select matches.champ_name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
        "gold_select": "select matches.champ_name, matches.loser_name",
        "select_candidates": [
            "select matches.loser_name, matches.winner_hand",
            "select matches.loser_name, matches.winner_entry",
            "select matches.loser_name, matches.winner_age",
            "select matches.loser_name, matches.tourney_date"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.0018433970399200916,
            6.026523624313995e-05,
            0.0025226743891835213,
            7.975115295266733e-05,
            0.0006056354031898081,
            6.982141348998994e-05,
            0.0004506818950176239,
            7.122299575712532e-05
        ],
        "align_select": "select matches.loser_name, matches.winner_hand",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the names of the winner and loser who played in the longest match?",
        "gold_select": "select matches.champ_name, matches.loser_name",
        "select_candidates": [
            "select matches.winner_hand, matches.loser_name",
            "select matches.winner_id, matches.loser_name",
            "select matches.champ_name, matches.loser_name",
            "select matches.winner_entry, matches.loser_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.0006098615122027695,
            8.117459219647571e-05,
            0.0006009921198710799,
            8.089778566500172e-05,
            0.28600001335144043,
            0.0002328202099306509,
            0.0020713352132588625,
            0.0002235265274066478
        ],
        "align_select": "select matches.champ_name, matches.loser_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the average ranking for each player and their first name.",
        "gold_select": "select avg(rankings.position), players.given_name",
        "select_candidates": [
            "select avg(rankings.ranking_points), players.given_name",
            "select rankings.player_id, avg(rankings.ranking_points)",
            "select rankings.player_id, players.given_name",
            "select players.player_id, players.given_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.9961347579956055,
            0.00017882921383716166,
            0.00037602995871566236,
            0.0001708213094389066,
            0.0003989072283729911,
            0.00046670748270116746,
            0.0010165927233174443,
            0.007463708985596895
        ],
        "align_select": "select avg(rankings.ranking_points), players.given_name",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the first names of all players, and their average rankings?",
        "gold_select": "select avg(rankings.position), players.given_name",
        "select_candidates": [
            "select players.given_name, avg(rankings.ranking_points)",
            "select rankings.position, avg(rankings.ranking_points)",
            "select players.given_name, avg(rankings.player_id)",
            "select rankings.player_id, avg(rankings.ranking_points)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings",
            "players matches rankings"
        ],
        "align_scores": [
            0.9677706360816956,
            0.00029965778230689466,
            0.00027662640786729753,
            0.00021892396034672856,
            0.02349734865128994,
            0.00040828558849170804,
            0.00024520017905160785,
            0.00015805417206138372
        ],
        "align_select": "select players.given_name, avg(rankings.ranking_points)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Find the total ranking points for each player and their first name.",
        "gold_select": "select sum(rankings.ranking_points), players.given_name",
        "select_candidates": [
            "select sum(rankings.ranking_points), players.given_name",
            "select rankings.player_id, sum(rankings.ranking_points)",
            "select sum(rankings.ranking_points), players.given_name, players.last_name",
            "select players.player_id, sum(rankings.ranking_points)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.9961519837379456,
            0.00022211582108866423,
            0.0002841975074261427,
            0.00015061075100675225,
            0.0001791449321899563,
            7.488442497560754e-05,
            0.00023388685076497495,
            0.00013684426085092127
        ],
        "align_select": "select sum(rankings.ranking_points), players.given_name",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the first names of all players, and their total ranking points?",
        "gold_select": "select sum(rankings.ranking_points), players.given_name",
        "select_candidates": [
            "select players.given_name, sum(rankings.ranking_points)",
            "select rankings.player_id, sum(rankings.ranking_points)",
            "select sum(rankings.ranking_points), players.given_name",
            "select matches.draw_size, sum(rankings.ranking_points)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.9560582637786865,
            0.00026084762066602707,
            0.00027060374850407243,
            0.00015340346726588905,
            0.9920191168785095,
            0.00040897834696806967,
            0.00048078715917654335,
            0.00027842517010867596
        ],
        "align_select": "select players.given_name, sum(rankings.ranking_points)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Find the name and rank of the 3 youngest winners across all matches.",
        "gold_select": "select distinct matches.champ_name, matches.winner_rank",
        "select_candidates": [
            "select matches.champ_name, matches.winner_rank",
            "select matches.loser_name, matches.winner_rank",
            "select matches.loser_ioc, matches.winner_rank",
            "select matches.winner_rank, matches.champ_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.06402529031038284,
            6.496241257991642e-05,
            0.0005044342251494527,
            6.357085658237338e-05,
            0.00030192380654625595,
            7.794131670380011e-05,
            0.021819913759827614,
            6.616517930524424e-05
        ],
        "align_select": "select matches.champ_name, matches.winner_rank",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the names and ranks of the three youngest winners across all matches?",
        "gold_select": "select distinct matches.champ_name, matches.winner_rank",
        "select_candidates": [
            "select matches.loser_name, matches.winner_rank",
            "select players.given_name, players.last_name, matches.winner_rank",
            "select matches.champ_name, matches.winner_rank",
            "select matches.loser_ioc, matches.winner_rank"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.0005389977595768869,
            6.470990047091618e-05,
            0.9838618636131287,
            6.357733946060762e-05,
            0.03472847118973732,
            6.399479025276378e-05,
            0.0003910798695869744,
            8.23512818897143e-05
        ],
        "align_select": "select players.given_name, players.last_name, matches.winner_rank",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "How many different winners both participated in the WTA Championships and were left handed?",
        "gold_select": "select count(distinct matches.champ_name)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct matches.winner_id)",
            "select count(*), matches.winner_entry",
            "select count(distinct matches.loser_age)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "players matches",
            "matches rankings"
        ],
        "align_scores": [
            0.9866130948066711,
            0.7868349552154541,
            0.9052455425262451,
            0.016437362879514694,
            0.0005377287743613124,
            0.0025109155103564262,
            0.000463263742858544,
            0.0001525009865872562
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the number of left handed winners who participated in the WTA Championships.",
        "gold_select": "select count(distinct matches.champ_name)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct matches.winner_entry)",
            "select count(distinct matches.loser_age)",
            "select count(distinct matches.winner_hand)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "players matches",
            "matches rankings"
        ],
        "align_scores": [
            0.981842041015625,
            0.0001918243506224826,
            0.013932560570538044,
            9.91544293356128e-05,
            0.00034461129689589143,
            9.362610580865294e-05,
            0.000966907711699605,
            0.0001411081466358155
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "gold_select": "select players.given_name, players.country_code, players.born_date",
        "select_candidates": [
            "select players.given_name, players.country_code, players.born_date",
            "select players.given_name, players.born_date, players.country_code",
            "select players.given_name, players.last_name, players.born_date",
            "select players.given_name, players.hand, players.born_date"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players matches",
        "table_candidates": [
            "players matches",
            "players matches rankings"
        ],
        "align_scores": [
            0.9485914707183838,
            0.0006915481062605977,
            0.9540785551071167,
            0.0007619017269462347,
            0.0005881089018657804,
            0.00010566710989223793,
            0.0012156061129644513,
            0.00011424281547078863
        ],
        "align_select": "select players.given_name, players.country_code, players.born_date",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "gold_select": "select players.given_name, players.country_code, players.born_date",
        "select_candidates": [
            "select players.given_name, players.country_code, players.born_date",
            "select players.given_name, players.born_date, players.country_code",
            "select players.given_name, players.last_name, players.born_date",
            "select players.given_name, players.hand, players.born_date"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "players matches",
        "table_candidates": [
            "players matches"
        ],
        "align_scores": [
            0.9837623834609985,
            0.00019334955140948296,
            0.9854210019111633,
            0.00020823760132770985,
            0.0005614939727820456,
            0.00011211771197849885,
            0.0009590083500370383,
            0.00012324206181801856
        ],
        "align_select": "select players.given_name, players.country_code, players.born_date",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the average rank of winners in all matches.",
        "gold_select": "select avg(matches.champion_ranking)",
        "select_candidates": [
            "select avg(matches.loser_rank)",
            "select avg(matches.loser_name)",
            "select avg(matches.loser_ioc)",
            "select avg(matches.loser_rank_points)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings"
        ],
        "align_scores": [
            0.001967933028936386,
            8.665568748256192e-05,
            0.00047561555402353406,
            0.00010503079829504713,
            0.005699834320694208,
            9.797674283618107e-05,
            0.01210113801062107,
            8.303963113576174e-05
        ],
        "align_select": "select avg(matches.loser_rank)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the average rank for winners in all matches?",
        "gold_select": "select avg(matches.champion_ranking)",
        "select_candidates": [
            "select avg(matches.loser_rank)",
            "select avg(matches.loser_name)",
            "select avg(matches.loser_ioc)",
            "select avg(matches.loser_rank_points)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings"
        ],
        "align_scores": [
            0.0023535797372460365,
            0.0003291991597507149,
            0.0004649827897083014,
            0.00020878112991340458,
            0.007965490221977234,
            0.0009210987482219934,
            0.004825160838663578,
            0.00046753077185712755
        ],
        "align_select": "select avg(matches.loser_rank)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find the name and rank points of the winner who won the most times.",
        "gold_select": "select matches.winner_name, matches.person_won_rank_scores",
        "select_candidates": [
            "select matches.winner_name, rankings.ranking_points",
            "select matches.winner_name, rankings.player_id9",
            "select matches.loser_name, rankings.ranking_points",
            "select matches.winner_name, rankings.ranking_points3"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches rankings",
            "players matches rankings",
            "matches"
        ],
        "align_scores": [
            0.9935289025306702,
            8.955680095823482e-05,
            0.00044437168980948627,
            8.902708941604942e-05,
            0.26198065280914307,
            7.420675683533773e-05,
            0.982833743095398,
            9.619639604352415e-05
        ],
        "align_select": "select matches.winner_name, rankings.ranking_points",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "gold_select": "select matches.winner_name, matches.person_won_rank_scores",
        "select_candidates": [
            "select matches.winner_name, rankings.ranking_points",
            "select matches.winner_name, rankings.player_id",
            "select matches.winner_name, rankings.ranking_points3",
            "select matches.winner_name, sum(rankings.ranking_points)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches rankings",
            "players matches rankings",
            "matches"
        ],
        "align_scores": [
            0.9866359829902649,
            0.00010104857938131317,
            0.7743555903434753,
            0.00011992152576567605,
            0.6660407781600952,
            0.0001143214904004708,
            0.9744266271591187,
            7.320058648474514e-05
        ],
        "align_select": "select matches.winner_name, rankings.ranking_points",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "gold_select": "select matches.winner_name",
        "select_candidates": [
            "select matches.winner_name",
            "select matches.winner_name, rankings.ranking_points",
            "select matches.winner_name, matches.winner_entry",
            "select matches.winner_name, rankings.player_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches rankings",
            "players matches rankings"
        ],
        "align_scores": [
            0.6889166831970215,
            0.36898404359817505,
            0.0005781035870313644,
            0.0007609747699461877,
            0.00030665064696222544,
            0.0003199371858499944,
            0.0005357401678338647,
            0.0004590181924868375
        ],
        "align_select": "select matches.winner_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "gold_select": "select matches.winner_name",
        "select_candidates": [
            "select matches.winner_name",
            "select matches.winner_name, rankings.ranking_points",
            "select matches.winner_name, rankings.player_id",
            "select matches.winner_name, rankings.ranking_points"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches rankings",
            "players matches rankings",
            "matches"
        ],
        "align_scores": [
            0.9603970050811768,
            0.0015967199578881264,
            0.001251803245395422,
            0.00018518583965487778,
            0.0009491709643043578,
            0.0002624406770337373,
            0.001251803245395422,
            0.00018518583965487778
        ],
        "align_select": "select matches.winner_name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Find the name and rank of the 3 youngest winners across all matches.",
        "gold_select": "select distinct matches.winner_name, matches.champion_ranking",
        "select_candidates": [
            "select matches.winner_name, matches.champion_ranking",
            "select matches.winner_name, matches.loser_rank",
            "select matches.loser_ioc, matches.loser_rank",
            "select matches.winner_name, matches.loser_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9607603549957275,
            6.779145041946322e-05,
            0.0005581800360232592,
            6.027472045389004e-05,
            0.00031169207068160176,
            6.820008275099099e-05,
            0.0002443264238536358,
            6.540965841850266e-05
        ],
        "align_select": "select matches.winner_name, matches.champion_ranking",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the names and ranks of the three youngest winners across all matches?",
        "gold_select": "select distinct matches.winner_name, matches.champion_ranking",
        "select_candidates": [
            "select matches.winner_name, matches.champion_ranking",
            "select matches.loser_ioc, matches.champion_ranking",
            "select matches.winner_name, matches.person_won_rank_scores",
            "select matches.loser_ioc, matches.loser_rank"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9387030601501465,
            6.811298953834921e-05,
            0.00032763241324573755,
            7.960367656778544e-05,
            0.0506669320166111,
            6.381624552886933e-05,
            0.000322656036587432,
            7.083476521074772e-05
        ],
        "align_select": "select matches.winner_name, matches.champion_ranking",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "gold_select": "select players.first_name, players.country_code, players.birth_date",
        "select_candidates": [
            "select players.first_name, players.country_code, players.birth_date",
            "select players.first_name, players.birth_date, players.country_code",
            "select players.first_name, players.last_name, players.birth_date",
            "select players.first_name, players.country_code, players.birth_date"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players matches",
        "table_candidates": [
            "players matches",
            "players matches rankings"
        ],
        "align_scores": [
            0.9585803747177124,
            0.0007109175785444677,
            0.9589452743530273,
            0.0007820688770152628,
            0.00048142095329239964,
            0.00010270978964399546,
            0.9585803747177124,
            0.0007109175785444677
        ],
        "align_select": "select players.first_name, players.country_code, players.birth_date",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "gold_select": "select players.first_name, players.country_code, players.birth_date",
        "select_candidates": [
            "select players.first_name, players.country_code, players.birth_date",
            "select players.first_name, players.birth_date, players.country_code",
            "select players.first_name, players.country_code, players.birth_date",
            "select players.first_name, players.last_name, players.birth_date"
        ],
        "select_labels": [
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "players matches",
        "table_candidates": [
            "players matches",
            "players matches rankings"
        ],
        "align_scores": [
            0.9862059950828552,
            0.0001613650529179722,
            0.9870423078536987,
            0.00018302873650100082,
            0.9862059950828552,
            0.0001613650529179722,
            0.00048609921941533685,
            0.00010268737241858616
        ],
        "align_select": "select players.first_name, players.country_code, players.birth_date",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List the first name and birth date of all players from the country with code USA.",
        "gold_select": "select players.given_name, players.birth_date",
        "select_candidates": [
            "select players.given_name, players.birth_date",
            "select distinct players.given_name, players.birth_date",
            "select players.player_id, players.given_name, players.birth_date",
            "select players.given_name, players.last_name, players.birth_date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9890370965003967,
            0.0001459692866774276,
            0.012879136018455029,
            8.975386299425736e-05,
            0.00013668816245626658,
            7.148632721509784e-05,
            0.00022968534904066473,
            6.584712537005544e-05
        ],
        "align_select": "select players.given_name, players.birth_date",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the first names and birth dates of players from the USA?",
        "gold_select": "select players.given_name, players.birth_date",
        "select_candidates": [
            "select players.given_name, players.birth_date",
            "select players.given_name, players.last_name, players.birth_date",
            "select players.given_name, players.hand, players.birth_date",
            "select players.given_name, players.last_name, players.hand, players.birth_date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9920138716697693,
            0.00013651713379658759,
            0.00023143383441492915,
            6.0956517700105906e-05,
            0.00029696698766201735,
            7.870200352044776e-05,
            0.00020056730136275291,
            7.248954352689907e-05
        ],
        "align_select": "select players.given_name, players.birth_date",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the average age of losers and winners of all matches.",
        "gold_select": "select avg(matches.total_loss), avg(matches.winner_age)",
        "select_candidates": [
            "select avg(matches.loser_ht), matches.winner_age",
            "select avg(matches.loser_ht), avg(matches.winner_age)",
            "select avg(matches.loser_ht), avg(matches.total_loss)",
            "select avg(matches.loser_ht), matches.who_won"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.002940885256975889,
            0.006325384136289358,
            0.014342383481562138,
            0.001741996849887073,
            0.00022546469699591398,
            0.00016778786084614694,
            0.01372348889708519,
            0.662735641002655
        ],
        "align_select": "select avg(matches.loser_ht), matches.who_won",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the average ages of losers and winners across matches?",
        "gold_select": "select avg(matches.total_loss), avg(matches.winner_age)",
        "select_candidates": [
            "select avg(matches.loser_ht), avg(matches.winner_age)",
            "select avg(matches.loser_ht), avg(matches.total_loss)",
            "select avg(matches.loser_id), avg(matches.winner_age)",
            "select avg(matches.loser_hand), avg(matches.winner_age)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.012678712606430054,
            0.004476232919842005,
            0.00029037115746177733,
            0.00020876301277894527,
            0.0004998811054974794,
            0.00038653533556498587,
            0.00036536212428472936,
            0.0002928675967268646
        ],
        "align_select": "select avg(matches.loser_ht), avg(matches.winner_age)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find the average rank of winners in all matches.",
        "gold_select": "select avg(matches.champ_position)",
        "select_candidates": [
            "select avg(rankings.ranking)",
            "select avg(matches.loser_rank_points)",
            "select avg(rankings.player_id)",
            "select avg(t2.c5)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches rankings",
            "matches"
        ],
        "align_scores": [
            0.9712364673614502,
            0.0014598526759073138,
            0.01210113801062107,
            8.303963113576174e-05,
            0.0009099607123062015,
            0.0002716915914788842,
            0.0006841716822236776,
            0.00016500880883540958
        ],
        "align_select": "select avg(rankings.ranking)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the average rank for winners in all matches?",
        "gold_select": "select avg(matches.champ_position)",
        "select_candidates": [
            "select avg(rankings.ranking)",
            "select avg(rankings.ranking), matches.winner_id",
            "select avg(rankings.ranking), matches.winner_entry",
            "select avg(rankings.ranking), matches.winner_ioc"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches rankings",
            "matches",
            "players matches rankings"
        ],
        "align_scores": [
            0.970648467540741,
            0.9951321482658386,
            0.0001542989193694666,
            0.00014274890418164432,
            0.00018304410332348198,
            0.00015170227561611682,
            0.0002123815065715462,
            0.00015178938338067383
        ],
        "align_select": "select avg(rankings.ranking)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find the highest rank of losers in all matches.",
        "gold_select": "select min(matches.loser_ordering)",
        "select_candidates": [
            "select min(matches.loser_rank_points)",
            "select max(matches.loser_rank_points)",
            "select min(matches.loser_ordering)",
            "select min(matches.loser_name)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.08734272420406342,
            0.0002122236037394032,
            0.9826367497444153,
            0.00012177843746030703,
            0.8541581630706787,
            0.0001683828013483435,
            0.0014538246905431151,
            0.0003017669660039246
        ],
        "align_select": "select max(matches.loser_rank_points)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the best rank of losers across all matches?",
        "gold_select": "select min(matches.loser_ordering)",
        "select_candidates": [
            "select min(matches.loser_rank_points)",
            "select matches.loser_rank_points",
            "select max(matches.loser_rank_points)",
            "select avg(matches.loser_rank_points)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings",
            "players matches"
        ],
        "align_scores": [
            0.19494906067848206,
            0.00027053256053477526,
            0.03224581480026245,
            0.8377232551574707,
            0.9899336695671082,
            0.0003118394815828651,
            0.1103547215461731,
            0.0014933141646906734
        ],
        "align_select": "select max(matches.loser_rank_points)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "find the number of distinct country codes of all players.",
        "gold_select": "select count(distinct players.nation_code)",
        "select_candidates": [
            "select count(distinct players.nation_code)",
            "select count(distinct t0.c6)",
            "select count(distinct players.nation_code),",
            "select count(distinct players.last_name)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9954025745391846,
            0.9954025745391846,
            0.0008434344199486077,
            0.0008434344199486077,
            0.0002657854347489774,
            0.0002657854347489774,
            0.00040847688796930015,
            0.00040847688796930015
        ],
        "align_select": "select count(distinct players.nation_code)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many distinct countries do players come from?",
        "gold_select": "select count(distinct players.nation_code)",
        "select_candidates": [
            "select count(distinct players.nation_code)",
            "select count(distinct t0.c6)",
            "select count(distinct players.birth_date)",
            "select count(count(distinct players.nation_code)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9954801797866821,
            0.9954801797866821,
            0.0008065497386269271,
            0.0008065497386269271,
            0.0003660692018456757,
            0.0003660692018456757,
            0.0005362321389839053,
            0.0005362321389839053
        ],
        "align_select": "select count(distinct players.nation_code)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the names of all winners who played in both 2013 and 2016.",
        "gold_select": "select matches.who_won",
        "select_candidates": [
            "select matches.who_won",
            "select players.given_name, players.last_name",
            "select matches.who_won, players.given_name, players.last_name",
            "select matches.winner_ioc, players.given_name, players.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "players matches",
            "matches players matches",
            "matches rankings"
        ],
        "align_scores": [
            0.994053304195404,
            0.056130919605493546,
            0.9083361625671387,
            0.019418049603700638,
            0.0003483882755972445,
            0.00017122473218478262,
            0.0004403480270411819,
            0.0002228147495770827
        ],
        "align_select": "select matches.who_won",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of players who won in both 2013 and 2016?",
        "gold_select": "select matches.who_won",
        "select_candidates": [
            "select players.given_name, players.last_name",
            "select players.player_id, players.given_name, players.last_name",
            "select players.given_name, players.last_name, players.player_id",
            "select players.given_name, players.last_name, players.hand"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players matches",
            "players matches rankings"
        ],
        "align_scores": [
            0.9209117293357849,
            0.017575416713953018,
            0.0002221033355453983,
            0.00018300920783076435,
            0.0001439235347788781,
            0.00011268106027273461,
            0.0006271552410908043,
            0.0002018609520746395
        ],
        "align_select": "select players.given_name, players.last_name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "gold_select": "select players.nation_code, players.given_name",
        "select_candidates": [
            "select players.nation_code, players.given_name",
            "select players.given_name, players.nation_code",
            "select t0-c5, players.given_name",
            "select t 0.c5, players.given_name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players matches",
        "table_candidates": [
            "players matches"
        ],
        "align_scores": [
            0.9823477268218994,
            0.001358254929073155,
            0.9785804748535156,
            0.00028381895390339196,
            0.0003024009056389332,
            0.00017447842401452363,
            0.00045348601997829974,
            0.00016627357399556786
        ],
        "align_select": "select players.nation_code, players.given_name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "gold_select": "select players.nation_code, players.given_name",
        "select_candidates": [
            "select players.given_name, players.nation_code",
            "select players.given_name, players.last_name, players.nation_code",
            "select players.player_id, players.given_name, players.nation_code",
            "select players.given_name, players.nation_code, players.player_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players matches",
        "table_candidates": [
            "players matches"
        ],
        "align_scores": [
            0.9918133020401001,
            0.0017217842396348715,
            0.0004014081205241382,
            0.00026293733390048146,
            0.00019156989583279938,
            0.0001335062988800928,
            0.0001453149161534384,
            9.572559065418318e-05
        ],
        "align_select": "select players.given_name, players.nation_code",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the first name and country code of the oldest player.",
        "gold_select": "select players.given_name, players.nation_code",
        "select_candidates": [
            "select players.given_name, players.nation_code",
            "select players.player_id, players.given_name, players.nation_code",
            "select players.given_name, players.last_name, players.nation_code",
            "select players.given_name, players.nation_code, players.player_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9938540458679199,
            8.461845573037863e-05,
            0.00016756850527599454,
            7.814843411324546e-05,
            0.0002496853703632951,
            6.96987408446148e-05,
            0.00013665192818734795,
            6.413843220798299e-05
        ],
        "align_select": "select players.given_name, players.nation_code",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the first name and country code of the oldest player?",
        "gold_select": "select players.given_name, players.nation_code",
        "select_candidates": [
            "select players.given_name, players.nation_code",
            "select players.player_id, players.given_name, players.nation_code",
            "select players.given_name, players.last_name, players.nation_code",
            "select players.given_name, players.nation_code, players.player_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9939525723457336,
            8.524661097908393e-05,
            0.00019211610197089612,
            8.464492566417903e-05,
            0.0002830674347933382,
            7.321566226892173e-05,
            0.00014489043678622693,
            6.984638457652181e-05
        ],
        "align_select": "select players.given_name, players.nation_code",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "List the first and last name of all players in the order of birth date.",
        "gold_select": "select players.given_name, players.last_name",
        "select_candidates": [
            "select players.given_name, players.last_name",
            "select players.given_name, players.last_name, players.birth_date",
            "select players.given_name, players.last_name (Date, Last)",
            "select players.given_name, players.last_name (Date, Last"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9895546436309814,
            0.9895546436309814,
            0.0002128142659785226,
            0.0002128142659785226,
            0.00047486310359090567,
            0.00047486310359090567,
            0.0003127186791971326,
            0.0003127186791971326
        ],
        "align_select": "select players.given_name, players.last_name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the full names of all players, sorted by birth date?",
        "gold_select": "select players.given_name, players.last_name",
        "select_candidates": [
            "select players.given_name, players.last_name",
            "select players.given_name, players.last_name, players.birth_date",
            "select players.given_name, players.last_name and players.birth_date",
            "select players.given_name, players.last_name, players.birth_date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.994403064250946,
            0.994403064250946,
            0.00036983878817409277,
            0.00036983878817409277,
            0.002817672910168767,
            0.002817672910168767,
            0.00036983878817409277,
            0.00036983878817409277
        ],
        "align_select": "select players.given_name, players.last_name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "gold_select": "select players.given_name, players.last_name",
        "select_candidates": [
            "select players.given_name, players.last_name",
            "select players.given_name, players.last_name, players.hand",
            "select players.given_name, players.last_name (Date, Last)",
            "select players.given_name, players.last_name (Date, Last), players.hand"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-WHERE-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9829800128936768,
            0.9829800128936768,
            0.00037631180020980537,
            0.00037631180020980537,
            0.00030861777486279607,
            0.00030861777486279607,
            0.00018677576736081392,
            0.00018677576736081392
        ],
        "align_select": "select players.given_name, players.last_name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "What are the full names of all left handed players, in order of birth date?",
        "gold_select": "select players.given_name, players.last_name",
        "select_candidates": [
            "select players.given_name, players.last_name",
            "select players.given_name, players.last_name, players.hand",
            "select players.given_name, players.hand, players.last_name",
            "select players.given_name, players.last_name and players.hand"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9944467544555664,
            0.00011999632988590747,
            0.00021315018238965422,
            7.954684406286106e-05,
            0.0002777226036414504,
            8.387181878788397e-05,
            0.0006702320533804595,
            9.444297756999731e-05
        ],
        "align_select": "select players.given_name, players.last_name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "Find the first name and country code of the player who did the most number of tours.",
        "gold_select": "select players.nation_code, players.given_name",
        "select_candidates": [
            "select players.given_name, players.nation_code",
            "select players.given_name, players.last_name, players.nation_code",
            "select players.given_name, players.nation_code, players.player_id",
            "select players.given_name, players.nation_code, players.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.9840249419212341,
            0.00010804812336573377,
            0.0005497261299751699,
            8.227468060795218e-05,
            0.00022081656788941473,
            7.095421460689977e-05,
            0.0004956139018759131,
            7.432615529978648e-05
        ],
        "align_select": "select players.given_name, players.nation_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the first name and country code of the player with the most tours?",
        "gold_select": "select players.nation_code, players.given_name",
        "select_candidates": [
            "select players.given_name, players.nation_code",
            "select players.player_id, players.given_name, players.nation_code",
            "select players.given_name, players.last_name, players.nation_code",
            "select players.given_name, players.nation_code, players.player_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.9915124773979187,
            0.00010149280569748953,
            0.000256535189691931,
            8.37140905787237e-05,
            0.0004657692916225642,
            7.81619964982383e-05,
            0.0001871779968496412,
            6.899610889377072e-05
        ],
        "align_select": "select players.given_name, players.nation_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the name and rank points of the winner who won the most times.",
        "gold_select": "select matches.who_won, matches.winner_positionresult_points",
        "select_candidates": [
            "select matches.loser_name, matches.loser_rank_points",
            "select players.given_name, players.last_name, matches.loser_rank_points",
            "select matches.loser_name, rankings.ranking_points",
            "select players.given_name, players.last_name, rankings.ranking_points"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches rankings",
            "matches"
        ],
        "align_scores": [
            0.9926902651786804,
            7.7060452895239e-05,
            0.011121186427772045,
            6.377280806191266e-05,
            0.26198065280914307,
            7.317929703276604e-05,
            0.9922319650650024,
            7.831292896298692e-05
        ],
        "align_select": "select matches.loser_name, matches.loser_rank_points",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "gold_select": "select matches.who_won, matches.winner_positionresult_points",
        "select_candidates": [
            "select players.given_name, players.last_name, rankings.ranking_points",
            "select matches.loser_name, rankings.ranking_points",
            "select players.given_name, players.last_name, sum(rankings.ranking_points)",
            "select players.given_name, players.last_name, matches.loser_rank_points"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches rankings",
            "players matches rankings",
            "players matches"
        ],
        "align_scores": [
            0.9523473978042603,
            8.646368951303884e-05,
            0.07834658026695251,
            7.91121565271169e-05,
            0.8674474358558655,
            6.722539546899498e-05,
            0.026556558907032013,
            7.386109791696072e-05
        ],
        "align_select": "select players.given_name, players.last_name, rankings.ranking_points",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "gold_select": "select matches.who_won",
        "select_candidates": [
            "select matches.loser_name",
            "select matches.loser_name, matches.winner_entry",
            "select matches.loser_name, matches.total_loss",
            "select matches.loser_name, matches.winner_hand"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches rankings",
            "players matches rankings",
            "matches"
        ],
        "align_scores": [
            0.005718581844121218,
            0.009285314939916134,
            0.00018520312733016908,
            0.00015122871263884008,
            0.00015922010061331093,
            0.00020732765551656485,
            0.00021876039681956172,
            0.00016266053717117757
        ],
        "align_select": "select matches.loser_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "gold_select": "select matches.who_won",
        "select_candidates": [
            "select matches.loser_name",
            "select matches.who_won",
            "select matches.loser_name, matches.total_loss",
            "select matches.loser_ioc, matches.total_loss"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches rankings",
            "matches"
        ],
        "align_scores": [
            0.026591911911964417,
            0.04656349867582321,
            0.9574536681175232,
            0.9859433174133301,
            0.0002202097821282223,
            0.0003295543428976089,
            0.0001854699949035421,
            0.00022562878439202905
        ],
        "align_select": "select matches.who_won",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
        "gold_select": "select matches.who_won, matches.loser_name",
        "select_candidates": [
            "select matches.loser_name, matches.who_won",
            "select matches.loser_name, matches.winner_hand",
            "select matches.loser_name, matches.winner_age",
            "select matches.loser_name, matches.loser_ioc"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.019018180668354034,
            7.975875632837415e-05,
            0.0018433970399200916,
            6.026523624313995e-05,
            0.0006056354031898081,
            6.982141348998994e-05,
            0.0004460765339899808,
            7.69375401432626e-05
        ],
        "align_select": "select matches.loser_name, matches.who_won",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the names of the winner and loser who played in the longest match?",
        "gold_select": "select matches.who_won, matches.loser_name",
        "select_candidates": [
            "select matches.who_won, matches.loser_name",
            "select t1.c 27, matches.loser_name",
            "select matches.winner_ioc, matches.loser_name",
            "select matches.winner_hand, matches.loser_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.014581461437046528,
            0.00015202244685497135,
            0.0006593484431505203,
            7.6273427112028e-05,
            0.003746942151337862,
            0.00014274142449721694,
            0.0006098615122027695,
            8.117459219647571e-05
        ],
        "align_select": "select matches.who_won, matches.loser_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the average ranking for each player and their first name.",
        "gold_select": "select avg(rankings.ranking), players.given_name",
        "select_candidates": [
            "select avg(rankings.ranking), players.given_name",
            "select rankings.ranking, players.given_name",
            "select rankings.player_id, avg(rankings.ranking)",
            "select players.player_id, players.given_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.9965090155601501,
            0.00017496808141004294,
            0.029373442754149437,
            0.0007027689716778696,
            0.00047544832341372967,
            0.00014944886788725853,
            0.0010165927233174443,
            0.007463708985596895
        ],
        "align_select": "select avg(rankings.ranking), players.given_name",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the first names of all players, and their average rankings?",
        "gold_select": "select avg(rankings.ranking), players.given_name",
        "select_candidates": [
            "select players.given_name, avg(rankings.ranking)",
            "select rankings.ranking, players.given_name",
            "select matches.draw_size, avg(rankings.ranking)",
            "select rankings.player_id, avg(rankings.ranking)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings",
            "players matches rankings"
        ],
        "align_scores": [
            0.9690882563591003,
            0.00024145669885911047,
            0.9850408434867859,
            0.007472524419426918,
            0.0005059118266217411,
            0.0002925625303760171,
            0.000240715395193547,
            0.00014506337174680084
        ],
        "align_select": "select players.given_name, avg(rankings.ranking)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Find the total ranking points for each player and their first name.",
        "gold_select": "select sum(rankings.ranking_points), players.given_name",
        "select_candidates": [
            "select sum(rankings.ranking_points), players.given_name",
            "select rankings.player_id, sum(rankings.ranking_points)",
            "select total(rankings.ranking_points), players.given_name",
            "select sum(rankings.ranking), players.given_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.9961519837379456,
            0.00022211582108866423,
            0.0002841975074261427,
            0.00015061075100675225,
            0.000677283329423517,
            0.0001269416679861024,
            0.994581401348114,
            0.00026275438722223043
        ],
        "align_select": "select sum(rankings.ranking_points), players.given_name",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the first names of all players, and their total ranking points?",
        "gold_select": "select sum(rankings.ranking_points), players.given_name",
        "select_candidates": [
            "select players.given_name, sum(rankings.ranking_points)",
            "select rankings.player_id, sum(rankings.ranking_points)",
            "select rankings.ranking, sum(rankings.ranking_points)",
            "select matches.draw_size, sum(rankings.ranking_points)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings",
            "players matches rankings"
        ],
        "align_scores": [
            0.9560582637786865,
            0.00026084762066602707,
            0.00027060374850407243,
            0.00015340346726588905,
            0.00036033711512573063,
            0.00029589561745524406,
            0.00048078715917654335,
            0.00027842517010867596
        ],
        "align_select": "select players.given_name, sum(rankings.ranking_points)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "find the number of players for each country.",
        "gold_select": "select count(*), players.nation_code",
        "select_candidates": [
            "select players.nation_code, count(*)",
            "select count(*), players.nation_code",
            "select nation_code, count(*)",
            "select stats(*), players.nation_code"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9965928196907043,
            0.0001377888402203098,
            0.9963233470916748,
            0.0001335020933765918,
            0.9163174629211426,
            0.0001016092937788926,
            0.0003439165302552283,
            0.00011992472718702629
        ],
        "align_select": "select players.nation_code, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How many players are from each country?",
        "gold_select": "select count(*), players.nation_code",
        "select_candidates": [
            "select players.nation_code, count(*)",
            "select count(*), players.nation_code",
            "select distinct players.nation_code, count(*)",
            "select players.nation_code, count(*), players.player_id"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9964057207107544,
            0.00015572347911074758,
            0.9960022568702698,
            0.00015651006833650172,
            0.00028754162485711277,
            9.58207601797767e-05,
            0.0001607992162462324,
            8.060871186899021e-05
        ],
        "align_select": "select players.nation_code, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "find the code of the country where has the greatest number of players.",
        "gold_select": "select players.nation_code",
        "select_candidates": [
            "select players.nation_code",
            "select players.nation_code, players.birth_date",
            "select players.nation_code, t0.c6",
            "select players.nation_code, players.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.8240606188774109,
            9.42842525546439e-05,
            0.00021769462910015136,
            6.167312676552683e-05,
            0.0007854305440559983,
            6.780024705221877e-05,
            0.00027095741825178266,
            6.428692722693086e-05
        ],
        "align_select": "select players.nation_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the code of the country with the most players?",
        "gold_select": "select players.nation_code",
        "select_candidates": [
            "select players.nation_code",
            "select players.nation_code, t0.c6",
            "select players.nation_code, players.birth_date",
            "select players.nation_code, players.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9949341416358948,
            8.595089457230642e-05,
            0.0007439885521307588,
            7.305650797206908e-05,
            0.00021097778517287225,
            5.892752596992068e-05,
            0.00025429140077903867,
            6.168541585793719e-05
        ],
        "align_select": "select players.nation_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the codes of countries that have more than 50 players.",
        "gold_select": "select players.nation_code",
        "select_candidates": [
            "select players.nation_code",
            "select players.nation_code, t0.c6",
            "select players.nation_code, max(players.nation_code)",
            "select players.nation_code, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9917820692062378,
            0.00013711777864955366,
            0.0005291525740176439,
            7.466330862371251e-05,
            0.0001292559754801914,
            6.477343413280323e-05,
            0.003959926310926676,
            8.488119055982679e-05
        ],
        "align_select": "select players.nation_code",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the codes of countries with more than 50 players?",
        "gold_select": "select players.nation_code",
        "select_candidates": [
            "select players.nation_code",
            "select players.nation_code, t0.c6",
            "select players.nation_code, t0.c7",
            "select players.nation_code, players.birth_date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9524276852607727,
            0.00016793514078017324,
            0.0005540683632716537,
            7.082435331540182e-05,
            0.0005614177789539099,
            7.071914296830073e-05,
            0.00015125525533221662,
            6.618745828745887e-05
        ],
        "align_select": "select players.nation_code",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the total number of tours for each ranking date.",
        "gold_select": "select sum(rankings.tours), rankings.ranking_time",
        "select_candidates": [
            "select rankings.ranking_time, sum(rankings.tours)",
            "select rankings.ranking, sum(rankings.tours)",
            "select sum(rankings.tours), rankings.ranking_time",
            "select tour_rankings.ranking_time, sum(rankings.tours)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "rankings",
        "table_candidates": [
            "rankings"
        ],
        "align_scores": [
            0.996055006980896,
            0.00016153010074049234,
            0.9920175075531006,
            9.706643322715536e-05,
            0.9957191348075867,
            0.00012791997869499028,
            0.9900534749031067,
            0.00014786609972361475
        ],
        "align_select": "select rankings.ranking_time, sum(rankings.tours)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How many total tours were there for each ranking date?",
        "gold_select": "select sum(rankings.tours), rankings.ranking_time",
        "select_candidates": [
            "select rankings.ranking_time, sum(rankings.tours)",
            "select rankings.ranking, sum(rankings.tours)",
            "select rankings.ranking_time-rankings.ranking, sum(rankings.tours)",
            "select distinct rankings.ranking_time, sum(rankings.tours)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "rankings",
        "table_candidates": [
            "rankings"
        ],
        "align_scores": [
            0.9958051443099976,
            0.00019210437312722206,
            0.988407552242279,
            0.00013531290460377932,
            0.0007116255583241582,
            0.00015169475227594376,
            0.00016635446809232235,
            7.981825910974294e-05
        ],
        "align_select": "select rankings.ranking_time, sum(rankings.tours)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Find the name and rank of the 3 youngest winners across all matches.",
        "gold_select": "select distinct matches.who_won, matches.champ_position",
        "select_candidates": [
            "select matches.loser_name, matches.champ_position",
            "select players.given_name, players.last_name, rankings.ranking",
            "select matches.loser_name, rankings.ranking",
            "select players.given_name, players.last_name, matches.champ_position"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings",
            "players matches rankings"
        ],
        "align_scores": [
            0.0006608840776607394,
            6.271235906751826e-05,
            0.3064724802970886,
            7.90545527706854e-05,
            0.0006947264191694558,
            6.269572622841224e-05,
            0.6540654897689819,
            7.845764048397541e-05
        ],
        "align_select": "select players.given_name, players.last_name, matches.champ_position",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the names and ranks of the three youngest winners across all matches?",
        "gold_select": "select distinct matches.who_won, matches.champ_position",
        "select_candidates": [
            "select players.given_name, players.last_name, rankings.ranking",
            "select matches.loser_name, rankings.ranking",
            "select matches.loser_name, matches.draw_size",
            "select players.given_name, players.last_name, matches.who_won"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches rankings",
            "players matches rankings",
            "matches",
            "players matches"
        ],
        "align_scores": [
            0.9614586234092712,
            8.208071085391566e-05,
            0.0007542051607742906,
            6.544459756696597e-05,
            0.00033578023430891335,
            0.00010585195559542626,
            0.00026175499078817666,
            7.009988621575758e-05
        ],
        "align_select": "select players.given_name, players.last_name, rankings.ranking",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "How many different winners both participated in the WTA Championships and were left handed?",
        "gold_select": "select count(distinct matches.who_won)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct matches.who_won)",
            "select count(distinct matches.total_loss)",
            "select count(distinct matches.loser_ioc)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "players matches",
            "matches rankings"
        ],
        "align_scores": [
            0.9866130948066711,
            0.7868349552154541,
            0.9902361035346985,
            0.01337851770222187,
            0.0005929679027758539,
            0.00015860582061577588,
            0.0050000352784991264,
            0.0011329127009958029
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the number of left handed winners who participated in the WTA Championships.",
        "gold_select": "select count(distinct matches.who_won)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct matches.winner_entry)",
            "select count(distinct matches.total_loss)",
            "select count(*), matches.winner_entry"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "players matches",
            "matches rankings"
        ],
        "align_scores": [
            0.981842041015625,
            0.000777689041569829,
            0.013932560570538044,
            0.00010755521361716092,
            0.000513241218868643,
            0.00010200285032624379,
            0.0002413415932096541,
            0.001101770089007914
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "gold_select": "select players.given_name, players.nation_code, players.birth_date",
        "select_candidates": [
            "select players.given_name, players.nation_code, players.birth_date",
            "select players.given_name, players.birth_date, players.nation_code",
            "select players.given_name, players.last_name, players.birth_date",
            "select players.given_name, players.hand, players.birth_date"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players matches",
        "table_candidates": [
            "players matches",
            "players matches rankings"
        ],
        "align_scores": [
            0.951964795589447,
            0.000698005547747016,
            0.949394941329956,
            0.000739551498554647,
            0.0005727256648242474,
            0.00010169217421207577,
            0.001036258996464312,
            0.00010894615115830675
        ],
        "align_select": "select players.given_name, players.nation_code, players.birth_date",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "gold_select": "select players.given_name, players.nation_code, players.birth_date",
        "select_candidates": [
            "select players.given_name, players.nation_code, players.birth_date",
            "select players.given_name, players.birth_date, players.nation_code",
            "select players.given_name, players.last_name, players.birth_date",
            "select players.given_name, players.hand, players.birth_date"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "players matches",
        "table_candidates": [
            "players matches"
        ],
        "align_scores": [
            0.9846637845039368,
            0.00019074678129982203,
            0.985325276851654,
            0.00020503427367657423,
            0.0005572056979872286,
            0.00010602359543554485,
            0.0009065596968866885,
            0.0001176408986793831
        ],
        "align_select": "select players.given_name, players.nation_code, players.birth_date",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List the first name and birth date of all players from the country with code USA.",
        "gold_select": "select players.given_name, players.birth_date",
        "select_candidates": [
            "select players.given_name, players.birth_date",
            "select distinct players.given_name, players.birth_date",
            "select players.given_name, players.last_name, players.birth_date",
            "select players.player_id, players.given_name, players.birth_date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9890370965003967,
            0.0001459692866774276,
            0.012879136018455029,
            8.975386299425736e-05,
            0.00022968534904066473,
            6.584712537005544e-05,
            0.00013668816245626658,
            7.148632721509784e-05
        ],
        "align_select": "select players.given_name, players.birth_date",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the first names and birth dates of players from the USA?",
        "gold_select": "select players.given_name, players.birth_date",
        "select_candidates": [
            "select players.given_name, players.birth_date",
            "select players.given_name, players.last_name, players.birth_date",
            "select players.given_name, players.hand, players.birth_date",
            "select players.given_name, players.last_name, players.hand, players.birth_date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9920138716697693,
            0.00013651713379658759,
            0.00023143383441492915,
            6.0956517700105906e-05,
            0.00029696698766201735,
            7.870200352044776e-05,
            0.00020056730136275291,
            7.248954352689907e-05
        ],
        "align_select": "select players.given_name, players.birth_date",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the average age of losers and winners of all matches.",
        "gold_select": "select avg(matches.loser_age), avg(matches.champ_age)",
        "select_candidates": [
            "select avg(matches.loser_age), avg(matches.champ_age)",
            "select avg(matches.loser_age), matches.champ_age",
            "select avg(matches.loser_age), avg(matches.loser_entry)",
            "select avg(matches.loser_age), avg(matches.loser_age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9924456477165222,
            0.8177286982536316,
            0.016605446115136147,
            0.7683328986167908,
            0.00022737437393516302,
            0.00014702128828503191,
            0.00044911078293807805,
            0.0002555036044213921
        ],
        "align_select": "select avg(matches.loser_age), avg(matches.champ_age)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the average ages of losers and winners across matches?",
        "gold_select": "select avg(matches.loser_age), avg(matches.champ_age)",
        "select_candidates": [
            "select avg(matches.loser_age), avg(matches.champ_age)",
            "select avg(matches.loser_age), avg(matches.loser_entry)",
            "select avg(matches.loser_age), avg(matches.success_side)",
            "select avg(matches.loser_age), avg(matches.loser_age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9894484281539917,
            0.9493977427482605,
            0.0002617582504171878,
            0.00018466461915522814,
            0.001233440707437694,
            0.00118717469740659,
            0.0005977115943096578,
            0.0003620991774369031
        ],
        "align_select": "select avg(matches.loser_age), avg(matches.champ_age)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "find the number of distinct country codes of all players.",
        "gold_select": "select count(distinct players.nation_code)",
        "select_candidates": [
            "select count(distinct players.nation_code)",
            "select count(distinct players.nation_code), t0.c6",
            "select count(distinct t0.c6)",
            "select count(distinct players.nation_code), players.player_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9954025745391846,
            0.9954025745391846,
            0.00027128003421239555,
            0.00027128003421239555,
            0.0008434344199486077,
            0.0008434344199486077,
            0.00011555635865079239,
            0.00011555635865079239
        ],
        "align_select": "select count(distinct players.nation_code)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many distinct countries do players come from?",
        "gold_select": "select count(distinct players.nation_code)",
        "select_candidates": [
            "select count(distinct players.nation_code)",
            "select count(distinct t0.c6)",
            "select count(distinct players.birth_date)",
            "select count(count(distinct players.nation_code)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9954801797866821,
            0.9954801797866821,
            0.0008065497386269271,
            0.0008065497386269271,
            0.0003660692018456757,
            0.0003660692018456757,
            0.0005362321389839053,
            0.0005362321389839053
        ],
        "align_select": "select count(distinct players.nation_code)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find the number of distinct name of losers.",
        "gold_select": "select count(distinct matches.failure)",
        "select_candidates": [
            "select count(distinct players.given_name)",
            "select count(distinct players.given_name, players.last_name)",
            "select count(distinct players.last_name)",
            "select count(distinct players.given_name, players.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players matches",
            "players"
        ],
        "align_scores": [
            0.9416396617889404,
            0.00015251552395056933,
            0.02218576893210411,
            0.0002019885869231075,
            0.2215486615896225,
            0.00014089034812059253,
            0.010891673155128956,
            0.00012252132000867277
        ],
        "align_select": "select count(distinct players.given_name)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many different loser names are there?",
        "gold_select": "select count(distinct matches.failure)",
        "select_candidates": [
            "select count(distinct players.last_name)",
            "select count(distinct players.given_name)",
            "select count(distinct players.last_name",
            "select count(distinct players.player_id)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players",
            "players matches"
        ],
        "align_scores": [
            0.2353385090827942,
            0.2353385090827942,
            0.5226089954376221,
            0.5226089954376221,
            0.011429114267230034,
            0.011429114267230034,
            0.003396393032744527,
            0.003396393032744527
        ],
        "align_select": "select count(distinct players.given_name)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the names of all winners who played in both 2013 and 2016.",
        "gold_select": "select matches.champ_name",
        "select_candidates": [
            "select players.given_name, players.last_name",
            "select players.given_name, players.last_name, players.player_id",
            "select players.given_name, players.last_name, matches.winner_id",
            "select players.given_name, players.last_name, matches.winner_ioc"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players matches"
        ],
        "align_scores": [
            0.9083361625671387,
            0.019418049603700638,
            0.00013662417768500745,
            9.797731036087498e-05,
            0.00017870137526188046,
            0.00012324277486186475,
            0.00046255486086010933,
            0.00019780511502176523
        ],
        "align_select": "select players.given_name, players.last_name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of players who won in both 2013 and 2016?",
        "gold_select": "select matches.champ_name",
        "select_candidates": [
            "select players.given_name, players.last_name",
            "select players.player_id, players.given_name, players.last_name",
            "select players.given_name, players.last_name, players.player_id",
            "select players.given_name.c1, players.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players matches",
            "players matches rankings"
        ],
        "align_scores": [
            0.9209117293357849,
            0.9209117293357849,
            0.0002221033355453983,
            0.0002221033355453983,
            0.0001439235347788781,
            0.0001439235347788781,
            0.0003105382202193141,
            0.0003105382202193141
        ],
        "align_select": "select players.given_name, players.last_name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "gold_select": "select players.nation_code, players.given_name",
        "select_candidates": [
            "select players.nation_code, players.given_name",
            "select players.nation_code, players.given_name, players.last_name",
            "select players.given_name, players.nation_code",
            "select t0-c5, players.given_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "players matches",
        "table_candidates": [
            "players matches"
        ],
        "align_scores": [
            0.9823477268218994,
            0.9823477268218994,
            0.00019091853755526245,
            0.00019091853755526245,
            0.9785804748535156,
            0.9785804748535156,
            0.0003024009056389332,
            0.0003024009056389332
        ],
        "align_select": "select players.nation_code, players.given_name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "gold_select": "select players.nation_code, players.given_name",
        "select_candidates": [
            "select players.given_name, players.nation_code",
            "select players.given_name, players.last_name, players.nation_code",
            "select players.player_id, players.given_name, players.nation_code",
            "select players.given_name, players.nation_code, players.player_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players matches",
        "table_candidates": [
            "players matches"
        ],
        "align_scores": [
            0.9918133020401001,
            0.0017217842396348715,
            0.0004014081205241382,
            0.00026293733390048146,
            0.00019156989583279938,
            0.0001335062988800928,
            0.0001453149161534384,
            9.572559065418318e-05
        ],
        "align_select": "select players.given_name, players.nation_code",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the first name and country code of the oldest player.",
        "gold_select": "select players.given_name, players.nation_code",
        "select_candidates": [
            "select players.given_name, players.nation_code",
            "select players.player_id, players.given_name, players.nation_code",
            "select players.given_name, players.last_name, players.nation_code",
            "select players.given_name, players.nation_code, players.player_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9938540458679199,
            8.461845573037863e-05,
            0.00016756850527599454,
            7.814843411324546e-05,
            0.0002496853703632951,
            6.96987408446148e-05,
            0.00013665192818734795,
            6.413843220798299e-05
        ],
        "align_select": "select players.given_name, players.nation_code",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the first name and country code of the oldest player?",
        "gold_select": "select players.given_name, players.nation_code",
        "select_candidates": [
            "select players.given_name, players.nation_code",
            "select players.player_id, players.given_name, players.nation_code",
            "select players.given_name, players.last_name, players.nation_code",
            "select players.given_name, players.nation_code, players.player_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9939525723457336,
            8.524661097908393e-05,
            0.00019211610197089612,
            8.464492566417903e-05,
            0.0002830674347933382,
            7.321566226892173e-05,
            0.00014489043678622693,
            6.984638457652181e-05
        ],
        "align_select": "select players.given_name, players.nation_code",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "List the first and last name of all players in the order of birth date.",
        "gold_select": "select players.given_name, players.last_name",
        "select_candidates": [
            "select players.given_name, players.last_name",
            "select players.given_name, players.last_name, players.birth_date",
            "select players.given_name, players.last_name (Date, Last)",
            "select players.given_name, players.last_name (Date, Last), players.birth_date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9895546436309814,
            0.9895546436309814,
            0.0002128142659785226,
            0.0002128142659785226,
            0.00047486310359090567,
            0.00047486310359090567,
            0.00017129839397966862,
            0.00017129839397966862
        ],
        "align_select": "select players.given_name, players.last_name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the full names of all players, sorted by birth date?",
        "gold_select": "select players.given_name, players.last_name",
        "select_candidates": [
            "select players.given_name, players.last_name",
            "select players.given_name, players.last_name, players.birth_date",
            "select players.given_name, players.last_name, players.birth_date",
            "select players.given_name, players.last_name and players.birth_date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.994403064250946,
            0.994403064250946,
            0.00036983878817409277,
            0.00036983878817409277,
            0.00036983878817409277,
            0.00036983878817409277,
            0.002817672910168767,
            0.002817672910168767
        ],
        "align_select": "select players.given_name, players.last_name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "gold_select": "select players.given_name, players.last_name",
        "select_candidates": [
            "select players.given_name, players.last_name",
            "select players.given_name, players.last_name, players.hand",
            "select players.given_name, players.last_name (Date, Last)",
            "select players.given_name, players.last_name (Date, Last), players.hand"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-WHERE-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9829800128936768,
            0.9829800128936768,
            0.00037631180020980537,
            0.00037631180020980537,
            0.00030861777486279607,
            0.00030861777486279607,
            0.00018677576736081392,
            0.00018677576736081392
        ],
        "align_select": "select players.given_name, players.last_name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "What are the full names of all left handed players, in order of birth date?",
        "gold_select": "select players.given_name, players.last_name",
        "select_candidates": [
            "select players.given_name, players.last_name",
            "select players.given_name, players.last_name, players.hand",
            "select players.given_name, players.hand, players.last_name",
            "select players.given_name, players.last_name and players.hand"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9944467544555664,
            0.00011999632988590747,
            0.00021315018238965422,
            7.954684406286106e-05,
            0.0002777226036414504,
            8.387181878788397e-05,
            0.0006702320533804595,
            9.444297756999731e-05
        ],
        "align_select": "select players.given_name, players.last_name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "Find the first name and country code of the player who did the most number of tours.",
        "gold_select": "select players.nation_code, players.given_name",
        "select_candidates": [
            "select players.given_name, players.nation_code",
            "select players.given_name, players.last_name, players.nation_code",
            "select players.given_name, players.nation_code, players.player_id",
            "select players.given_name, players.nation_code, players.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.9840249419212341,
            0.00010804812336573377,
            0.0005497261299751699,
            8.227468060795218e-05,
            0.00022081656788941473,
            7.095421460689977e-05,
            0.0004956139018759131,
            7.432615529978648e-05
        ],
        "align_select": "select players.given_name, players.nation_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the first name and country code of the player with the most tours?",
        "gold_select": "select players.nation_code, players.given_name",
        "select_candidates": [
            "select players.given_name, players.nation_code",
            "select players.player_id, players.given_name, players.nation_code",
            "select players.given_name, players.last_name, players.nation_code",
            "select players.given_name, players.nation_code, players.player_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.9915124773979187,
            0.00010149280569748953,
            0.000256535189691931,
            8.37140905787237e-05,
            0.0004657692916225642,
            7.81619964982383e-05,
            0.0001871779968496412,
            6.899610889377072e-05
        ],
        "align_select": "select players.given_name, players.nation_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the name and rank points of the winner who won the most times.",
        "gold_select": "select matches.champ_name, matches.winner_tier_scores",
        "select_candidates": [
            "select players.given_name, players.last_name, rankings.ranking_points",
            "select players.given_name, players.last_name",
            "select rankings.rank, rankings.ranking_points",
            "select players.given_name, players.last_name, t2c3"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players matches rankings",
            "players matches",
            "players rankings"
        ],
        "align_scores": [
            0.9922319650650024,
            9.335632057627663e-05,
            0.0023325334768742323,
            6.846138421678916e-05,
            0.0007166201830841601,
            7.225848094094545e-05,
            0.0027369835879653692,
            6.689049769192934e-05
        ],
        "align_select": "select players.given_name, players.last_name, rankings.ranking_points",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "gold_select": "select matches.champ_name, matches.winner_tier_scores",
        "select_candidates": [
            "select players.given_name, players.last_name, rankings.ranking_points",
            "select players.given_name, players.last_name, sum(rankings.ranking_points)",
            "select players.given_name, players.last_name, rankings.rank",
            "select players.given_name, players.last_name, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players matches rankings",
            "players matches"
        ],
        "align_scores": [
            0.9523473978042603,
            0.00011191594239789993,
            0.8674474358558655,
            7.832667324692011e-05,
            0.7749100923538208,
            0.00010619843669701368,
            0.18583369255065918,
            7.797565922373906e-05
        ],
        "align_select": "select players.given_name, players.last_name, rankings.ranking_points",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "gold_select": "select matches.champ_name",
        "select_candidates": [
            "select players.given_name, players.last_name",
            "select matches.draw_size, players.last_name",
            "select matches.best_of, players.given_name, players.last_name",
            "select matches.champ_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players matches rankings",
            "matches rankings",
            "players matches"
        ],
        "align_scores": [
            0.004923155531287193,
            0.011005337350070477,
            0.0002954677038360387,
            0.000218513174331747,
            0.0002568293421063572,
            0.0001963787799468264,
            0.6418023705482483,
            0.834228515625
        ],
        "align_select": "select matches.champ_name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "gold_select": "select matches.champ_name",
        "select_candidates": [
            "select players.given_name, players.last_name",
            "select players.player_id, players.given_name, players.last_name",
            "select matches.champ_name",
            "select players.given_name, players.last_name, players.hand"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches rankings",
            "players matches rankings"
        ],
        "align_scores": [
            0.418130099773407,
            0.8284910917282104,
            0.00041523619438521564,
            0.0006820233538746834,
            0.9412747025489807,
            0.9842055439949036,
            0.0006784002180211246,
            0.0040766275487840176
        ],
        "align_select": "select matches.champ_name",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
        "gold_select": "select matches.champ_name, matches.failure",
        "select_candidates": [
            "select players.given_name, players.last_name",
            "select matches.draw_size, players.last_name",
            "select matches.minutes, players.given_name, players.last_name",
            "select rankings.rank, players.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players matches"
        ],
        "align_scores": [
            0.4092240631580353,
            0.004676888231188059,
            0.0004052630392834544,
            0.00010038608888862655,
            0.0004631206684280187,
            9.822315041674301e-05,
            0.0005557931726798415,
            0.00016743819287512451
        ],
        "align_select": "select players.given_name, players.last_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the names of the winner and loser who played in the longest match?",
        "gold_select": "select matches.champ_name, matches.failure",
        "select_candidates": [
            "select players.given_name, players.last_name",
            "select matches.winner_entry, players.last_name",
            "select matches.success_side, players.last_name",
            "select matches.winner_id, players.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players matches"
        ],
        "align_scores": [
            0.7867821455001831,
            0.0020409671124070883,
            0.0004370360402390361,
            0.00014578414265997708,
            0.0005394254112616181,
            0.00019816699204966426,
            0.0004240383277647197,
            9.675472392700613e-05
        ],
        "align_select": "select players.given_name, players.last_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the average ranking for each player and their first name.",
        "gold_select": "select avg(rankings.rank), players.given_name",
        "select_candidates": [
            "select avg(rankings.rank), players.given_name",
            "select rankings.player_id, avg(rankings.rank)",
            "select rankings.rank, players.given_name",
            "select players.player_id, players.given_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.9962957501411438,
            0.00019421354227233678,
            0.00036100088618695736,
            0.00016126355330925435,
            0.050143398344516754,
            0.0005942125571891665,
            0.0010165927233174443,
            0.007463708985596895
        ],
        "align_select": "select avg(rankings.rank), players.given_name",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the first names of all players, and their average rankings?",
        "gold_select": "select avg(rankings.rank), players.given_name",
        "select_candidates": [
            "select players.given_name, avg(rankings.rank)",
            "select rankings.rank, players.given_name",
            "select matches.draw_size, avg(rankings.rank)",
            "select t3.c1, avg(rankings.rank)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings",
            "players matches rankings"
        ],
        "align_scores": [
            0.9718771576881409,
            0.0003031600499525666,
            0.98842453956604,
            0.0062937065958976746,
            0.0005667830700986087,
            0.00032587419264018536,
            0.0006439550197683275,
            0.00018162043124902993
        ],
        "align_select": "select players.given_name, avg(rankings.rank)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Find the total ranking points for each player and their first name.",
        "gold_select": "select sum(rankings.ranking_points), players.given_name",
        "select_candidates": [
            "select sum(rankings.ranking_points), players.given_name",
            "select rankings.player_id, sum(rankings.ranking_points)",
            "select sum(rankings.ranking_points), players.given_name, players.last_name",
            "select players.player_id, sum(rankings.ranking_points)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.9961519837379456,
            0.00022211582108866423,
            0.0002841975074261427,
            0.00015061075100675225,
            0.0001791449321899563,
            7.488442497560754e-05,
            0.00023388685076497495,
            0.00013684426085092127
        ],
        "align_select": "select sum(rankings.ranking_points), players.given_name",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the first names of all players, and their total ranking points?",
        "gold_select": "select sum(rankings.ranking_points), players.given_name",
        "select_candidates": [
            "select players.given_name, sum(rankings.ranking_points)",
            "select rankings.player_id, sum(rankings.ranking_points)",
            "select matches.draw_size, sum(rankings.ranking_points)",
            "select rankings.rank, sum(rankings.ranking_points)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.9560582637786865,
            0.00026084762066602707,
            0.00027060374850407243,
            0.00015340346726588905,
            0.00048078715917654335,
            0.00027842517010867596,
            0.00038322986802086234,
            0.00024268408014904708
        ],
        "align_select": "select players.given_name, sum(rankings.ranking_points)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "find the number of players for each country.",
        "gold_select": "select count(*), players.nation_code",
        "select_candidates": [
            "select players.nation_code, count(*)",
            "select count(*), players.nation_code",
            "select nation_code, count(*)",
            "select stats(*), players.nation_code"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9965928196907043,
            0.0001377888402203098,
            0.9963233470916748,
            0.0001335020933765918,
            0.9163174629211426,
            0.0001016092937788926,
            0.0003439165302552283,
            0.00011992472718702629
        ],
        "align_select": "select players.nation_code, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How many players are from each country?",
        "gold_select": "select count(*), players.nation_code",
        "select_candidates": [
            "select players.nation_code, count(*)",
            "select count(*), players.nation_code",
            "select distinct players.nation_code, count(*)",
            "select players.nation_code, count(*), players.player_id"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9964057207107544,
            0.00015572347911074758,
            0.9960022568702698,
            0.00015651006833650172,
            0.00028754162485711277,
            9.58207601797767e-05,
            0.0001607992162462324,
            8.060871186899021e-05
        ],
        "align_select": "select players.nation_code, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "find the code of the country where has the greatest number of players.",
        "gold_select": "select players.nation_code",
        "select_candidates": [
            "select players.nation_code",
            "select players.nation_code, t0.c6",
            "select players.nation_code, players.birth_date",
            "select players.nation_code, players.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.8240606188774109,
            8.9493696577847e-05,
            0.0007854305440559983,
            6.31163056823425e-05,
            0.00021769462910015136,
            5.747730756411329e-05,
            0.00027095741825178266,
            6.000597932143137e-05
        ],
        "align_select": "select players.nation_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the code of the country with the most players?",
        "gold_select": "select players.nation_code",
        "select_candidates": [
            "select players.nation_code",
            "select players.nation_code, t0.c6",
            "select players.nation_code, players.birth_date",
            "select players.nation_code, players.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players",
            "players rankings",
            "players matches"
        ],
        "align_scores": [
            0.9949341416358948,
            8.595089457230642e-05,
            0.0007439885521307588,
            7.305650797206908e-05,
            0.00021097778517287225,
            5.892752596992068e-05,
            0.00025429140077903867,
            6.168541585793719e-05
        ],
        "align_select": "select players.nation_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the codes of countries that have more than 50 players.",
        "gold_select": "select players.nation_code",
        "select_candidates": [
            "select players.nation_code",
            "select players.nation_code, t0.c6",
            "select players.nation_code, max(players.nation_code)",
            "select players.nation_code, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players",
            "players matches",
            "players rankings"
        ],
        "align_scores": [
            0.9917820692062378,
            0.00013711777864955366,
            0.0005291525740176439,
            7.466330862371251e-05,
            0.0001292559754801914,
            6.477343413280323e-05,
            0.003959926310926676,
            8.488119055982679e-05
        ],
        "align_select": "select players.nation_code",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the codes of countries with more than 50 players?",
        "gold_select": "select players.nation_code",
        "select_candidates": [
            "select players.nation_code",
            "select players.nation_code, t0.c6",
            "select players.nation_code, t0.c7",
            "select players.nation_code, players.birth_date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players",
            "players matches",
            "players rankings",
            "players matches rankings"
        ],
        "align_scores": [
            0.9524276852607727,
            0.00016793514078017324,
            0.0005540683632716537,
            7.082435331540182e-05,
            0.0005614177789539099,
            7.071914296830073e-05,
            0.00015125525533221662,
            6.618745828745887e-05
        ],
        "align_select": "select players.nation_code",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the name and rank of the 3 youngest winners across all matches.",
        "gold_select": "select distinct matches.champ_name, matches.winner_rank",
        "select_candidates": [
            "select players.given_name, players.last_name, matches.winner_rank",
            "select players.given_name, players.last_name",
            "select players.given_name, players.last_name, t1.c 28",
            "select t4.c1, players.last_name, matches.winner_rank"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players matches",
            "players matches rankings"
        ],
        "align_scores": [
            0.5033742785453796,
            6.663158274022862e-05,
            0.02581549808382988,
            7.288185588549823e-05,
            0.0004529119178187102,
            8.473456546198577e-05,
            0.00020147583563812077,
            6.29323985776864e-05
        ],
        "align_select": "select players.given_name, players.last_name, matches.winner_rank",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the names and ranks of the three youngest winners across all matches?",
        "gold_select": "select distinct matches.champ_name, matches.winner_rank",
        "select_candidates": [
            "select players.given_name, players.last_name, matches.winner_rank",
            "select players.given_name, players.last_name",
            "select t3.c1, players.last_name, matches.winner_rank",
            "select t3.c1, t3.c2, matches.winner_rank"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players matches",
            "players matches rankings"
        ],
        "align_scores": [
            0.9838618636131287,
            6.357733946060762e-05,
            0.026240920647978783,
            8.04877417976968e-05,
            0.00027117092395201325,
            6.5201660618186e-05,
            0.00035917278728447855,
            6.957747973501682e-05
        ],
        "align_select": "select players.given_name, players.last_name, matches.winner_rank",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "How many different winners both participated in the WTA Championships and were left handed?",
        "gold_select": "select count(distinct matches.champ_name)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct matches.loser_age)",
            "select count(*), matches.winner_entry",
            "select count(distinct matches.winner_id)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players matches"
        ],
        "align_scores": [
            0.9866130948066711,
            0.7868349552154541,
            0.000463263742858544,
            0.0001525009865872562,
            0.0005377287743613124,
            0.0025109155103564262,
            0.9052455425262451,
            0.016437362879514694
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the number of left handed winners who participated in the WTA Championships.",
        "gold_select": "select count(distinct matches.champ_name)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct matches.winner_entry)",
            "select count(distinct matches.loser_age)",
            "select count(*), matches.winner_entry"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "players matches",
            "matches rankings"
        ],
        "align_scores": [
            0.981842041015625,
            0.000777689041569829,
            0.013932560570538044,
            0.00010755521361716092,
            0.00034461129689589143,
            9.511703683529049e-05,
            0.0002413415932096541,
            0.001101770089007914
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "gold_select": "select players.given_name, players.nation_code, players.birth_date",
        "select_candidates": [
            "select players.given_name, players.nation_code, players.birth_date",
            "select players.given_name, players.birth_date, players.nation_code",
            "select players.given_name, players.last_name, players.birth_date",
            "select players.given_name, players.hand, players.birth_date"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players matches",
        "table_candidates": [
            "players matches",
            "players matches rankings"
        ],
        "align_scores": [
            0.951964795589447,
            0.9720163345336914,
            0.949394941329956,
            0.9707661867141724,
            0.0005727256648242474,
            0.00045688526006415486,
            0.001036258996464312,
            0.0009039100841619074
        ],
        "align_select": "select players.given_name, players.nation_code, players.birth_date",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "gold_select": "select players.given_name, players.nation_code, players.birth_date",
        "select_candidates": [
            "select players.given_name, players.nation_code, players.birth_date",
            "select players.given_name, players.birth_date, players.nation_code",
            "select players.given_name, players.last_name, players.birth_date",
            "select players.given_name, players.hand, players.birth_date"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "players matches",
        "table_candidates": [
            "players matches"
        ],
        "align_scores": [
            0.9846637845039368,
            0.00019074678129982203,
            0.985325276851654,
            0.00020503427367657423,
            0.0005572056979872286,
            0.00010602359543554485,
            0.0009065596968866885,
            0.0001176408986793831
        ],
        "align_select": "select players.given_name, players.nation_code, players.birth_date",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
        "gold_select": "select ship.name, ship.vessel",
        "select_candidates": [
            "select ship.name, ship.vessel",
            "select ship.name, max(ship.vessel)",
            "select ship.name, ship.spot0",
            "select ship.name, ship.id0"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "ship",
        "table_candidates": [
            "ship"
        ],
        "align_scores": [
            0.00031157975899986923,
            0.0001334316038992256,
            0.0003523718914948404,
            0.00020300457254052162,
            0.0003519180463626981,
            0.0001546609855722636,
            0.0003267493157181889,
            0.0001527064450783655
        ],
        "align_select": "select ship.name, ship.vessel",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
        "gold_select": "select death.killed, death.injured",
        "select_candidates": [
            "select death.killed, death.injured",
            "select distinct death.killed, death.injured",
            "select death.caused_by_ship_id, death.killed, death.injured",
            "select the death.killed, death.injured"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "ship death",
        "table_candidates": [
            "ship death",
            "battle ship death"
        ],
        "align_scores": [
            0.9803609848022461,
            8.932633500080556e-05,
            0.004292175639420748,
            7.66831508371979e-05,
            0.00021855732484254986,
            7.118919165804982e-05,
            0.0009036517585627735,
            8.895275095710531e-05
        ],
        "align_select": "select death.killed, death.injured",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "gold_select": "select battle.name, battle.ending",
        "select_candidates": [
            "select battle.name, battle.ending",
            "select battle.name, battle.date, battle.ending",
            "select battle.name, battle.date",
            "select battle.name, battle.bulgarian_head"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle",
        "table_candidates": [
            "battle"
        ],
        "align_scores": [
            0.9935656189918518,
            0.00017478433437645435,
            0.0006599900079891086,
            9.444946772418916e-05,
            0.0015287160640582442,
            0.00012791936751455069,
            0.0012844207230955362,
            0.00013513443991541862
        ],
        "align_select": "select battle.name, battle.ending",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "gold_select": "select distinct battle.id, battle.name",
        "select_candidates": [
            "select distinct battle.id, battle.name",
            "select distinct battle.name, battle.id",
            "select unique battle.id, battle.name",
            "select battle.id, battle.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle ship",
        "table_candidates": [
            "battle ship"
        ],
        "align_scores": [
            0.9802969694137573,
            0.0002427264116704464,
            0.9791715741157532,
            0.00023705099010840058,
            0.0006231222650967538,
            0.00012197531032143161,
            0.016280652955174446,
            0.00025786328478716314
        ],
        "align_select": "select distinct battle.id, battle.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "gold_select": "select battle.id, battle.name",
        "select_candidates": [
            "select battle.id, battle.name",
            "select battle.name, battle.id",
            "select battle.date, battle.name",
            "select death.id, battle.name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle ship death",
        "table_candidates": [
            "battle death"
        ],
        "align_scores": [
            0.8700404167175293,
            0.00014375592581927776,
            0.8943005204200745,
            0.0001447382674086839,
            0.0005957760149613023,
            6.981875048950315e-05,
            0.0019184896955266595,
            0.00011819026985904202
        ],
        "align_select": "select battle.id, battle.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "gold_select": "select battle.name",
        "select_candidates": [
            "select distinct battle.name",
            "select distinct battle.name, battle.bulgarian_head, battle.latin_commander",
            "select distinct battle.name, battle.date",
            "select distinct battle.name, battle.date, battle.bulgarian_head"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle",
        "table_candidates": [
            "battle"
        ],
        "align_scores": [
            0.9951838850975037,
            0.00022994258324615657,
            0.00018797838129103184,
            6.953065894776955e-05,
            0.0002246008807560429,
            8.024227281566709e-05,
            0.00012718485959339887,
            6.358795508276671e-05
        ],
        "align_select": "select distinct battle.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many different results are there for the battles?",
        "gold_select": "select count(distinct battle.ending)",
        "select_candidates": [
            "select count(distinct battle.ending)",
            "select count(distinct battle.name)",
            "select count(distinct t0.c6)",
            "select count(distinct battle.date)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "battle",
        "table_candidates": [
            "battle"
        ],
        "align_scores": [
            0.9876090288162231,
            0.9876090288162231,
            0.0026700454764068127,
            0.0026700454764068127,
            0.0006092686671763659,
            0.0006092686671763659,
            0.0006124512874521315,
            0.0006124512874521315
        ],
        "align_select": "select count(distinct battle.ending)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many battles did not lose any ship with tonnage '225'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), ship.id",
            "select count(*), ship.missed_in_warfare",
            "select count(*), ship.vessel"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle ship",
        "table_candidates": [
            "battle ship",
            "battle ship death"
        ],
        "align_scores": [
            0.9934126734733582,
            0.01841524802148342,
            0.0003227895649615675,
            0.00017452087195124477,
            0.00033276097383350134,
            0.0001737199490889907,
            0.0003616831381805241,
            0.00020007086277473718
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
        "gold_select": "select battle.name, battle.date",
        "select_candidates": [
            "select battle.name, battle.date",
            "select battle.name, battle.date, ship.missed_in_warfare",
            "select battle.name, battle.date, ship.name",
            "select battle.name, battle.date, ship.id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle ship",
        "table_candidates": [
            "battle ship death",
            "battle ship"
        ],
        "align_scores": [
            0.3886212408542633,
            0.9423300623893738,
            0.00025744372396729887,
            0.0004072664596606046,
            0.0004926958936266601,
            0.0003644007083494216,
            0.0002464945428073406,
            0.0002594974939711392
        ],
        "align_select": "select battle.name, battle.date",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "gold_select": "select battle.name, battle.ending, battle.bulgarian_head",
        "select_candidates": [
            "select battle.name, battle.date, battle.latin_commander",
            "select battle.name, battle.bulgarian_head, battle.latin_commander",
            "select battle.name, battle.date, battle.bulgarian_head",
            "select battle.name, battle.latin_commander, battle.bulgarian_head"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle ship",
        "table_candidates": [
            "battle ship"
        ],
        "align_scores": [
            0.0002656645665410906,
            0.0008404235122725368,
            0.00028458223096095026,
            0.0007302176672965288,
            0.00032430814462713897,
            0.006900459062308073,
            0.00022845437342766672,
            0.002009246964007616
        ],
        "align_select": "select battle.name, battle.date, battle.latin_commander",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the notes of the death events which has substring 'East'?",
        "gold_select": "select death.mark",
        "select_candidates": [
            "select death.mark",
            "select death.injured",
            "select death.killed",
            "select t2.c5"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "death",
        "table_candidates": [
            "death",
            "ship death"
        ],
        "align_scores": [
            0.994964599609375,
            7.772422395646572e-05,
            0.001713115954771638,
            6.293797923717648e-05,
            0.0059044319204986095,
            6.226246478036046e-05,
            0.0012697416823357344,
            7.1181588282343e-05
        ],
        "align_select": "select death.mark",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many ships ended up being 'Captured'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), ship.vessel_disposition",
            "select count(*), ship.lost_in_battle",
            "select count(*), ship.id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "ship",
        "table_candidates": [
            "ship"
        ],
        "align_scores": [
            0.9933013916015625,
            0.002904759254306555,
            0.0002506279561202973,
            0.0021258064080029726,
            0.0001856009039329365,
            0.000502985727507621,
            0.00024764405679889023,
            0.0003916096466127783
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "gold_select": "select battle.name, battle.result, battle.bulgarian_commander",
        "select_candidates": [
            "select battle.name, battle.result, battle.bulgarian_commander",
            "select battle.name, battle.bulgarian_commander, battle.result",
            "select battle.name, battle.result, battle.bulgarian_commander",
            "select battle.name, battle.result, bulgarian_commander"
        ],
        "select_labels": [
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle ship",
        "table_candidates": [
            "battle ship"
        ],
        "align_scores": [
            0.00038508878787979484,
            0.9934169054031372,
            0.00039429060416296124,
            0.9932464361190796,
            0.00038508878787979484,
            0.9934169054031372,
            0.00023364034132100642,
            0.014712375588715076
        ],
        "align_select": "select battle.name, battle.result, battle.bulgarian_commander",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the notes of the death events which has substring 'East'?",
        "gold_select": "select death.notice",
        "select_candidates": [
            "select death.notice",
            "select death.caused_by_ship_id, death.notice",
            "select death.id, death.notice",
            "select death.notice, death.id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "death",
        "table_candidates": [
            "death"
        ],
        "align_scores": [
            0.9958845973014832,
            8.876928768586367e-05,
            0.00022084648662712425,
            6.625413516303524e-05,
            0.00017000900697894394,
            7.098392234183848e-05,
            0.0001380985922878608,
            6.817901157774031e-05
        ],
        "align_select": "select death.notice",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
        "gold_select": "select ship.name, ship.heaviness",
        "select_candidates": [
            "select ship.name, ship.heaviness",
            "select ship.name, ship.heaviness.c3",
            "select ship.name, ship.heaviness, ship.ship_type",
            "select ship.name.c3, ship.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "ship",
        "table_candidates": [
            "ship"
        ],
        "align_scores": [
            0.9317190051078796,
            0.9317190051078796,
            0.0006536548025906086,
            0.0006536548025906086,
            0.0001307669299421832,
            0.0001307669299421832,
            0.0001772631221683696,
            0.0001772631221683696
        ],
        "align_select": "select ship.name, ship.heaviness",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
        "gold_select": "select death.killed, death.injured",
        "select_candidates": [
            "select death.killed, death.injured",
            "select distinct death.killed, death.injured",
            "select death.id, death.killed, death.injured",
            "select death.caused_by_ship_id, death.killed, death.injured"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "ship death",
        "table_candidates": [
            "ship death"
        ],
        "align_scores": [
            0.9803609848022461,
            8.932633500080556e-05,
            0.004292175639420748,
            7.66831508371979e-05,
            0.00018427378381602466,
            7.229507900774479e-05,
            0.00021855732484254986,
            7.118919165804982e-05
        ],
        "align_select": "select death.killed, death.injured",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many battles did not lose any ship with tonnage '225'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), ship.heaviness",
            "select count(*), ship.id",
            "select count(*), ship.lost_in_battle"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle ship",
        "table_candidates": [
            "battle ship"
        ],
        "align_scores": [
            0.9934126734733582,
            0.01841524802148342,
            0.00033158418955281377,
            0.00019869812240358442,
            0.0003227895649615675,
            0.00017452087195124477,
            0.0002579144202172756,
            0.000263380934484303
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many ships ended up being 'Captured'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), ship.how_vessel_disposed",
            "select count(*), ship.how_vessel_disposed",
            "select count(*), ship.lost_in_battle"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "ship",
        "table_candidates": [
            "ship"
        ],
        "align_scores": [
            0.9933013916015625,
            0.002904759254306555,
            0.0002196201530750841,
            0.000636294309515506,
            0.0002196201530750841,
            0.000636294309515506,
            0.0001856009039329365,
            0.000502985727507621
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "gold_select": "select battle.name, battle.consequence",
        "select_candidates": [
            "select battle.name, battle.consequence",
            "select battle.name, battle.bulgarian_head, battle.consequence",
            "select battle.name, battle.date, battle.consequence",
            "select battle.name, battle.latin_commander, battle.consequence"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle",
        "table_candidates": [
            "battle"
        ],
        "align_scores": [
            0.9917282462120056,
            0.00023080845130607486,
            0.0003470656229183078,
            8.282680937554687e-05,
            0.00029217341216281056,
            9.071273234440014e-05,
            0.0003230371221434325,
            9.093930566450581e-05
        ],
        "align_select": "select battle.name, battle.consequence",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "gold_select": "select battle.name",
        "select_candidates": [
            "select distinct battle.name",
            "select distinct battle.name, battle.date",
            "select distinct battle.name, battle.bulgarian_head, battle.latin_commander",
            "select distinct battle.name, battle.date, battle.bulgarian_head"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle",
        "table_candidates": [
            "battle"
        ],
        "align_scores": [
            0.9951838850975037,
            0.00022994258324615657,
            0.0002246008807560429,
            8.024227281566709e-05,
            0.00018797838129103184,
            6.953065894776955e-05,
            0.00012718485959339887,
            6.358795508276671e-05
        ],
        "align_select": "select distinct battle.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many different results are there for the battles?",
        "gold_select": "select count(distinct battle.consequence)",
        "select_candidates": [
            "select count(distinct battle.consequence)",
            "select count(distinct t0.c6)",
            "select count(distinct battle.date)",
            "select count(distinct battle.bulgarian_head)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "battle",
        "table_candidates": [
            "battle"
        ],
        "align_scores": [
            0.9928035140037537,
            0.9928035140037537,
            0.0006092686671763659,
            0.0006092686671763659,
            0.0006124512874521315,
            0.0006124512874521315,
            0.288027822971344,
            0.288027822971344
        ],
        "align_select": "select count(distinct battle.consequence)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "gold_select": "select battle.name, battle.consequence, battle.bulgarian_head",
        "select_candidates": [
            "select battle.name, battle.consequence, battle.bulgarian_head",
            "select battle.name, battle.date, battle.latin_commander",
            "select battle.name, battle.bulgarian_head, battle.latin_commander",
            "select battle.name, battle.consequence, battle.latin_commander"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle ship",
        "table_candidates": [
            "battle ship"
        ],
        "align_scores": [
            0.0006215453613549471,
            0.9886788725852966,
            0.0002656645665410906,
            0.0008404235122725368,
            0.00028458223096095026,
            0.0007302176672965288,
            0.00048411826719529927,
            0.09905460476875305
        ],
        "align_select": "select battle.name, battle.consequence, battle.bulgarian_head",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many ships ended up being 'Captured'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), ship.how_ship_disposed",
            "select count(*), ship.forfeited_in_combat",
            "select count(*), ship.how_ship_disposed"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "ship",
        "table_candidates": [
            "ship"
        ],
        "align_scores": [
            0.9933013916015625,
            0.002904759254306555,
            0.00019470116239972413,
            0.0006699114455841482,
            0.00019105857063550502,
            0.0008010001620277762,
            0.00019470116239972413,
            0.0006699114455841482
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "gold_select": "select battle.name, battle.effect",
        "select_candidates": [
            "select battle.name, battle.effect",
            "select battle.name, battle.date, battle.effect",
            "select battle.name, battle.bulgarian_commander, battle.effect",
            "select battle.name, battle.effect, battle.bulgarian_commander"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle",
        "table_candidates": [
            "battle"
        ],
        "align_scores": [
            0.9935038685798645,
            0.00018751239986158907,
            0.0002997174742631614,
            8.306718518724665e-05,
            0.0003117895685136318,
            7.93997387518175e-05,
            0.00018060415459331125,
            7.371066749328747e-05
        ],
        "align_select": "select battle.name, battle.effect",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "gold_select": "select distinct battle.id, battle.name",
        "select_candidates": [
            "select distinct battle.id, battle.name",
            "select distinct battle.name, battle.id",
            "select unique battle.id, battle.name",
            "select distinct battle.name, battle.date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle ship",
        "table_candidates": [
            "battle ship"
        ],
        "align_scores": [
            0.9802969694137573,
            0.0002427264116704464,
            0.9791715741157532,
            0.00023705099010840058,
            0.0006231222650967538,
            0.00012197531032143161,
            0.00037008197978138924,
            7.768886280246079e-05
        ],
        "align_select": "select distinct battle.id, battle.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "gold_select": "select battle.id, battle.name",
        "select_candidates": [
            "select battle.id, battle.name",
            "select battle.name, battle.id",
            "select battle.date, battle.name",
            "select death.id, battle.name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle ship death",
        "table_candidates": [
            "battle death"
        ],
        "align_scores": [
            0.8700404167175293,
            0.00014375592581927776,
            0.8943005204200745,
            0.0001447382674086839,
            0.0005957760149613023,
            6.981875048950315e-05,
            0.0019184896955266595,
            0.00011819026985904202
        ],
        "align_select": "select battle.id, battle.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "How many different results are there for the battles?",
        "gold_select": "select count(distinct battle.effect)",
        "select_candidates": [
            "select count(distinct battle.effect)",
            "select count(distinct t0.c6)",
            "select count(distinct battle.date)",
            "select count(distinct battle.bulgarian_commander)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "battle",
        "table_candidates": [
            "battle"
        ],
        "align_scores": [
            0.9952162504196167,
            0.9952162504196167,
            0.0006092686671763659,
            0.0006092686671763659,
            0.0006124512874521315,
            0.0006124512874521315,
            0.07138767093420029,
            0.07138767093420029
        ],
        "align_select": "select count(distinct battle.effect)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many battles did not lose any ship with tonnage '225'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), ship.tonnage",
            "select count(*), ship.id",
            "select count(*), ship.tonnage, ship.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle ship",
        "table_candidates": [
            "battle ship"
        ],
        "align_scores": [
            0.9934126734733582,
            0.01841524802148342,
            0.00034067025990225375,
            0.00018263580568600446,
            0.0003227895649615675,
            0.00017452087195124477,
            0.00014484208077192307,
            9.071031672647223e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
        "gold_select": "select battle.name, battle.date",
        "select_candidates": [
            "select battle.name, battle.date",
            "select battle.name, battle.date, ship.name",
            "select battle.name, battle.date, ship.forfeited_in_combat",
            "select battle.name, battle.date, battle.bulgarian_commander"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "battle ship",
        "table_candidates": [
            "battle ship",
            "battle ship death"
        ],
        "align_scores": [
            0.9423300623893738,
            0.0002051686169579625,
            0.0003644007083494216,
            0.00011873678158735856,
            0.0006280589732341468,
            7.479072519345209e-05,
            0.0001960708323167637,
            0.0001031762731145136
        ],
        "align_select": "select battle.name, battle.date",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "gold_select": "select battle.name, battle.effect, battle.bulgarian_commander",
        "select_candidates": [
            "select battle.name, battle.bulgarian_commander, battle.date",
            "select battle.name, battle.date, battle.bulgarian_commander",
            "select battle.name, battle.bulgarian_commander, battle.effect",
            "select battle.name, battle.bulgarian_commander, battle.latin_commander"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle ship",
        "table_candidates": [
            "battle ship"
        ],
        "align_scores": [
            0.00021843481226824224,
            0.00013127943384461105,
            0.0003009943466167897,
            0.00016077315376605839,
            0.0003718849620781839,
            0.0003614880552049726,
            0.00012484632316045463,
            0.00011136302055092528
        ],
        "align_select": "select battle.name, battle.bulgarian_commander, battle.date",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the notes of the death events which has substring 'East'?",
        "gold_select": "select death.info",
        "select_candidates": [
            "select death.info",
            "select death.caused_by_ship_id, death.info",
            "select death.killed",
            "select death.killed, death.injured"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "death",
        "table_candidates": [
            "death",
            "ship death"
        ],
        "align_scores": [
            0.9945823550224304,
            8.297638123622164e-05,
            0.00025279386318288743,
            6.782119453419e-05,
            0.0059044319204986095,
            6.226246478036046e-05,
            0.00018777987861540169,
            5.87977483519353e-05
        ],
        "align_select": "select death.info",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "what are all the addresses including line 1 and line 2?",
        "gold_select": "select Addresses.path_1, Addresses.line_2",
        "select_candidates": [
            "select Addresses.address_id",
            "select Addresses.other_address_details",
            "select Addresses.address_id, Addresses.path_1, Addresses.line_2",
            "select Addresses.path_1, Addresses.line_2"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Addresses",
        "table_candidates": [
            "Addresses"
        ],
        "align_scores": [
            0.030414875596761703,
            0.0008715151925571263,
            0.9819408655166626,
            0.0001604748104000464,
            0.00013181880058255047,
            7.178704981924966e-05,
            0.0005777081241831183,
            7.41527765057981e-05
        ],
        "align_select": "select Addresses.other_address_details",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the first and second line for all addresses?",
        "gold_select": "select Addresses.path_1, Addresses.line_2",
        "select_candidates": [
            "select Addresses.path_1, Addresses.line_2",
            "select distinct Addresses.path_1, Addresses.line_2",
            "select Addresses.address_id, Addresses.path_1, Addresses.line_2",
            "select Addresses.address_id, Addresses.line_2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses",
        "table_candidates": [
            "Addresses"
        ],
        "align_scores": [
            0.0006722182151861489,
            0.00010019929322879761,
            0.0004012092249467969,
            0.00010468763503013179,
            0.0001632061757845804,
            7.646402082173154e-05,
            0.0006171618588268757,
            0.00013125839177519083
        ],
        "align_select": "select Addresses.path_1, Addresses.line_2",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How is the math course described?",
        "gold_select": "select Courses.course_description",
        "select_candidates": [
            "select Courses.course_description",
            "select Courses.course_description, Courses.other_details",
            "select Courses.course_description (or Courses.other_details)",
            "select Courses.course_description (Courses.other_details)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses",
        "table_candidates": [
            "Courses",
            "Courses Departments Sections",
            "Courses Departments",
            "Courses Departments Degree_Programs",
            "Courses Sections",
            "Courses Student_Enrolment",
            "Courses Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.9960052371025085,
            8.554767555324361e-05,
            0.0001868627150543034,
            6.464138277806342e-05,
            0.9928929209709167,
            7.515326433349401e-05,
            0.00025472964625805616,
            6.829862104495987e-05
        ],
        "align_select": "select Courses.course_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the descriptions for all the math courses?",
        "gold_select": "select Courses.course_description",
        "select_candidates": [
            "select Courses.course_description",
            "select Courses.course_description, Courses.other_details",
            "select t1.c5, Courses.course_description",
            "select Courses.course_description, Courses.lesson_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses",
        "table_candidates": [
            "Courses",
            "Courses Departments Sections",
            "Courses Departments",
            "Courses Departments Degree_Programs Sections",
            "Courses Departments Degree_Programs"
        ],
        "align_scores": [
            0.9948550462722778,
            0.00011960999108850956,
            0.00018113911210093647,
            6.390282942447811e-05,
            0.0002770883438643068,
            7.825313514331356e-05,
            0.0001407171512255445,
            6.315598147921264e-05
        ],
        "align_select": "select Courses.course_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the zip code of the address in the city Port Chelsea?",
        "gold_select": "select Addresses.zip_postal_code",
        "select_candidates": [
            "select Addresses.zip_postal_code",
            "select Addresses.zip_postal_code, Addresses.other_address_details",
            "select Addresses.zip_postal_code, Addresses.state_province_county",
            "select Addresses.zip_postal_code, Addresses.capital_area"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses",
        "table_candidates": [
            "Addresses"
        ],
        "align_scores": [
            0.9899340271949768,
            9.938028233591467e-05,
            0.00018896008259616792,
            5.65610098419711e-05,
            0.0002554006059654057,
            6.221307558007538e-05,
            0.00016946195682976395,
            5.757407416240312e-05
        ],
        "align_select": "select Addresses.zip_postal_code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the zip code for Port Chelsea?",
        "gold_select": "select Addresses.zip_postal_code",
        "select_candidates": [
            "select Addresses.zip_postal_code",
            "select Addresses.zip_postal_code, Addresses.capital_area",
            "select Addresses.zip_postal_code, Addresses.state_province_county",
            "select Addresses.zip_postal_code (or Addresses.state_province_county)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses",
        "table_candidates": [
            "Addresses"
        ],
        "align_scores": [
            0.9957460761070251,
            0.00010302861483069137,
            0.00017761485651135445,
            5.529232294065878e-05,
            0.00029110931791365147,
            6.154616858111694e-05,
            0.9914932250976562,
            8.962454012362286e-05
        ],
        "align_select": "select Addresses.zip_postal_code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many different degree names are offered?",
        "gold_select": "select count(distinct Degree_Programs.degree_synopsis)",
        "select_candidates": [
            "select count(distinct Degree_Programs.degree_synopsis)",
            "select count(distinct Degree_Programs.degree_summary_description)",
            "select count(distinct Degree_Programs.other_details)",
            "select count(distinct t3.c6)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Degree_Programs",
        "table_candidates": [
            "Degree_Programs"
        ],
        "align_scores": [
            0.0027982168830931187,
            0.0027982168830931187,
            0.0013745020842179656,
            0.0013745020842179656,
            0.000994127825833857,
            0.000994127825833857,
            0.0006718829390592873,
            0.0006718829390592873
        ],
        "align_select": "select count(distinct Degree_Programs.degree_synopsis)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many different degrees are offered?",
        "gold_select": "select count(distinct Degree_Programs.degree_synopsis)",
        "select_candidates": [
            "select count(distinct Degree_Programs.degree_synopsis)",
            "select count(distinct Degree_Programs.degree_program_id)",
            "select count(distinct Degree_Programs.department_id)",
            "select count(distinct t3.c6)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Degree_Programs",
        "table_candidates": [
            "Degree_Programs"
        ],
        "align_scores": [
            0.06656954437494278,
            0.06656954437494278,
            0.20532940328121185,
            0.20532940328121185,
            0.0015694212634116411,
            0.0015694212634116411,
            0.0007675060187466443,
            0.0007675060187466443
        ],
        "align_select": "select count(distinct Degree_Programs.degree_synopsis)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the names and descriptions of all the sections?",
        "gold_select": "select Sections.section_designation, Sections.section_description",
        "select_candidates": [
            "select Sections.section_designation, Sections.section_description",
            "select Sections.course_id, Sections.section_description",
            "select Sections.section_id, Sections.section_designation, Sections.section_description",
            "select Sections.section_description, Sections.section_designation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections",
            "Departments Sections",
            "Degree_Programs Sections",
            "Departments Degree_Programs Sections",
            "Addresses Sections",
            "Courses Sections"
        ],
        "align_scores": [
            0.7126785516738892,
            0.00012368883471935987,
            0.000361380516551435,
            0.00010768564243335277,
            0.00039397311047650874,
            7.818578160367906e-05,
            0.4389854669570923,
            0.00010038091568276286
        ],
        "align_select": "select Sections.section_designation, Sections.section_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the names and descriptions for all the sections?",
        "gold_select": "select Sections.section_designation, Sections.section_description",
        "select_candidates": [
            "select Sections.section_designation, Sections.section_description",
            "select Sections.course_id, Sections.section_description",
            "select Sections.section_id, Sections.section_designation, Sections.section_description",
            "select Sections.section_designation, Sections.section_description, Sections.section_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections",
            "Departments Sections",
            "Degree_Programs Sections",
            "Departments Degree_Programs Sections",
            "Addresses Sections",
            "Courses Sections"
        ],
        "align_scores": [
            0.18572542071342468,
            0.00012013647210551426,
            0.00039358739741146564,
            0.00011797880142694339,
            0.0003442839370109141,
            8.048029849305749e-05,
            0.0003738421364687383,
            7.67459932831116e-05
        ],
        "align_select": "select Sections.section_designation, Sections.section_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the names and id of courses having at most 2 sections?",
        "gold_select": "select Courses.lesson_name, Courses.course_id",
        "select_candidates": [
            "select Courses.course_description, Courses.course_id",
            "select Courses.lesson_name, Courses.course_id",
            "select Courses.course_description, Sections.course_id",
            "select Courses.lesson_name, Sections.course_id"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Sections",
        "table_candidates": [
            "Courses Sections",
            "Courses Departments Sections",
            "Courses Degree_Programs Sections"
        ],
        "align_scores": [
            0.8985592722892761,
            9.969626989914104e-05,
            0.00038184443837963045,
            7.23377670510672e-05,
            0.6563671231269836,
            8.822919335216284e-05,
            0.0003826114407274872,
            6.483559991465881e-05
        ],
        "align_select": "select Courses.course_description, Courses.course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the names and ids of every course with less than 2 sections?",
        "gold_select": "select Courses.lesson_name, Courses.course_id",
        "select_candidates": [
            "select Courses.course_description, Courses.course_id",
            "select Courses.lesson_name, Courses.course_id",
            "select Courses.course_description, Sections.course_id",
            "select Courses.lesson_name, Sections.course_id"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Sections",
        "table_candidates": [
            "Courses Sections",
            "Courses Departments Sections"
        ],
        "align_scores": [
            0.8946622014045715,
            0.00010647160524968058,
            0.00040202756645157933,
            7.923023804323748e-05,
            0.3080536723136902,
            0.0001034657470881939,
            0.00039004627615213394,
            7.182142144301906e-05
        ],
        "align_select": "select Courses.course_description, Courses.course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List the section_name in reversed lexicographical order.",
        "gold_select": "select Sections.section_designation",
        "select_candidates": [
            "select Sections.course_id",
            "select Sections.section_designation",
            "select Sections.section_description",
            "select Sections.other_details"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections",
            "Departments Sections",
            "Degree_Programs Sections",
            "Courses Sections",
            "Addresses Sections",
            "Addresses Courses",
            "Addresses Departments"
        ],
        "align_scores": [
            0.00041131876059807837,
            0.00041131876059807837,
            0.9946528673171997,
            0.9946528673171997,
            0.0009788934839889407,
            0.0009788934839889407,
            0.001617800211533904,
            0.001617800211533904
        ],
        "align_select": "select Sections.section_designation",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the names of the sections in reverse alphabetical order?",
        "gold_select": "select Sections.section_designation",
        "select_candidates": [
            "select Sections.section_description",
            "select Sections.section_description, Sections.section_designation",
            "select Sections.course_id, Sections.section_designation",
            "select Sections.course_id, Sections.section_description"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections",
            "Departments Sections",
            "Degree_Programs Sections"
        ],
        "align_scores": [
            0.01933187060058117,
            0.01933187060058117,
            0.0001858392497524619,
            0.0001858392497524619,
            0.00016219560347963125,
            0.00016219560347963125,
            0.00017116645176429302,
            0.00017116645176429302
        ],
        "align_select": "select Sections.section_description",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
        "gold_select": "select Students.forename, Students.middle_name, Students.last_name, Students.student_id",
        "select_candidates": [
            "select Students.forename, Students.middle_name, Students.last_name, Students.student_id",
            "select Students.forename, Students.middle_name, Students.last_name",
            "select Students.forename, Students.middle_name, Students.last_name and Students.student_id",
            "select Students.student_id, Students.forename, Students.middle_name, Students.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Students Student_Enrolment",
        "table_candidates": [
            "Students Student_Enrolment",
            "Degree_Programs Students Student_Enrolment",
            "Semesters Students Student_Enrolment",
            "Departments Degree_Programs Students Student_Enrolment",
            "Students Student_Enrolment_Courses",
            "Sections Students Student_Enrolment",
            "Transcripts Students Student_Enrolment",
            "Degree_Programs Students Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.39419490098953247,
            0.004810654558241367,
            0.1343146115541458,
            0.0005242901970632374,
            0.5773322582244873,
            0.005359959788620472,
            0.035215139389038086,
            0.004973984323441982
        ],
        "align_select": "select Students.forename, Students.middle_name, Students.last_name, Students.student_id",
        "align_structure": "SELECT-FROM-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "gold_select": "select Students.forename, Students.middle_name, Students.last_name, Students.student_id",
        "select_candidates": [
            "select Students.forename, Students.middle_name, Students.last_name, Students.student_id",
            "select Students.forename, Students.middle_name, Students.last_name",
            "select Students.forename, Students.middle_name, Students.last_name, Students.student_id",
            "select Students.forename, Students.middle_name, Students.last_name ainsi, Students.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Students Student_Enrolment",
        "table_candidates": [
            "Students",
            "Degree_Programs Students",
            "Students Student_Enrolment_Courses",
            "Students Student_Enrolment",
            "Departments Degree_Programs Students",
            "Semesters Students",
            "Sections Students",
            "Transcripts Students"
        ],
        "align_scores": [
            0.31665927171707153,
            0.9706277847290039,
            0.060278888791799545,
            0.5150724053382874,
            0.31665927171707153,
            0.9706277847290039,
            0.0016580673400312662,
            0.0031268575694411993
        ],
        "align_select": "select Students.forename, Students.middle_name, Students.last_name, Students.student_id",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "gold_select": "select distinct Students.forename, Students.middle_name, Students.last_name",
        "select_candidates": [
            "select Students.forename, Students.middle_name, Students.last_name",
            "select Students.student_id, Students.forename, Students.middle_name, Students.last_name",
            "select distinct Students.forename, Students.middle_name, Students.last_name",
            "select Students.forename., Students.middle_name, Students.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Students Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Students Student_Enrolment",
            "Departments Degree_Programs Students Student_Enrolment",
            "Addresses Degree_Programs Students Student_Enrolment",
            "Courses Degree_Programs Students Student_Enrolment",
            "Semesters Students Student_Enrolment"
        ],
        "align_scores": [
            0.975371778011322,
            0.0001439166662748903,
            0.00022954479209147394,
            9.305554704042152e-05,
            0.016808168962597847,
            7.079126953613013e-05,
            0.0047184182330966,
            0.00010762117017293349
        ],
        "align_select": "select Students.forename, Students.middle_name, Students.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "gold_select": "select distinct Students.forename, Students.middle_name, Students.last_name",
        "select_candidates": [
            "select Students.forename, Students.middle_name, Students.last_name",
            "select Students.student_id, Students.forename, Students.middle_name, Students.last_name",
            "select Students.forename, Students.middle_name, Students.last_name",
            "select Students.forename., Students.middle_name, Students.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Students Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Students Student_Enrolment"
        ],
        "align_scores": [
            0.9440374374389648,
            0.00013848405797034502,
            0.00017769566329661757,
            8.325339877046645e-05,
            0.9440374374389648,
            0.00013848405797034502,
            0.004159319680184126,
            9.254882752429694e-05
        ],
        "align_select": "select Students.forename, Students.middle_name, Students.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the kind of program which most number of students are enrolled in?",
        "gold_select": "select Degree_Programs.degree_synopsis",
        "select_candidates": [
            "select Degree_Programs.degree_synopsis",
            "select Degree_Programs.department_id",
            "select Departments.department_name",
            "select Departments.department_name, Student_Enrolment.semester_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Student_Enrolment",
            "Departments Degree_Programs Student_Enrolment",
            "Courses Degree_Programs Student_Enrolment",
            "Courses Departments Degree_Programs Student_Enrolment",
            "Degree_Programs Students Student_Enrolment",
            "Semesters Student_Enrolment",
            "Sections Student_Enrolment",
            "Departments Degree_Programs Students Student_Enrolment"
        ],
        "align_scores": [
            0.7992067933082581,
            0.00010059651685878634,
            0.054438136518001556,
            9.796816448215395e-05,
            0.733588457107544,
            9.266893903259188e-05,
            0.0002557156258262694,
            6.097459117881954e-05
        ],
        "align_select": "select Degree_Programs.degree_synopsis",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the degree summary name that has the most number of students enrolled?",
        "gold_select": "select Degree_Programs.degree_synopsis",
        "select_candidates": [
            "select Degree_Programs.degree_summary_description",
            "select Degree_Programs.degree_summary_description, Student_Enrolment.semester_id",
            "select Degree_Programs.degree_summary_description, Student_Enrolment.degree_program_id",
            "select Degree_Programs.degree_summary_description, Students.student_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Student_Enrolment",
            "Degree_Programs Students Student_Enrolment",
            "Departments Degree_Programs Student_Enrolment",
            "Courses Degree_Programs Student_Enrolment",
            "Addresses Degree_Programs Student_Enrolment",
            "Addresses Degree_Programs Students Student_Enrolment",
            "Degree_Programs Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.9669055938720703,
            0.0001307834027102217,
            0.0001701495930319652,
            6.547256634803489e-05,
            0.0005197297432459891,
            8.16904503153637e-05,
            0.00025144172832369804,
            7.605582504766062e-05
        ],
        "align_select": "select Degree_Programs.degree_summary_description",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "gold_select": "select Degree_Programs.degree_program_id, Degree_Programs.degree_synopsis",
        "select_candidates": [
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description",
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_synopsis",
            "select Degree_Programs.department_id, Degree_Programs.degree_summary_description",
            "select Degree_Programs.department_id, Degree_Programs.degree_synopsis"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Student_Enrolment",
            "Departments Degree_Programs Student_Enrolment",
            "Degree_Programs Students Student_Enrolment",
            "Courses Degree_Programs Student_Enrolment",
            "Addresses Degree_Programs Student_Enrolment",
            "Departments Degree_Programs Students Student_Enrolment",
            "Sections Students Student_Enrolment",
            "Courses Degree_Programs Students Student_Enrolment"
        ],
        "align_scores": [
            0.9750778079032898,
            7.978242501849309e-05,
            0.9893982410430908,
            8.143324521370232e-05,
            0.0006655009929090738,
            8.746478852117434e-05,
            0.0009284524712711573,
            8.218990114983171e-05
        ],
        "align_select": "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the program id and the summary of the degree that has the most students enrolled?",
        "gold_select": "select Degree_Programs.degree_program_id, Degree_Programs.degree_synopsis",
        "select_candidates": [
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description",
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_synopsis",
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_synopsis, Degree_Programs.degree_summary_description",
            "select Student_Enrolment.degree_program_id, Degree_Programs.degree_synopsis, Degree_Programs.degree_summary_description"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Student_Enrolment",
            "Departments Degree_Programs Student_Enrolment",
            "Courses Degree_Programs Student_Enrolment"
        ],
        "align_scores": [
            0.9939717650413513,
            0.00010673316864995286,
            0.9944889545440674,
            0.00010640866821631789,
            0.00036771027953363955,
            7.628899766132236e-05,
            0.00039901334093883634,
            7.880038174334913e-05
        ],
        "align_select": "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "gold_select": "select Students.student_id, Students.forename, Students.middle_name, Students.last_name, count(*), Students.student_id",
        "select_candidates": [
            "select Students.student_id, Students.forename, Students.middle_name, Students.last_name, count(*)",
            "select Students.student_id, Students.forename, Students.middle_name, Students.last_name",
            "select Students.student_id, Students.forename, Students.middle_name, Students.last_name, count(*)",
            "select Students.student_id, Students.current_address_id, Students.middle_name, Students.last_name, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Students Student_Enrolment",
        "table_candidates": [
            "Students"
        ],
        "align_scores": [
            0.12296382337808609,
            0.12296382337808609,
            0.0612969696521759,
            0.0612969696521759,
            0.12296382337808609,
            0.12296382337808609,
            0.000249966949922964,
            0.000249966949922964
        ],
        "align_select": "select Students.student_id, Students.forename, Students.middle_name, Students.last_name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "gold_select": "select Students.student_id, Students.forename, Students.middle_name, Students.last_name, count(*), Students.student_id",
        "select_candidates": [
            "select Students.forename, Students.middle_name, Students.last_name, Students.student_id, count(*)",
            "select Students.forename, Students.middle_name, Students.last_name, Students.student_id, count(Students.initially_enrolled_at)",
            "select Students.forename, Students.middle_name, Students.last_name, Students.student_id, count(s)",
            "select Students.forename, Students.middle_name, Students.last_name ainsi Students.student_id, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students Student_Enrolment",
        "table_candidates": [
            "Students"
        ],
        "align_scores": [
            0.9848302602767944,
            0.0004467482795007527,
            0.003360210685059428,
            0.00010358578583691269,
            0.11032409965991974,
            0.00022545050887856632,
            0.1858748197555542,
            0.0002066857850877568
        ],
        "align_select": "select Students.forename, Students.middle_name, Students.last_name, Students.student_id, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are all the course names of the courses which ever have students enrolled in?",
        "gold_select": "select distinct Courses.lesson_name",
        "select_candidates": [
            "select Courses.lesson_name",
            "select distinct Courses.lesson_name",
            "select Courses.lesson_name, Student_Enrolment.semester_id",
            "select Courses.lesson_name, Courses.course_description"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Student_Enrolment_Courses",
        "table_candidates": [
            "Courses Student_Enrolment",
            "Addresses Courses Student_Enrolment",
            "Courses"
        ],
        "align_scores": [
            0.001976067665964365,
            0.0013582620304077864,
            0.007073152344673872,
            0.013433677144348621,
            0.0002687217784114182,
            0.00016994756879284978,
            0.0003816853859461844,
            0.00017918902449309826
        ],
        "align_select": "select Courses.lesson_name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the names of all courses that have some students enrolled?",
        "gold_select": "select distinct Courses.lesson_name",
        "select_candidates": [
            "select Courses.lesson_name",
            "select Courses.lesson_name, Courses.course_description",
            "select Courses.lesson_name, Student_Enrolment.semester_id",
            "select Courses.lesson_name, Sections.section_designation"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Student_Enrolment_Courses",
        "table_candidates": [
            "Courses Student_Enrolment",
            "Addresses Courses Student_Enrolment"
        ],
        "align_scores": [
            0.021440191194415092,
            0.0011817360064014792,
            0.0006341003463603556,
            0.00017168791964650154,
            0.00025624671252444386,
            0.00011603900202317163,
            0.00036862073466181755,
            0.00013636700168717653
        ],
        "align_select": "select Courses.lesson_name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What's the name of the course with most number of enrollments?",
        "gold_select": "select Courses.lesson_name",
        "select_candidates": [
            "select Courses.lesson_name",
            "select Courses.lesson_name, Student_Enrolment.semester_id",
            "select Courses.lesson_name, Courses.course_description",
            "select Courses.lesson_name, Sections.section_designation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Student_Enrolment_Courses",
        "table_candidates": [
            "Courses Student_Enrolment",
            "Addresses Courses Student_Enrolment"
        ],
        "align_scores": [
            0.001038388698361814,
            7.812392868800089e-05,
            0.0001688068878138438,
            6.17319019511342e-05,
            0.00033524175523780286,
            6.871679943287745e-05,
            0.0002037709637079388,
            6.30787544650957e-05
        ],
        "align_select": "select Courses.lesson_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the course with the most students enrolled?",
        "gold_select": "select Courses.lesson_name",
        "select_candidates": [
            "select Courses.lesson_name",
            "select Courses.lesson_name, Student_Enrolment.semester_id",
            "select Courses.lesson_name, Courses.course_description",
            "select Courses.lesson_name, Student_Enrolment.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Student_Enrolment_Courses",
        "table_candidates": [
            "Courses Student_Enrolment",
            "Courses Students Student_Enrolment",
            "Addresses Courses Student_Enrolment",
            "Courses Sections Student_Enrolment",
            "Courses Student_Enrolment Sections"
        ],
        "align_scores": [
            0.0036472640931606293,
            0.00010154372284887359,
            0.0001831998524721712,
            6.1020775319775566e-05,
            0.0006038552382960916,
            7.052162254694849e-05,
            0.00017592213407624513,
            6.142936763353646e-05
        ],
        "align_select": "select Courses.lesson_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the date and id of the transcript with at least 2 course results.",
        "gold_select": "select Transcripts.record_time, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select t12.c5, t12.c0",
            "select t10.c5, Transcript_Contents.student_course_id",
            "select t14.c5, t14.c0",
            "select t8.c5, Student_Enrolment_Courses.student_course_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents",
            "Semesters Student_Enrolment_Courses",
            "Transcripts Transcript_Contents",
            "Semesters Student_Enrolment"
        ],
        "align_scores": [
            0.00026126354350708425,
            5.492345735547133e-05,
            0.000260044849710539,
            8.189120853785425e-05,
            0.0002804964315146208,
            5.533721559913829e-05,
            0.00033491497742943466,
            7.959160575410351e-05
        ],
        "align_select": "select t12.c5, t12.c0",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the date and id of the transcript with at least 2 courses listed?",
        "gold_select": "select Transcripts.record_time, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select t10.c5, Transcript_Contents.student_course_id",
            "select t14.c5, t14.c0",
            "select t12.c5, t12.c0",
            "select t8.c5, Student_Enrolment_Courses.student_course_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Courses Student_Enrolment_Courses",
            "Courses Student_Enrolment",
            "Courses Transcripts",
            "Semesters Student_Enrolment_Courses",
            "Semesters Student_Enrolment",
            "Courses",
            "Courses Transcript_Contents"
        ],
        "align_scores": [
            0.0003613749868236482,
            0.00010315306280972436,
            0.0002626637287903577,
            6.765608122805133e-05,
            0.00023304542992264032,
            6.777684029657394e-05,
            0.00048488035099580884,
            0.00010358993313275278
        ],
        "align_select": "select t10.c5, Transcript_Contents.student_course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "gold_select": "select Students.phone_number",
        "select_candidates": [
            "select Students.phone_number",
            "select Students.phone_number, Students.current_address_id3",
            "select Students.phone_number, Students.email_address",
            "select Students.phone_number, Students.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Degree_Programs Students",
            "Students Student_Enrolment",
            "Semesters Students",
            "Addresses Students",
            "Courses Students",
            "Sections Students"
        ],
        "align_scores": [
            0.9357324838638306,
            0.00018671592988539487,
            0.00012255474575795233,
            7.069237472023815e-05,
            0.00016032505664043128,
            6.959765596548095e-05,
            0.0001789260859368369,
            7.254417141666636e-05
        ],
        "align_select": "select Students.phone_number",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the mobile phone number of the student named Timmothy Ward?",
        "gold_select": "select Students.phone_number",
        "select_candidates": [
            "select Students.phone_number",
            "select Students.phone_number, Students.forename, Students.last_name",
            "select Students.phone_number, Students.email_address",
            "select Students.phone_number, Students.email_address, Students.ssn"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment",
            "Addresses Students",
            "Addresses Students Student_Enrolment",
            "Semesters Students",
            "Semesters Students Student_Enrolment",
            "Degree_Programs Students Student_Enrolment"
        ],
        "align_scores": [
            0.9861078262329102,
            0.00013862793275620788,
            0.00019027105008717626,
            6.480567390099168e-05,
            0.00013388159277383238,
            5.644827615469694e-05,
            0.0001433384168194607,
            6.0612321249209344e-05
        ],
        "align_select": "select Students.phone_number",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who is the first student to register? List the first name, middle name and last name.",
        "gold_select": "select Students.forename, Students.middle_name, Students.last_name",
        "select_candidates": [
            "select Students.forename, Students.middle_name, Students.last_name",
            "select Students.student_id, Students.forename, Students.middle_name, Students.last_name",
            "select Students.forename, Students.middle_name, Students.last_name",
            "select Students.forename., Students.middle_name, Students.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students Student_Enrolment",
            "Semesters Students Student_Enrolment"
        ],
        "align_scores": [
            0.9838734269142151,
            8.943022839957848e-05,
            0.00026357886963523924,
            8.824433461995795e-05,
            0.9838734269142151,
            8.943022839957848e-05,
            0.00868169590830803,
            0.00012634837185032666
        ],
        "align_select": "select Students.forename, Students.middle_name, Students.last_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the first, middle, and last name of the first student to register?",
        "gold_select": "select Students.forename, Students.middle_name, Students.last_name",
        "select_candidates": [
            "select Students.forename, Students.middle_name, Students.last_name",
            "select Students.forename, Students.middle_name, Students.last_name",
            "select Students.student_id, Students.forename, Students.middle_name, Students.last_name",
            "select t6, Students.forename, Students.middle_name, Students.last_name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students Student_Enrolment"
        ],
        "align_scores": [
            0.9843490719795227,
            7.425559306284413e-05,
            0.9843490719795227,
            7.425559306284413e-05,
            0.0002754920278675854,
            8.538899419363588e-05,
            0.00030426442390307784,
            5.987850818200968e-05
        ],
        "align_select": "select Students.forename, Students.middle_name, Students.last_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "gold_select": "select Students.forename, Students.middle_name, Students.last_name",
        "select_candidates": [
            "select Students.forename, Students.middle_name, Students.last_name",
            "select Students.student_id, Students.forename, Students.middle_name, Students.last_name",
            "select Students.forename, Students.middle_name, Students.last_name",
            "select Students.forename., Students.middle_name, Students.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment_Courses",
            "Students Student_Enrolment"
        ],
        "align_scores": [
            0.98457932472229,
            9.309265442425385e-05,
            0.00022970506688579917,
            9.62486956268549e-05,
            0.98457932472229,
            9.309265442425385e-05,
            0.010169505141675472,
            0.00012165238877059892
        ],
        "align_select": "select Students.forename, Students.middle_name, Students.last_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the first, middle, and last name of the earliest school graduate?",
        "gold_select": "select Students.forename, Students.middle_name, Students.last_name",
        "select_candidates": [
            "select Students.forename, Students.middle_name, Students.last_name",
            "select Students.forename, Students.middle_name, Students.last_name",
            "select Students.student_id, Students.forename, Students.middle_name, Students.last_name",
            "select Students.forename., Students.middle_name, Students.last_name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment_Courses",
            "Students Student_Enrolment"
        ],
        "align_scores": [
            0.9461598992347717,
            8.409142174059525e-05,
            0.9461598992347717,
            8.409142174059525e-05,
            0.00025934018776752055,
            9.387372847413644e-05,
            0.0070486776530742645,
            0.00011001169332303107
        ],
        "align_select": "select Students.forename, Students.middle_name, Students.last_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Whose permanent address is different from his or her current address? List his or her first name.",
        "gold_select": "select Students.forename",
        "select_candidates": [
            "select Students.forename",
            "select distinct Students.forename",
            "select Students.student_id, Students.forename",
            "select distinct Students.forename, Students.middle_name, Students.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Addresses Students",
            "Departments Students",
            "Degree_Programs Students",
            "Semesters Students",
            "Courses Students",
            "Sections Students",
            "Addresses Courses"
        ],
        "align_scores": [
            0.9062265753746033,
            0.0006433188682422042,
            0.036445632576942444,
            0.00026168435579165816,
            0.0002725612430367619,
            0.00017558812396600842,
            0.0003653708554338664,
            8.453062764601782e-05
        ],
        "align_select": "select Students.forename",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the first name of the student whose permanent address is different from his or her current one?",
        "gold_select": "select Students.forename",
        "select_candidates": [
            "select Students.forename",
            "select Students.forename, Students.middle_name, Students.last_name",
            "select distinct Students.forename",
            "select distinct Students.forename, Students.middle_name, Students.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Addresses Students",
            "Addresses Courses Students",
            "Semesters Students",
            "Degree_Programs Students",
            "Departments Students",
            "Sections Students",
            "Courses Students"
        ],
        "align_scores": [
            0.8394456505775452,
            0.0003606192476581782,
            0.0002395173505647108,
            7.531913433922455e-05,
            0.035959117114543915,
            0.00026290296227671206,
            0.00033739031641744077,
            7.061287033138797e-05
        ],
        "align_select": "select Students.forename",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which address holds the most number of students currently? List the address id and all lines.",
        "gold_select": "select Addresses.address_id, Addresses.path_1, Addresses.line_2",
        "select_candidates": [
            "select Addresses.address_id, Addresses.line_2, Addresses.line_3",
            "select Addresses.address_id, Addresses.line_2",
            "select Addresses.address_id, Addresses.path_1, Addresses.line_2",
            "select Addresses.address_id, Addresses.line_3, Addresses.line_2"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses Students",
        "table_candidates": [
            "Addresses Students",
            "Addresses Semesters Students",
            "Addresses Courses Students",
            "Addresses Sections Students",
            "Addresses Students Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.041928987950086594,
            0.00010299176938133314,
            0.004504636395722628,
            0.00010622213449096307,
            0.0012290090089663863,
            7.987962453626096e-05,
            0.0032906155101954937,
            8.19117485661991e-05
        ],
        "align_select": "select Addresses.address_id, Addresses.line_2, Addresses.line_3",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the id, line 1, and line 2 of the address with the most students?",
        "gold_select": "select Addresses.address_id, Addresses.path_1, Addresses.line_2",
        "select_candidates": [
            "select Addresses.address_id, Addresses.path_1, Addresses.line_2",
            "select student_Addresses.address_id, Addresses.path_1, Addresses.line_2",
            "select Addresses.address_id, Addresses.line_2, Addresses.line_3",
            "select Addresses.address_id, Addresses.path_1, Addresses.line_2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses Students",
        "table_candidates": [
            "Addresses Students",
            "Addresses Students Student_Enrolment_Courses",
            "Addresses Semesters Students",
            "Addresses Courses Students",
            "Addresses Students Student_Enrolment",
            "Addresses Student_Enrolment",
            "Addresses Sections Students",
            "Addresses Transcripts"
        ],
        "align_scores": [
            0.05307556688785553,
            7.359505980275571e-05,
            0.05105038359761238,
            9.633253648644313e-05,
            0.0011666674399748445,
            7.912739965831861e-05,
            0.05307556688785553,
            7.359505980275571e-05
        ],
        "align_select": "select Addresses.address_id, Addresses.path_1, Addresses.line_2",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "On average, when were the transcripts printed?",
        "gold_select": "select avg(Transcripts.record_time)",
        "select_candidates": [
            "select avg(t10.c5)",
            "select avg(t9.c5)",
            "select avg(t9.c6)",
            "select avg(t8.c5)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents",
            "Semesters Student_Enrolment_Courses",
            "Student_Enrolment",
            "Semesters Student_Enrolment"
        ],
        "align_scores": [
            0.0009322114055976272,
            6.943987682461739e-05,
            0.0008784504025243223,
            7.017626921879128e-05,
            0.0008782520308159292,
            6.974648567847908e-05,
            0.0007874134462326765,
            6.90169763402082e-05
        ],
        "align_select": "select avg(t10.c5)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the average transcript date?",
        "gold_select": "select avg(Transcripts.record_time)",
        "select_candidates": [
            "select avg(t10.c5)",
            "select avg(t9.c5)",
            "select avg(t8.c5)",
            "select avg(t9.c8)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcript_Contents",
            "Transcripts",
            "Student_Enrolment_Courses",
            "Student_Enrolment"
        ],
        "align_scores": [
            0.0008267687517218292,
            6.853754166513681e-05,
            0.0006985721993260086,
            6.814254447817802e-05,
            0.0005781493382528424,
            6.634594319621101e-05,
            0.0006853545201011002,
            6.436114927055314e-05
        ],
        "align_select": "select avg(t10.c5)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "When is the first transcript released? List the date and details.",
        "gold_select": "select Transcripts.record_time, Transcripts.other_details",
        "select_candidates": [
            "select t8.c5, t8.c6",
            "select t12.c5, t12.c6",
            "select t8.c5, t9.c6",
            "select t9.c5, t9.c6"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Student_Enrolment_Courses",
            "Transcript_Contents",
            "Courses Student_Enrolment_Courses",
            "Courses",
            "Semesters Student_Enrolment_Courses",
            "Addresses Transcripts"
        ],
        "align_scores": [
            0.0027010105550289154,
            6.559818575624377e-05,
            0.003432188183069229,
            6.500201561721042e-05,
            0.0022732701618224382,
            6.582779315067455e-05,
            0.003985732328146696,
            6.380918057402596e-05
        ],
        "align_select": "select t8.c5, t8.c6",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the earliest date of a transcript release, and what details can you tell me?",
        "gold_select": "select Transcripts.record_time, Transcripts.other_details",
        "select_candidates": [
            "select t8.c5, t8.c6",
            "select t8.c5, t9.c6",
            "select t9.c5, t9.c6",
            "select t10.c5, t10.c6"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Transcript_Contents",
            "Student_Enrolment_Courses",
            "Courses Student_Enrolment_Courses",
            "Transcripts Transcript_Contents",
            "Student_Enrolment"
        ],
        "align_scores": [
            0.0048663136549293995,
            5.8931236708303913e-05,
            0.006630921270698309,
            6.100797691033222e-05,
            0.007240882609039545,
            5.778506965725683e-05,
            0.006500896532088518,
            5.907070590183139e-05
        ],
        "align_select": "select t8.c5, t8.c6",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the last transcript release date?",
        "gold_select": "select Transcripts.record_time",
        "select_candidates": [
            "select t8.c5",
            "select t12.c5",
            "select t9.c5",
            "select t10.c5"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Student_Enrolment_Courses",
            "Transcript_Contents",
            "Student_Enrolment"
        ],
        "align_scores": [
            0.0016206601867452264,
            0.002102840691804886,
            0.0013199960812926292,
            0.0013660977128893137,
            0.0012206860119476914,
            0.0018462436273694038,
            0.0012922455789521337,
            0.001205944106914103
        ],
        "align_select": "select t8.c5",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "When was the last transcript released?",
        "gold_select": "select Transcripts.record_time",
        "select_candidates": [
            "select t8.c5",
            "select t9.c5",
            "select t10.c5",
            "select t12.c5"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Student_Enrolment_Courses",
            "Transcript_Contents"
        ],
        "align_scores": [
            0.0031066606752574444,
            0.0017735155997797847,
            0.0035708192735910416,
            0.0018900216091424227,
            0.0023133778013288975,
            0.0018672149162739515,
            0.0019888870883733034,
            0.001616964815184474
        ],
        "align_select": "select t8.c5",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show the date of the transcript which shows the least number of results, also list the id.",
        "gold_select": "select Transcripts.record_time, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select t12.c5, t12.c0",
            "select t8.c5, Student_Enrolment_Courses.student_course_id",
            "select t10.c5, Transcript_Contents.student_course_id",
            "select t12.c3, t12.c0"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Transcripts",
            "Student_Enrolment_Courses",
            "Transcript_Contents"
        ],
        "align_scores": [
            0.00014627876225858927,
            5.8941805036738515e-05,
            0.0003171079733874649,
            6.758154631825164e-05,
            0.000223712224396877,
            7.199312676675618e-05,
            0.00014119184925220907,
            6.190988642629236e-05
        ],
        "align_select": "select t12.c5, t12.c0",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the date and id of the transcript with the least number of results?",
        "gold_select": "select Transcripts.record_time, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select t8.c5, Student_Enrolment_Courses.student_course_id",
            "select t14.c5, t14.c0",
            "select t12.c5, t12.c0",
            "select t14.c3, t14.c0"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Transcripts",
            "Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.0002781582297757268,
            9.340823453385383e-05,
            0.00017440775991417468,
            6.743721314705908e-05,
            0.00017189528443850577,
            6.978247984079644e-05,
            0.0001712680095806718,
            6.759991811122745e-05
        ],
        "align_select": "select t8.c5, Student_Enrolment_Courses.student_course_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "gold_select": "select distinct Student_Enrolment.semester_id",
        "select_candidates": [
            "select Semesters.semester_name",
            "select Semesters.semester_name, Students.initially_enrolled_at",
            "select Semesters.semester_name, Semesters.semester_description",
            "select Semesters.semester_name, Degree_Programs.degree_synopsis"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Students Student_Enrolment",
            "Departments Degree_Programs Students Student_Enrolment",
            "Semesters Students Student_Enrolment",
            "Addresses Departments Degree_Programs Students Student_Enrolment",
            "Courses Degree_Programs Students Student_Enrolment",
            "Departments Degree_Programs Semesters Students Student_Enrolment",
            "Courses Students Student_Enrolment",
            "Sections Students Student_Enrolment"
        ],
        "align_scores": [
            0.9899665117263794,
            0.05180245265364647,
            0.00053306546760723,
            0.0005048708408139646,
            0.000607820984441787,
            0.0006071219104342163,
            0.00032559660030528903,
            0.0006006136536598206
        ],
        "align_select": "select Semesters.semester_name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "gold_select": "select distinct Student_Enrolment.semester_id",
        "select_candidates": [
            "select Students.current_address_id",
            "select Students.student_id",
            "select Semesters.semester_name",
            "select Semesters.semester_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Students Student_Enrolment",
            "Departments Degree_Programs Students Student_Enrolment",
            "Addresses Degree_Programs Students Student_Enrolment",
            "Courses Degree_Programs Students Student_Enrolment",
            "Degree_Programs Students Student_Enrolment Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.0006792587228119373,
            0.0002509268233552575,
            0.0017202097224071622,
            0.0003913787950295955,
            0.699305534362793,
            0.006937625352293253,
            0.9945153594017029,
            0.10311560332775116
        ],
        "align_select": "select Semesters.semester_id",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "List all the student details in reversed lexicographical order.",
        "gold_select": "select Students.specifics",
        "select_candidates": [
            "select Student_Enrolment_Courses.course_id, Students.permanent_address_id",
            "select Student_Enrolment_Courses.course_id",
            "select Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id",
            "select Student_Enrolment.degree_program_id, Students.permanent_address_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment",
            "Semesters Students Student_Enrolment",
            "Courses Students Student_Enrolment",
            "Students Student_Enrolment_Courses",
            "Semesters Students",
            "Courses Students",
            "Sections Students Student_Enrolment"
        ],
        "align_scores": [
            0.00019281453569419682,
            0.00019281453569419682,
            0.00032783549977466464,
            0.00032783549977466464,
            0.00014158310659695417,
            0.00014158310659695417,
            0.00025981635553762317,
            0.00025981635553762317
        ],
        "align_select": "select Student_Enrolment_Courses.course_id, Students.permanent_address_id",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What other details can you tell me about students in reverse alphabetical order?",
        "gold_select": "select Students.specifics",
        "select_candidates": [
            "select Students.specifics",
            "select Students.last_name, Students.forename",
            "select Students.current_address_id3",
            "select Students.initially_enrolled_at, Students.time_of_depart"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment",
            "Students Student_Enrolment_Courses",
            "Semesters Students Student_Enrolment_Courses",
            "Semesters Students Student_Enrolment"
        ],
        "align_scores": [
            0.9892265796661377,
            0.9892265796661377,
            0.0022020095493644476,
            0.0022020095493644476,
            0.0007525177206844091,
            0.0007525177206844091,
            0.0016388912918046117,
            0.0016388912918046117
        ],
        "align_select": "select Students.specifics",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Describe the section h.",
        "gold_select": "select Sections.section_description",
        "select_candidates": [
            "select Sections.section_description",
            "select Sections.section_description, Sections.section_designation",
            "select Sections.section_description, Sections.other_details",
            "select Sections.course_id, Sections.section_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections",
            "Departments Sections",
            "Degree_Programs Sections",
            "Addresses Sections",
            "Courses Sections",
            "Sections Transcripts",
            "Sections Student_Enrolment_Courses",
            "Sections Student_Enrolment"
        ],
        "align_scores": [
            0.9962899684906006,
            7.471145363524556e-05,
            0.00018146152433473617,
            5.602408418781124e-05,
            0.0002371075242990628,
            5.484631401486695e-05,
            0.00013949409185443074,
            5.9773192333523184e-05
        ],
        "align_select": "select Sections.section_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the description for the section named h?",
        "gold_select": "select Sections.section_description",
        "select_candidates": [
            "select Sections.section_description",
            "select Sections.section_description, Sections.section_designation",
            "select Sections.section_description, Sections.other_details",
            "select Sections.section_description, t4.c6"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections",
            "Departments Sections",
            "Degree_Programs Sections",
            "Addresses Departments Sections",
            "Addresses Courses Sections",
            "Addresses Sections",
            "Courses Sections"
        ],
        "align_scores": [
            0.9964627623558044,
            7.606278813909739e-05,
            0.00014920937246643007,
            5.9712972870329395e-05,
            0.00016532583686057478,
            5.8014760725200176e-05,
            0.0003313522320240736,
            7.042881043162197e-05
        ],
        "align_select": "select Sections.section_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582.",
        "gold_select": "select Students.forename",
        "select_candidates": [
            "select Students.forename",
            "select Students.forename, Students.last_name",
            "select Students.forename, Students.middle_name, Students.phone_number",
            "select Students.forename, Students.middle_name, Students.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses Students",
        "table_candidates": [
            "Addresses Students",
            "Addresses Semesters Students",
            "Addresses Courses Students",
            "Addresses Students Student_Enrolment"
        ],
        "align_scores": [
            0.7765135169029236,
            0.851289689540863,
            0.0002376624761382118,
            0.00011149371857754886,
            0.00016547690029256046,
            0.00011257312871748582,
            0.0002919022517744452,
            0.000138684525154531
        ],
        "align_select": "select Students.forename",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582?",
        "gold_select": "select Students.forename",
        "select_candidates": [
            "select Students.forename",
            "select Students.forename, Students.last_name",
            "select Students.forename, Students.middle_name, Students.last_name",
            "select Students.forename, Students.last_name, Students.phone_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses Students",
        "table_candidates": [
            "Addresses Students",
            "Addresses Semesters Students",
            "Addresses Students Student_Enrolment",
            "Addresses Courses Students",
            "Addresses Students Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.7967112064361572,
            0.9845151901245117,
            0.0002411838067928329,
            0.00015632540453225374,
            0.00032298662699759007,
            0.00023840233916416764,
            0.0001624215510673821,
            0.00014066294534131885
        ],
        "align_select": "select Students.forename",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names and id of courses having at most 2 sections?",
        "gold_select": "select Courses.course_name, Courses.number_of_course",
        "select_candidates": [
            "select Courses.course_name, Sections.course_id",
            "select Courses.course_name, Courses.course_name",
            "select Courses.course_name, Sections.section_id",
            "select Courses.course_name, Departments.department_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Sections",
        "table_candidates": [
            "Courses Sections",
            "Courses Departments Sections",
            "Courses Degree_Programs Sections"
        ],
        "align_scores": [
            0.9818539023399353,
            8.789372077444568e-05,
            0.00045331192086450756,
            7.554176409030333e-05,
            0.0014302070485427976,
            7.769982767058536e-05,
            0.00020601249707397074,
            5.9528363635763526e-05
        ],
        "align_select": "select Courses.course_name, Sections.course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the names and ids of every course with less than 2 sections?",
        "gold_select": "select Courses.course_name, Courses.number_of_course",
        "select_candidates": [
            "select Courses.course_name, Sections.course_id",
            "select Courses.course_name, Sections.section_id",
            "select Courses.course_name, Departments.department_name",
            "select Courses.course_name, Courses.course_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Sections",
        "table_candidates": [
            "Courses Sections",
            "Courses Departments Sections",
            "Courses Degree_Programs Sections"
        ],
        "align_scores": [
            0.5916458368301392,
            0.00010785067570395768,
            0.0009976641740649939,
            0.00010564413241809234,
            0.00018012913642451167,
            7.815357093932107e-05,
            0.0005296649178490043,
            7.306180486921221e-05
        ],
        "align_select": "select Courses.course_name, Sections.course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the description of the department whose name has the substring the computer?",
        "gold_select": "select Departments.specification",
        "select_candidates": [
            "select Departments.specification",
            "select Departments.other_details",
            "select Departments.specification, Departments.other_details",
            "select t2.c4"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Departments",
        "table_candidates": [
            "Departments",
            "Departments Student_Enrolment",
            "Departments Degree_Programs",
            "Departments Transcripts",
            "Departments Student_Enrolment_Courses",
            "Courses Departments",
            "Departments Semesters",
            "Departments Sections"
        ],
        "align_scores": [
            0.9357061982154846,
            8.847748540574685e-05,
            0.9581750631332397,
            0.00011722725321305916,
            0.0002676427538972348,
            6.245316762942821e-05,
            0.0008550609927624464,
            6.913224933668971e-05
        ],
        "align_select": "select Departments.specification",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the department description for the one whose name has the word computer?",
        "gold_select": "select Departments.specification",
        "select_candidates": [
            "select Departments.specification",
            "select Departments.other_details",
            "select Departments.department_name, Departments.specification",
            "select Departments.specification, Departments.other_details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Departments",
        "table_candidates": [
            "Departments",
            "Departments Degree_Programs",
            "Courses Departments",
            "Departments Transcripts",
            "Departments Semesters",
            "Departments Student_Enrolment",
            "Addresses Departments",
            "Departments Sections"
        ],
        "align_scores": [
            0.9937708973884583,
            7.985685078892857e-05,
            0.9943296909332275,
            0.00010628018935676664,
            0.000232565522310324,
            6.36857221252285e-05,
            0.00026127026649191976,
            6.299382221186534e-05
        ],
        "align_select": "select Departments.specification",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
        "gold_select": "select Students.first_name, Students.middle_name, Students.ending_name, Students.student_id",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.ending_name, Students.student_id",
            "select Students.first_name, Students.middle_name, Students.ending_name, Student_Enrolment.student_enrolment_id",
            "select Student_Enrolment.student_id, Student_Enrolment.other_details, t7.c5, Students.student_id",
            "select Students.first_name, Students.middle_name, Students.ending_name, Student_Enrolment_Courses.student_course_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Students Student_Enrolment",
        "table_candidates": [
            "Students Student_Enrolment",
            "Degree_Programs Students Student_Enrolment",
            "Semesters Students Student_Enrolment",
            "Departments Degree_Programs Students Student_Enrolment",
            "Sections Students Student_Enrolment",
            "Courses Students Student_Enrolment",
            "Addresses Students Student_Enrolment",
            "Students Student_Enrolment Degree_Programs Sections Semesters"
        ],
        "align_scores": [
            0.009105726145207882,
            0.0006902191089466214,
            0.0020943465642631054,
            0.0006403154111467302,
            0.00014381650544237345,
            9.309451706940308e-05,
            0.0003328882157802582,
            0.0002472946362104267
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.ending_name, Students.student_id",
        "align_structure": "SELECT-FROM-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "gold_select": "select Students.first_name, Students.middle_name, Students.ending_name, Students.student_id",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.ending_name, Students.student_id",
            "select Students.first_name, Students.middle_name, Students.student_id",
            "select Students.first_name, Students.middle_name, Students.ending_name",
            "select Students.first_name, Students.middle_name, Students.ending_name, Students.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Students Student_Enrolment",
        "table_candidates": [
            "Students Student_Enrolment",
            "Degree_Programs Students Student_Enrolment",
            "Semesters Students Student_Enrolment",
            "Departments Degree_Programs Students Student_Enrolment",
            "Sections Students Student_Enrolment",
            "Courses Students Student_Enrolment",
            "Students Student_Enrolment_Courses",
            "Departments Students Student_Enrolment"
        ],
        "align_scores": [
            0.002659957390278578,
            0.048768069595098495,
            0.009665089659392834,
            0.029279429465532303,
            0.001788772759027779,
            0.005827347282320261,
            0.002659957390278578,
            0.048768069595098495
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.ending_name, Students.student_id",
        "align_structure": "SELECT-FROM-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "gold_select": "select distinct Students.first_name, Students.middle_name, Students.ending_name",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.ending_name",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.ending_name",
            "select Students.first_name, Students.middle_name, Students.ending_name",
            "select Students.first_name, Students.middle_name, t7.c5"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Students Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Students Student_Enrolment",
            "Departments Degree_Programs Students Student_Enrolment",
            "Addresses Degree_Programs Students Student_Enrolment",
            "Courses Degree_Programs Students Student_Enrolment",
            "Courses Students Student_Enrolment"
        ],
        "align_scores": [
            0.026736387982964516,
            0.00010210902109974995,
            0.00022234530479181558,
            8.603534661233425e-05,
            0.026736387982964516,
            0.00010210902109974995,
            0.00048307463293895125,
            9.065574704436585e-05
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.ending_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "gold_select": "select distinct Students.first_name, Students.middle_name, Students.ending_name",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.ending_name",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.ending_name",
            "select Students.first_name, Students.middle_name, Students.ending_name",
            "select distinct Students.first_name, Students.middle_name, Students.ending_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Students Student_Enrolment",
        "table_candidates": [
            "Students Student_Enrolment",
            "Degree_Programs Students Student_Enrolment",
            "Semesters Students Student_Enrolment",
            "Departments Degree_Programs Students Student_Enrolment",
            "Sections Students Student_Enrolment",
            "Courses Students Student_Enrolment",
            "Departments Students Student_Enrolment"
        ],
        "align_scores": [
            0.00606922060251236,
            9.065738413482904e-05,
            0.000157869333634153,
            7.153925253078341e-05,
            0.00606922060251236,
            9.065738413482904e-05,
            0.0016113396268337965,
            5.834299008711241e-05
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.ending_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "gold_select": "select Students.student_id, Students.first_name, Students.middle_name, Students.ending_name, count(*), Students.student_id",
        "select_candidates": [
            "select Students.student_id, Students.first_name, Students.middle_name, Students.ending_name",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.ending_name, count(*)",
            "select Students.student_id, Students.current_address_id, Students.middle_name",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.ending_name, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Students Student_Enrolment",
        "table_candidates": [
            "Students Student_Enrolment",
            "Students Student_Enrolment_Courses",
            "Students"
        ],
        "align_scores": [
            0.008546036668121815,
            0.008546036668121815,
            0.018839864060282707,
            0.018839864060282707,
            0.0002781226939987391,
            0.0002781226939987391,
            0.018839864060282707,
            0.018839864060282707
        ],
        "align_select": "select Students.student_id, Students.first_name, Students.middle_name, Students.ending_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "gold_select": "select Students.student_id, Students.first_name, Students.middle_name, Students.ending_name, count(*), Students.student_id",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.ending_name, Students.student_id, count(*)",
            "select Students.first_name, Students.middle_name, Students.ending_name, Students.student_id, count(Students.student_id)",
            "select Students.first_name, Students.middle_name, Students.ending_name, Students.student_id, count(registrations)",
            "select Students.first_name, Students.middle_name, Students.ending_name, Students.student_id, count(Students.current_address_id)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students Student_Enrolment",
        "table_candidates": [
            "Students Student_Enrolment"
        ],
        "align_scores": [
            0.6670772433280945,
            0.0001738986320560798,
            0.06233084201812744,
            0.00011496395745780319,
            0.005142620764672756,
            9.406729077454656e-05,
            0.0015782266855239868,
            0.00010041855421150103
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.ending_name, Students.student_id, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are all the course names of the courses which ever have students enrolled in?",
        "gold_select": "select distinct Courses.course_name",
        "select_candidates": [
            "select Courses.course_name",
            "select distinct Courses.course_name",
            "select Courses.course_name, Student_Enrolment.semester_id",
            "select distinct Courses.course_name, Student_Enrolment.semester_id"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Student_Enrolment_Courses",
        "table_candidates": [
            "Courses Student_Enrolment",
            "Addresses Courses Student_Enrolment",
            "Courses"
        ],
        "align_scores": [
            0.2931239604949951,
            0.5346075892448425,
            0.6637301445007324,
            0.23494678735733032,
            0.00018574146088212729,
            0.00013357096759136766,
            0.0007133462349884212,
            0.0002844832488335669
        ],
        "align_select": "select distinct Courses.course_name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the names of all courses that have some students enrolled?",
        "gold_select": "select distinct Courses.course_name",
        "select_candidates": [
            "select Courses.course_name",
            "select distinct Courses.course_name",
            "select Courses.course_name, Student_Enrolment.semester_id",
            "select Courses.course_name, Student_Enrolment.semester_id, Courses.other_details"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Student_Enrolment_Courses",
        "table_candidates": [
            "Courses Student_Enrolment",
            "Addresses Courses Student_Enrolment"
        ],
        "align_scores": [
            0.551201581954956,
            0.9385780692100525,
            0.7273216247558594,
            0.10823763161897659,
            0.00021062884479761124,
            0.0001696254184935242,
            0.0001708072959445417,
            0.00013586546992883086
        ],
        "align_select": "select Courses.course_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What's the name of the course with most number of enrollments?",
        "gold_select": "select Courses.course_name",
        "select_candidates": [
            "select Courses.course_name",
            "select Courses.course_name, Student_Enrolment.semester_id",
            "select Courses.course_name, Student_Enrolment.degree_program_id",
            "select Courses.course_name, Student_Enrolment.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Student_Enrolment_Courses",
        "table_candidates": [
            "Courses Student_Enrolment",
            "Addresses Courses Student_Enrolment"
        ],
        "align_scores": [
            0.993316650390625,
            9.062489698408172e-05,
            0.00018518335127737373,
            5.9332887758500874e-05,
            0.00032359748729504645,
            6.87214414938353e-05,
            0.00021926697809249163,
            5.860651799594052e-05
        ],
        "align_select": "select Courses.course_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the course with the most students enrolled?",
        "gold_select": "select Courses.course_name",
        "select_candidates": [
            "select Courses.course_name",
            "select Courses.course_name, Student_Enrolment.semester_id",
            "select Courses.course_name, Student_Enrolment.semester_id, Courses.other_details",
            "select Courses.course_name, Student_Enrolment.degree_program_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Student_Enrolment_Courses",
        "table_candidates": [
            "Courses Student_Enrolment",
            "Courses Sections Student_Enrolment",
            "Addresses Courses Student_Enrolment",
            "Courses Students Student_Enrolment",
            "Addresses Courses Sections Student_Enrolment"
        ],
        "align_scores": [
            0.9938240051269531,
            9.257812780560926e-05,
            0.0002235152351204306,
            5.977906403131783e-05,
            0.00018378719687461853,
            6.012449011905119e-05,
            0.00037019664887338877,
            6.849043711554259e-05
        ],
        "align_select": "select Courses.course_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "gold_select": "select Students.ending_name",
        "select_candidates": [
            "select Students.ending_name",
            "select Students.ending_name, Students.first_name",
            "select Students.ending_name, Students.student_id",
            "select Students.current_address_id, Students.ending_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses Students Student_Enrolment",
        "table_candidates": [
            "Addresses Students Student_Enrolment",
            "Addresses Courses Students Student_Enrolment",
            "Addresses Semesters Students Student_Enrolment",
            "Addresses Degree_Programs Students Student_Enrolment",
            "Addresses Sections Students Student_Enrolment",
            "Addresses Departments Students Student_Enrolment",
            "Addresses Departments Student_Enrolment",
            "Addresses Students Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.6401452422142029,
            0.8177799582481384,
            0.0003730521129909903,
            0.0003180019848514348,
            0.00026727045769803226,
            0.0002555182436481118,
            0.0004956320044584572,
            0.0004430199333000928
        ],
        "align_select": "select Students.ending_name",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
    },
    {
        "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
        "gold_select": "select Students.ending_name",
        "select_candidates": [
            "select Students.ending_name",
            "select Students.ending_name, Student_Enrolment.degree_program_id",
            "select Students.ending_name, Students.first_name",
            "select Students.ending_name, Student_Enrolment.semester_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses Students Student_Enrolment",
        "table_candidates": [
            "Addresses Students Student_Enrolment",
            "Addresses Degree_Programs Students Student_Enrolment",
            "Addresses Departments Degree_Programs Students Student_Enrolment",
            "Addresses Courses Students Student_Enrolment",
            "Addresses Semesters Students Student_Enrolment",
            "Addresses Courses Degree_Programs Students Student_Enrolment",
            "Addresses Sections Students Student_Enrolment",
            "Addresses Departments Students Student_Enrolment"
        ],
        "align_scores": [
            0.6156799793243408,
            0.7997170686721802,
            0.00030975998379290104,
            0.0003200970822945237,
            0.0002769853454083204,
            0.00025799410650506616,
            0.0001922179653774947,
            0.00019456569862086326
        ],
        "align_select": "select Students.ending_name",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
    },
    {
        "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "gold_select": "select Students.cell_mobile_number",
        "select_candidates": [
            "select Students.cell_mobile_number",
            "select Students.cell_mobile_number, Students.first_name, Students.ending_name",
            "select Students.cell_mobile_number, Students.email_address",
            "select Students.cell_mobile_number, Students.email_address, Students.ssn"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment",
            "Semesters Students",
            "Degree_Programs Students",
            "Students Student_Enrolment_Courses",
            "Addresses Students",
            "Courses Students",
            "Sections Students"
        ],
        "align_scores": [
            0.974699854850769,
            0.00014105852460488677,
            0.00018192478455603123,
            7.453640137100592e-05,
            0.00018344457203056663,
            7.524684770032763e-05,
            0.000201695307623595,
            7.364293560385704e-05
        ],
        "align_select": "select Students.cell_mobile_number",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the mobile phone number of the student named Timmothy Ward?",
        "gold_select": "select Students.cell_mobile_number",
        "select_candidates": [
            "select Students.cell_mobile_number",
            "select Students.cell_mobile_number, Students.email_address",
            "select Students.student_id, Students.cell_mobile_number",
            "select Students.cell_mobile_number, Students.ending_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment",
            "Students Student_Enrolment_Courses",
            "Addresses Students",
            "Semesters Students",
            "Degree_Programs Students",
            "Courses Students",
            "Sections Students"
        ],
        "align_scores": [
            0.994962215423584,
            0.0001476516481488943,
            0.00016568230057600886,
            6.326103903120384e-05,
            0.00014179224672261626,
            7.603914855280891e-05,
            0.00015023154264781624,
            6.225450488273054e-05
        ],
        "align_select": "select Students.cell_mobile_number",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who is the first student to register? List the first name, middle name and last name.",
        "gold_select": "select Students.first_name, Students.middle_name, Students.ending_name",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.ending_name",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.ending_name",
            "select Students.first_name, Students.middle_name, Students.ending_name",
            "select Students.first_name., Students.middle_name, Students.ending_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students Student_Enrolment",
            "Semesters Students Student_Enrolment"
        ],
        "align_scores": [
            0.14034311473369598,
            8.298413740703836e-05,
            0.0002557351253926754,
            8.412028546445072e-05,
            0.14034311473369598,
            8.298413740703836e-05,
            0.0071031576953828335,
            0.00011780974455177784
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.ending_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the first, middle, and last name of the first student to register?",
        "gold_select": "select Students.first_name, Students.middle_name, Students.ending_name",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.ending_name",
            "select Students.first_name, Students.middle_name, Students.ending_name",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.ending_name",
            "select Students.first_name., Students.middle_name, Students.ending_name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students Student_Enrolment",
            "Semesters Students Student_Enrolment"
        ],
        "align_scores": [
            0.03261394053697586,
            6.835223757661879e-05,
            0.03261394053697586,
            6.835223757661879e-05,
            0.00020563493308145553,
            7.851736882003024e-05,
            0.006616906262934208,
            0.0001000511329039
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.ending_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "gold_select": "select Students.first_name, Students.middle_name, Students.ending_name",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.ending_name",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.ending_name",
            "select Students.first_name, Students.middle_name, Students.ending_name",
            "select Students.first_name., Students.middle_name, Students.ending_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students Student_Enrolment_Courses",
            "Students Student_Enrolment",
            "Students",
            "Semesters Students Student_Enrolment"
        ],
        "align_scores": [
            0.005927640479058027,
            8.221397729357705e-05,
            0.0001737998245516792,
            9.294292249251157e-05,
            0.005927640479058027,
            8.221397729357705e-05,
            0.0038966266438364983,
            0.00012478347343858331
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.ending_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the first, middle, and last name of the earliest school graduate?",
        "gold_select": "select Students.first_name, Students.middle_name, Students.ending_name",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.ending_name",
            "select Students.first_name, Students.middle_name, Students.ending_name",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.ending_name",
            "select Students.first_name., Students.middle_name, Students.ending_name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment_Courses",
            "Students Student_Enrolment"
        ],
        "align_scores": [
            0.002629589755088091,
            0.002629589755088091,
            0.002629589755088091,
            0.002629589755088091,
            0.00018410096527077258,
            0.00018410096527077258,
            0.005012852139770985,
            0.005012852139770985
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.ending_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "List all the student details in reversed lexicographical order.",
        "gold_select": "select Students.see_also",
        "select_candidates": [
            "select Students.ending_name, Students.cell_mobile_number",
            "select Student_Enrolment_Courses.course_id, Students.permanent_address_id",
            "select Students.current_address_id, Students.permanent_address_id",
            "select t8.c5, Students.cell_mobile_number"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment",
            "Students Student_Enrolment_Courses",
            "Semesters Students Student_Enrolment",
            "Courses Students Student_Enrolment",
            "Semesters Students",
            "Courses Students",
            "Sections Students Student_Enrolment"
        ],
        "align_scores": [
            0.0007187887094914913,
            0.0007187887094914913,
            0.00019281453569419682,
            0.00019281453569419682,
            0.0014509520260617137,
            0.0014509520260617137,
            0.00024077575653791428,
            0.00024077575653791428
        ],
        "align_select": "select Students.ending_name, Students.cell_mobile_number",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What other details can you tell me about students in reverse alphabetical order?",
        "gold_select": "select Students.see_also",
        "select_candidates": [
            "select Students.first_name, Students.middle_name",
            "select Students.ending_name, Students.cell_mobile_number",
            "select t8.c3",
            "select Students.middle_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment_Courses",
            "Students Student_Enrolment",
            "Semesters Students Student_Enrolment_Courses",
            "Semesters Students"
        ],
        "align_scores": [
            0.0006962904008105397,
            0.0006962904008105397,
            0.0005286867963150144,
            0.0005286867963150144,
            0.00700371852144599,
            0.00700371852144599,
            0.008776291273534298,
            0.008776291273534298
        ],
        "align_select": "select Students.first_name, Students.middle_name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "How is the math course described?",
        "gold_select": "select Courses.course_details",
        "select_candidates": [
            "select Sections.section_description",
            "select Sections.section_description, Sections.other_details",
            "select Sections.section_description, Courses.course_details",
            "select Sections.course_id, Sections.section_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses",
        "table_candidates": [
            "Courses Sections",
            "Courses Departments Sections",
            "Courses Degree_Programs Sections",
            "Addresses Courses Sections",
            "Courses Departments Degree_Programs Sections",
            "Addresses Courses Departments Sections"
        ],
        "align_scores": [
            0.8655862808227539,
            8.209128282032907e-05,
            0.00020682101603597403,
            6.35432152193971e-05,
            0.000214275365578942,
            6.191761349327862e-05,
            0.00013697391841560602,
            7.12982946424745e-05
        ],
        "align_select": "select Sections.section_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the descriptions for all the math courses?",
        "gold_select": "select Courses.course_details",
        "select_candidates": [
            "select Sections.section_description",
            "select Sections.section_description, Courses.course_details",
            "select Sections.section_description, Sections.other_details",
            "select Sections.section_description, Sections.section_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses",
        "table_candidates": [
            "Courses Sections",
            "Courses Departments Sections",
            "Courses Degree_Programs Sections",
            "Courses Departments Degree_Programs Sections",
            "Addresses Courses Sections",
            "Addresses Courses Departments Sections"
        ],
        "align_scores": [
            0.9218405485153198,
            0.000139918367494829,
            0.00021646231471095234,
            6.341161497402936e-05,
            0.00020556239178404212,
            6.10330025665462e-05,
            0.00015005773457232863,
            6.163849320728332e-05
        ],
        "align_select": "select Sections.section_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "When is the first transcript released? List the date and details.",
        "gold_select": "select Transcripts.transcript_date, Transcripts.see_also",
        "select_candidates": [
            "select t8.c5, t8.c6",
            "select t12.c5, t12.c6",
            "select t8.c5, t9.c6",
            "select t9.c5, t9.c6"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Student_Enrolment_Courses",
            "Transcript_Contents",
            "Courses Student_Enrolment_Courses",
            "Courses",
            "Semesters Student_Enrolment_Courses",
            "Semesters Student_Enrolment"
        ],
        "align_scores": [
            0.0027010105550289154,
            6.559818575624377e-05,
            0.003432188183069229,
            6.500201561721042e-05,
            0.0022732701618224382,
            6.582779315067455e-05,
            0.003985732328146696,
            6.380918057402596e-05
        ],
        "align_select": "select t8.c5, t8.c6",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the earliest date of a transcript release, and what details can you tell me?",
        "gold_select": "select Transcripts.transcript_date, Transcripts.see_also",
        "select_candidates": [
            "select t8.c5, t8.c6",
            "select t8.c5, t9.c6",
            "select t10.c5, t10.c6",
            "select t9.c5, t9.c6"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Transcript_Contents",
            "Student_Enrolment_Courses",
            "Courses Student_Enrolment_Courses",
            "Transcripts Transcript_Contents"
        ],
        "align_scores": [
            0.0048663136549293995,
            5.8931236708303913e-05,
            0.006630921270698309,
            6.100797691033222e-05,
            0.006500896532088518,
            5.907070590183139e-05,
            0.007240882609039545,
            5.778506965725683e-05
        ],
        "align_select": "select t8.c5, t8.c6",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "what are all the addresses including line 1 and line 2?",
        "gold_select": "select Addresses.line_1, Addresses.path_2",
        "select_candidates": [
            "select Addresses.other_address_details",
            "select Addresses.address_id",
            "select Addresses.address_id, Addresses.line_1, Addresses.path_2",
            "select Addresses.line_1, Addresses.path_2"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Addresses",
        "table_candidates": [
            "Addresses"
        ],
        "align_scores": [
            0.9819408655166626,
            0.9932276606559753,
            0.030414875596761703,
            0.9460464715957642,
            0.00013147170830052346,
            0.0001277444389415905,
            0.0007843150524422526,
            0.000327605550410226
        ],
        "align_select": "select Addresses.other_address_details",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the first and second line for all addresses?",
        "gold_select": "select Addresses.line_1, Addresses.path_2",
        "select_candidates": [
            "select Addresses.line_1, Addresses.path_2",
            "select Addresses.line_1, Addresses.line_3",
            "select distinct Addresses.line_1, Addresses.path_2",
            "select Addresses.address_id, Addresses.line_1, Addresses.path_2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses",
        "table_candidates": [
            "Addresses"
        ],
        "align_scores": [
            0.0005608721985481679,
            0.00010290175123373047,
            0.0020982029382139444,
            7.360510062426329e-05,
            0.00046497920993715525,
            0.00010662116255844012,
            0.00017084558203350753,
            8.594613609602675e-05
        ],
        "align_select": "select Addresses.line_1, Addresses.path_2",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How is the math course described?",
        "gold_select": "select Courses.course_description",
        "select_candidates": [
            "select Courses.course_description",
            "select Courses.course_description, Courses.other_details",
            "select Courses.course_description (or Courses.other_details)",
            "select Courses.course_description (http://Courses.course_description)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses",
        "table_candidates": [
            "Courses",
            "Courses Student_Enrolment_Courses",
            "Courses Student_Enrolment",
            "Addresses Courses",
            "Courses Transcripts",
            "Courses Departments",
            "Courses Transcript_Contents"
        ],
        "align_scores": [
            0.9960052371025085,
            8.554767555324361e-05,
            0.0001868627150543034,
            6.464138277806342e-05,
            0.9928929209709167,
            7.515326433349401e-05,
            0.003276669653132558,
            8.135601092362776e-05
        ],
        "align_select": "select Courses.course_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the descriptions for all the math courses?",
        "gold_select": "select Courses.course_description",
        "select_candidates": [
            "select Courses.course_description",
            "select t1.c5, Courses.course_description",
            "select Courses.course_description, Courses.other_details",
            "select Courses.course_description, Courses.course_designation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses",
        "table_candidates": [
            "Courses",
            "Courses Student_Enrolment_Courses",
            "Courses Departments",
            "Courses Departments Degree_Programs",
            "Courses Student_Enrolment",
            "Courses Departments Sections"
        ],
        "align_scores": [
            0.9948550462722778,
            0.00011960999108850956,
            0.0002770883438643068,
            7.825313514331356e-05,
            0.00018113911210093647,
            6.390282942447811e-05,
            0.0001814542629290372,
            6.590277916984633e-05
        ],
        "align_select": "select Courses.course_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many different degree names are offered?",
        "gold_select": "select count(distinct Degree_Programs.degree_digest_designation)",
        "select_candidates": [
            "select count(distinct Degree_Programs.degree_digest_designation)",
            "select count(distinct Degree_Programs.degree_summary_description)",
            "select count(distinct t3.c6)",
            "select count(distinct t3.c5)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Degree_Programs",
        "table_candidates": [
            "Degree_Programs"
        ],
        "align_scores": [
            0.7161660194396973,
            0.7161660194396973,
            0.0013745020842179656,
            0.0013745020842179656,
            0.0006718829390592873,
            0.0006718829390592873,
            0.0006505167111754417,
            0.0006505167111754417
        ],
        "align_select": "select count(distinct Degree_Programs.degree_digest_designation)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many different degrees are offered?",
        "gold_select": "select count(distinct Degree_Programs.degree_digest_designation)",
        "select_candidates": [
            "select count(distinct Degree_Programs.degree_digest_designation)",
            "select count(distinct Degree_Programs.degree_program_id)",
            "select count(distinct Degree_Programs.department_id)",
            "select count(distinct t3.c6)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Degree_Programs",
        "table_candidates": [
            "Degree_Programs"
        ],
        "align_scores": [
            0.24377411603927612,
            0.24377411603927612,
            0.20532940328121185,
            0.20532940328121185,
            0.0015694212634116411,
            0.0015694212634116411,
            0.0007675060187466443,
            0.0007675060187466443
        ],
        "align_select": "select count(distinct Degree_Programs.degree_digest_designation)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the names and descriptions of all the sections?",
        "gold_select": "select Sections.section_name, Sections.detailing",
        "select_candidates": [
            "select Sections.section_name, Sections.detailing",
            "select Sections.section_id, Sections.section_name, Sections.detailing",
            "select Sections.section_name, Sections.detailing, Sections.other_details",
            "select Sections.section_name, Sections.detailing.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections",
            "Departments Sections",
            "Degree_Programs Sections",
            "Departments Degree_Programs Sections"
        ],
        "align_scores": [
            0.9218162298202515,
            0.00017263756308238953,
            0.00027174624847248197,
            7.773526158416644e-05,
            0.002356203505769372,
            7.904731319285929e-05,
            0.0009834924712777138,
            0.00010489367559785023
        ],
        "align_select": "select Sections.section_name, Sections.detailing",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the names and descriptions for all the sections?",
        "gold_select": "select Sections.section_name, Sections.detailing",
        "select_candidates": [
            "select Sections.section_name, Sections.detailing",
            "select Sections.section_id, Sections.section_name, Sections.detailing",
            "select Sections.section_name, Sections.detailing, Sections.other_details",
            "select Sections.section_name, Sections.detailing.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections",
            "Departments Sections",
            "Degree_Programs Sections",
            "Addresses Departments Sections"
        ],
        "align_scores": [
            0.9331327676773071,
            0.0001708007912384346,
            0.00025909996475093067,
            7.884134538471699e-05,
            0.002153670182451606,
            7.65510558267124e-05,
            0.0009497173596173525,
            0.00010647343151504174
        ],
        "align_select": "select Sections.section_name, Sections.detailing",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the names and id of courses having at most 2 sections?",
        "gold_select": "select Courses.course_designation, Courses.prerequisite",
        "select_candidates": [
            "select Sections.section_name, Sections.course_id",
            "select Courses.course_description, Sections.course_id",
            "select Departments.department_description, Sections.course_id",
            "select Courses.course_description, Courses.course_designation"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Sections",
        "table_candidates": [
            "Courses Sections",
            "Sections",
            "Departments Sections",
            "Courses Departments Sections",
            "Addresses Courses Sections",
            "Courses Degree_Programs Sections",
            "Degree_Programs Sections"
        ],
        "align_scores": [
            0.0005782562075182796,
            7.511364674428478e-05,
            0.6563671231269836,
            8.822919335216284e-05,
            0.000623516330961138,
            6.953517004149035e-05,
            0.13870927691459656,
            0.00010012643178924918
        ],
        "align_select": "select Courses.course_description, Sections.course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the names and ids of every course with less than 2 sections?",
        "gold_select": "select Courses.course_designation, Courses.prerequisite",
        "select_candidates": [
            "select Courses.course_description, Sections.course_id",
            "select Sections.section_name, Sections.course_id",
            "select Departments.department_description, Sections.course_id",
            "select Sections.course_id, Sections.section_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Sections",
        "table_candidates": [
            "Courses Sections",
            "Courses Departments Sections"
        ],
        "align_scores": [
            0.3080536723136902,
            0.0001034657470881939,
            0.0011029489105567336,
            9.628660336602479e-05,
            0.0004784835618920624,
            8.564000017940998e-05,
            0.00045722920913249254,
            8.868020086083561e-05
        ],
        "align_select": "select Courses.course_description, Sections.course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
        "gold_select": "select Students.first_name, Students.middle_name, Students.surname, Students.student_id",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.surname, Students.student_id",
            "select Students.first_name, Students.middle_name, Students.surname, Student_Enrolment.student_enrolment_id",
            "select Student_Enrolment.student_id, Student_Enrolment.other_details, t7.c5, Students.student_id",
            "select Students.first_name, Students.middle_name, Students.surname and Students.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Students Student_Enrolment",
        "table_candidates": [
            "Students Student_Enrolment",
            "Degree_Programs Students Student_Enrolment",
            "Semesters Students Student_Enrolment",
            "Departments Degree_Programs Students Student_Enrolment",
            "Sections Students Student_Enrolment",
            "Courses Students Student_Enrolment",
            "Addresses Students Student_Enrolment",
            "Students Student_Enrolment Degree_Programs Sections Semesters"
        ],
        "align_scores": [
            0.0017828004201874137,
            0.631023108959198,
            0.0014606730546802282,
            0.029674815014004707,
            9.309451706940308e-05,
            0.00014381650544237345,
            0.001954224891960621,
            0.7368359565734863
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.surname and Students.student_id",
        "align_structure": "SELECT-FROM-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "gold_select": "select Students.first_name, Students.middle_name, Students.surname, Students.student_id",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.surname, Students.student_id",
            "select Students.first_name, Students.middle_name, Students.surname",
            "select Students.first_name, Students.middle_name, Students.surname, Students.student_id",
            "select Students.first_name, Students.middle_name, Students.surname ainsi, Students.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Students Student_Enrolment",
        "table_candidates": [
            "Students Student_Enrolment",
            "Degree_Programs Students Student_Enrolment",
            "Semesters Students Student_Enrolment",
            "Departments Degree_Programs Students Student_Enrolment",
            "Sections Students Student_Enrolment",
            "Courses Students Student_Enrolment",
            "Departments Students Student_Enrolment",
            "Students Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.44858548045158386,
            0.9821324348449707,
            0.077341727912426,
            0.6334357857704163,
            0.44858548045158386,
            0.9821324348449707,
            0.0013251909986138344,
            0.0018477600533515215
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.surname, Students.student_id",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "gold_select": "select distinct Students.first_name, Students.middle_name, Students.surname",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.surname",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.surname",
            "select Students.first_name, Students.middle_name, Students.surname",
            "select Student_Enrolment.student_id, Students.middle_name, Students.surname"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Students Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Students Student_Enrolment",
            "Addresses Degree_Programs Students Student_Enrolment",
            "Departments Degree_Programs Students Student_Enrolment",
            "Courses Degree_Programs Students Student_Enrolment",
            "Courses Students Student_Enrolment"
        ],
        "align_scores": [
            0.9891658425331116,
            0.00015250635624397546,
            0.00021450042549986392,
            9.308164590038359e-05,
            0.9891658425331116,
            0.00015250635624397546,
            0.00032358363387174904,
            9.740700625116006e-05
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.surname",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "gold_select": "select distinct Students.first_name, Students.middle_name, Students.surname",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.surname",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.surname",
            "select Students.first_name, Students.middle_name, Students.surname",
            "select Students.first_name., Students.middle_name, Students.surname"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Students Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Students Student_Enrolment"
        ],
        "align_scores": [
            0.9800012707710266,
            0.00012980833707842976,
            0.00017645182379055768,
            8.27442345325835e-05,
            0.9800012707710266,
            0.00012980833707842976,
            0.009525229223072529,
            0.00013210534234531224
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.surname",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the kind of program which most number of students are enrolled in?",
        "gold_select": "select Degree_Programs.degree_digest_designation",
        "select_candidates": [
            "select Degree_Programs.degree_digest_designation",
            "select Degree_Programs.department_id",
            "select Degree_Programs.other_details",
            "select Departments.department_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Student_Enrolment",
            "Courses Degree_Programs Student_Enrolment",
            "Departments Degree_Programs Student_Enrolment",
            "Courses Departments Degree_Programs Student_Enrolment",
            "Sections Degree_Programs Student_Enrolment",
            "Sections Student_Enrolment",
            "Semesters Student_Enrolment"
        ],
        "align_scores": [
            0.8574584126472473,
            9.380500705447048e-05,
            0.054438136518001556,
            9.796816448215395e-05,
            0.9560810327529907,
            9.484568727202713e-05,
            0.733588457107544,
            9.266893903259188e-05
        ],
        "align_select": "select Degree_Programs.degree_digest_designation",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the degree summary name that has the most number of students enrolled?",
        "gold_select": "select Degree_Programs.degree_digest_designation",
        "select_candidates": [
            "select Degree_Programs.degree_summary_description",
            "select Degree_Programs.degree_summary_description, Student_Enrolment.semester_id",
            "select Degree_Programs.degree_summary_description, Student_Enrolment.degree_program_id",
            "select Degree_Programs.degree_summary_description, t7"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Student_Enrolment",
            "Departments Degree_Programs Student_Enrolment",
            "Courses Degree_Programs Student_Enrolment",
            "Addresses Degree_Programs Student_Enrolment"
        ],
        "align_scores": [
            0.9669055938720703,
            8.920486288843676e-05,
            0.0001701495930319652,
            6.747181760147214e-05,
            0.0005197297432459891,
            7.945752440718934e-05,
            0.0005691683036275208,
            6.61686499370262e-05
        ],
        "align_select": "select Degree_Programs.degree_summary_description",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "gold_select": "select Degree_Programs.degree_program_id, Degree_Programs.degree_digest_designation",
        "select_candidates": [
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description",
            "select Student_Enrolment.degree_program_id, Degree_Programs.degree_summary_description",
            "select Degree_Programs.department_id, Degree_Programs.degree_summary_description",
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_digest_designation"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Student_Enrolment",
            "Departments Degree_Programs Student_Enrolment",
            "Courses Degree_Programs Student_Enrolment",
            "Addresses Degree_Programs Student_Enrolment"
        ],
        "align_scores": [
            0.9750778079032898,
            7.978242501849309e-05,
            0.9905809760093689,
            9.149765537586063e-05,
            0.0006655009929090738,
            8.746478852117434e-05,
            0.810180127620697,
            8.721476478967816e-05
        ],
        "align_select": "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the program id and the summary of the degree that has the most students enrolled?",
        "gold_select": "select Degree_Programs.degree_program_id, Degree_Programs.degree_digest_designation",
        "select_candidates": [
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description",
            "select Student_Enrolment.degree_program_id, Degree_Programs.degree_summary_description",
            "select Degree_Programs.department_id, Degree_Programs.degree_summary_description",
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_digest_designation"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Student_Enrolment",
            "Departments Degree_Programs Student_Enrolment",
            "Courses Degree_Programs Student_Enrolment",
            "Addresses Degree_Programs Student_Enrolment"
        ],
        "align_scores": [
            0.9939717650413513,
            0.00010673316864995286,
            0.9915202260017395,
            0.0001234640076290816,
            0.0006964567000977695,
            0.00010278484842274338,
            0.9927690029144287,
            0.00013179656525608152
        ],
        "align_select": "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "gold_select": "select Students.student_id, Students.first_name, Students.middle_name, Students.surname, count(*), Students.student_id",
        "select_candidates": [
            "select Students.student_id, Students.first_name, Students.middle_name, Students.surname, count(*)",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.surname",
            "select Students.student_id, Students.current_address_id, Students.middle_name, Students.surname, count(*)",
            "select Students.current_address_id, Students.first_name, Students.middle_name, Students.surname, count(*), Students.student_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Students Student_Enrolment",
        "table_candidates": [
            "Students Student_Enrolment",
            "Students Student_Enrolment_Courses",
            "Students Transcript_Contents",
            "Students",
            "Students Transcripts"
        ],
        "align_scores": [
            0.17181356251239777,
            0.17181356251239777,
            0.07491402328014374,
            0.07491402328014374,
            0.0002616499550640583,
            0.0002616499550640583,
            0.002565222792327404,
            0.002565222792327404
        ],
        "align_select": "select Students.student_id, Students.first_name, Students.middle_name, Students.surname, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "gold_select": "select Students.student_id, Students.first_name, Students.middle_name, Students.surname, count(*), Students.student_id",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.surname, Students.student_id, count(*)",
            "select Students.first_name, Students.middle_name, Students.surname, Students.student_id, count(registrations)",
            "select Students.first_name, Students.middle_name, Students.surname, Students.student_id, count(Students.student_id)",
            "select Students.first_name, Students.middle_name, Students.surname, Students.student_id, count(Students.date_first_registered)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students Student_Enrolment",
        "table_candidates": [
            "Students Student_Enrolment"
        ],
        "align_scores": [
            0.9868561625480652,
            0.0002066546439891681,
            0.017855927348136902,
            9.79520846158266e-05,
            0.34304019808769226,
            0.0001195554796140641,
            0.0007407882949337363,
            8.509011968271807e-05
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.surname, Students.student_id, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are all the course names of the courses which ever have students enrolled in?",
        "gold_select": "select distinct Courses.course_designation",
        "select_candidates": [
            "select Sections.section_name",
            "select distinct Sections.section_name",
            "select Sections.section_name, Student_Enrolment.degree_program_id",
            "select Sections.course_id, Sections.section_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Student_Enrolment_Courses",
        "table_candidates": [
            "Sections Student_Enrolment",
            "Courses Sections Student_Enrolment",
            "Addresses Courses Sections Student_Enrolment",
            "Departments Sections Student_Enrolment",
            "Addresses Courses Departments Sections Student_Enrolment",
            "Degree_Programs Sections Student_Enrolment",
            "Addresses Courses Departments Student_Enrolment",
            "Departments Student_Enrolment"
        ],
        "align_scores": [
            0.009147576056420803,
            0.02141777239739895,
            0.08443620800971985,
            0.0650697648525238,
            0.00021800601098220795,
            0.00016926592797972262,
            0.0002185506309615448,
            0.00015614663425367326
        ],
        "align_select": "select Sections.section_name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the names of all courses that have some students enrolled?",
        "gold_select": "select distinct Courses.course_designation",
        "select_candidates": [
            "select Sections.section_name",
            "select distinct Sections.section_name",
            "select Sections.section_name, Student_Enrolment.degree_program_id",
            "select Sections.course_id, Sections.section_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Student_Enrolment_Courses",
        "table_candidates": [
            "Courses Sections Student_Enrolment",
            "Sections Student_Enrolment",
            "Addresses Courses Sections Student_Enrolment",
            "Courses Departments Student_Enrolment",
            "Degree_Programs Sections Student_Enrolment",
            "Addresses Courses Departments Student_Enrolment",
            "Departments Sections Student_Enrolment",
            "Departments Student_Enrolment"
        ],
        "align_scores": [
            0.025407234206795692,
            0.17896141111850739,
            0.18959331512451172,
            0.041812796145677567,
            0.00028295250376686454,
            0.0002318468614248559,
            0.0002696302835829556,
            0.0002170794759877026
        ],
        "align_select": "select Sections.section_name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What's the name of the course with most number of enrollments?",
        "gold_select": "select Courses.course_designation",
        "select_candidates": [
            "select Sections.section_name",
            "select Sections.section_name, Student_Enrolment.degree_program_id",
            "select Sections.section_name, Student_Enrolment.semester_id",
            "select Sections.section_name (Student_Enrolment.degree_program_id)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Student_Enrolment_Courses",
        "table_candidates": [
            "Sections Student_Enrolment",
            "Courses Sections Student_Enrolment",
            "Courses Departments Sections Student_Enrolment",
            "Addresses Courses Sections Student_Enrolment",
            "Departments Sections Student_Enrolment",
            "Addresses Courses Departments Sections Student_Enrolment",
            "Degree_Programs Sections Student_Enrolment",
            "Courses Departments Student_Enrolment"
        ],
        "align_scores": [
            0.1637866199016571,
            0.00011565094609977677,
            0.00020771208801306784,
            7.100118818925694e-05,
            0.000164216457051225,
            6.262462557060644e-05,
            0.0004248568438924849,
            8.419941877946258e-05
        ],
        "align_select": "select Sections.section_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the course with the most students enrolled?",
        "gold_select": "select Courses.course_designation",
        "select_candidates": [
            "select Sections.section_name",
            "select Sections.section_name, Student_Enrolment.degree_program_id",
            "select Sections.section_name, Student_Enrolment.student_id",
            "select Sections.section_name (Student_Enrolment.degree_program_id)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Student_Enrolment_Courses",
        "table_candidates": [
            "Sections Student_Enrolment",
            "Courses Sections Student_Enrolment",
            "Addresses Courses Sections Student_Enrolment",
            "Courses Departments Student_Enrolment",
            "Addresses Courses Departments Sections Student_Enrolment",
            "Departments Sections Student_Enrolment",
            "Addresses Courses Departments Student_Enrolment",
            "Degree_Programs Sections Student_Enrolment"
        ],
        "align_scores": [
            0.3064590394496918,
            0.00011340922355884686,
            0.0003033176180906594,
            7.43265773053281e-05,
            0.00027470599161460996,
            6.34002426522784e-05,
            0.0004881802015006542,
            7.966465636854991e-05
        ],
        "align_select": "select Sections.section_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "gold_select": "select Students.surname",
        "select_candidates": [
            "select Students.surname",
            "select Students.surname, Student_Enrolment.degree_program_id",
            "select Students.surname, Students.student_id",
            "select Students.surname, Student_Enrolment.semester_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses Students Student_Enrolment",
        "table_candidates": [
            "Addresses Students Student_Enrolment",
            "Addresses Departments Degree_Programs Students Student_Enrolment",
            "Addresses Courses Students Student_Enrolment",
            "Addresses Semesters Students Student_Enrolment",
            "Addresses Degree_Programs Students Student_Enrolment",
            "Addresses Departments Students Student_Enrolment",
            "Addresses Sections Students Student_Enrolment",
            "Addresses Students"
        ],
        "align_scores": [
            0.6493533849716187,
            0.897577166557312,
            0.0006010551587678492,
            0.0006116130389273167,
            0.00027087220223620534,
            0.00027324556140229106,
            0.0002203996991738677,
            0.00024090895021799952
        ],
        "align_select": "select Students.surname",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
        "gold_select": "select Students.surname",
        "select_candidates": [
            "select Students.surname",
            "select Students.surname, Student_Enrolment.degree_program_id",
            "select Students.surname, Student_Enrolment.semester_id",
            "select Students.surname, Students.ssn"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Addresses Students Student_Enrolment",
        "table_candidates": [
            "Addresses Students Student_Enrolment",
            "Addresses Degree_Programs Students Student_Enrolment",
            "Addresses Departments Degree_Programs Students Student_Enrolment",
            "Addresses Courses Students Student_Enrolment",
            "Addresses Semesters Students Student_Enrolment",
            "Addresses Courses Degree_Programs Students Student_Enrolment",
            "Addresses Sections Students Student_Enrolment",
            "Addresses Departments Students Student_Enrolment"
        ],
        "align_scores": [
            0.630295991897583,
            0.630295991897583,
            0.0003580746124498546,
            0.0003580746124498546,
            0.00018720208026934415,
            0.00018720208026934415,
            0.0012219855561852455,
            0.0012219855561852455
        ],
        "align_select": "select Students.surname",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Show the date and id of the transcript with at least 2 course results.",
        "gold_select": "select Transcripts.when_record, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select t8.c5, Student_Enrolment_Courses.student_course_id",
            "select t9.c5, Transcripts.transcript_id",
            "select t10.c5, Transcript_Contents.student_course_id",
            "select t12.c5, t12.c0"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Transcripts",
            "Student_Enrolment_Courses",
            "Transcript_Contents",
            "Transcripts Transcript_Contents",
            "Semesters Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.00033491497742943466,
            7.959160575410351e-05,
            0.0004819955793209374,
            8.352701843250543e-05,
            0.000260044849710539,
            8.189120853785425e-05,
            0.00026126354350708425,
            5.492345735547133e-05
        ],
        "align_select": "select t8.c5, Student_Enrolment_Courses.student_course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the date and id of the transcript with at least 2 courses listed?",
        "gold_select": "select Transcripts.when_record, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select t10.c5, Transcript_Contents.student_course_id",
            "select t8.c5, Student_Enrolment_Courses.student_course_id",
            "select t14.c5, t14.c0",
            "select t12.c5, t12.c0"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Sections",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Students Student_Enrolment_Courses",
            "Semesters Student_Enrolment_Courses",
            "Degree_Programs Sections",
            "Semesters Student_Enrolment",
            "Student_Enrolment"
        ],
        "align_scores": [
            0.0003613749868236482,
            0.00010315306280972436,
            0.00048488035099580884,
            0.00010358993313275278,
            0.0002626637287903577,
            6.765608122805133e-05,
            0.00023304542992264032,
            6.777684029657394e-05
        ],
        "align_select": "select t10.c5, Transcript_Contents.student_course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "gold_select": "select Students.cell_mobile_number",
        "select_candidates": [
            "select Students.cell_mobile_number",
            "select Students.cell_mobile_number, Students.first_name, Students.surname",
            "select Students.cell_mobile_number - Students.first_name - Students.surname",
            "select Students.cell_mobile_number, Students.email_address"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment",
            "Semesters Students",
            "Degree_Programs Students",
            "Addresses Students",
            "Courses Students",
            "Students Student_Enrolment_Courses",
            "Sections Students"
        ],
        "align_scores": [
            0.974699854850769,
            0.00014105852460488677,
            0.00026041650562547147,
            7.884269871283323e-05,
            0.0008897561929188669,
            8.427396096521989e-05,
            0.00018344457203056663,
            7.524684770032763e-05
        ],
        "align_select": "select Students.cell_mobile_number",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the mobile phone number of the student named Timmothy Ward?",
        "gold_select": "select Students.cell_mobile_number",
        "select_candidates": [
            "select Students.cell_mobile_number",
            "select Students.cell_mobile_number, Students.email_address",
            "select Students.student_id, Students.cell_mobile_number",
            "select Students.cell_mobile_number, Students.surname"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment",
            "Students Student_Enrolment_Courses",
            "Addresses Students",
            "Semesters Students",
            "Courses Students",
            "Degree_Programs Students",
            "Sections Students"
        ],
        "align_scores": [
            0.994962215423584,
            0.0001476516481488943,
            0.00016568230057600886,
            6.326103903120384e-05,
            0.00014179224672261626,
            7.603914855280891e-05,
            0.00014010662562213838,
            7.218091923277825e-05
        ],
        "align_select": "select Students.cell_mobile_number",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who is the first student to register? List the first name, middle name and last name.",
        "gold_select": "select Students.first_name, Students.middle_name, Students.surname",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.surname",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.surname",
            "select Students.first_name, Students.middle_name, Students.surname",
            "select Students.first_name., Students.middle_name, Students.surname"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students Student_Enrolment"
        ],
        "align_scores": [
            0.991004228591919,
            8.784577948972583e-05,
            0.0003006343904417008,
            8.591351797804236e-05,
            0.991004228591919,
            8.784577948972583e-05,
            0.03644539415836334,
            0.00013248869800008833
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.surname",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the first, middle, and last name of the first student to register?",
        "gold_select": "select Students.first_name, Students.middle_name, Students.surname",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.surname",
            "select Students.first_name, Students.middle_name, Students.surname",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.surname",
            "select Students.first_name., Students.middle_name, Students.surname"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students Student_Enrolment"
        ],
        "align_scores": [
            0.9930732846260071,
            0.9930732846260071,
            0.9930732846260071,
            0.9930732846260071,
            0.00025266926968470216,
            0.00025266926968470216,
            0.026372147724032402,
            0.026372147724032402
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.surname",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "gold_select": "select Students.first_name, Students.middle_name, Students.surname",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.surname",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.surname",
            "select Students.first_name, Students.middle_name, Students.surname",
            "select Students.first_name., Students.middle_name, Students.surname"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students Student_Enrolment_Courses",
            "Students",
            "Students Student_Enrolment"
        ],
        "align_scores": [
            0.9917228817939758,
            8.952340431278571e-05,
            0.0002404802362434566,
            9.483075700700283e-05,
            0.9917228817939758,
            8.952340431278571e-05,
            0.036381058394908905,
            0.00014117061800789088
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.surname",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the first, middle, and last name of the earliest school graduate?",
        "gold_select": "select Students.first_name, Students.middle_name, Students.surname",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.surname",
            "select Students.first_name, Students.middle_name, Students.surname",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.surname",
            "select Students.first_name., Students.middle_name, Students.surname"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.9799278974533081,
            0.9799278974533081,
            0.9799278974533081,
            0.9799278974533081,
            0.0002501614799257368,
            0.0002501614799257368,
            0.024715246632695198,
            0.024715246632695198
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.surname",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which address holds the most number of students currently? List the address id and all lines.",
        "gold_select": "select Addresses.address_id, Addresses.line_1, Addresses.path_2",
        "select_candidates": [
            "select Addresses.address_id, Addresses.line_1",
            "select Addresses.address_id, Addresses.line_1, Addresses.line_3",
            "select Addresses.address_id, Addresses.line_1, Addresses.path_2",
            "select Addresses.address_id, Addresses.line_1, Addresses.line_1"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses Students",
        "table_candidates": [
            "Addresses Students"
        ],
        "align_scores": [
            0.0770803689956665,
            0.0001368927041767165,
            0.05413743481040001,
            9.78242969722487e-05,
            0.0009554338175803423,
            7.602152618346736e-05,
            0.0005217546713538468,
            7.963685493450612e-05
        ],
        "align_select": "select Addresses.address_id, Addresses.line_1",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the id, line 1, and line 2 of the address with the most students?",
        "gold_select": "select Addresses.address_id, Addresses.line_1, Addresses.path_2",
        "select_candidates": [
            "select Addresses.address_id, Addresses.line_1, Addresses.path_2",
            "select Addresses.address_id, Addresses.line_1, Addresses.line_3",
            "select student_Addresses.address_id, Addresses.line_1, Addresses.path_2",
            "select student_Addresses.address_id, Addresses.line_1, Addresses.line_3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses Students",
        "table_candidates": [
            "Addresses Students",
            "Addresses Students Student_Enrolment_Courses",
            "Addresses Students Student_Enrolment",
            "Addresses Semesters Students",
            "Addresses Student_Enrolment",
            "Addresses Courses Students",
            "Addresses Sections Students",
            "Addresses Students Transcripts"
        ],
        "align_scores": [
            0.0020090253092348576,
            7.187856681412086e-05,
            0.11979015916585922,
            8.162620360963047e-05,
            0.003438902786001563,
            8.882120891939849e-05,
            0.04276057332754135,
            0.00010382114123785868
        ],
        "align_select": "select Addresses.address_id, Addresses.line_1, Addresses.path_2",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "On average, when were the transcripts printed?",
        "gold_select": "select avg(Transcripts.when_record)",
        "select_candidates": [
            "select avg(t10.c5)",
            "select avg(t9.c5)",
            "select avg(t10.c6)",
            "select avg(t8.c5)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents",
            "Degree_Programs Student_Enrolment",
            "Degree_Programs Transcripts",
            "Degree_Programs Student_Enrolment_Courses",
            "Student_Enrolment"
        ],
        "align_scores": [
            0.0009322114055976272,
            6.943987682461739e-05,
            0.0008784504025243223,
            7.017626921879128e-05,
            0.0009376066154800355,
            7.213730714283884e-05,
            0.0007874134462326765,
            6.90169763402082e-05
        ],
        "align_select": "select avg(t10.c5)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the average transcript date?",
        "gold_select": "select avg(Transcripts.when_record)",
        "select_candidates": [
            "select avg(t10.c5)",
            "select avg(t8.c5)",
            "select avg(t9.c5)",
            "select avg(Student_Enrolment_Courses.course_id0)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcript_Contents",
            "Transcripts",
            "Student_Enrolment_Courses",
            "Student_Enrolment"
        ],
        "align_scores": [
            0.0008267687517218292,
            6.853754166513681e-05,
            0.0005781493382528424,
            6.634594319621101e-05,
            0.0006985721993260086,
            6.814254447817802e-05,
            0.0003834567905869335,
            7.821844337740913e-05
        ],
        "align_select": "select avg(t10.c5)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "When is the first transcript released? List the date and details.",
        "gold_select": "select Transcripts.when_record, Transcripts.other_details",
        "select_candidates": [
            "select t8.c5, t8.c6",
            "select t12.c5, t12.c6",
            "select t14.c5, t14.c6",
            "select t9.c5, t9.c6"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Transcript_Contents",
            "Student_Enrolment_Courses",
            "Courses Student_Enrolment_Courses",
            "Courses",
            "Semesters Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.0027010105550289154,
            6.559818575624377e-05,
            0.003432188183069229,
            6.500201561721042e-05,
            0.0033330332953482866,
            6.414234667317942e-05,
            0.003985732328146696,
            6.380918057402596e-05
        ],
        "align_select": "select t8.c5, t8.c6",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the earliest date of a transcript release, and what details can you tell me?",
        "gold_select": "select Transcripts.when_record, Transcripts.other_details",
        "select_candidates": [
            "select t8.c5, t8.c6",
            "select t8.c5, t8.c3",
            "select t8.c5, t9.c6",
            "select t9.c5, t9.c6"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Transcript_Contents",
            "Student_Enrolment_Courses",
            "Degree_Programs Transcripts",
            "Degree_Programs Student_Enrolment",
            "Degree_Programs Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.0048663136549293995,
            5.8931236708303913e-05,
            0.0014970526099205017,
            5.8504778280621395e-05,
            0.006630921270698309,
            6.100797691033222e-05,
            0.007240882609039545,
            5.778506965725683e-05
        ],
        "align_select": "select t8.c5, t8.c6",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the last transcript release date?",
        "gold_select": "select Transcripts.when_record",
        "select_candidates": [
            "select t8.c5",
            "select t9.c5",
            "select t12.c5",
            "select t13.c5"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Transcript_Contents",
            "Student_Enrolment_Courses",
            "Student_Enrolment"
        ],
        "align_scores": [
            0.0016206601867452264,
            0.002102840691804886,
            0.0012206860119476914,
            0.0018462436273694038,
            0.0013199960812926292,
            0.0013660977128893137,
            0.001179319922812283,
            0.0011387817794457078
        ],
        "align_select": "select t8.c5",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "When was the last transcript released?",
        "gold_select": "select Transcripts.when_record",
        "select_candidates": [
            "select t9.c5",
            "select t8.c5",
            "select t10.c5",
            "select max(t9.c6)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Student_Enrolment_Courses",
            "Transcript_Contents"
        ],
        "align_scores": [
            0.0035708192735910416,
            0.0018900216091424227,
            0.0031066606752574444,
            0.0017735155997797847,
            0.0023133778013288975,
            0.0018672149162739515,
            0.0011097288224846125,
            0.00029309888486750424
        ],
        "align_select": "select t9.c5",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show the date of the transcript which shows the least number of results, also list the id.",
        "gold_select": "select Transcripts.when_record, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select t8.c5, Student_Enrolment_Courses.student_course_id",
            "select t12.c5, t12.c0",
            "select t9.c5, Transcripts.transcript_id",
            "select t10.c5, Transcript_Contents.student_course_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Transcripts",
            "Student_Enrolment_Courses",
            "Transcript_Contents"
        ],
        "align_scores": [
            0.0003171079733874649,
            6.758154631825164e-05,
            0.00014627876225858927,
            5.8941805036738515e-05,
            0.0002827429852914065,
            6.804079021094367e-05,
            0.000223712224396877,
            7.199312676675618e-05
        ],
        "align_select": "select t8.c5, Student_Enrolment_Courses.student_course_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the date and id of the transcript with the least number of results?",
        "gold_select": "select Transcripts.when_record, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select t8.c5, Student_Enrolment_Courses.student_course_id",
            "select t9.c5, Transcripts.transcript_id",
            "select t12.c5, t12.c0",
            "select t14.c5, t14.c0"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Transcripts",
            "Student_Enrolment_Courses",
            "Transcripts Transcript_Contents",
            "Transcript_Contents"
        ],
        "align_scores": [
            0.0002781582297757268,
            9.340823453385383e-05,
            0.00030566350324079394,
            8.446850551990792e-05,
            0.00017189528443850577,
            6.978247984079644e-05,
            0.00017440775991417468,
            6.743721314705908e-05
        ],
        "align_select": "select t8.c5, Student_Enrolment_Courses.student_course_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "gold_select": "select distinct Student_Enrolment.semester_id",
        "select_candidates": [
            "select Semesters.semester_name",
            "select Semesters.semester_name, Degree_Programs.degree_digest_designation",
            "select Semesters.semester_name, Students.current_address_id",
            "select Semesters.semester_name, Students.student_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Students Student_Enrolment",
            "Degree_Programs Semesters Students Student_Enrolment",
            "Departments Degree_Programs Semesters Student_Enrolment",
            "Departments Degree_Programs Semesters Students Student_Enrolment",
            "Degree_Programs Semesters Student_Enrolment",
            "Courses Degree_Programs Students Student_Enrolment",
            "Departments Degree_Programs Students Student_Enrolment",
            "Semesters Students Student_Enrolment"
        ],
        "align_scores": [
            0.9899665117263794,
            0.05180245265364647,
            0.00024952879175543785,
            0.0003890180087182671,
            0.00014668282528873533,
            0.00013928499538451433,
            0.00019081424397882074,
            0.00023126245650928468
        ],
        "align_select": "select Semesters.semester_name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "gold_select": "select distinct Student_Enrolment.semester_id",
        "select_candidates": [
            "select Student_Enrolment.degree_program_id",
            "select Student_Enrolment.student_enrolment_id",
            "select Student_Enrolment.degree_program_id, Degree_Programs.degree_digest_designation",
            "select Student_Enrolment.degree_program_id, Students.current_address_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Student_Enrolment",
            "Departments Degree_Programs Student_Enrolment",
            "Degree_Programs Students Student_Enrolment",
            "Addresses Degree_Programs Student_Enrolment",
            "Courses Degree_Programs Student_Enrolment",
            "Addresses Degree_Programs Students Student_Enrolment",
            "Degree_Programs Student_Enrolment Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.5480988621711731,
            0.0018400880508124828,
            0.20566841959953308,
            0.002169473096728325,
            0.00012807082384824753,
            9.320963727077469e-05,
            0.00010181510879192501,
            9.34489507926628e-05
        ],
        "align_select": "select Student_Enrolment.degree_program_id",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "List all the student details in reversed lexicographical order.",
        "gold_select": "select Students.student_additional_information",
        "select_candidates": [
            "select Students.student_additional_information",
            "select Students.surname, Students.cell_mobile_number",
            "select Students.current_address_id, Students.permanent_address_id",
            "select Student_Enrolment_Courses.course_id, Students.student_additional_information"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment",
            "Students Student_Enrolment_Courses",
            "Semesters Students",
            "Courses Students",
            "Sections Students",
            "Degree_Programs Students"
        ],
        "align_scores": [
            0.9860104322433472,
            0.9860104322433472,
            0.0004474508168641478,
            0.0004474508168641478,
            0.0014509520260617137,
            0.0014509520260617137,
            0.0002631457173265517,
            0.0002631457173265517
        ],
        "align_select": "select Students.student_additional_information",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What other details can you tell me about students in reverse alphabetical order?",
        "gold_select": "select Students.student_additional_information",
        "select_candidates": [
            "select Students.student_additional_information",
            "select Students.surname, Students.first_name",
            "select Students.current_address_id, Students.surname",
            "select Students.surname, Students.cell_mobile_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment_Courses",
            "Students Student_Enrolment",
            "Semesters Students"
        ],
        "align_scores": [
            0.9939537644386292,
            0.9939537644386292,
            0.0018964903429150581,
            0.0018964903429150581,
            0.0002071334165520966,
            0.0002071334165520966,
            0.0006404215819202363,
            0.0006404215819202363
        ],
        "align_select": "select Students.student_additional_information",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Describe the section h.",
        "gold_select": "select Sections.detailing",
        "select_candidates": [
            "select Sections.detailing",
            "select Sections.detailing, Sections.other_details",
            "select Sections.course_id, Sections.detailing",
            "select Sections.course_id, Sections.section_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections",
            "Departments Sections",
            "Degree_Programs Sections",
            "Addresses Sections",
            "Addresses Courses Departments Sections",
            "Addresses Courses Sections",
            "Courses Sections",
            "Addresses Courses Degree_Programs Sections"
        ],
        "align_scores": [
            0.9877772927284241,
            7.870065746828914e-05,
            0.00028235773788765073,
            5.1647039072122425e-05,
            0.00014649076911155134,
            5.770941061200574e-05,
            0.0001578863593749702,
            6.170882988953963e-05
        ],
        "align_select": "select Sections.detailing",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the description for the section named h?",
        "gold_select": "select Sections.detailing",
        "select_candidates": [
            "select Sections.detailing",
            "select Sections.detailing, Sections.other_details",
            "select Sections.course_id, Sections.detailing",
            "select Sections.course_id, Sections.section_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections",
            "Departments Sections",
            "Degree_Programs Sections",
            "Addresses Courses Departments Sections",
            "Addresses Courses Sections",
            "Courses Sections",
            "Addresses Courses Degree_Programs Sections",
            "Addresses Sections"
        ],
        "align_scores": [
            0.9814949035644531,
            7.018751057330519e-05,
            0.00025075607118196785,
            5.3837477025808766e-05,
            0.00017278625455219299,
            6.009668140904978e-05,
            0.00016415979189332575,
            5.8680339861894026e-05
        ],
        "align_select": "select Sections.detailing",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "what are all the addresses including line 1 and line 2?",
        "gold_select": "select Addresses.line_1, Addresses.path_2",
        "select_candidates": [
            "select Addresses.other_address_details",
            "select Addresses.address_id",
            "select Addresses.address_id, Addresses.line_1, Addresses.path_2",
            "select Addresses.line_1, Addresses.path_2"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Addresses",
        "table_candidates": [
            "Addresses"
        ],
        "align_scores": [
            0.9819408655166626,
            0.9932276606559753,
            0.030414875596761703,
            0.9460464715957642,
            0.00013147170830052346,
            0.0001277444389415905,
            0.0007843150524422526,
            0.000327605550410226
        ],
        "align_select": "select Addresses.other_address_details",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the first and second line for all addresses?",
        "gold_select": "select Addresses.line_1, Addresses.path_2",
        "select_candidates": [
            "select Addresses.line_1, Addresses.path_2",
            "select Addresses.line_1, Addresses.line_3",
            "select distinct Addresses.line_1, Addresses.path_2",
            "select Addresses.address_id, Addresses.line_1, Addresses.path_2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses",
        "table_candidates": [
            "Addresses"
        ],
        "align_scores": [
            0.0005608721985481679,
            0.00010290175123373047,
            0.0020982029382139444,
            7.360510062426329e-05,
            0.00046497920993715525,
            0.00010662116255844012,
            0.00017084558203350753,
            8.594613609602675e-05
        ],
        "align_select": "select Addresses.line_1, Addresses.path_2",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many different degree names are offered?",
        "gold_select": "select count(distinct Degree_Programs.summary_appellation)",
        "select_candidates": [
            "select count(distinct Degree_Programs.degree_summary_description)",
            "select count(distinct Degree_Programs.summary_appellation)",
            "select count(distinct Degree_Programs.department_id)",
            "select count(distinct t3.c6)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Degree_Programs",
        "table_candidates": [
            "Degree_Programs"
        ],
        "align_scores": [
            0.0013745020842179656,
            0.0013745020842179656,
            0.9911121726036072,
            0.9911121726036072,
            0.0006596558378078043,
            0.0006596558378078043,
            0.0006718829390592873,
            0.0006718829390592873
        ],
        "align_select": "select count(distinct Degree_Programs.summary_appellation)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many different degrees are offered?",
        "gold_select": "select count(distinct Degree_Programs.summary_appellation)",
        "select_candidates": [
            "select count(distinct Degree_Programs.degree_program_id)",
            "select count(distinct Degree_Programs.department_id)",
            "select count(distinct Degree_Programs.summary_appellation)",
            "select count(distinct Degree_Programs.degree_summary_description)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Degree_Programs",
        "table_candidates": [
            "Degree_Programs"
        ],
        "align_scores": [
            0.20532940328121185,
            0.20532940328121185,
            0.0015694212634116411,
            0.0015694212634116411,
            0.009241761639714241,
            0.009241761639714241,
            0.004444865044206381,
            0.004444865044206381
        ],
        "align_select": "select count(distinct Degree_Programs.degree_program_id)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the names and descriptions of all the sections?",
        "gold_select": "select Sections.session_name, Sections.section_description",
        "select_candidates": [
            "select Sections.session_name, Sections.section_description",
            "select Sections.course_id, Sections.section_description",
            "select Sections.section_description, Sections.session_name",
            "select Sections.section_id, Sections.section_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections"
        ],
        "align_scores": [
            0.8424438834190369,
            0.00018016553076449782,
            0.000361380516551435,
            0.00010768564243335277,
            0.061789628118276596,
            0.00016045400116126984,
            0.0003678014618344605,
            0.00010789614316308871
        ],
        "align_select": "select Sections.session_name, Sections.section_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the names and descriptions for all the sections?",
        "gold_select": "select Sections.session_name, Sections.section_description",
        "select_candidates": [
            "select Sections.session_name, Sections.section_description",
            "select Sections.course_id, Sections.section_description",
            "select Sections.section_description, Sections.session_name",
            "select Sections.section_id, Sections.section_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections"
        ],
        "align_scores": [
            0.9458560347557068,
            0.00016881914052646607,
            0.00039358739741146564,
            0.00011797880142694339,
            0.07834687829017639,
            0.0001548510481370613,
            0.00038678068085573614,
            0.00011717493907781318
        ],
        "align_select": "select Sections.session_name, Sections.section_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the names and id of courses having at most 2 sections?",
        "gold_select": "select Courses.course_name, Courses.prerequisite",
        "select_candidates": [
            "select Courses.course_name, Sections.course_id",
            "select Courses.course_name, Sections.section_id",
            "select Courses.course_name, Courses.course_name",
            "select Courses.course_name, Departments.department_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Sections",
        "table_candidates": [
            "Courses Sections",
            "Courses Departments Sections"
        ],
        "align_scores": [
            0.9818539023399353,
            8.789372077444568e-05,
            0.0014302070485427976,
            7.769982767058536e-05,
            0.00045331192086450756,
            7.554176409030333e-05,
            0.00020601249707397074,
            5.9528363635763526e-05
        ],
        "align_select": "select Courses.course_name, Sections.course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the names and ids of every course with less than 2 sections?",
        "gold_select": "select Courses.course_name, Courses.prerequisite",
        "select_candidates": [
            "select Courses.course_name, Sections.course_id",
            "select Courses.course_name, Sections.section_id",
            "select Courses.course_name, Departments.department_name",
            "select Courses.course_name, Sections.course_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Sections",
        "table_candidates": [
            "Courses Sections"
        ],
        "align_scores": [
            0.5916458368301392,
            0.00010785067570395768,
            0.0009976641740649939,
            0.00010564413241809234,
            0.00018012913642451167,
            7.815357093932107e-05,
            0.5916458368301392,
            0.00010785067570395768
        ],
        "align_select": "select Courses.course_name, Sections.course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List the section_name in reversed lexicographical order.",
        "gold_select": "select Sections.session_name",
        "select_candidates": [
            "select Sections.course_id",
            "select Sections.section_description",
            "select Sections.other_details",
            "select Sections.session_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections",
            "Departments Sections",
            "Degree_Programs Sections",
            "Courses Sections",
            "Addresses Sections",
            "Departments Degree_Programs Sections",
            "Addresses Departments Sections",
            "Addresses Courses Sections"
        ],
        "align_scores": [
            0.00041131876059807837,
            0.00041131876059807837,
            0.0009788934839889407,
            0.0009788934839889407,
            0.001617800211533904,
            0.001617800211533904,
            0.9946526288986206,
            0.9946526288986206
        ],
        "align_select": "select Sections.session_name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the names of the sections in reverse alphabetical order?",
        "gold_select": "select Sections.session_name",
        "select_candidates": [
            "select Sections.section_description",
            "select Sections.section_description, Sections.session_name",
            "select Sections.course_id",
            "select Sections.session_name, Sections.section_description"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections",
            "Departments Sections",
            "Degree_Programs Sections"
        ],
        "align_scores": [
            0.01933187060058117,
            0.01933187060058117,
            0.00022872617410030216,
            0.00022872617410030216,
            0.002079916186630726,
            0.002079916186630726,
            0.00029194954549893737,
            0.00029194954549893737
        ],
        "align_select": "select Sections.section_description",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What is the semester which most student registered in? Show both the name and the id.",
        "gold_select": "select Semesters.semester_designation, Semesters.semester_id",
        "select_candidates": [
            "select Semesters.semester_designation, Student_Enrolment.student_enrolment_id",
            "select Semesters.semester_description, Semesters.semester_id",
            "select Semesters.semester_description, Student_Enrolment.degree_program_id",
            "select Semesters.semester_description, Student_Enrolment.student_enrolment_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Semesters Student_Enrolment",
        "table_candidates": [
            "Semesters Student_Enrolment",
            "Degree_Programs Semesters Student_Enrolment",
            "Departments Semesters Student_Enrolment",
            "Courses Student_Enrolment"
        ],
        "align_scores": [
            0.003417821368202567,
            9.365681034978479e-05,
            0.9910229444503784,
            7.292363443411887e-05,
            0.0004044498782604933,
            8.914346835808828e-05,
            0.001303663244470954,
            8.639726002002135e-05
        ],
        "align_select": "select Semesters.semester_description, Semesters.semester_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "For each semester, what is the name and id of the one with the most students registered?",
        "gold_select": "select Semesters.semester_designation, Semesters.semester_id",
        "select_candidates": [
            "select Semesters.semester_description, Semesters.semester_id",
            "select Semesters.semester_designation, Semesters.semester_id",
            "select Semesters.semester_description, Student_Enrolment.student_enrolment_id",
            "select Semesters.semester_description, Student_Enrolment.degree_program_id"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Semesters Student_Enrolment",
        "table_candidates": [
            "Semesters Student_Enrolment",
            "Courses Semesters Student_Enrolment",
            "Degree_Programs Semesters Student_Enrolment",
            "Departments Semesters Student_Enrolment",
            "Sections Semesters Student_Enrolment"
        ],
        "align_scores": [
            0.9871079325675964,
            0.0001396270381519571,
            0.9911823272705078,
            0.00014876059140078723,
            0.001349206198938191,
            0.00013204435526859015,
            0.002450505504384637,
            0.00015061938029248267
        ],
        "align_select": "select Semesters.semester_description, Semesters.semester_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "gold_select": "select distinct Students.first_name, Students.middle_name, Students.last_name",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.last_name",
            "select distinct Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name, Students.middle_name, Students.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Students Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Students Student_Enrolment",
            "Departments Degree_Programs Students Student_Enrolment",
            "Addresses Degree_Programs Students Student_Enrolment",
            "Courses Degree_Programs Students Student_Enrolment"
        ],
        "align_scores": [
            0.986777126789093,
            0.00014054845087230206,
            0.00022958552290219814,
            9.157980821328238e-05,
            0.027531510218977928,
            6.963796477066353e-05,
            0.986777126789093,
            0.00014054845087230206
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "gold_select": "select distinct Students.first_name, Students.middle_name, Students.last_name",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name., Students.middle_name, Students.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Students Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Students Student_Enrolment"
        ],
        "align_scores": [
            0.9808099865913391,
            0.00011929730681004003,
            0.00017432561435271055,
            8.177719428204e-05,
            0.9808099865913391,
            0.00011929730681004003,
            0.009363340213894844,
            0.00010620704415487126
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the kind of program which most number of students are enrolled in?",
        "gold_select": "select Degree_Programs.summary_appellation",
        "select_candidates": [
            "select Degree_Programs.summary_appellation",
            "select Degree_Programs.department_id",
            "select Degree_Programs.other_details",
            "select Departments.department_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Student_Enrolment",
            "Courses Degree_Programs Student_Enrolment",
            "Departments Degree_Programs Student_Enrolment",
            "Courses Departments Degree_Programs Student_Enrolment",
            "Sections Degree_Programs Student_Enrolment",
            "Sections Student_Enrolment",
            "Semesters Student_Enrolment"
        ],
        "align_scores": [
            0.9801191091537476,
            9.545568173052743e-05,
            0.054438136518001556,
            9.796816448215395e-05,
            0.9560810327529907,
            9.484568727202713e-05,
            0.733588457107544,
            9.266893903259188e-05
        ],
        "align_select": "select Degree_Programs.summary_appellation",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the degree summary name that has the most number of students enrolled?",
        "gold_select": "select Degree_Programs.summary_appellation",
        "select_candidates": [
            "select Degree_Programs.degree_summary_description",
            "select Degree_Programs.degree_summary_description, Student_Enrolment.semester_id",
            "select Degree_Programs.degree_summary_description, Student_Enrolment.degree_program_id",
            "select Degree_Programs.degree_summary_description (Student_Enrolment.semester_id)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Student_Enrolment",
            "Departments Degree_Programs Student_Enrolment",
            "Courses Degree_Programs Student_Enrolment",
            "Addresses Degree_Programs Student_Enrolment"
        ],
        "align_scores": [
            0.9669055938720703,
            8.920486288843676e-05,
            0.0001701495930319652,
            6.747181760147214e-05,
            0.0005197297432459891,
            7.945752440718934e-05,
            0.00032964636920951307,
            7.338754221564159e-05
        ],
        "align_select": "select Degree_Programs.degree_summary_description",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "gold_select": "select Degree_Programs.degree_program_id, Degree_Programs.summary_appellation",
        "select_candidates": [
            "select Degree_Programs.degree_program_id, Degree_Programs.summary_appellation",
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description",
            "select Degree_Programs.department_id, Degree_Programs.summary_appellation",
            "select Student_Enrolment.degree_program_id, Degree_Programs.summary_appellation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Student_Enrolment",
            "Departments Degree_Programs Student_Enrolment",
            "Courses Degree_Programs Student_Enrolment",
            "Addresses Degree_Programs Student_Enrolment"
        ],
        "align_scores": [
            0.2290387898683548,
            9.502130706096068e-05,
            0.9750778079032898,
            7.978242501849309e-05,
            0.0010451811831444502,
            8.588158380007371e-05,
            0.8424087762832642,
            0.00011327445099595934
        ],
        "align_select": "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the program id and the summary of the degree that has the most students enrolled?",
        "gold_select": "select Degree_Programs.degree_program_id, Degree_Programs.summary_appellation",
        "select_candidates": [
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description",
            "select Degree_Programs.degree_program_id, Degree_Programs.summary_appellation",
            "select Degree_Programs.department_id, Degree_Programs.degree_summary_description",
            "select Student_Enrolment.degree_program_id, Degree_Programs.degree_summary_description"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Student_Enrolment",
            "Departments Degree_Programs Student_Enrolment",
            "Courses Degree_Programs Student_Enrolment",
            "Addresses Degree_Programs Student_Enrolment"
        ],
        "align_scores": [
            0.9939717650413513,
            0.00010673316864995286,
            0.751034677028656,
            0.00011199558502994478,
            0.0006964567000977695,
            0.00010278484842274338,
            0.9915202260017395,
            0.0001234640076290816
        ],
        "align_select": "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which semesters do not have any student enrolled? List the semester name.",
        "gold_select": "select Semesters.semester_designation",
        "select_candidates": [
            "select Semesters.semester_description",
            "select Semesters.semester_designation",
            "select Semesters.semester_id, Semesters.semester_description",
            "select Semesters.semester_description, Semesters.semester_designation"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Semesters",
        "table_candidates": [
            "Semesters Student_Enrolment",
            "Semesters"
        ],
        "align_scores": [
            0.9885672330856323,
            0.0013406510697677732,
            0.9351187348365784,
            0.0012068299110978842,
            0.00019781569426413625,
            0.00013308366760611534,
            0.00034795477404259145,
            0.00011079380055889487
        ],
        "align_select": "select Semesters.semester_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name of the semester with no students enrolled?",
        "gold_select": "select Semesters.semester_designation",
        "select_candidates": [
            "select Semesters.semester_description",
            "select Semesters.semester_description, Student_Enrolment.degree_program_id",
            "select Semesters.semester_id, Semesters.semester_description",
            "select Semesters.semester_description, Semesters.semester_designation"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Semesters",
        "table_candidates": [
            "Semesters Student_Enrolment",
            "Semesters Students Student_Enrolment",
            "Sections Semesters Student_Enrolment"
        ],
        "align_scores": [
            0.8974409103393555,
            0.21398738026618958,
            0.00013188720913603902,
            0.00020780063641723245,
            0.00016726969624869525,
            0.00027034434606321156,
            0.00024001891142688692,
            0.00035326764918863773
        ],
        "align_select": "select Semesters.semester_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are all the course names of the courses which ever have students enrolled in?",
        "gold_select": "select distinct Courses.course_name",
        "select_candidates": [
            "select Courses.course_name",
            "select distinct Courses.course_name",
            "select Courses.course_name, Student_Enrolment.semester_id",
            "select distinct Courses.course_name, Student_Enrolment.semester_id"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Student_Enrolment_Courses",
        "table_candidates": [
            "Courses Student_Enrolment",
            "Addresses Courses Student_Enrolment",
            "Courses"
        ],
        "align_scores": [
            0.2931239604949951,
            0.5346075892448425,
            0.6637301445007324,
            0.23494678735733032,
            0.00018574146088212729,
            0.00013357096759136766,
            0.0007133462349884212,
            0.0002844832488335669
        ],
        "align_select": "select distinct Courses.course_name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the names of all courses that have some students enrolled?",
        "gold_select": "select distinct Courses.course_name",
        "select_candidates": [
            "select Courses.course_name",
            "select Courses.course_name, Student_Enrolment.semester_id",
            "select distinct Courses.course_name",
            "select Courses.course_name, Student_Enrolment.semester_id, Courses.other_details"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Student_Enrolment_Courses",
        "table_candidates": [
            "Courses Student_Enrolment",
            "Courses Sections Student_Enrolment",
            "Addresses Courses Student_Enrolment",
            "Courses Students Student_Enrolment",
            "Addresses Courses Sections Student_Enrolment",
            "Courses Student_Enrolment Sections Student_Enrolment",
            "Courses Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.551201581954956,
            0.002212381921708584,
            0.00021062884479761124,
            9.988849342335016e-05,
            0.7273216247558594,
            0.02663128636777401,
            0.0001708072959445417,
            7.943177479319274e-05
        ],
        "align_select": "select Courses.course_name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What's the name of the course with most number of enrollments?",
        "gold_select": "select Courses.course_name",
        "select_candidates": [
            "select Courses.course_name",
            "select Courses.course_name, Student_Enrolment.semester_id",
            "select Courses.course_name, Student_Enrolment.degree_program_id",
            "select Courses.course_name, Student_Enrolment.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Student_Enrolment_Courses",
        "table_candidates": [
            "Courses Student_Enrolment",
            "Courses Sections Student_Enrolment",
            "Addresses Courses Student_Enrolment",
            "Courses Students Student_Enrolment"
        ],
        "align_scores": [
            0.993316650390625,
            7.668754551559687e-05,
            0.00018518335127737373,
            5.738792606280185e-05,
            0.00032359748729504645,
            7.3623625212349e-05,
            0.00021926697809249163,
            5.8663164963945746e-05
        ],
        "align_select": "select Courses.course_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the course with the most students enrolled?",
        "gold_select": "select Courses.course_name",
        "select_candidates": [
            "select Courses.course_name",
            "select Courses.course_name, Student_Enrolment.semester_id",
            "select Courses.course_name, Student_Enrolment.degree_program_id",
            "select Courses.course_name, Student_Enrolment.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Student_Enrolment_Courses",
        "table_candidates": [
            "Courses Student_Enrolment",
            "Courses Sections Student_Enrolment",
            "Courses Degree_Programs Sections Student_Enrolment",
            "Courses Departments Sections Student_Enrolment",
            "Courses Students Student_Enrolment",
            "Courses Semesters Student_Enrolment",
            "Addresses Courses Sections Student_Enrolment",
            "Addresses Courses Student_Enrolment"
        ],
        "align_scores": [
            0.9938240051269531,
            9.257812780560926e-05,
            0.0002235152351204306,
            5.977906403131783e-05,
            0.00037019664887338877,
            6.849043711554259e-05,
            0.00022561242803931236,
            6.145900260889903e-05
        ],
        "align_select": "select Courses.course_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the date and id of the transcript with at least 2 course results.",
        "gold_select": "select Transcripts.record_time, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select t8.c5, Student_Enrolment_Courses.student_course_id",
            "select t10.c5, Transcript_Contents.student_course_id",
            "select t9.c5, Transcripts.transcript_id",
            "select t12.c5, t12.c0"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents",
            "Semesters Student_Enrolment_Courses",
            "Transcripts Transcript_Contents",
            "Semesters Student_Enrolment",
            "Student_Enrolment_Courses Transcripts"
        ],
        "align_scores": [
            0.00033491497742943466,
            7.959160575410351e-05,
            0.000260044849710539,
            8.189120853785425e-05,
            0.0004819955793209374,
            8.352701843250543e-05,
            0.00026126354350708425,
            5.492345735547133e-05
        ],
        "align_select": "select t8.c5, Student_Enrolment_Courses.student_course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the date and id of the transcript with at least 2 courses listed?",
        "gold_select": "select Transcripts.record_time, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select t10.c5, Transcript_Contents.student_course_id",
            "select t14.c5, t14.c0",
            "select t8.c5, Student_Enrolment_Courses.student_course_id",
            "select t12.c5, t12.c0"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Sections",
            "Courses Student_Enrolment_Courses",
            "Student_Enrolment_Courses",
            "Courses Sections",
            "Transcripts",
            "Courses Student_Enrolment",
            "Courses Transcripts",
            "Semesters Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.0003613749868236482,
            0.00010315306280972436,
            0.0002626637287903577,
            6.765608122805133e-05,
            0.00048488035099580884,
            0.00010358993313275278,
            0.00023304542992264032,
            6.777684029657394e-05
        ],
        "align_select": "select t10.c5, Transcript_Contents.student_course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Who is the first student to register? List the first name, middle name and last name.",
        "gold_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name., Students.middle_name, Students.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students Student_Enrolment",
            "Semesters Students Student_Enrolment"
        ],
        "align_scores": [
            0.9893518090248108,
            8.778733172221109e-05,
            0.0003172001743223518,
            8.653957775095478e-05,
            0.9893518090248108,
            8.778733172221109e-05,
            0.04225272312760353,
            0.00012974349374417216
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the first, middle, and last name of the first student to register?",
        "gold_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select t6, Students.first_name, Students.middle_name, Students.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students Student_Enrolment"
        ],
        "align_scores": [
            0.9915536046028137,
            6.869819480925798e-05,
            0.0002769040293060243,
            8.065992005867884e-05,
            0.9915536046028137,
            6.869819480925798e-05,
            0.0002970759815070778,
            5.85028828936629e-05
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which address holds the most number of students currently? List the address id and all lines.",
        "gold_select": "select Addresses.address_id, Addresses.line_1, Addresses.path_2",
        "select_candidates": [
            "select Addresses.address_id, Addresses.line_1",
            "select Addresses.address_id, Addresses.line_1, Addresses.line_3",
            "select Addresses.address_id, Addresses.line_1, Addresses.path_2",
            "select Addresses.address_id, Addresses.line_1, Addresses.line_1"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses Students",
        "table_candidates": [
            "Addresses Students",
            "Addresses Semesters Students",
            "Addresses Courses Students",
            "Addresses Students Student_Enrolment_Courses",
            "Addresses Students Student_Enrolment"
        ],
        "align_scores": [
            0.0770803689956665,
            0.0001368927041767165,
            0.05413743481040001,
            9.78242969722487e-05,
            0.0009554338175803423,
            7.602152618346736e-05,
            0.0005217546713538468,
            7.963685493450612e-05
        ],
        "align_select": "select Addresses.address_id, Addresses.line_1",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the id, line 1, and line 2 of the address with the most students?",
        "gold_select": "select Addresses.address_id, Addresses.line_1, Addresses.path_2",
        "select_candidates": [
            "select Addresses.address_id, Addresses.line_1, Addresses.path_2",
            "select Addresses.address_id, Addresses.line_1, Addresses.line_3",
            "select student_Addresses.address_id, Addresses.line_1, Addresses.path_2",
            "select student_Addresses.address_id, Addresses.line_1, Addresses.line_3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses Students",
        "table_candidates": [
            "Addresses Students",
            "Addresses Students Student_Enrolment_Courses",
            "Addresses Semesters Students",
            "Addresses Students Student_Enrolment",
            "Addresses Sections Students",
            "Addresses Student_Enrolment",
            "Addresses Courses Students",
            "Addresses Students Transcripts"
        ],
        "align_scores": [
            0.0020090253092348576,
            7.187856681412086e-05,
            0.11979015916585922,
            8.162620360963047e-05,
            0.003438902786001563,
            8.882120891939849e-05,
            0.04276057332754135,
            0.00010382114123785868
        ],
        "align_select": "select Addresses.address_id, Addresses.line_1, Addresses.path_2",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "On average, when were the transcripts printed?",
        "gold_select": "select avg(Transcripts.record_time)",
        "select_candidates": [
            "select avg(t10.c5)",
            "select avg(t9.c5)",
            "select avg(t14.c5)",
            "select avg(t8.c5)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents",
            "Student_Enrolment",
            "Sections"
        ],
        "align_scores": [
            0.0009322114055976272,
            6.943987682461739e-05,
            0.0008784504025243223,
            7.017626921879128e-05,
            0.0007650366751477122,
            7.242279389174655e-05,
            0.0007874134462326765,
            6.90169763402082e-05
        ],
        "align_select": "select avg(t10.c5)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the average transcript date?",
        "gold_select": "select avg(Transcripts.record_time)",
        "select_candidates": [
            "select avg(t10.c5)",
            "select avg(t8.c5)",
            "select avg(Student_Enrolment_Courses.course_id0)",
            "select avg(t9.c5)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcript_Contents",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Student_Enrolment",
            "Semesters",
            "Sections"
        ],
        "align_scores": [
            0.0008267687517218292,
            6.853754166513681e-05,
            0.0005781493382528424,
            6.634594319621101e-05,
            0.0003834567905869335,
            7.821844337740913e-05,
            0.0006985721993260086,
            6.814254447817802e-05
        ],
        "align_select": "select avg(t10.c5)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "When is the first transcript released? List the date and details.",
        "gold_select": "select Transcripts.record_time, Transcripts.particularities",
        "select_candidates": [
            "select t8.c5, t8.c6",
            "select t12.c5, t12.c6",
            "select t8.c5, t9.c6",
            "select t9.c5, t9.c6"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Student_Enrolment_Courses",
            "Transcript_Contents",
            "Courses Student_Enrolment_Courses",
            "Semesters Student_Enrolment_Courses",
            "Courses",
            "Semesters Student_Enrolment"
        ],
        "align_scores": [
            0.0027010105550289154,
            6.559818575624377e-05,
            0.003432188183069229,
            6.500201561721042e-05,
            0.0022732701618224382,
            6.582779315067455e-05,
            0.003985732328146696,
            6.380918057402596e-05
        ],
        "align_select": "select t8.c5, t8.c6",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the earliest date of a transcript release, and what details can you tell me?",
        "gold_select": "select Transcripts.record_time, Transcripts.particularities",
        "select_candidates": [
            "select t8.c5, t8.c6",
            "select t8.c5, t9.c6",
            "select t10.c5, t10.c6",
            "select t9.c5, t9.c6"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Transcript_Contents",
            "Student_Enrolment_Courses",
            "Student_Enrolment"
        ],
        "align_scores": [
            0.0048663136549293995,
            5.8931236708303913e-05,
            0.006630921270698309,
            6.100797691033222e-05,
            0.006500896532088518,
            5.907070590183139e-05,
            0.007240882609039545,
            5.778506965725683e-05
        ],
        "align_select": "select t8.c5, t8.c6",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the last transcript release date?",
        "gold_select": "select Transcripts.record_time",
        "select_candidates": [
            "select t8.c5",
            "select t12.c5",
            "select t9.c5",
            "select t10.c5"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Student_Enrolment_Courses",
            "Transcript_Contents",
            "Student_Enrolment"
        ],
        "align_scores": [
            0.0016206601867452264,
            0.002102840691804886,
            0.0013199960812926292,
            0.0013660977128893137,
            0.0012206860119476914,
            0.0018462436273694038,
            0.0012922455789521337,
            0.001205944106914103
        ],
        "align_select": "select t8.c5",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "When was the last transcript released?",
        "gold_select": "select Transcripts.record_time",
        "select_candidates": [
            "select t8.c5",
            "select t9.c5",
            "select t10.c5",
            "select t12.c5"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Student_Enrolment_Courses",
            "Transcript_Contents",
            "Student_Enrolment",
            "Sections"
        ],
        "align_scores": [
            0.0031066606752574444,
            0.0017735155997797847,
            0.0035708192735910416,
            0.0018900216091424227,
            0.0023133778013288975,
            0.0018672149162739515,
            0.0019888870883733034,
            0.001616964815184474
        ],
        "align_select": "select t8.c5",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show the date of the transcript which shows the least number of results, also list the id.",
        "gold_select": "select Transcripts.record_time, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select t12.c5, t12.c0",
            "select t8.c5, Student_Enrolment_Courses.student_course_id",
            "select t10.c5, Transcript_Contents.student_course_id",
            "select t9.c5, Transcripts.transcript_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "align_scores": [
            0.00014627876225858927,
            5.8941805036738515e-05,
            0.0003171079733874649,
            6.758154631825164e-05,
            0.000223712224396877,
            7.199312676675618e-05,
            0.0002827429852914065,
            6.804079021094367e-05
        ],
        "align_select": "select t12.c5, t12.c0",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the date and id of the transcript with the least number of results?",
        "gold_select": "select Transcripts.record_time, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select t8.c5, Student_Enrolment_Courses.student_course_id",
            "select t14.c3, t14.c0",
            "select t14.c5, t14.c0",
            "select t9.c5, Transcripts.transcript_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Transcripts",
            "Student_Enrolment_Courses",
            "Sections Student_Enrolment_Courses",
            "Semesters Student_Enrolment",
            "Semesters Student_Enrolment_Courses",
            "Transcripts Transcript_Contents"
        ],
        "align_scores": [
            0.0002781582297757268,
            9.340823453385383e-05,
            0.0001712680095806718,
            6.759991811122745e-05,
            0.00017440775991417468,
            6.743721314705908e-05,
            0.00030566350324079394,
            8.446850551990792e-05
        ],
        "align_select": "select t8.c5, Student_Enrolment_Courses.student_course_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "gold_select": "select distinct Student_Enrolment.semester_id",
        "select_candidates": [
            "select Student_Enrolment.degree_program_id",
            "select Student_Enrolment.degree_program_id, Degree_Programs.summary_appellation",
            "select Student_Enrolment.degree_program_id, Students.current_address_id",
            "select Student_Enrolment.degree_program_id, Students.student_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Students Student_Enrolment",
            "Degree_Programs Student_Enrolment",
            "Departments Degree_Programs Student_Enrolment",
            "Degree_Programs Semesters Students Student_Enrolment",
            "Degree_Programs Semesters Student_Enrolment",
            "Courses Degree_Programs Students Student_Enrolment",
            "Courses Degree_Programs Student_Enrolment",
            "Semesters Students Student_Enrolment"
        ],
        "align_scores": [
            0.04859685152769089,
            0.01087240595370531,
            0.00026902221725322306,
            0.0002739678602665663,
            0.00016600506205577403,
            0.0001636852539377287,
            0.00032690571970306337,
            0.00041032873559743166
        ],
        "align_select": "select Student_Enrolment.degree_program_id",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "gold_select": "select distinct Student_Enrolment.semester_id",
        "select_candidates": [
            "select Sections.section_id",
            "select Sections.course_id",
            "select Semesters.semester_id",
            "select Students.student_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Student_Enrolment",
            "Degree_Programs Students Student_Enrolment",
            "Departments Degree_Programs Student_Enrolment",
            "Addresses Degree_Programs Student_Enrolment",
            "Courses Degree_Programs Student_Enrolment",
            "Addresses Degree_Programs Students Student_Enrolment",
            "Degree_Programs Students Student_Enrolment Student_Enrolment_Courses",
            "Degree_Programs Student_Enrolment Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.3166746199131012,
            0.014200400561094284,
            0.026519732549786568,
            0.0008575108950026333,
            0.9945153594017029,
            0.10311560332775116,
            0.0017202097224071622,
            0.0003913787950295955
        ],
        "align_select": "select Semesters.semester_id",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Describe the section h.",
        "gold_select": "select Sections.section_description",
        "select_candidates": [
            "select Sections.section_description",
            "select Sections.section_description, Sections.other_details",
            "select Sections.course_id, Sections.section_description",
            "select Sections.course_id, Sections.session_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections",
            "Departments Sections",
            "Degree_Programs Sections",
            "Addresses Sections",
            "Courses Sections",
            "Sections Transcripts",
            "Sections Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.9962899684906006,
            7.471145363524556e-05,
            0.0002371075242990628,
            5.484631401486695e-05,
            0.00013949409185443074,
            5.9773192333523184e-05,
            0.00014575426757801324,
            6.028966527082957e-05
        ],
        "align_select": "select Sections.section_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the description for the section named h?",
        "gold_select": "select Sections.section_description",
        "select_candidates": [
            "select Sections.section_description",
            "select Sections.section_description, Sections.other_details",
            "select Sections.section_description, Sections.session_name",
            "select Sections.section_description, t4.c6"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections",
            "Departments Sections",
            "Degree_Programs Sections",
            "Addresses Sections",
            "Courses Sections"
        ],
        "align_scores": [
            0.9964627623558044,
            7.606278813909739e-05,
            0.00016532583686057478,
            5.8014760725200176e-05,
            0.00013449887046590447,
            5.8532510593067855e-05,
            0.0003313522320240736,
            7.042881043162197e-05
        ],
        "align_select": "select Sections.section_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the title of all cartoons in alphabetical order.",
        "gold_select": "select Cartoon.cover_title",
        "select_candidates": [
            "select Cartoon.cover_title",
            "select Cartoon.cover_title, Cartoon.Directed_by",
            "select Cartoon.cover_title, Cartoon.Written_by",
            "select Cartoon.cover_title, Cartoon.medium"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9949321150779724,
            0.9949321150779724,
            0.0002174689288949594,
            0.0002174689288949594,
            0.00019261793931946158,
            0.00019261793931946158,
            0.0001757591380737722,
            0.0001757591380737722
        ],
        "align_select": "select Cartoon.cover_title",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the titles of the cartoons sorted alphabetically?",
        "gold_select": "select Cartoon.cover_title",
        "select_candidates": [
            "select Cartoon.cover_title",
            "select Cartoon.cover_title, Cartoon.medium",
            "select Cartoon.cover_title, Cartoon.Written_by",
            "select Cartoon.cover_title, Cartoon.Directed_by"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9950771927833557,
            0.00029567565070465207,
            0.00019225996220484376,
            0.00011702909978339449,
            0.0002079643600154668,
            0.0001071223450708203,
            0.0002332276781089604,
            0.0001044991149683483
        ],
        "align_select": "select Cartoon.cover_title",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List all cartoon directed by \"Ben Jones\".",
        "gold_select": "select Cartoon.cover_title",
        "select_candidates": [
            "select Cartoon.id",
            "select Cartoon.id, Cartoon.cover_title",
            "select Cartoon.id, Cartoon.cover_title, Cartoon.Directed_by",
            "select Cartoon.cover_title, Cartoon.Directed_by"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.005234546959400177,
            6.321888940874487e-05,
            0.0002234977437183261,
            6.61985031911172e-05,
            0.00012136180157540366,
            6.384721928043291e-05,
            0.0001586368161952123,
            6.251340528251603e-05
        ],
        "align_select": "select Cartoon.id",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of all cartoons directed by Ben Jones?",
        "gold_select": "select Cartoon.cover_title",
        "select_candidates": [
            "select Cartoon.cover_title",
            "select Cartoon.cover_title, Cartoon.Directed_by",
            "select Cartoon.cover_title, Cartoon.medium",
            "select Cartoon.cover_title, Cartoon.Written_by"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9937491416931152,
            0.00016408308874815702,
            0.0002684771898202598,
            6.500238669104874e-05,
            0.00019919281476177275,
            5.612060340354219e-05,
            0.0001889885461423546,
            5.603733370662667e-05
        ],
        "align_select": "select Cartoon.cover_title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "list all cartoon titles and their directors ordered by their air date",
        "gold_select": "select Cartoon.cover_title, Cartoon.Directed_by",
        "select_candidates": [
            "select Cartoon.cover_title, Cartoon.Directed_by",
            "select Cartoon.cover_title, Cartoon.Directed_by, Cartoon.earliest_air_date",
            "select Cartoon.cover_title.c1, Cartoon.Directed_by",
            "select Cartoon.cover_title, Cartoon.Directed_by (ordered by"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.6125717759132385,
            0.6125717759132385,
            0.000251695018960163,
            0.000251695018960163,
            0.00024084371398203075,
            0.00024084371398203075,
            0.0038839783519506454,
            0.0038839783519506454
        ],
        "align_select": "select Cartoon.cover_title, Cartoon.Directed_by",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What is the name and directors of all the cartoons that are ordered by air date?",
        "gold_select": "select Cartoon.cover_title, Cartoon.Directed_by",
        "select_candidates": [
            "select Cartoon.cover_title, Cartoon.Directed_by",
            "select Cartoon.cover_title, Cartoon.Directed_by, Cartoon.earliest_air_date",
            "select Cartoon.id, Cartoon.cover_title, Cartoon.Directed_by",
            "select Cartoon.earliest_air_date, Cartoon.cover_title, Cartoon.Directed_by"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.0011085084406659007,
            0.0011085084406659007,
            0.00014125921006780118,
            0.00014125921006780118,
            0.00041633949149399996,
            0.00041633949149399996,
            0.00018357405497226864,
            0.00018357405497226864
        ],
        "align_select": "select Cartoon.cover_title, Cartoon.Directed_by",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "gold_select": "select Cartoon.cover_title",
        "select_candidates": [
            "select Cartoon.cover_title",
            "select Cartoon.cover_title, Cartoon.Directed_by",
            "select Cartoon.cover_title, Cartoon.id",
            "select Cartoon.cover_title (or Cartoon.medium)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9845049381256104,
            0.0008380445069633424,
            0.0001957980712177232,
            7.752812234684825e-05,
            0.00024343050608877093,
            7.904587255325168e-05,
            0.005672040395438671,
            0.00010678018588805571
        ],
        "align_select": "select Cartoon.cover_title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
        "gold_select": "select Cartoon.cover_title",
        "select_candidates": [
            "select Cartoon.cover_title",
            "select Cartoon.cover_title, Cartoon.Directed_by",
            "select Cartoon.cover_title, Cartoon.medium",
            "select Cartoon.cover_title (or Cartoon.medium)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9902982115745544,
            0.006149811204522848,
            0.00026557189994491637,
            8.015768980840221e-05,
            0.0002689150278456509,
            6.464828766183928e-05,
            0.00467045558616519,
            0.00010789799853228033
        ],
        "align_select": "select Cartoon.cover_title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the number of different series names and contents in the TV Channel table.",
        "gold_select": "select count(distinct TV_Channel.series_name), count(distinct TV_Channel.substance)",
        "select_candidates": [
            "select count(distinct TV_Channel.series_name), count(distinct TV_Channel.substance)",
            "select count(distinct TV_Channel.series_name), TV_Channel.substance",
            "select count(distinct TV_Channel.series_name), count(distinct TV_Channel.Country)",
            "select count(distinct TV_Channel.Country), count(distinct TV_Channel.substance)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.9705231189727783,
            0.9705231189727783,
            0.11715368926525116,
            0.11715368926525116,
            0.0003846135223284364,
            0.0003846135223284364,
            0.0005942708812654018,
            0.0005942708812654018
        ],
        "align_select": "select count(distinct TV_Channel.series_name), count(distinct TV_Channel.substance)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many different series and contents are listed in the TV Channel table?",
        "gold_select": "select count(distinct TV_Channel.series_name), count(distinct TV_Channel.substance)",
        "select_candidates": [
            "select count(distinct TV_Channel.series_name), count(distinct TV_Channel.substance)",
            "select count(distinct TV_Channel.series_name), TV_Channel.substance",
            "select count(distinct TV_Channel.id, TV_Channel.series_name), TV_Channel.substance",
            "select count(distinct TV_Channel.series_name, TV_Channel.substance)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.9862387776374817,
            0.9862387776374817,
            0.028129827231168747,
            0.028129827231168747,
            0.0002020022802753374,
            0.0002020022802753374,
            0.9583904147148132,
            0.9583904147148132
        ],
        "align_select": "select count(distinct TV_Channel.series_name), count(distinct TV_Channel.substance)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "gold_select": "select TV_Channel.substance",
        "select_candidates": [
            "select TV_Channel.substance",
            "select TV_Channel.substance, TV_Channel.pixel_aspect_percentage_par",
            "select TV_Channel.dialect, TV_Channel.substance",
            "select TV_Channel.substance, TV_Channel.dialect"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.969235360622406,
            8.491559856338426e-05,
            0.0001708100753603503,
            6.185564416227862e-05,
            0.0001983725233003497,
            6.0736423620255664e-05,
            0.00019095203606411815,
            6.11583236604929e-05
        ],
        "align_select": "select TV_Channel.substance",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the content of the series Sky Radio?",
        "gold_select": "select TV_Channel.substance",
        "select_candidates": [
            "select TV_Channel.substance",
            "select TV_Channel.dialect, TV_Channel.substance",
            "select TV_Channel.series_name, TV_Channel.substance",
            "select TV_Channel.substance, TV_series.chapter"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel TV_series",
            "TV_Channel Cartoon",
            "TV_Channel"
        ],
        "align_scores": [
            0.8553557991981506,
            7.34138666302897e-05,
            0.0002101950958603993,
            6.566596130141988e-05,
            0.0002284661604790017,
            6.31450820947066e-05,
            0.00020021382078994066,
            6.220767681952566e-05
        ],
        "align_select": "select TV_Channel.substance",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many TV Channel using language English?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), TV_Channel.dialect",
            "select count(*), TV_Channel.dialect, TV_Channel.substance",
            "select count(*), TV_Channel.dialect, TV_Channel.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9956632256507874,
            0.000262858608039096,
            0.00032335356809198856,
            0.00019503153453115374,
            0.00013240698899608105,
            7.493578596040606e-05,
            0.00011084272409789264,
            8.256830915343016e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many TV Channels use the English language?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), TV_Channel.dialect",
            "select count(*), TV_Channel.dialect, TV_Channel.substance",
            "select count(*), TV_Channel.dialect, TV_Channel.substance"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9932244420051575,
            9.938672883436084e-05,
            0.0003117090091109276,
            8.010793681023642e-05,
            0.0001142964101745747,
            5.410098674474284e-05,
            0.0001142964101745747,
            5.410098674474284e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "gold_select": "select TV_Channel.dialect, count(*)",
        "select_candidates": [
            "select TV_Channel.dialect, count(*)",
            "select TV_Channel.series_name, count(*)",
            "select TV_Channel.dialect, count(TV_Channel.id)",
            "select TV_Channel.dialect, count(*), TV_Channel.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9930105805397034,
            0.0001319033035542816,
            0.0003758163657039404,
            7.799418381182477e-05,
            0.002052709925919771,
            8.77357815625146e-05,
            0.00010031852434622124,
            5.2528950618579984e-05
        ],
        "align_select": "select TV_Channel.dialect, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "gold_select": "select TV_Channel.dialect, count(*)",
        "select_candidates": [
            "select TV_Channel.dialect, count(*)",
            "select TV_Channel.series_name, count(*)",
            "select TV_Channel.Country, count(*)",
            "select TV_Channel.dialect, count(*), TV_Channel.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9929184317588806,
            0.00018163686036132276,
            0.0005675382562913001,
            8.024609996937215e-05,
            0.0004462172801140696,
            7.482102955691516e-05,
            0.000131380365928635,
            6.193580338731408e-05
        ],
        "align_select": "select TV_Channel.dialect, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List each language and the number of TV Channels using it.",
        "gold_select": "select TV_Channel.dialect, count(*)",
        "select_candidates": [
            "select TV_Channel.dialect, count(*)",
            "select TV_Channel.dialect, count(*), TV_Channel.Country",
            "select TV_Channel.dialect.c3, count(*)",
            "select TV_Channel.series_name, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9946959614753723,
            0.00018362690752837807,
            0.00014179819845594466,
            0.0001027194011840038,
            0.0006456375704146922,
            0.00015565979992970824,
            0.0004105863918084651,
            0.0002442516852170229
        ],
        "align_select": "select TV_Channel.dialect, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For each language, list the number of TV Channels that use it.",
        "gold_select": "select TV_Channel.dialect, count(*)",
        "select_candidates": [
            "select TV_Channel.dialect, count(*)",
            "select TV_Channel.dialect, count(*), TV_Channel.Country",
            "select TV_Channel.dialect.c3, count(*)",
            "select count(*), TV_Channel.dialect"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9942197799682617,
            0.00019578723004087806,
            0.00013447449600789696,
            8.809896098682657e-05,
            0.0007769512594677508,
            0.00018013858061749488,
            0.9939390420913696,
            0.00021259687491692603
        ],
        "align_select": "select TV_Channel.dialect, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
        "gold_select": "select TV_Channel.series_name",
        "select_candidates": [
            "select TV_Channel.series_name",
            "select Cartoon.cover_title, TV_Channel.series_name",
            "select TV_Channel.series_name, t2.c8",
            "select TV_Channel.id, TV_Channel.series_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel TV_series Cartoon",
            "TV_Channel Cartoon",
            "TV_Channel TV_Channel TV_series Cartoon",
            "TV_Channel TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9907301068305969,
            0.00011218476720387116,
            0.00028885749634355307,
            8.295287989312783e-05,
            0.000421237840782851,
            8.465904829790816e-05,
            0.00021124148042872548,
            9.400460112374276e-05
        ],
        "align_select": "select TV_Channel.series_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
        "gold_select": "select TV_Channel.series_name",
        "select_candidates": [
            "select TV_Channel.series_name",
            "select Cartoon.cover_title, TV_Channel.series_name",
            "select TV_Channel.series_name, t2.c8",
            "select TV_Channel.series_name, TV_series.tv_station"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel TV_series Cartoon",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9850487112998962,
            8.433610491920263e-05,
            0.0002603264001663774,
            6.843010487500578e-05,
            0.00032220661523751915,
            6.867761840112507e-05,
            0.0002722163626458496,
            6.750722241122276e-05
        ],
        "align_select": "select TV_Channel.series_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the title of all Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "gold_select": "select Cartoon.cover_title",
        "select_candidates": [
            "select Cartoon.cover_title",
            "select Cartoon.cover_title, TV_Channel.Country",
            "select Cartoon.cover_title, TV_Channel.series_name",
            "select Cartoon.cover_title, TV_Channel.pixel_aspect_percentage_par"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.8196082711219788,
            0.0001594178902450949,
            0.00021949080110061914,
            6.601115455850959e-05,
            0.00022588342835661024,
            6.705641862936318e-05,
            0.0001617366069694981,
            6.774667417630553e-05
        ],
        "align_select": "select Cartoon.cover_title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
        "gold_select": "select Cartoon.cover_title",
        "select_candidates": [
            "select Cartoon.cover_title",
            "select Cartoon.cover_title, TV_Channel.Country",
            "select Cartoon.cover_title, TV_Channel.dialect",
            "select Cartoon.cover_title, TV_Channel.series_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.03645629063248634,
            0.0001518132776254788,
            0.00021776607900392264,
            7.171861943788826e-05,
            0.00021609359828289598,
            7.924233068479225e-05,
            0.0003014003741554916,
            7.733223174000159e-05
        ],
        "align_select": "select Cartoon.cover_title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the Episode of all TV series sorted by rating.",
        "gold_select": "select TV_series.chapter",
        "select_candidates": [
            "select TV_series.chapter",
            "select TV_series.chapter, TV_series.grades",
            "select TV_series.chapter, TV_series.grades, TV_series.portion",
            "select TV_series.chapter, TV_series.grades, TV_series.18_49_Rating_Share"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9949004054069519,
            0.9949004054069519,
            0.0002699409960769117,
            0.0002699409960769117,
            0.0001710038195597008,
            0.0001710038195597008,
            0.00011243473272770643,
            0.00011243473272770643
        ],
        "align_select": "select TV_series.chapter",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are all of the episodes ordered by ratings?",
        "gold_select": "select TV_series.chapter",
        "select_candidates": [
            "select TV_series.chapter",
            "select TV_series.chapter, TV_series.grades",
            "select TV_series.chapter, TV_series.release_day",
            "select TV_series.id, TV_series.chapter"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series",
            "TV_series Cartoon"
        ],
        "align_scores": [
            0.987917959690094,
            0.987917959690094,
            0.00023018037609290332,
            0.00023018037609290332,
            0.0001496139884693548,
            0.0001496139884693548,
            0.0001790817332221195,
            0.0001790817332221195
        ],
        "align_select": "select TV_series.chapter",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List top 3 highest Rating TV series. List the TV series's Episode and Rating.",
        "gold_select": "select TV_series.chapter, TV_series.grades",
        "select_candidates": [
            "select TV_series.chapter, TV_series.grades",
            "select TV_series.id, TV_series.chapter, TV_series.grades",
            "select TV_series.portion, TV_series.grades",
            "select TV_series.chapter, TV_series.18_49_Rating_Share"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9859132170677185,
            9.41239923122339e-05,
            0.00038154024514369667,
            9.019699791679159e-05,
            0.0007107293349690735,
            0.00013496959581971169,
            0.9944304823875427,
            9.757275984156877e-05
        ],
        "align_select": "select TV_series.chapter, TV_series.grades",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "gold_select": "select TV_series.chapter, TV_series.grades",
        "select_candidates": [
            "select TV_series.chapter, TV_series.grades",
            "select TV_series.grades, TV_series.portion",
            "select TV_series.release_day, TV_series.grades",
            "select TV_series.grades, TV_series.release_day"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series",
            "TV_series Cartoon"
        ],
        "align_scores": [
            0.9711079001426697,
            6.647570262430236e-05,
            0.00029397226171568036,
            6.336289516184479e-05,
            0.00041960389353334904,
            8.6653781181667e-05,
            0.00032308208756148815,
            6.327039591269568e-05
        ],
        "align_select": "select TV_series.chapter, TV_series.grades",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is minimum and maximum share of TV series?",
        "gold_select": "select max(TV_series.portion), min(TV_series.portion)",
        "select_candidates": [
            "select min(TV_series.portion), max(TV_series.18_49_Rating_Share)",
            "select min(TV_series.18_49_Rating_Share), max(TV_series.18_49_Rating_Share)",
            "select min(TV_series.portion), max(TV_series.portion)",
            "select min(TV_series.Viewers_m), max(TV_series.18_49_Rating_Share)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9556591510772705,
            0.005350727122277021,
            0.9929002523422241,
            0.0024184563662856817,
            0.994391143321991,
            0.0015230732969939709,
            0.009991081431508064,
            0.0052601988427340984
        ],
        "align_select": "select min(TV_series.portion), max(TV_series.18_49_Rating_Share)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the maximum and minimum share for the TV series?",
        "gold_select": "select max(TV_series.portion), min(TV_series.portion)",
        "select_candidates": [
            "select max(TV_series.18_49_Rating_Share), min(TV_series.18_49_Rating_Share)",
            "select max(TV_series.Viewers_m), min(TV_series.18_49_Rating_Share)",
            "select max(TV_series.tv_station), min(TV_series.18_49_Rating_Share)",
            "select max(TV_series.portion), min(TV_series.18_49_Rating_Share)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9941126704216003,
            0.0007712399819865823,
            0.002097059041261673,
            0.0012854848755523562,
            0.0009810569463297725,
            0.0002675754076335579,
            0.9822980165481567,
            0.005444553215056658
        ],
        "align_select": "select max(TV_series.18_49_Rating_Share), min(TV_series.18_49_Rating_Share)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "gold_select": "select TV_series.release_day",
        "select_candidates": [
            "select TV_series.release_day",
            "select TV_series.id, TV_series.release_day",
            "select TV_series.release_day (or TV_series.grades)",
            "select TV_series.release_day, TV_series.grades"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series",
            "TV_series Cartoon"
        ],
        "align_scores": [
            0.48772022128105164,
            7.039120828267187e-05,
            0.00016145895642694086,
            5.9962789237033576e-05,
            0.0005203969776630402,
            7.556323544122279e-05,
            0.0001444731024093926,
            5.811265509692021e-05
        ],
        "align_select": "select TV_series.release_day",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "When did the episode \"A Love of a Lifetime\" air?",
        "gold_select": "select TV_series.release_day",
        "select_candidates": [
            "select TV_series.release_day",
            "select Cartoon.earliest_air_date",
            "select TV_series.grades",
            "select TV_series.id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series",
            "TV_series Cartoon"
        ],
        "align_scores": [
            0.9347044825553894,
            7.792778342263773e-05,
            0.9101209044456482,
            0.0001380010653520003,
            0.0009209886193275452,
            7.039603951852769e-05,
            0.0011368218110874295,
            8.840612281346694e-05
        ],
        "align_select": "select TV_series.release_day",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
        "gold_select": "select TV_series.every_week_ranking",
        "select_candidates": [
            "select TV_series.every_week_ranking",
            "select TV_series.id, TV_series.every_week_ranking",
            "select TV_series.every_week_ranking, TV_series.tv_station",
            "select TV_series.every_week_ranking, TV_series.Viewers_m"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9951702952384949,
            9.371497435495257e-05,
            0.00018037404515780509,
            6.800227129133418e-05,
            0.00014158121484797448,
            6.342056440189481e-05,
            0.0001674043305683881,
            6.457077688537538e-05
        ],
        "align_select": "select TV_series.every_week_ranking",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
        "gold_select": "select TV_series.every_week_ranking",
        "select_candidates": [
            "select TV_series.every_week_ranking",
            "select avg(TV_series.every_week_ranking)",
            "select TV_series.every_week_ranking, TV_series.tv_station",
            "select TV_series.every_week_ranking, TV_series.Viewers_m"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.9941258430480957,
            7.533386815339327e-05,
            0.0021754782646894455,
            6.128519453341141e-05,
            0.00013553487951867282,
            6.0528735048137605e-05,
            0.0001627826422918588,
            6.154153379611671e-05
        ],
        "align_select": "select TV_series.every_week_ranking",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
        "gold_select": "select TV_Channel.series_name",
        "select_candidates": [
            "select TV_Channel.series_name",
            "select TV_Channel.series_name, TV_series.tv_station",
            "select TV_Channel.id, TV_Channel.series_name",
            "select TV_series.tv_station"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel TV_series",
        "table_candidates": [
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.9927340745925903,
            9.021325968205929e-05,
            0.0005508163594640791,
            8.059349784161896e-05,
            0.00022041566262487322,
            9.13006006157957e-05,
            0.1270420402288437,
            8.424551197094843e-05
        ],
        "align_select": "select TV_Channel.series_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
        "gold_select": "select TV_Channel.series_name",
        "select_candidates": [
            "select TV_Channel.series_name",
            "select TV_series.chapter, TV_Channel.series_name",
            "select TV_Channel.series_name, TV_series.chapter",
            "select TV_Channel.series_name, TV_series.id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel TV_series",
        "table_candidates": [
            "TV_Channel TV_series",
            "TV_series"
        ],
        "align_scores": [
            0.9704118967056274,
            8.677128062117845e-05,
            0.00018276994524057955,
            6.326151924440637e-05,
            0.0002221245231339708,
            6.35552205494605e-05,
            0.0001738637947710231,
            6.486287747975439e-05
        ],
        "align_select": "select TV_Channel.series_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the Episode of all TV series showed on TV Channel with series name \"Sky Radio\".",
        "gold_select": "select TV_series.chapter",
        "select_candidates": [
            "select TV_series.chapter",
            "select TV_series.chapter, TV_series.release_day",
            "select TV_series.chapter, TV_Channel.Country",
            "select TV_series.chapter, TV_series.grades"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel TV_series",
        "table_candidates": [
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.9211106300354004,
            9.789214527700096e-05,
            0.00019377144053578377,
            6.219931674422696e-05,
            0.00018238904885947704,
            6.481704622274265e-05,
            0.00017883977852761745,
            6.307105650193989e-05
        ],
        "align_select": "select TV_series.chapter",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the episode for the TV series named \"Sky Radio\"?",
        "gold_select": "select TV_series.chapter",
        "select_candidates": [
            "select TV_series.chapter",
            "select TV_series.chapter, TV_series.release_day",
            "select TV_series.chapter, TV_Channel.Country",
            "select TV_series.chapter, TV_series.portion"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel TV_series",
        "table_candidates": [
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.9951646327972412,
            6.275811756495386e-05,
            0.00015098405128810555,
            5.592373781837523e-05,
            0.00014102717977948487,
            5.6378721637884155e-05,
            0.0001784830674296245,
            6.071563620935194e-05
        ],
        "align_select": "select TV_series.chapter",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the production code and channel of the most recently aired cartoon.",
        "gold_select": "select Cartoon.manufacture_codification, Cartoon.medium",
        "select_candidates": [
            "select Cartoon.manufacture_codification, t2.c8",
            "select Cartoon.manufacture_codification, TV_Channel.Package_Option",
            "select Cartoon.manufacture_codification, TV_series.tv_station",
            "select Cartoon.manufacture_codification, TV_Channel.Country"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "TV_Channel TV_series Cartoon",
            "TV_Channel Cartoon",
            "TV_series Cartoon",
            "Cartoon"
        ],
        "align_scores": [
            0.0004040136991534382,
            7.352182728936896e-05,
            0.07797294855117798,
            7.955510955071077e-05,
            0.9703692197799683,
            8.325759699800983e-05,
            0.010182596743106842,
            7.779673615004867e-05
        ],
        "align_select": "select Cartoon.manufacture_codification, TV_series.tv_station",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the produdction code and channel of the most recent cartoon?",
        "gold_select": "select Cartoon.manufacture_codification, Cartoon.medium",
        "select_candidates": [
            "select Cartoon.manufacture_codification, TV_Channel.Package_Option",
            "select Cartoon.manufacture_codification, t2.c8",
            "select Cartoon.manufacture_codification, TV_series.tv_station",
            "select Cartoon.manufacture_codification, TV_Channel.Pay_per_view_PPV"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "TV_Channel TV_series Cartoon",
            "TV_Channel Cartoon",
            "TV_series Cartoon"
        ],
        "align_scores": [
            0.0456661731004715,
            0.005301231052726507,
            0.0003456282720435411,
            0.0004641573177650571,
            0.9353313446044922,
            0.9870879650115967,
            0.9259821176528931,
            0.9020622372627258
        ],
        "align_select": "select Cartoon.manufacture_codification, TV_series.tv_station",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "gold_select": "select TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Country",
            "select distinct TV_Channel.Country",
            "select TV_Channel.Country, TV_Channel.dialect",
            "select TV_Channel.Country, Cartoon.Written_by"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.924819827079773,
            0.01895650289952755,
            0.3015315532684326,
            0.0004224770818836987,
            0.0006502975593321025,
            0.00023452746972907335,
            0.0004199996474198997,
            0.00019259442342445254
        ],
        "align_select": "select TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
        "gold_select": "select TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Country",
            "select distinct TV_Channel.Country",
            "select TV_Channel.Country, Cartoon.Written_by",
            "select count(distinct TV_Channel.Country)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9245887398719788,
            0.002286408329382539,
            0.23266741633415222,
            0.032693326473236084,
            0.0008769688429310918,
            0.00010426640074001625,
            0.021548645570874214,
            0.00014564396406058222
        ],
        "align_select": "select TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "gold_select": "select TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Country",
            "select TV_Channel.Country, Cartoon.Written_by",
            "select distinct TV_Channel.Country",
            "select TV_Channel.series_name, TV_Channel.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9774567484855652,
            0.9842223525047302,
            0.0005334934103302658,
            0.0005303110810928047,
            0.039575543254613876,
            0.018861884251236916,
            0.00021303904941305518,
            0.00021531697711907327
        ],
        "align_select": "select TV_Channel.Country",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the countries that are not playing cartoons written by Todd Casey?",
        "gold_select": "select TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Country",
            "select TV_Channel.Country, Cartoon.Written_by",
            "select TV_Channel.series_name, TV_Channel.Country",
            "select TV_Channel.Country, TV_Channel.dialect"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9900947213172913,
            0.9916309714317322,
            0.0005641050520353019,
            0.0005599742871709168,
            0.00021232421568129212,
            0.00026338896714150906,
            0.000297110847895965,
            0.0003415163664612919
        ],
        "align_select": "select TV_Channel.Country",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "gold_select": "select TV_Channel.series_name, TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.series_name, TV_Channel.Country",
            "select TV_Channel.series_name, TV_Channel.Country, Cartoon.id",
            "select TV_Channel.series_name, TV_Channel.Country, t2.c8",
            "select TV_Channel.series_name, TV_Channel.Country, TV_Channel.dialect"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon",
            "TV_Channel Cartoon TV_series Cartoon",
            "TV_Channel Cartoon TV_series"
        ],
        "align_scores": [
            0.0007618737872689962,
            0.00024355101049877703,
            0.00011380125943105668,
            0.00010008289973484352,
            0.00012507605424616486,
            9.03139662113972e-05,
            0.00014431240560952574,
            9.654919995227829e-05
        ],
        "align_select": "select TV_Channel.series_name, TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "gold_select": "select TV_Channel.series_name, TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.series_name, TV_Channel.Country",
            "select TV_Channel.series_name, TV_Channel.Country, TV_Channel.dialect",
            "select TV_Channel.series_name, TV_Channel.Country, TV_Channel.id",
            "select TV_Channel.series_name, TV_Channel.Country, TV_Channel.substance"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9783602952957153,
            0.9783602952957153,
            0.0002844726841431111,
            0.0002844726841431111,
            0.00014578206173609942,
            0.00014578206173609942,
            0.00018660220666788518,
            0.00018660220666788518
        ],
        "align_select": "select TV_Channel.series_name, TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "gold_select": "select TV_Channel.pixel_aspect_percentage_par, TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.pixel_aspect_percentage_par, TV_Channel.Country",
            "select TV_Channel.dialect, TV_Channel.pixel_aspect_percentage_par, TV_Channel.Country",
            "select TV_Channel.pixel_aspect_percentage_par.c5, TV_Channel.Country",
            "select TV_Channel.Country, TV_Channel.pixel_aspect_percentage_par"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9171000719070435,
            0.0001878409384516999,
            0.00032374190050177276,
            8.18115149741061e-05,
            0.0003912383399438113,
            8.593892562203109e-05,
            0.9859549403190613,
            0.00013864524953532964
        ],
        "align_select": "select TV_Channel.pixel_aspect_percentage_par, TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "gold_select": "select TV_Channel.pixel_aspect_percentage_par, TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.pixel_aspect_percentage_par, TV_Channel.Country",
            "select TV_Channel.pixel_aspect_percentage_par.c5, TV_Channel.Country",
            "select TV_Channel.Country, TV_Channel.pixel_aspect_percentage_par",
            "select max(TV_Channel.pixel_aspect_percentage_par), TV_Channel.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.8331046104431152,
            0.00021832821948919445,
            0.0003657691995613277,
            9.861893340712413e-05,
            0.988058865070343,
            0.0001718569255899638,
            0.00030117519781924784,
            9.001357102533802e-05
        ],
        "align_select": "select TV_Channel.pixel_aspect_percentage_par, TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "gold_select": "select TV_Channel.id",
        "select_candidates": [
            "select TV_Channel.id",
            "select TV_Channel.id, Cartoon.Directed_by",
            "select TV_Channel.id, TV_Channel.series_name",
            "select TV_Channel.id, Cartoon.id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9765847325325012,
            0.9765847325325012,
            0.00041759255691431463,
            0.00041759255691431463,
            0.00025349209317937493,
            0.00025349209317937493,
            0.0003298679948784411,
            0.0003298679948784411
        ],
        "align_select": "select TV_Channel.id",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
        "gold_select": "select TV_Channel.id",
        "select_candidates": [
            "select TV_Channel.id",
            "select TV_Channel.id, Cartoon.id",
            "select TV_Channel.id, Cartoon.Directed_by",
            "select TV_Channel.id, TV_Channel.series_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9697651267051697,
            0.9697651267051697,
            0.0002925485896412283,
            0.0002925485896412283,
            0.0003510171954985708,
            0.0003510171954985708,
            0.00018627940153237432,
            0.00018627940153237432
        ],
        "align_select": "select TV_Channel.id",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "gold_select": "select TV_Channel.Package_Option",
        "select_candidates": [
            "select TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, Cartoon.Directed_by",
            "select TV_Channel.Package_Option, TV_Channel.Country",
            "select TV_Channel.Package_Option, TV_Channel.pixel_aspect_percentage_par"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9793640971183777,
            0.0031128341797739267,
            0.00021737378847319633,
            0.00011387301492504776,
            0.0001225042506121099,
            9.650491119828075e-05,
            0.00017213080718647689,
            0.00010235654190182686
        ],
        "align_select": "select TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "gold_select": "select TV_Channel.Package_Option",
        "select_candidates": [
            "select TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, Cartoon.Directed_by",
            "select TV_Channel.pixel_aspect_percentage_par, TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, t0.c9"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9715648889541626,
            0.003954954911023378,
            0.00023920425155665725,
            0.00010453241702634841,
            0.0002657504810485989,
            0.000143536482937634,
            0.0002943216823041439,
            0.00013599924568552524
        ],
        "align_select": "select TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "list all cartoon titles and their directors ordered by their air date",
        "gold_select": "select Cartoon.Title, Cartoon.Directed_by",
        "select_candidates": [
            "select Cartoon.Title, Cartoon.Directed_by",
            "select Cartoon.Title, Cartoon.Directed_by, Cartoon.initial_air_date",
            "select Cartoon.Title, Cartoon.Directed_by (ordered Cartoon.initial_air_date)",
            "select Cartoon.Title, Cartoon.Directed_by (ordered by"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9953996539115906,
            0.9953996539115906,
            0.00024024465528782457,
            0.00024024465528782457,
            0.002001591492444277,
            0.002001591492444277,
            0.026990579441189766,
            0.026990579441189766
        ],
        "align_select": "select Cartoon.Title, Cartoon.Directed_by",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What is the name and directors of all the cartoons that are ordered by air date?",
        "gold_select": "select Cartoon.Title, Cartoon.Directed_by",
        "select_candidates": [
            "select Cartoon.Title, Cartoon.Directed_by",
            "select Cartoon.Title, Cartoon.Directed_by, Cartoon.initial_air_date",
            "select Cartoon.Title, Cartoon.Directed_by, Cartoon.id",
            "select Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.0005870850873179734,
            0.0005870850873179734,
            0.0001472056028433144,
            0.0001472056028433144,
            0.0003745020367205143,
            0.0003745020367205143,
            0.00021155731519684196,
            0.00021155731519684196
        ],
        "align_select": "select Cartoon.Title, Cartoon.Directed_by",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List the Episode of all TV series sorted by rating.",
        "gold_select": "select TV_series.chapter",
        "select_candidates": [
            "select TV_series.chapter",
            "select TV_series.chapter, TV_series.Rating",
            "select TV_series.id, TV_series.chapter",
            "select TV_series.chapter de-sequence-order(TV_series.Rating)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9949004054069519,
            0.9949004054069519,
            0.0003093438863288611,
            0.0003093438863288611,
            0.00017294003919232637,
            0.00017294003919232637,
            0.0002081000420730561,
            0.0002081000420730561
        ],
        "align_select": "select TV_series.chapter",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are all of the episodes ordered by ratings?",
        "gold_select": "select TV_series.chapter",
        "select_candidates": [
            "select TV_series.chapter",
            "select TV_series.chapter, TV_series.Rating",
            "select TV_series.id, TV_series.chapter",
            "select TV_series.id, TV_series.chapter, TV_series.Rating"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.987917959690094,
            0.987917959690094,
            0.00024883862351998687,
            0.00024883862351998687,
            0.0001790817332221195,
            0.0001790817332221195,
            0.00013510197459254414,
            0.00013510197459254414
        ],
        "align_select": "select TV_series.chapter",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List top 3 highest Rating TV series. List the TV series's Episode and Rating.",
        "gold_select": "select TV_series.chapter, TV_series.Rating",
        "select_candidates": [
            "select TV_series.chapter, TV_series.Rating",
            "select TV_series.id, TV_series.chapter, TV_series.Rating",
            "select TV_series.chapter.c1, TV_series.Rating",
            "select TV_series.chapter, TV_series.Rating, TV_series.Share"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9894687533378601,
            8.063962013693526e-05,
            0.0003649461141321808,
            8.242529293056577e-05,
            0.0003351691993884742,
            7.846295920899138e-05,
            0.00027006352320313454,
            7.574316259706393e-05
        ],
        "align_select": "select TV_series.chapter, TV_series.Rating",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "gold_select": "select TV_series.chapter, TV_series.Rating",
        "select_candidates": [
            "select TV_series.chapter, TV_series.Rating",
            "select TV_series.Rating, TV_series.Air_Date",
            "select TV_series.Rating, TV_series.Share",
            "select TV_series.Air_Date, TV_series.Rating"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series",
            "TV_series Cartoon"
        ],
        "align_scores": [
            0.9842108488082886,
            6.446599581977352e-05,
            0.004478046204894781,
            6.078034493839368e-05,
            0.0012224160600453615,
            5.565362880588509e-05,
            0.0020112444180995226,
            6.0949249018449336e-05
        ],
        "align_select": "select TV_series.chapter, TV_series.Rating",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "gold_select": "select TV_series.Air_Date",
        "select_candidates": [
            "select TV_series.Air_Date",
            "select TV_series.id, TV_series.Air_Date",
            "select TV_series.Air_Date (or TV_series.Rating)",
            "select TV_series.Air_Date (http://TV_series.Air_Date)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9956091046333313,
            8.290804544230923e-05,
            0.00014862604439258575,
            6.464298348873854e-05,
            0.00048200340825133026,
            6.515379209304228e-05,
            0.004088230896741152,
            7.698090485064313e-05
        ],
        "align_select": "select TV_series.Air_Date",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "When did the episode \"A Love of a Lifetime\" air?",
        "gold_select": "select TV_series.Air_Date",
        "select_candidates": [
            "select TV_series.Air_Date",
            "select TV_series.id, TV_series.Air_Date",
            "select avg(TV_series.Air_Date)",
            "select TV_series.Air_Date, TV_series.Rating"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.993253767490387,
            8.067315502557904e-05,
            0.00015598905156366527,
            6.49498324492015e-05,
            0.01239099632948637,
            6.695661431876943e-05,
            0.00012526677164714783,
            5.9290417993906885e-05
        ],
        "align_select": "select TV_series.Air_Date",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
        "gold_select": "select TV_series.every_week_ranking",
        "select_candidates": [
            "select TV_series.every_week_ranking",
            "select TV_series.id, TV_series.every_week_ranking",
            "select TV_series.every_week_ranking, TV_series.tv_channel",
            "select TV_series.every_week_ranking, TV_series.Viewers_m"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9951702952384949,
            9.371497435495257e-05,
            0.00018037404515780509,
            6.800227129133418e-05,
            0.0001553909241920337,
            6.195400055730715e-05,
            0.0001674043305683881,
            6.457077688537538e-05
        ],
        "align_select": "select TV_series.every_week_ranking",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
        "gold_select": "select TV_series.every_week_ranking",
        "select_candidates": [
            "select TV_series.every_week_ranking",
            "select avg(TV_series.every_week_ranking)",
            "select TV_series.every_week_ranking, TV_series.Viewers_m",
            "select TV_series.every_week_ranking, TV_series.Air_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.9941258430480957,
            7.533386815339327e-05,
            0.0021754782646894455,
            6.128519453341141e-05,
            0.0001627826422918588,
            6.154153379611671e-05,
            0.00012472804519347847,
            6.107422814238816e-05
        ],
        "align_select": "select TV_series.every_week_ranking",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
        "gold_select": "select TV_Channel.series_name",
        "select_candidates": [
            "select TV_series.tv_channel",
            "select TV_Channel.series_name",
            "select TV_series.tv_channel, TV_Channel.series_name",
            "select TV_Channel.series_name, TV_series.tv_channel"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel TV_series",
        "table_candidates": [
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.4148048162460327,
            7.423067290801555e-05,
            0.9927340745925903,
            9.021325968205929e-05,
            0.0006700518424622715,
            8.900229295250028e-05,
            0.0006456904811784625,
            7.626965089002624e-05
        ],
        "align_select": "select TV_Channel.series_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
        "gold_select": "select TV_Channel.series_name",
        "select_candidates": [
            "select TV_Channel.series_name",
            "select TV_Channel.series_name, TV_series.tv_channel",
            "select TV_series.chapter, TV_Channel.series_name",
            "select TV_Channel.series_name, TV_series.chapter"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel TV_series",
        "table_candidates": [
            "TV_Channel TV_series",
            "TV_series"
        ],
        "align_scores": [
            0.9704118967056274,
            8.677128062117845e-05,
            0.00022208939481060952,
            6.298432708717883e-05,
            0.00018276994524057955,
            6.326151924440637e-05,
            0.0002221245231339708,
            6.35552205494605e-05
        ],
        "align_select": "select TV_Channel.series_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the Episode of all TV series showed on TV Channel with series name \"Sky Radio\".",
        "gold_select": "select TV_series.chapter",
        "select_candidates": [
            "select TV_series.chapter",
            "select TV_series.chapter, TV_series.Air_Date",
            "select TV_series.chapter, TV_Channel.Country",
            "select TV_series.chapter, TV_Channel.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel TV_series",
        "table_candidates": [
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.9211106300354004,
            9.789214527700096e-05,
            0.00018180566257797182,
            6.68586726533249e-05,
            0.00018238904885947704,
            6.481704622274265e-05,
            0.00016735613462515175,
            6.417991244234145e-05
        ],
        "align_select": "select TV_series.chapter",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the episode for the TV series named \"Sky Radio\"?",
        "gold_select": "select TV_series.chapter",
        "select_candidates": [
            "select TV_series.chapter",
            "select TV_series.chapter, TV_Channel.Country",
            "select TV_series.chapter, TV_series.Air_Date",
            "select TV_series.chapter, TV_Channel.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel TV_series",
        "table_candidates": [
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.9951646327972412,
            6.275811756495386e-05,
            0.00014102717977948487,
            5.6378721637884155e-05,
            0.00016718993720132858,
            5.810673246742226e-05,
            0.00013018342724535614,
            5.4903983254916966e-05
        ],
        "align_select": "select TV_series.chapter",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the production code and channel of the most recently aired cartoon.",
        "gold_select": "select Cartoon.manufacture_codification, Cartoon.Channel",
        "select_candidates": [
            "select Cartoon.manufacture_codification, Cartoon.Channel",
            "select max(Cartoon.manufacture_codification), max(Cartoon.Channel)",
            "select min(Cartoon.manufacture_codification), min(Cartoon.Channel)",
            "select t2c5, Cartoon.Channel"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon",
            "TV_series Cartoon",
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9873133301734924,
            9.194697486236691e-05,
            0.0003677295462694019,
            0.00010464451770531014,
            0.0005258885212242603,
            8.386245463043451e-05,
            0.0005744657828472555,
            0.00012921568122692406
        ],
        "align_select": "select Cartoon.manufacture_codification, Cartoon.Channel",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the produdction code and channel of the most recent cartoon?",
        "gold_select": "select Cartoon.manufacture_codification, Cartoon.Channel",
        "select_candidates": [
            "select Cartoon.manufacture_codification, Cartoon.Channel",
            "select max(Cartoon.manufacture_codification), max(Cartoon.Channel)",
            "select min(Cartoon.manufacture_codification), min(Cartoon.Channel)",
            "select max(Cartoon.manufacture_codification), Cartoon.Channel"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon",
            "TV_series Cartoon",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9790791273117065,
            8.528418402420357e-05,
            0.0005417977808974683,
            6.007158663123846e-05,
            0.00027603626949712634,
            5.548867193283513e-05,
            0.00013927000691182911,
            5.599855285254307e-05
        ],
        "align_select": "select Cartoon.manufacture_codification, Cartoon.Channel",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "List all cartoon directed by \"Ben Jones\".",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, Cartoon.director",
            "select Cartoon.id",
            "select Cartoon.id, Cartoon.Title"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9943062663078308,
            0.00010172252950724214,
            0.00017461874813307077,
            6.421339639928192e-05,
            0.005234546959400177,
            6.321888940874487e-05,
            0.0002051809278782457,
            6.234504689928144e-05
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of all cartoons directed by Ben Jones?",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, Cartoon.director",
            "select Cartoon.Title, Cartoon.Channel",
            "select Cartoon.Title, Cartoon.Production_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9936460256576538,
            0.0001680139102973044,
            0.00018713247845880687,
            5.762247019447386e-05,
            0.00015315441123675555,
            5.501184205058962e-05,
            0.00018574605928733945,
            5.8628153055906296e-05
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many cartoons were written by \"Joseph Kuhr\"?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Cartoon.id",
            "select count(*), Cartoon.Title",
            "select count(*), Cartoon.Original_air_date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon",
            "TV_series Cartoon",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9933307766914368,
            9.537243022350594e-05,
            0.00028623611433431506,
            5.469646202982403e-05,
            0.00025870694662444293,
            5.64619513170328e-05,
            0.00020255408890079707,
            5.4408264986705035e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of cartoones written by Joseph Kuhr?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Cartoon.id",
            "select count(*), Cartoon.Title",
            "select count(*), Cartoon.scripted_by"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon",
            "TV_series Cartoon",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9892503023147583,
            0.0003021026204805821,
            0.00025901402113959193,
            0.0001740011211950332,
            0.00024879994452930987,
            0.0006547386874444783,
            0.0002440605458104983,
            0.0018446871545165777
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "list all cartoon titles and their directors ordered by their air date",
        "gold_select": "select Cartoon.Title, Cartoon.director",
        "select_candidates": [
            "select Cartoon.Title, Cartoon.director",
            "select Cartoon.Title, Cartoon.director, Cartoon.Original_air_date",
            "select Cartoon.Title, Cartoon.director (ordered by",
            "select Cartoon.Title, Cartoon.director,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9946322441101074,
            0.9946322441101074,
            0.00023818510817363858,
            0.00023818510817363858,
            0.041836414486169815,
            0.041836414486169815,
            0.0016018348978832364,
            0.0016018348978832364
        ],
        "align_select": "select Cartoon.Title, Cartoon.director",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What is the name and directors of all the cartoons that are ordered by air date?",
        "gold_select": "select Cartoon.Title, Cartoon.director",
        "select_candidates": [
            "select Cartoon.Title, Cartoon.director",
            "select Cartoon.Title, Cartoon.director, Cartoon.Original_air_date",
            "select Cartoon.Title, Cartoon.director, Cartoon.id",
            "select Cartoon.Title, Cartoon.director (ordered Cartoon.Original_air_date)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.0005932333297096193,
            0.0005932333297096193,
            0.0001433657598681748,
            0.0001433657598681748,
            0.00022712824284099042,
            0.00022712824284099042,
            0.001075321459211409,
            0.001075321459211409
        ],
        "align_select": "select Cartoon.Title, Cartoon.director",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, Cartoon.director",
            "select Cartoon.Title, Cartoon.Channel",
            "select Cartoon.Title, t2.c8"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon",
            "TV_series Cartoon",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9806109666824341,
            0.0002984514576382935,
            0.0001710075739538297,
            6.978893361520022e-05,
            0.00018226630345452577,
            6.6403292294126e-05,
            0.0004074769385624677,
            8.134569361573085e-05
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, Cartoon.director",
            "select Cartoon.Title, Cartoon.Channel",
            "select Cartoon.Title, t2.c8"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9900957345962524,
            0.0008301984635181725,
            0.00019391857495065778,
            7.39076713216491e-05,
            0.00020019184739794582,
            6.464736361522228e-05,
            0.000660658348351717,
            8.769128180574626e-05
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the number of cartoons directed by each of the listed directors.",
        "gold_select": "select count(*), Cartoon.director",
        "select_candidates": [
            "select Cartoon.director, count(*)",
            "select Cartoon.director, count(*), Cartoon.scripted_by",
            "select Cartoon.director.c2, count(*)",
            "select count(*), Cartoon.director"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9964731335639954,
            0.00021197466412559152,
            0.0002059225516859442,
            7.288074266398326e-05,
            0.00047792878467589617,
            0.0001441298081772402,
            0.9962978959083557,
            0.0001671258796704933
        ],
        "align_select": "select Cartoon.director, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How many cartoons did each director create?",
        "gold_select": "select count(*), Cartoon.director",
        "select_candidates": [
            "select Cartoon.director, count(*)",
            "select Cartoon.director, count(*), Cartoon.scripted_by",
            "select Cartoon.director, count(*), Cartoon.Production_code",
            "select Cartoon.director, count(*), Cartoon.Original_air_date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9964510202407837,
            0.0001606015721336007,
            0.00027450468041934073,
            8.544266893295571e-05,
            0.00026873612659983337,
            7.511192234233022e-05,
            0.00030014151707291603,
            6.968385423533618e-05
        ],
        "align_select": "select Cartoon.director, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "gold_select": "select TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Country",
            "select distinct TV_Channel.Country",
            "select TV_Channel.Country, TV_Channel.Language",
            "select TV_Channel.Country, Cartoon.Channel"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.924819827079773,
            0.01895650289952755,
            0.3015315532684326,
            0.0004224770818836987,
            0.0002140062570106238,
            0.00014739941980224103,
            0.0023816705215722322,
            0.00019715362577699125
        ],
        "align_select": "select TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
        "gold_select": "select TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Country",
            "select distinct TV_Channel.Country",
            "select count(distinct TV_Channel.Country)",
            "select TV_Channel.Country, TV_Channel.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9245887398719788,
            0.002286408329382539,
            0.23266741633415222,
            0.032693326473236084,
            0.021548645570874214,
            0.00014564396406058222,
            0.0003801753045991063,
            0.00011108376202173531
        ],
        "align_select": "select TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "gold_select": "select TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Country",
            "select TV_Channel.Country, Cartoon.Channel",
            "select distinct TV_Channel.Country",
            "select TV_Channel.Country, TV_Channel.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9774567484855652,
            0.9842223525047302,
            0.0007735493709333241,
            0.0012199629563838243,
            0.039575543254613876,
            0.018861884251236916,
            0.00021225152886472642,
            0.00026083842385560274
        ],
        "align_select": "select TV_Channel.Country",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the countries that are not playing cartoons written by Todd Casey?",
        "gold_select": "select TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Country",
            "select TV_Channel.Country, Cartoon.scripted_by",
            "select TV_Channel.Country, TV_Channel.Language",
            "select TV_Channel.series_name, TV_Channel.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9900947213172913,
            0.9916309714317322,
            0.0006618421175517142,
            0.0006749448948539793,
            0.00015226674440782517,
            0.00019296133541502059,
            0.00021232421568129212,
            0.00026338896714150906
        ],
        "align_select": "select TV_Channel.Country",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "gold_select": "select TV_Channel.series_name, TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.series_name, TV_Channel.Country",
            "select TV_Channel.series_name, TV_Channel.Country, Cartoon.Channel",
            "select TV_Channel.series_name, TV_Channel.Country, TV_series.Channel",
            "select TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon",
            "TV_Channel Cartoon TV_series Cartoon",
            "TV_Channel Cartoon TV_series"
        ],
        "align_scores": [
            0.0007618737872689962,
            0.00024355101049877703,
            0.00013924702943768352,
            0.00010008776735048741,
            0.00014112470671534538,
            9.062256140168756e-05,
            0.00012114224227843806,
            8.943330612964928e-05
        ],
        "align_select": "select TV_Channel.series_name, TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "gold_select": "select TV_Channel.series_name, TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.series_name, TV_Channel.Country",
            "select TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language",
            "select TV_Channel.series_name, TV_Channel.Country, TV_Channel.id",
            "select TV_Channel.series_name, TV_Channel.Country, TV_series.Channel"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon",
            "TV_Channel Cartoon TV_series Cartoon",
            "TV_Channel Cartoon TV_series"
        ],
        "align_scores": [
            0.9783602952957153,
            0.9783602952957153,
            0.00019794172840192914,
            0.00019794172840192914,
            0.00014578206173609942,
            0.00014578206173609942,
            0.00028560857754200697,
            0.00028560857754200697
        ],
        "align_select": "select TV_Channel.series_name, TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "gold_select": "select TV_Channel.id",
        "select_candidates": [
            "select TV_Channel.id",
            "select TV_Channel.id, Cartoon.Channel",
            "select TV_Channel.id, TV_Channel.series_name",
            "select TV_Channel.series_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9765847325325012,
            0.039513543248176575,
            0.0004043450753670186,
            0.00026109471218660474,
            0.00025349209317937493,
            0.00020545069128274918,
            0.3073999881744385,
            0.005377649329602718
        ],
        "align_select": "select TV_Channel.id",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
        "gold_select": "select TV_Channel.id",
        "select_candidates": [
            "select TV_Channel.id",
            "select TV_Channel.id, Cartoon.Channel",
            "select TV_Channel.id, TV_Channel.series_name",
            "select TV_Channel.series_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9697651267051697,
            0.9697651267051697,
            0.00046186576946638525,
            0.00046186576946638525,
            0.00018627940153237432,
            0.00018627940153237432,
            0.020882705226540565,
            0.020882705226540565
        ],
        "align_select": "select TV_Channel.id",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "gold_select": "select TV_Channel.Package_Option",
        "select_candidates": [
            "select TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, Cartoon.director",
            "select TV_Channel.Package_Option, Cartoon.Channel",
            "select TV_Channel.Package_Option, TV_Channel.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9793640971183777,
            0.0031128341797739267,
            0.00029977894155308604,
            0.00015806170995347202,
            0.0002502440183889121,
            0.00014112929056864232,
            0.0001225042506121099,
            9.650491119828075e-05
        ],
        "align_select": "select TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "gold_select": "select TV_Channel.Package_Option",
        "select_candidates": [
            "select TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, Cartoon.director",
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Package_Option",
            "select TV_Channel.Hight_definition_TV, TV_Channel.Package_Option"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9715648889541626,
            0.003954954911023378,
            0.0003265462873969227,
            0.00013335565745364875,
            0.00024448303156532347,
            0.00014608290803153068,
            0.00018336695211473852,
            0.00011909329623449594
        ],
        "align_select": "select TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "List the title of all cartoons in alphabetical order.",
        "gold_select": "select Cartoon.cover_name",
        "select_candidates": [
            "select Cartoon.cover_name",
            "select Cartoon.cover_name, Cartoon.conductor",
            "select Cartoon.cover_name, Cartoon.Channel",
            "select Cartoon.cover_name, Cartoon.Written_by"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon",
            "TV_series Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9876531362533569,
            0.9876531362533569,
            0.00014775671297684312,
            0.00014775671297684312,
            0.00013820570893585682,
            0.00013820570893585682,
            0.00016832117398735136,
            0.00016832117398735136
        ],
        "align_select": "select Cartoon.cover_name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the titles of the cartoons sorted alphabetically?",
        "gold_select": "select Cartoon.cover_name",
        "select_candidates": [
            "select Cartoon.cover_name",
            "select Cartoon.cover_name, Cartoon.Channel",
            "select Cartoon.cover_name, Cartoon.conductor",
            "select Cartoon.cover_name, Cartoon.Written_by"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon",
            "TV_series Cartoon"
        ],
        "align_scores": [
            0.9738501906394958,
            0.00035040604416280985,
            0.00015491187514271587,
            0.0001715154357952997,
            0.0001932404557010159,
            0.0001513635943410918,
            0.00018508554785512388,
            0.00012181107013020664
        ],
        "align_select": "select Cartoon.cover_name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List all cartoon directed by \"Ben Jones\".",
        "gold_select": "select Cartoon.cover_name",
        "select_candidates": [
            "select Cartoon.id",
            "select Cartoon.cover_name",
            "select Cartoon.cover_name, Cartoon.conductor",
            "select Cartoon.id, Cartoon.cover_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.005234546959400177,
            6.321888940874487e-05,
            0.9841108322143555,
            9.666969708632678e-05,
            0.00024172088888008147,
            6.039312938810326e-05,
            0.00022241572150960565,
            6.512858089990914e-05
        ],
        "align_select": "select Cartoon.cover_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of all cartoons directed by Ben Jones?",
        "gold_select": "select Cartoon.cover_name",
        "select_candidates": [
            "select Cartoon.cover_name",
            "select Cartoon.cover_name, Cartoon.conductor",
            "select Cartoon.cover_name, Cartoon.Written_by",
            "select Cartoon.cover_name, Cartoon.Channel"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9927104711532593,
            0.00015094548871275038,
            0.0002349977585254237,
            5.9067609981866553e-05,
            0.00017825512622948736,
            5.4989497584756464e-05,
            0.00016878209135029465,
            5.753460936830379e-05
        ],
        "align_select": "select Cartoon.cover_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "list all cartoon titles and their directors ordered by their air date",
        "gold_select": "select Cartoon.cover_name, Cartoon.conductor",
        "select_candidates": [
            "select Cartoon.cover_name, Cartoon.conductor",
            "select Cartoon.cover_name, Cartoon.conductor, Cartoon.initial_air_date",
            "select Cartoon.cover_name, Cartoon.conductor, Cartoon.Written_by",
            "select Cartoon.cover_name.c1, Cartoon.conductor"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.0010357408318668604,
            0.0010357408318668604,
            0.00028839492006227374,
            0.00028839492006227374,
            0.0003586229286156595,
            0.0003586229286156595,
            0.00025106919929385185,
            0.00025106919929385185
        ],
        "align_select": "select Cartoon.cover_name, Cartoon.conductor",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What is the name and directors of all the cartoons that are ordered by air date?",
        "gold_select": "select Cartoon.cover_name, Cartoon.conductor",
        "select_candidates": [
            "select Cartoon.cover_name, Cartoon.conductor",
            "select Cartoon.cover_name, Cartoon.conductor, Cartoon.Written_by",
            "select Cartoon.id, Cartoon.cover_name, Cartoon.conductor",
            "select Cartoon.initial_air_date, Cartoon.cover_name, Cartoon.conductor"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.6857345700263977,
            0.6857345700263977,
            0.0018462419975548983,
            0.0018462419975548983,
            0.0002378732751822099,
            0.0002378732751822099,
            0.00024245187523774803,
            0.00024245187523774803
        ],
        "align_select": "select Cartoon.cover_name, Cartoon.conductor",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "gold_select": "select Cartoon.cover_name",
        "select_candidates": [
            "select Cartoon.cover_name",
            "select Cartoon.cover_name, Cartoon.conductor",
            "select Cartoon.cover_name, Cartoon.Written_by",
            "select Cartoon.cover_name, Cartoon.Channel"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon",
            "TV_series Cartoon"
        ],
        "align_scores": [
            0.972076952457428,
            0.0009849013295024633,
            0.00029726471984758973,
            7.784222543705255e-05,
            0.00016351115482393652,
            6.43040330032818e-05,
            0.0002651883405633271,
            6.81867531966418e-05
        ],
        "align_select": "select Cartoon.cover_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
        "gold_select": "select Cartoon.cover_name",
        "select_candidates": [
            "select Cartoon.cover_name",
            "select Cartoon.cover_name, Cartoon.conductor",
            "select Cartoon.cover_name, Cartoon.Written_by",
            "select Cartoon.cover_name, Cartoon.Channel"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon",
            "TV_series Cartoon"
        ],
        "align_scores": [
            0.9817208051681519,
            0.00523867504671216,
            0.00048596487613394856,
            6.752512126695365e-05,
            0.00020902931282762438,
            6.414559175027534e-05,
            0.0002619811857584864,
            6.403154839063063e-05
        ],
        "align_select": "select Cartoon.cover_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the number of different series names and contents in the TV Channel table.",
        "gold_select": "select count(distinct TV_Channel.series_name), count(distinct TV_Channel.substance)",
        "select_candidates": [
            "select count(distinct TV_Channel.series_name), count(distinct TV_Channel.substance)",
            "select count(distinct TV_Channel.series_name), TV_Channel.substance",
            "select count(distinct TV_Channel.series_name), count(distinct TV_Channel.Country)",
            "select count(distinct TV_Channel.Country), count(distinct TV_Channel.substance)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.9705231189727783,
            0.9705231189727783,
            0.11715368926525116,
            0.11715368926525116,
            0.0003846135223284364,
            0.0003846135223284364,
            0.0005942708812654018,
            0.0005942708812654018
        ],
        "align_select": "select count(distinct TV_Channel.series_name), count(distinct TV_Channel.substance)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many different series and contents are listed in the TV Channel table?",
        "gold_select": "select count(distinct TV_Channel.series_name), count(distinct TV_Channel.substance)",
        "select_candidates": [
            "select count(distinct TV_Channel.series_name), count(distinct TV_Channel.substance)",
            "select count(distinct TV_Channel.series_name), TV_Channel.substance",
            "select count(distinct TV_Channel.id, TV_Channel.series_name), TV_Channel.substance",
            "select count(distinct TV_Channel.series_name, TV_Channel.substance)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.9862387776374817,
            0.9862387776374817,
            0.028129827231168747,
            0.028129827231168747,
            0.0002020022802753374,
            0.0002020022802753374,
            0.9583904147148132,
            0.9583904147148132
        ],
        "align_select": "select count(distinct TV_Channel.series_name), count(distinct TV_Channel.substance)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "gold_select": "select TV_Channel.substance",
        "select_candidates": [
            "select TV_Channel.substance",
            "select TV_Channel.substance, TV_Channel.pixel_aspect_percentage_par",
            "select TV_Channel.substance, TV_Channel.Language",
            "select TV_Channel.substance, TV_Channel.Hight_definition_TV"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.969235360622406,
            8.491559856338426e-05,
            0.0001708100753603503,
            6.185564416227862e-05,
            0.00018274660396855325,
            6.061329986550845e-05,
            0.00020703845075331628,
            6.193733861437067e-05
        ],
        "align_select": "select TV_Channel.substance",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the content of the series Sky Radio?",
        "gold_select": "select TV_Channel.substance",
        "select_candidates": [
            "select TV_Channel.substance",
            "select TV_Channel.Language, TV_Channel.substance",
            "select TV_series.Episode, TV_Channel.substance",
            "select TV_Channel.substance, TV_series.Episode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel TV_series",
            "TV_Channel",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.8553557991981506,
            7.34138666302897e-05,
            0.00020307194790802896,
            6.720687088090926e-05,
            0.0001911003200802952,
            6.081385799916461e-05,
            0.000184474018169567,
            5.994626189931296e-05
        ],
        "align_select": "select TV_Channel.substance",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
        "gold_select": "select TV_Channel.series_name",
        "select_candidates": [
            "select TV_Channel.series_name",
            "select TV_Channel.series_name, TV_series.Channel",
            "select TV_Channel.id, TV_Channel.series_name",
            "select TV_Channel.series_name, Cartoon.Channel"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel TV_series Cartoon",
            "TV_Channel Cartoon",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.9907301068305969,
            0.00011218476720387116,
            0.0006268112920224667,
            8.073795470409095e-05,
            0.00021124148042872548,
            9.400460112374276e-05,
            0.0009542778716422617,
            8.848136349115521e-05
        ],
        "align_select": "select TV_Channel.series_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
        "gold_select": "select TV_Channel.series_name",
        "select_candidates": [
            "select TV_Channel.series_name",
            "select TV_Channel.series_name, TV_series.Channel",
            "select TV_series.Episode, TV_Channel.series_name",
            "select TV_Channel.series_name, Cartoon.Channel"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel TV_series Cartoon",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9850487112998962,
            8.433610491920263e-05,
            0.0002936862874776125,
            6.458025745814666e-05,
            0.00014739477774128318,
            6.497350113932043e-05,
            0.0005073563079349697,
            6.916165875736624e-05
        ],
        "align_select": "select TV_Channel.series_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the title of all Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "gold_select": "select Cartoon.cover_name",
        "select_candidates": [
            "select Cartoon.cover_name",
            "select Cartoon.cover_name, TV_Channel.Country",
            "select Cartoon.cover_name, TV_Channel.series_name",
            "select Cartoon.cover_name, TV_Channel.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel TV_series Cartoon",
            "TV_Channel Cartoon",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.8421320915222168,
            0.00013939767086412758,
            0.0002235222636954859,
            6.516535358969122e-05,
            0.00020871068409178406,
            6.614303856622428e-05,
            0.00019323473679833114,
            6.472699897130951e-05
        ],
        "align_select": "select Cartoon.cover_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
        "gold_select": "select Cartoon.cover_name",
        "select_candidates": [
            "select Cartoon.cover_name",
            "select Cartoon.cover_name, TV_Channel.Country",
            "select Cartoon.cover_name, TV_Channel.series_name",
            "select Cartoon.cover_name, TV_Channel.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel TV_series",
            "TV_Channel TV_series Cartoon",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.03003743849694729,
            0.00015397410606965423,
            0.00021483546879608184,
            7.300385914277285e-05,
            0.0003434574755374342,
            7.848458335502073e-05,
            0.00019975921895820647,
            7.253268995555118e-05
        ],
        "align_select": "select Cartoon.cover_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is minimum and maximum share of TV series?",
        "gold_select": "select max(TV_series.portion), min(TV_series.portion)",
        "select_candidates": [
            "select min(TV_series.18_49_Rating_Share), max(TV_series.18_49_Rating_Share)",
            "select min(TV_series.portion), max(TV_series.18_49_Rating_Share)",
            "select min(TV_series.Viewers_m), max(TV_series.18_49_Rating_Share)",
            "select min(TV_series.Rating), max(TV_series.18_49_Rating_Share)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9929002523422241,
            0.0024184563662856817,
            0.9556591510772705,
            0.005350727122277021,
            0.009991081431508064,
            0.0052601988427340984,
            0.9837614893913269,
            0.018468962982296944
        ],
        "align_select": "select min(TV_series.18_49_Rating_Share), max(TV_series.18_49_Rating_Share)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the maximum and minimum share for the TV series?",
        "gold_select": "select max(TV_series.portion), min(TV_series.portion)",
        "select_candidates": [
            "select max(TV_series.18_49_Rating_Share), min(TV_series.18_49_Rating_Share)",
            "select max(TV_series.Viewers_m), min(TV_series.18_49_Rating_Share)",
            "select max(TV_series.Channel), min(TV_series.18_49_Rating_Share)",
            "select max(TV_series.portion), min(TV_series.18_49_Rating_Share)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9941126704216003,
            0.0007712399819865823,
            0.002097059041261673,
            0.0012854848755523562,
            0.0010461704805493355,
            0.0004443977086339146,
            0.9822980165481567,
            0.005444553215056658
        ],
        "align_select": "select max(TV_series.18_49_Rating_Share), min(TV_series.18_49_Rating_Share)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "gold_select": "select TV_series.first_show",
        "select_candidates": [
            "select TV_series.Channel",
            "select TV_series.18_49_Rating_Share",
            "select TV_series.Viewers_m",
            "select TV_series.Weekly_Rank"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series",
            "TV_series Cartoon"
        ],
        "align_scores": [
            0.0012386032612994313,
            6.36794648016803e-05,
            0.00044374604476615787,
            6.554953142767772e-05,
            0.00042924407171085477,
            6.334549834718928e-05,
            0.0005305393715389073,
            6.965576176298782e-05
        ],
        "align_select": "select TV_series.Channel",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "When did the episode \"A Love of a Lifetime\" air?",
        "gold_select": "select TV_series.first_show",
        "select_candidates": [
            "select Cartoon.initial_air_date",
            "select Cartoon.manufacture_codification",
            "select Cartoon.Channel",
            "select Cartoon.Written_by"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series",
            "TV_series Cartoon",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.9933909177780151,
            7.40368413971737e-05,
            0.016456345096230507,
            7.76821980252862e-05,
            0.004250274505466223,
            8.521963172825053e-05,
            0.0017786133103072643,
            7.70971309975721e-05
        ],
        "align_select": "select Cartoon.initial_air_date",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the number of cartoons directed by each of the listed directors.",
        "gold_select": "select count(*), Cartoon.conductor",
        "select_candidates": [
            "select Cartoon.conductor, count(*)",
            "select Cartoon.id, Cartoon.conductor",
            "select count(*), Cartoon.conductor",
            "select Cartoon.id, Cartoon.conductor, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9952109456062317,
            0.00024802167899906635,
            0.00027937497361563146,
            0.00018937095592264086,
            0.9913785457611084,
            0.00021287353592924774,
            0.0002388047578278929,
            0.00012856515240855515
        ],
        "align_select": "select Cartoon.conductor, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How many cartoons did each director create?",
        "gold_select": "select count(*), Cartoon.conductor",
        "select_candidates": [
            "select Cartoon.conductor, count(*)",
            "select Cartoon.conductor, count(*), Cartoon.Written_by",
            "select Cartoon.conductor.c2, count(*)",
            "select Cartoon.cover_name, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9954656958580017,
            0.0002026011934503913,
            0.0003820975252892822,
            7.784683111822233e-05,
            0.001751156523823738,
            0.00017463906260672957,
            0.0009511988610029221,
            0.0001980068627744913
        ],
        "align_select": "select Cartoon.conductor, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Find the production code and channel of the most recently aired cartoon.",
        "gold_select": "select Cartoon.manufacture_codification, Cartoon.Channel",
        "select_candidates": [
            "select Cartoon.manufacture_codification, Cartoon.Channel",
            "select max(Cartoon.manufacture_codification), max(Cartoon.Channel)",
            "select min(Cartoon.manufacture_codification), min(Cartoon.Channel)",
            "select Cartoon.manufacture_codification, Cartoon.Channel, t2.c7"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon",
            "TV_series Cartoon",
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9873133301734924,
            9.194697486236691e-05,
            0.0003677295462694019,
            0.00010464451770531014,
            0.0005258885212242603,
            8.386245463043451e-05,
            0.00020420119108166546,
            6.775138172088191e-05
        ],
        "align_select": "select Cartoon.manufacture_codification, Cartoon.Channel",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the produdction code and channel of the most recent cartoon?",
        "gold_select": "select Cartoon.manufacture_codification, Cartoon.Channel",
        "select_candidates": [
            "select Cartoon.manufacture_codification, Cartoon.Channel",
            "select max(Cartoon.manufacture_codification), max(Cartoon.Channel)",
            "select min(Cartoon.manufacture_codification), min(Cartoon.Channel)",
            "select max(Cartoon.manufacture_codification), Cartoon.Channel"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon",
            "TV_series Cartoon",
            "TV_Channel TV_series Cartoon",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9790791273117065,
            8.528418402420357e-05,
            0.0005417977808974683,
            6.007158663123846e-05,
            0.00027603626949712634,
            5.548867193283513e-05,
            0.00013927000691182911,
            5.599855285254307e-05
        ],
        "align_select": "select Cartoon.manufacture_codification, Cartoon.Channel",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "gold_select": "select TV_Channel.series_name, TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.series_name, TV_Channel.Country",
            "select TV_Channel.series_name, TV_Channel.Country, Cartoon.Channel",
            "select TV_Channel.series_name, TV_Channel.Country, TV_series.Channel",
            "select TV_Channel.series_name, TV_Channel.Country, t2.c8"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon",
            "TV_Channel Cartoon TV_series Cartoon",
            "TV_Channel TV_Channel TV_series Cartoon",
            "TV_Channel TV_Channel Cartoon"
        ],
        "align_scores": [
            0.0007618737872689962,
            0.0007618737872689962,
            0.00013924702943768352,
            0.00013924702943768352,
            0.00014112470671534538,
            0.00014112470671534538,
            0.00012507605424616486,
            0.00012507605424616486
        ],
        "align_select": "select TV_Channel.series_name, TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "gold_select": "select TV_Channel.series_name, TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.series_name, TV_Channel.Country",
            "select TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language",
            "select TV_Channel.series_name, TV_Channel.Country, TV_series.Channel",
            "select TV_Channel.series_name, TV_Channel.Country, TV_Channel.id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon",
            "TV_Channel Cartoon TV_series Cartoon",
            "TV_Channel Cartoon TV_series"
        ],
        "align_scores": [
            0.9783602952957153,
            0.9783602952957153,
            0.00019794172840192914,
            0.00019794172840192914,
            0.00028560857754200697,
            0.00028560857754200697,
            0.00014578206173609942,
            0.00014578206173609942
        ],
        "align_select": "select TV_Channel.series_name, TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "gold_select": "select TV_Channel.pixel_aspect_percentage_par, TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.pixel_aspect_percentage_par, TV_Channel.Country",
            "select TV_Channel.id, TV_Channel.pixel_aspect_percentage_par, TV_Channel.Country",
            "select TV_Channel.pixel_aspect_percentage_par.c5, TV_Channel.Country",
            "select TV_Channel.Country, TV_Channel.pixel_aspect_percentage_par"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9171000719070435,
            0.0001878409384516999,
            0.0001947669079527259,
            7.450007979059592e-05,
            0.0003912383399438113,
            8.593892562203109e-05,
            0.9859549403190613,
            0.00013864524953532964
        ],
        "align_select": "select TV_Channel.pixel_aspect_percentage_par, TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "gold_select": "select TV_Channel.pixel_aspect_percentage_par, TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.pixel_aspect_percentage_par, TV_Channel.Country",
            "select TV_Channel.id, TV_Channel.pixel_aspect_percentage_par, TV_Channel.Country",
            "select TV_Channel.pixel_aspect_percentage_par.c5, TV_Channel.Country",
            "select TV_Channel.Country, TV_Channel.pixel_aspect_percentage_par"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.8331046104431152,
            0.00021832821948919445,
            0.0001954408799065277,
            8.259965397883207e-05,
            0.0003657691995613277,
            9.861893340712413e-05,
            0.988058865070343,
            0.0001718569255899638
        ],
        "align_select": "select TV_Channel.pixel_aspect_percentage_par, TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "gold_select": "select TV_Channel.id",
        "select_candidates": [
            "select TV_Channel.id",
            "select TV_Channel.id, Cartoon.Channel",
            "select TV_Channel.id, TV_Channel.series_name",
            "select TV_Channel.series_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9765847325325012,
            0.9765847325325012,
            0.0004043450753670186,
            0.0004043450753670186,
            0.00025349209317937493,
            0.00025349209317937493,
            0.3073999881744385,
            0.3073999881744385
        ],
        "align_select": "select TV_Channel.id",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
        "gold_select": "select TV_Channel.id",
        "select_candidates": [
            "select TV_Channel.id",
            "select TV_Channel.id, Cartoon.Channel",
            "select TV_Channel.id, TV_Channel.series_name",
            "select TV_Channel.series_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9697651267051697,
            0.9697651267051697,
            0.00046186576946638525,
            0.00046186576946638525,
            0.00018627940153237432,
            0.00018627940153237432,
            0.020882705226540565,
            0.020882705226540565
        ],
        "align_select": "select TV_Channel.id",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "gold_select": "select TV_Channel.Package_Option",
        "select_candidates": [
            "select TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, Cartoon.Channel",
            "select TV_Channel.Package_Option, Cartoon.conductor",
            "select distinct TV_Channel.Package_Option"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9793640971183777,
            0.0031128341797739267,
            0.0002502440183889121,
            0.00014112929056864232,
            0.0002394196344539523,
            0.00014494983770418912,
            0.008385058492422104,
            0.00014096128870733082
        ],
        "align_select": "select TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "gold_select": "select TV_Channel.Package_Option",
        "select_candidates": [
            "select TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, Cartoon.conductor",
            "select TV_Channel.pixel_aspect_percentage_par, TV_Channel.Package_Option",
            "select TV_Channel.Package_Option (Option)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9715648889541626,
            0.003954954911023378,
            0.00029323273338377476,
            0.0001398654276272282,
            0.0002657504810485989,
            0.000143536482937634,
            0.006139753386378288,
            0.0004606204165611416
        ],
        "align_select": "select TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "List all cartoon directed by \"Ben Jones\".",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, Cartoon.conductor",
            "select Cartoon.Title, Cartoon.conductor, Cartoon.writer",
            "select Cartoon.id, Cartoon.Title"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9943062663078308,
            0.00010172252950724214,
            0.00022150065342430025,
            6.652802403550595e-05,
            0.00013953863526694477,
            5.944111035205424e-05,
            0.0002051809278782457,
            6.234504689928144e-05
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of all cartoons directed by Ben Jones?",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, Cartoon.conductor",
            "select Cartoon.Title, Cartoon.writer",
            "select Cartoon.Title, Cartoon.Channel"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9936460256576538,
            0.0001680139102973044,
            0.0002280652552144602,
            5.643218901241198e-05,
            0.00021486252080649137,
            5.47956042282749e-05,
            0.00015315441123675555,
            5.501184205058962e-05
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many cartoons were written by \"Joseph Kuhr\"?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Cartoon.id",
            "select count(*), Cartoon.Title",
            "select count(*), Cartoon.writer"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon",
            "TV_series Cartoon",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9933307766914368,
            9.537243022350594e-05,
            0.00028623611433431506,
            5.469646202982403e-05,
            0.00025870694662444293,
            5.64619513170328e-05,
            0.00040474606794305146,
            6.136191223049536e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of cartoones written by Joseph Kuhr?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Cartoon.id",
            "select count(*), Cartoon.Title",
            "select count(*), Cartoon.writer"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon",
            "TV_series Cartoon",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9892503023147583,
            0.0003021026204805821,
            0.00025901402113959193,
            0.0001740011211950332,
            0.00024879994452930987,
            0.0006547386874444783,
            0.00027379137463867664,
            0.028952812775969505
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "list all cartoon titles and their directors ordered by their air date",
        "gold_select": "select Cartoon.Title, Cartoon.conductor",
        "select_candidates": [
            "select Cartoon.Title, Cartoon.conductor",
            "select Cartoon.Title, Cartoon.conductor, Cartoon.writer",
            "select Cartoon.Title, Cartoon.conductor (ordered by",
            "select Cartoon.Title, Cartoon.conductor (if applicable)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9865939617156982,
            0.9865939617156982,
            0.0010527280392125249,
            0.0010527280392125249,
            0.06962629407644272,
            0.06962629407644272,
            0.9908196330070496,
            0.9908196330070496
        ],
        "align_select": "select Cartoon.Title, Cartoon.conductor",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What is the name and directors of all the cartoons that are ordered by air date?",
        "gold_select": "select Cartoon.Title, Cartoon.conductor",
        "select_candidates": [
            "select Cartoon.Title, Cartoon.conductor",
            "select Cartoon.Title, Cartoon.conductor, Cartoon.writer",
            "select Cartoon.Title, Cartoon.conductor (ordered Cartoon.writer)",
            "select Cartoon.Title, Cartoon.conductor, Cartoon.writer"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.00067357555963099,
            0.00067357555963099,
            0.00040028622606769204,
            0.00040028622606769204,
            0.0006495598354376853,
            0.0006495598354376853,
            0.00040028622606769204,
            0.00040028622606769204
        ],
        "align_select": "select Cartoon.Title, Cartoon.conductor",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, Cartoon.conductor",
            "select Cartoon.Title, Cartoon.Channel",
            "select Cartoon.Title, Cartoon.writer"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon",
            "TV_series Cartoon",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9806109666824341,
            0.0002984514576382935,
            0.00021794013446196914,
            7.301945879589766e-05,
            0.00018226630345452577,
            6.6403292294126e-05,
            0.0002046352601610124,
            6.998833850957453e-05
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, Cartoon.conductor",
            "select Cartoon.Title, Cartoon.Channel",
            "select Cartoon.Title, Cartoon.writer"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9900957345962524,
            0.0008301984635181725,
            0.00026160801644437015,
            6.823690637247637e-05,
            0.00020019184739794582,
            6.464736361522228e-05,
            0.00026826508110389113,
            6.8122215452604e-05
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the number of different series names and contents in the TV Channel table.",
        "gold_select": "select count(distinct TV_Channel.series_designation), count(distinct TV_Channel.Content)",
        "select_candidates": [
            "select count(distinct TV_Channel.series_designation), count(distinct TV_Channel.Content)",
            "select count(distinct TV_Channel.series_designation), TV_Channel.Content",
            "select count(distinct TV_Channel.Country), count(distinct TV_Channel.Content)",
            "select count(distinct TV_Channel.series_designation)., count(distinct TV_Channel.Content)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel TV_series",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9944937825202942,
            0.9944937825202942,
            0.531076192855835,
            0.531076192855835,
            0.0005393040482886136,
            0.0005393040482886136,
            0.0006840053829364479,
            0.0006840053829364479
        ],
        "align_select": "select count(distinct TV_Channel.series_designation), count(distinct TV_Channel.Content)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many different series and contents are listed in the TV Channel table?",
        "gold_select": "select count(distinct TV_Channel.series_designation), count(distinct TV_Channel.Content)",
        "select_candidates": [
            "select count(distinct TV_series.chapter), TV_Channel.Content",
            "select count(distinct TV_series.chapter), count(distinct TV_Channel.Content)",
            "select count(distinct TV_Channel.series_designation), count(distinct TV_Channel.Content)",
            "select count(distinct TV_series.id), count(distinct TV_Channel.Content)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel TV_series",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.0005208636866882443,
            0.0005208636866882443,
            0.0006688584107905626,
            0.0006688584107905626,
            0.9952905178070068,
            0.9952905178070068,
            0.011593536473810673,
            0.011593536473810673
        ],
        "align_select": "select count(distinct TV_Channel.series_designation), count(distinct TV_Channel.Content)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "gold_select": "select TV_Channel.Content",
        "select_candidates": [
            "select TV_Channel.Content",
            "select TV_Channel.Content, TV_Channel.pixel_aspect_relative_amount_par",
            "select TV_Channel.series_designation, TV_Channel.Content",
            "select TV_Channel.Content, TV_Channel.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9928717017173767,
            0.00010954932076856494,
            0.00012702535605058074,
            6.12376315984875e-05,
            0.000193692758330144,
            6.999981997068971e-05,
            0.0001493283489253372,
            5.971644350211136e-05
        ],
        "align_select": "select TV_Channel.Content",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the content of the series Sky Radio?",
        "gold_select": "select TV_Channel.Content",
        "select_candidates": [
            "select TV_Channel.Content",
            "select TV_Channel.Content, TV_Channel.pixel_aspect_relative_amount_par",
            "select TV_Channel.Content, TV_Channel.series_designation",
            "select TV_Channel.Content, TV_Channel.Pay_per_view_PPV"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.9030343890190125,
            7.180869579315186e-05,
            0.00014047340664546937,
            6.10735296504572e-05,
            0.00019833430997096002,
            5.9630063333315775e-05,
            0.00018486951012164354,
            6.659467180725187e-05
        ],
        "align_select": "select TV_Channel.Content",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
        "gold_select": "select TV_Channel.pack_possible_choices",
        "select_candidates": [
            "select TV_Channel.pack_possible_choices",
            "select TV_Channel.pack_possible_choices, TV_Channel.series_designation",
            "select TV_Channel.pack_possible_choices, TV_Channel.Pay_per_view_PPV",
            "select TV_Channel.pack_possible_choices, TV_Channel.pixel_aspect_relative_amount_par"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9915425777435303,
            0.00012450129725039005,
            0.0001525341358501464,
            6.732290057698265e-05,
            0.00020796534954570234,
            7.755178376100957e-05,
            0.00014147972979117185,
            6.659123755525798e-05
        ],
        "align_select": "select TV_Channel.pack_possible_choices",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
        "gold_select": "select TV_Channel.pack_possible_choices",
        "select_candidates": [
            "select TV_Channel.pack_possible_choices",
            "select possible TV_Channel.pack_possible_choices",
            "select TV_Channel.pack_possible_choices, TV_Channel.series_designation",
            "select distinct TV_Channel.pack_possible_choices"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9618046283721924,
            0.0002314472949365154,
            0.00046179312630556524,
            9.923445031745359e-05,
            0.00022186712885741144,
            6.929672963451594e-05,
            0.8009499311447144,
            0.00014400204236153513
        ],
        "align_select": "select TV_Channel.pack_possible_choices",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
        "gold_select": "select TV_Channel.series_designation",
        "select_candidates": [
            "select TV_Channel.series_designation",
            "select Cartoon.Channel, TV_Channel.series_designation",
            "select TV_Channel.id, TV_Channel.series_designation",
            "select TV_Channel.series_designation, TV_series.tv_channel"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel TV_series Cartoon",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9897298812866211,
            0.00010952737648040056,
            0.0004718611598946154,
            9.045273327501491e-05,
            0.00022342379088513553,
            8.657912258058786e-05,
            0.0004934816970489919,
            8.123050793074071e-05
        ],
        "align_select": "select TV_Channel.series_designation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
        "gold_select": "select TV_Channel.series_designation",
        "select_candidates": [
            "select TV_Channel.series_designation",
            "select TV_Channel.series_designation, TV_series.tv_channel",
            "select TV_Channel.id, TV_Channel.series_designation",
            "select Cartoon.Channel, TV_Channel.series_designation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9863119721412659,
            8.151590009219944e-05,
            0.00027676677564159036,
            6.594213482458144e-05,
            0.000179377049789764,
            6.494958506664261e-05,
            0.00029832060681656003,
            6.682189996354282e-05
        ],
        "align_select": "select TV_Channel.series_designation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the title of all Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, TV_Channel.series_designation",
            "select Cartoon.Title, TV_Channel.Country",
            "select Cartoon.Title, TV_Channel.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel TV_series Cartoon",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.6704760789871216,
            0.0001531713642179966,
            0.0001984315167646855,
            6.288014265010133e-05,
            0.0002216609864262864,
            6.119286263128743e-05,
            0.00018654849554877728,
            6.125363142928109e-05
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, TV_series.tv_channel",
            "select Cartoon.Title, TV_Channel.Country",
            "select Cartoon.Title, TV_Channel.series_designation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel TV_series Cartoon",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.093967504799366,
            0.0001493901654612273,
            0.0001996876235352829,
            6.912684330018237e-05,
            0.0002061484701698646,
            6.455291440943256e-05,
            0.00026341056218370795,
            6.443353777285665e-05
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the Episode of all TV series sorted by rating.",
        "gold_select": "select TV_series.chapter",
        "select_candidates": [
            "select TV_series.chapter",
            "select TV_series.chapter, TV_series.Rating",
            "select TV_series.id, TV_series.chapter",
            "select TV_series.chapter, TV_series.Rating, TV_series.portion"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9949004054069519,
            0.9949004054069519,
            0.0003093438863288611,
            0.0003093438863288611,
            0.00017294003919232637,
            0.00017294003919232637,
            0.0001593179040355608,
            0.0001593179040355608
        ],
        "align_select": "select TV_series.chapter",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are all of the episodes ordered by ratings?",
        "gold_select": "select TV_series.chapter",
        "select_candidates": [
            "select TV_series.chapter",
            "select TV_series.chapter, TV_series.Rating",
            "select TV_series.id, TV_series.chapter",
            "select TV_series.chapter, TV_series.Air_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.987917959690094,
            0.987917959690094,
            0.00024883862351998687,
            0.00024883862351998687,
            0.0001790817332221195,
            0.0001790817332221195,
            0.00014252777327783406,
            0.00014252777327783406
        ],
        "align_select": "select TV_series.chapter",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List top 3 highest Rating TV series. List the TV series's Episode and Rating.",
        "gold_select": "select TV_series.chapter, TV_series.Rating",
        "select_candidates": [
            "select TV_series.chapter, TV_series.Rating",
            "select TV_series.id, TV_series.chapter, TV_series.Rating",
            "select TV_series.chapter.c1, TV_series.Rating",
            "select TV_series.chapter, TV_series.Rating, TV_series.portion"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9894687533378601,
            8.063962013693526e-05,
            0.0003649461141321808,
            8.242529293056577e-05,
            0.0003351691993884742,
            7.846295920899138e-05,
            0.00019426427024882287,
            7.809063390595838e-05
        ],
        "align_select": "select TV_series.chapter, TV_series.Rating",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "gold_select": "select TV_series.chapter, TV_series.Rating",
        "select_candidates": [
            "select TV_series.chapter, TV_series.Rating",
            "select TV_series.Rating, TV_series.Air_Date",
            "select TV_series.Rating, TV_series.portion",
            "select TV_series.Air_Date, TV_series.Rating"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series",
            "TV_series Cartoon"
        ],
        "align_scores": [
            0.9842108488082886,
            6.446599581977352e-05,
            0.004478046204894781,
            6.078034493839368e-05,
            0.0003982161288149655,
            6.436617695726454e-05,
            0.0020112444180995226,
            6.0949249018449336e-05
        ],
        "align_select": "select TV_series.chapter, TV_series.Rating",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is minimum and maximum share of TV series?",
        "gold_select": "select max(TV_series.portion), min(TV_series.portion)",
        "select_candidates": [
            "select min(TV_series.18_49_Rating_Share), max(TV_series.18_49_Rating_Share)",
            "select min(TV_series.portion), max(TV_series.18_49_Rating_Share)",
            "select min(TV_series.Viewers_m), max(TV_series.18_49_Rating_Share)",
            "select min(TV_series.Viewers_m), max(TV_series.Viewers_m)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9929002523422241,
            0.0024184563662856817,
            0.9556591510772705,
            0.005350727122277021,
            0.009991081431508064,
            0.0052601988427340984,
            0.18674901127815247,
            0.0015350452158600092
        ],
        "align_select": "select min(TV_series.18_49_Rating_Share), max(TV_series.18_49_Rating_Share)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the maximum and minimum share for the TV series?",
        "gold_select": "select max(TV_series.portion), min(TV_series.portion)",
        "select_candidates": [
            "select max(TV_series.18_49_Rating_Share), min(TV_series.18_49_Rating_Share)",
            "select max(TV_series.Viewers_m), min(TV_series.18_49_Rating_Share)",
            "select max(TV_series.tv_channel), min(TV_series.18_49_Rating_Share)",
            "select max(TV_series.portion), min(TV_series.18_49_Rating_Share)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9941126704216003,
            0.0007712399819865823,
            0.002097059041261673,
            0.0012854848755523562,
            0.0007189798052422702,
            0.00028456407017074525,
            0.9822980165481567,
            0.005444553215056658
        ],
        "align_select": "select max(TV_series.18_49_Rating_Share), min(TV_series.18_49_Rating_Share)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "gold_select": "select TV_series.Air_Date",
        "select_candidates": [
            "select TV_series.Air_Date",
            "select TV_series.id, TV_series.Air_Date",
            "select TV_series.Air_Date (or TV_series.Rating)",
            "select TV_series.Air_Date, TV_series.Rating"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9956091046333313,
            8.290804544230923e-05,
            0.00014862604439258575,
            6.464298348873854e-05,
            0.00048200340825133026,
            6.515379209304228e-05,
            0.00014375208411365747,
            5.4686603107256815e-05
        ],
        "align_select": "select TV_series.Air_Date",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "When did the episode \"A Love of a Lifetime\" air?",
        "gold_select": "select TV_series.Air_Date",
        "select_candidates": [
            "select TV_series.Air_Date",
            "select TV_series.id, TV_series.Air_Date",
            "select avg(TV_series.Air_Date)",
            "select TV_series.Air_Date, TV_series.Rating"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.993253767490387,
            8.067315502557904e-05,
            0.00015598905156366527,
            6.49498324492015e-05,
            0.01239099632948637,
            6.695661431876943e-05,
            0.00012526677164714783,
            5.9290417993906885e-05
        ],
        "align_select": "select TV_series.Air_Date",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
        "gold_select": "select TV_series.Weekly_Rank",
        "select_candidates": [
            "select TV_series.Weekly_Rank",
            "select TV_series.id, TV_series.Weekly_Rank",
            "select TV_series.Weekly_Rank, TV_series.tv_channel",
            "select TV_series.Weekly_Rank, TV_series.Viewers_m"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9959630370140076,
            0.00010749901412054896,
            0.00015752545732539147,
            6.657130870735273e-05,
            0.00012883354793302715,
            5.998766573611647e-05,
            0.0001394827850162983,
            6.26575929345563e-05
        ],
        "align_select": "select TV_series.Weekly_Rank",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
        "gold_select": "select TV_series.Weekly_Rank",
        "select_candidates": [
            "select TV_series.Weekly_Rank",
            "select TV_series.id, TV_series.Weekly_Rank",
            "select TV_series.Weekly_Rank, TV_series.Viewers_m",
            "select TV_series.Weekly_Rank, TV_series.tv_channel"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.9955797791481018,
            7.797031139489263e-05,
            0.0001528264838270843,
            5.888977466383949e-05,
            0.00014831528824288398,
            5.999750646878965e-05,
            0.00013423673226498067,
            5.880784374312498e-05
        ],
        "align_select": "select TV_series.Weekly_Rank",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
        "gold_select": "select TV_Channel.series_designation",
        "select_candidates": [
            "select TV_series.tv_channel",
            "select TV_Channel.series_designation",
            "select TV_Channel.series_designation, TV_series.tv_channel",
            "select TV_series.tv_channel, TV_Channel.series_designation"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel TV_series",
        "table_candidates": [
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.4148048162460327,
            7.423067290801555e-05,
            0.9932168126106262,
            9.116105502471328e-05,
            0.00043356409878470004,
            7.290854409802705e-05,
            0.0003930147213395685,
            7.673405343666673e-05
        ],
        "align_select": "select TV_Channel.series_designation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
        "gold_select": "select TV_Channel.series_designation",
        "select_candidates": [
            "select TV_series.chapter",
            "select TV_Channel.series_designation",
            "select TV_Channel.series_designation, TV_series.tv_channel",
            "select TV_series.tv_channel"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel TV_series",
        "table_candidates": [
            "TV_series",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.8308712244033813,
            7.52257474232465e-05,
            0.9840287566184998,
            8.737876487430185e-05,
            0.0002450851898174733,
            6.044141264283098e-05,
            0.0032654516398906708,
            8.274613355752081e-05
        ],
        "align_select": "select TV_series.chapter",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the Episode of all TV series showed on TV Channel with series name \"Sky Radio\".",
        "gold_select": "select TV_series.chapter",
        "select_candidates": [
            "select TV_series.chapter",
            "select TV_series.chapter, TV_series.Air_Date",
            "select TV_series.chapter, TV_Channel.Country",
            "select TV_series.chapter, TV_series.Rating"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel TV_series",
        "table_candidates": [
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.9211106300354004,
            9.789214527700096e-05,
            0.00018180566257797182,
            6.68586726533249e-05,
            0.00018238904885947704,
            6.481704622274265e-05,
            0.0001805318024707958,
            6.119712634244934e-05
        ],
        "align_select": "select TV_series.chapter",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the episode for the TV series named \"Sky Radio\"?",
        "gold_select": "select TV_series.chapter",
        "select_candidates": [
            "select TV_series.chapter",
            "select TV_series.chapter, TV_Channel.Country",
            "select TV_series.chapter, TV_series.Air_Date",
            "select TV_series.chapter, TV_Channel.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel TV_series",
        "table_candidates": [
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.9951646327972412,
            6.275811756495386e-05,
            0.00014102717977948487,
            5.6378721637884155e-05,
            0.00016718993720132858,
            5.810673246742226e-05,
            0.00013018342724535614,
            5.4903983254916966e-05
        ],
        "align_select": "select TV_series.chapter",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the number of cartoons directed by each of the listed directors.",
        "gold_select": "select count(*), Cartoon.conductor",
        "select_candidates": [
            "select Cartoon.conductor, count(*)",
            "select Cartoon.conductor, count(*), Cartoon.writer",
            "select Cartoon.id, Cartoon.conductor, count(*)",
            "select count(*), Cartoon.conductor"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9952109456062317,
            0.00024802167899906635,
            0.00014392926823347807,
            9.074146510101855e-05,
            0.0002388047578278929,
            0.00012856515240855515,
            0.9913785457611084,
            0.00021287353592924774
        ],
        "align_select": "select Cartoon.conductor, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How many cartoons did each director create?",
        "gold_select": "select count(*), Cartoon.conductor",
        "select_candidates": [
            "select Cartoon.conductor, count(*)",
            "select Cartoon.conductor, count(*), Cartoon.writer",
            "select Cartoon.conductor.c2, count(*)",
            "select Cartoon.Title, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9954656958580017,
            0.0002026011934503913,
            0.0003766021691262722,
            8.093452197499573e-05,
            0.001751156523823738,
            0.00017463906260672957,
            0.0006235722685232759,
            0.0002340952050872147
        ],
        "align_select": "select Cartoon.conductor, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Find the package choice and series name of the TV channel that has high definition TV.",
        "gold_select": "select TV_Channel.pack_possible_choices, TV_Channel.series_designation",
        "select_candidates": [
            "select TV_Channel.pack_possible_choices, TV_Channel.series_designation",
            "select TV_Channel.series_designation, TV_Channel.pack_possible_choices",
            "select possible TV_Channel.pack_possible_choices, TV_Channel.series_designation",
            "select TV_Channel.pixel_aspect_relative_amount_par, TV_Channel.series_designation"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.9878513216972351,
            0.00010854379797820002,
            0.9867922067642212,
            9.855490498011932e-05,
            0.0004957140772603452,
            8.854736370267347e-05,
            0.00024823955027386546,
            7.555876800324768e-05
        ],
        "align_select": "select TV_Channel.pack_possible_choices, TV_Channel.series_designation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "gold_select": "select TV_Channel.pack_possible_choices, TV_Channel.series_designation",
        "select_candidates": [
            "select TV_Channel.pack_possible_choices, TV_Channel.series_designation",
            "select TV_Channel.pack_possible_choices, TV_series.chapter",
            "select TV_series.tv_channel, TV_series.chapter",
            "select TV_Channel.series_designation, TV_series.tv_channel"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel TV_series",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.989465594291687,
            0.00016115870676003397,
            0.004234598483890295,
            8.842771057970822e-05,
            0.0015305235283449292,
            0.00011612091475399211,
            0.002497615059837699,
            9.282370592700318e-05
        ],
        "align_select": "select TV_Channel.pack_possible_choices, TV_Channel.series_designation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "gold_select": "select TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Country",
            "select distinct TV_Channel.Country",
            "select TV_Channel.Country, TV_Channel.Language",
            "select TV_Channel.Country, TV_Channel.pack_possible_choices"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.924819827079773,
            0.01895650289952755,
            0.3015315532684326,
            0.0004224770818836987,
            0.0002140062570106238,
            0.00014739941980224103,
            0.00018714068573899567,
            0.00011011991591658443
        ],
        "align_select": "select TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
        "gold_select": "select TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Country",
            "select distinct TV_Channel.Country",
            "select count(distinct TV_Channel.Country)",
            "select TV_Channel.Country, TV_Channel.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9245887398719788,
            0.002286408329382539,
            0.23266741633415222,
            0.032693326473236084,
            0.021548645570874214,
            0.00014564396406058222,
            0.0003801753045991063,
            0.00011108376202173531
        ],
        "align_select": "select TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "gold_select": "select TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Country",
            "select TV_Channel.Country, Cartoon.Channel",
            "select distinct TV_Channel.Country",
            "select TV_Channel.Country, Cartoon.writer"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9774567484855652,
            0.9842223525047302,
            0.0007735493709333241,
            0.0012199629563838243,
            0.039575543254613876,
            0.018861884251236916,
            0.00035510215093381703,
            0.00039034048677422106
        ],
        "align_select": "select TV_Channel.Country",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the countries that are not playing cartoons written by Todd Casey?",
        "gold_select": "select TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Country",
            "select TV_Channel.Country, Cartoon.writer",
            "select TV_Channel.Country, TV_Channel.Language",
            "select TV_Channel.series_designation, TV_Channel.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9900947213172913,
            0.9900947213172913,
            0.0004686896572820842,
            0.0004686896572820842,
            0.00015226674440782517,
            0.00015226674440782517,
            0.0002285877417307347,
            0.0002285877417307347
        ],
        "align_select": "select TV_Channel.Country",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "gold_select": "select TV_Channel.series_designation, TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.series_designation, TV_Channel.Country",
            "select TV_Channel.series_designation, TV_Channel.Country",
            "select Cartoon.Title, TV_Channel.Country",
            "select TV_series.chapter, TV_Channel.Country"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel TV_series Cartoon",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.0005065100849606097,
            0.00025407838984392583,
            0.0005065100849606097,
            0.00025407838984392583,
            0.0004532375605776906,
            0.0002806360716931522,
            0.000292780197924003,
            0.0001112038444261998
        ],
        "align_select": "select TV_Channel.series_designation, TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "gold_select": "select TV_Channel.series_designation, TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.series_designation, TV_Channel.Country",
            "select t 0.c1, TV_Channel.Country",
            "select TV_series.chapter, TV_Channel.Country",
            "select TV_Channel.series_designation, TV_Channel.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel TV_series Cartoon",
            "TV_Channel Cartoon",
            "TV_Channel TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9827911257743835,
            0.0008397119236178696,
            0.0004032062424812466,
            0.00016269079060293734,
            0.00042039682739414275,
            0.00016274742665700614,
            0.9827911257743835,
            0.0008397119236178696
        ],
        "align_select": "select TV_Channel.series_designation, TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "gold_select": "select TV_Channel.pixel_aspect_relative_amount_par, TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.pixel_aspect_relative_amount_par, TV_Channel.Country",
            "select TV_Channel.id, TV_Channel.pixel_aspect_relative_amount_par, TV_Channel.Country",
            "select TV_Channel.pixel_aspect_relative_amount_par.c5, TV_Channel.Country",
            "select TV_Channel.Country, TV_Channel.pixel_aspect_relative_amount_par"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.8380063772201538,
            0.00014371698489412665,
            0.0001888829719973728,
            7.234975782921538e-05,
            0.00028192438185214996,
            8.036180952331051e-05,
            0.9764045476913452,
            0.0001105063856812194
        ],
        "align_select": "select TV_Channel.pixel_aspect_relative_amount_par, TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "gold_select": "select TV_Channel.pixel_aspect_relative_amount_par, TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.pixel_aspect_relative_amount_par, TV_Channel.Country",
            "select TV_Channel.id, TV_Channel.pixel_aspect_relative_amount_par, TV_Channel.Country",
            "select TV_Channel.Country, TV_Channel.pixel_aspect_relative_amount_par",
            "select TV_Channel.pixel_aspect_relative_amount_par.c5, TV_Channel.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.6176830530166626,
            0.00017983498401008546,
            0.0001858668983913958,
            8.261106995632872e-05,
            0.9786101579666138,
            0.0001464106171624735,
            0.0002900082035921514,
            9.244157990906388e-05
        ],
        "align_select": "select TV_Channel.Country, TV_Channel.pixel_aspect_relative_amount_par",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "gold_select": "select TV_Channel.id",
        "select_candidates": [
            "select TV_Channel.id",
            "select TV_Channel.id, Cartoon.Channel",
            "select TV_Channel.id, TV_Channel.series_designation",
            "select TV_Channel.series_designation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9765847325325012,
            0.9765847325325012,
            0.0004043450753670186,
            0.0004043450753670186,
            0.00019752242951653898,
            0.00019752242951653898,
            0.9100598096847534,
            0.9100598096847534
        ],
        "align_select": "select TV_Channel.id",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
        "gold_select": "select TV_Channel.id",
        "select_candidates": [
            "select TV_Channel.id",
            "select TV_Channel.id, Cartoon.Channel",
            "select TV_Channel.id, TV_Channel.series_designation",
            "select TV_Channel.series_designation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9697651267051697,
            0.9697651267051697,
            0.00046186576946638525,
            0.00046186576946638525,
            0.00015833623183425516,
            0.00015833623183425516,
            0.12003898620605469,
            0.12003898620605469
        ],
        "align_select": "select TV_Channel.id",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "gold_select": "select TV_Channel.pack_possible_choices",
        "select_candidates": [
            "select TV_Channel.pack_possible_choices",
            "select distinct TV_Channel.pack_possible_choices",
            "select TV_Channel.id, TV_Channel.pack_possible_choices",
            "select TV_Channel.pack_possible_choices, Cartoon.conductor"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9563563466072083,
            0.0022503307554870844,
            0.014489533379673958,
            0.00020491545728873461,
            0.00018282432574778795,
            0.00014477662625722587,
            0.0003142126079183072,
            0.00013274946832098067
        ],
        "align_select": "select TV_Channel.pack_possible_choices",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "gold_select": "select TV_Channel.pack_possible_choices",
        "select_candidates": [
            "select TV_Channel.pack_possible_choices",
            "select TV_Channel.pack_possible_choices, Cartoon.conductor",
            "select TV_Channel.pack_possible_choices (Option)",
            "select distinct TV_Channel.pack_possible_choices"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9501631855964661,
            0.0016479690093547106,
            0.0004047429538331926,
            0.00015244777023326606,
            0.03320463374257088,
            0.00026757820160128176,
            0.013193282298743725,
            0.00032420887146145105
        ],
        "align_select": "select TV_Channel.pack_possible_choices",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "List the final tables made and the best finishes of poker players.",
        "gold_select": "select poker_player.last_table_made, poker_player.highest_terminate",
        "select_candidates": [
            "select poker_player.last_table_made, poker_player.highest_terminate",
            "select poker_player.Poker_Player_ID, poker_player.last_table_made, poker_player.highest_terminate",
            "select poker_player.People_ID, poker_player.last_table_made, poker_player.highest_terminate",
            "select poker_player.last_table_made.c2, poker_player.highest_terminate"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9907482266426086,
            6.965509237488732e-05,
            0.00018621954950504005,
            7.119978545233607e-05,
            0.00018569275562185794,
            7.226096204249188e-05,
            0.000368977605830878,
            6.0459748056018725e-05
        ],
        "align_select": "select poker_player.last_table_made, poker_player.highest_terminate",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the final tables made and best finishes for all poker players?",
        "gold_select": "select poker_player.last_table_made, poker_player.highest_terminate",
        "select_candidates": [
            "select poker_player.last_table_made, poker_player.highest_terminate",
            "select poker_player.Poker_Player_ID, poker_player.last_table_made, poker_player.highest_terminate",
            "select poker_player.last_table_made.c2, poker_player.highest_terminate",
            "select max(poker_player.last_table_made), max(poker_player.highest_terminate)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9883936047554016,
            0.11073526740074158,
            0.0002063628489850089,
            0.00033001237898133695,
            0.0005263383500277996,
            0.0002747733087744564,
            0.8767980933189392,
            0.00018005167657975107
        ],
        "align_select": "select poker_player.last_table_made, poker_player.highest_terminate",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the money rank of the poker player with the highest earnings?",
        "gold_select": "select poker_player.money_tier",
        "select_candidates": [
            "select poker_player.money_tier",
            "select poker_player.Poker_Player_ID, poker_player.money_tier",
            "select poker_player.Earnings, poker_player.money_tier",
            "select poker_player.People_ID, poker_player.last_table_made"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.884959876537323,
            7.89131736382842e-05,
            0.0001863893703557551,
            6.845223833806813e-05,
            0.00037311544292606413,
            6.517193833133206e-05,
            0.0001533598842797801,
            6.455260881921276e-05
        ],
        "align_select": "select poker_player.money_tier",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Return the money rank of the player with the greatest earnings.",
        "gold_select": "select poker_player.money_tier",
        "select_candidates": [
            "select poker_player.money_tier",
            "select poker_player.Poker_Player_ID, poker_player.money_tier",
            "select poker_player.Earnings, poker_player.money_tier",
            "select poker_player.People_ID, poker_player.last_table_made"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.566922664642334,
            6.0049478634027764e-05,
            0.00011679988529067487,
            6.53027746011503e-05,
            0.0002629834634717554,
            6.079414379200898e-05,
            0.00010733747330959886,
            6.437575211748481e-05
        ],
        "align_select": "select poker_player.money_tier",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "gold_select": "select max(poker_player.last_table_made)",
        "select_candidates": [
            "select max(poker_player.last_table_made)",
            "select max(poker_player.last_table_made), poker_player.highest_terminate",
            "select max(poker_player.last_table_made), max(poker_player.highest_terminate)",
            "select max(poker_player.highest_terminate)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.988135576248169,
            0.0001094687104341574,
            0.0001335787383140996,
            6.298877269728109e-05,
            0.00010728590859798715,
            6.511963147204369e-05,
            0.9847339987754822,
            0.0002924161381088197
        ],
        "align_select": "select max(poker_player.last_table_made)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "gold_select": "select max(poker_player.last_table_made)",
        "select_candidates": [
            "select max(poker_player.last_table_made)",
            "select max(poker_player.last_table_made), max(poker_player.highest_terminate)",
            "select max(poker_player.last_table_made), poker_player.highest_terminate",
            "select max(poker_player.highest_terminate)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9941014647483826,
            0.00010410109825897962,
            0.0001084434479707852,
            6.840055721113458e-05,
            0.00011302487837383524,
            6.95414055371657e-05,
            0.9902089834213257,
            0.00010121648665517569
        ],
        "align_select": "select max(poker_player.last_table_made)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the names of poker players ordered by the final tables made in ascending order.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, poker_player.last_table_made",
            "select people.Name, poker_player.People_ID",
            "select people.Name, poker_player.highest_terminate"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9941558837890625,
            0.0032685750629752874,
            0.0005500661209225655,
            0.00010171777103096247,
            0.00011413598258513957,
            9.008001507027075e-05,
            0.00036201116745360196,
            0.00014227221254259348
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, poker_player.last_table_made",
            "select people.Name (ordered by poker_player.last_table_made)",
            "select people.Name (ordered poker_player.last_table_made)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9894098043441772,
            0.9894098043441772,
            0.0003362647839821875,
            0.0003362647839821875,
            0.0031970522832125425,
            0.0031970522832125425,
            0.001757578575052321,
            0.001757578575052321
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What is the birth date of the poker player with the lowest earnings?",
        "gold_select": "select people.time_of_born",
        "select_candidates": [
            "select people.time_of_born",
            "select people.People_ID, people.time_of_born",
            "select people.time_of_born, people.Height",
            "select people.Nationality, people.time_of_born"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9819911122322083,
            0.0001258031843462959,
            0.00032167506287805736,
            8.35717873997055e-05,
            0.0001667812466621399,
            6.669577851425856e-05,
            0.0003440739237703383,
            0.00010316859697923064
        ],
        "align_select": "select people.time_of_born",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Return the birth date of the poker player with the lowest earnings.",
        "gold_select": "select people.time_of_born",
        "select_candidates": [
            "select people.time_of_born",
            "select people.People_ID, people.time_of_born",
            "select people.time_of_born, people.Height",
            "select people.Nationality, people.time_of_born"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9880267381668091,
            8.091445488389581e-05,
            0.00035702745663002133,
            6.413103255908936e-05,
            0.00014811418077442795,
            5.814757969346829e-05,
            0.0003369799524080008,
            6.644306995440274e-05
        ],
        "align_select": "select people.time_of_born",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the money rank of the tallest poker player?",
        "gold_select": "select poker_player.money_tier",
        "select_candidates": [
            "select poker_player.money_tier",
            "select poker_player.last_table_made",
            "select poker_player.highest_terminate",
            "select poker_player.People_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people",
            "people poker_player people",
            "people poker_player"
        ],
        "align_scores": [
            0.020991388708353043,
            6.699378718622029e-05,
            0.01609192229807377,
            6.449889042414725e-05,
            0.000563625362701714,
            7.056527829263359e-05,
            0.0010442864149808884,
            7.153297337936237e-05
        ],
        "align_select": "select poker_player.money_tier",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Return the money rank of the poker player with the greatest height.",
        "gold_select": "select poker_player.money_tier",
        "select_candidates": [
            "select poker_player.money_tier",
            "select poker_player.last_table_made",
            "select poker_player.Earnings",
            "select t0.c6"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people",
            "people poker_player people"
        ],
        "align_scores": [
            0.8999000191688538,
            6.276786734815687e-05,
            0.002432366833090782,
            5.973632141831331e-05,
            0.8612685799598694,
            5.8069726946996525e-05,
            0.0005741849890910089,
            0.0001107479547499679
        ],
        "align_select": "select poker_player.money_tier",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "List the names and birth dates of people in ascending alphabetical order of name.",
        "gold_select": "select people.Name, people.time_of_born",
        "select_candidates": [
            "select people.Name, people.time_of_born",
            "select people.People_ID, people.Name, people.time_of_born",
            "select people.Name, people.time_of_born, people.Height",
            "select people.Name, people.time_of_born, people.People_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9924348592758179,
            0.9924348592758179,
            0.00013974423927720636,
            0.00013974423927720636,
            0.00013446834054775536,
            0.00013446834054775536,
            0.00013527237751986831,
            0.00013527237751986831
        ],
        "align_select": "select people.Name, people.time_of_born",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
        "gold_select": "select people.Name, people.time_of_born",
        "select_candidates": [
            "select people.Name, people.time_of_born",
            "select people.People_ID, people.Name, people.time_of_born",
            "select people.Name, people.time_of_born, people.Height",
            "select people.Name, people.time_of_born, people.People_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9933619499206543,
            0.9933619499206543,
            0.00013131735613569617,
            0.00013131735613569617,
            0.00012576731387525797,
            0.00012576731387525797,
            0.00012266078556422144,
            0.00012266078556422144
        ],
        "align_select": "select people.Name, people.time_of_born",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List the earnings of poker players in descending order.",
        "gold_select": "select poker_player.income",
        "select_candidates": [
            "select poker_player.income",
            "select poker_player.income, poker_player.Poker_Player_ID",
            "select poker_player.income, t0.c6",
            "select poker_player.income, poker_player.currency_standing"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9956367611885071,
            0.9956367611885071,
            0.00010286780161550269,
            0.00010286780161550269,
            0.0003928326186724007,
            0.0003928326186724007,
            0.00012919485743623227,
            0.00012919485743623227
        ],
        "align_select": "select poker_player.income",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the earnings of poker players, ordered descending by value?",
        "gold_select": "select poker_player.income",
        "select_candidates": [
            "select poker_player.income",
            "select poker_player.income, poker_player.Poker_Player_ID",
            "select poker_player.income, t0.c6",
            "select poker_player.income, poker_player.currency_standing"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9947245717048645,
            0.9947245717048645,
            9.518889419268817e-05,
            9.518889419268817e-05,
            0.00045345642138272524,
            0.00045345642138272524,
            0.00013164333358872682,
            0.00013164333358872682
        ],
        "align_select": "select poker_player.income",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What is the average earnings of poker players?",
        "gold_select": "select avg(poker_player.income)",
        "select_candidates": [
            "select avg(poker_player.income)",
            "select an avg(poker_player.income)",
            "select avg(poker_player.income), poker_player.Poker_Player_ID",
            "select  avg(poker_player.income)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9959768652915955,
            6.157691677799448e-05,
            0.00040111015550792217,
            9.521768515696749e-05,
            0.000100385703262873,
            5.183804751140997e-05,
            0.9959768652915955,
            6.157691677799448e-05
        ],
        "align_select": "select avg(poker_player.income)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Return the average earnings across all poker players.",
        "gold_select": "select avg(poker_player.income)",
        "select_candidates": [
            "select avg(poker_player.income)",
            "select an avg(poker_player.income)",
            "select  avg(poker_player.income)",
            "select the avg(poker_player.income)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9963148236274719,
            0.00044593497295863926,
            0.00032669107895344496,
            0.00013327797933015972,
            0.9963148236274719,
            0.00044593497295863926,
            0.00031277499510906637,
            0.0001318874565185979
        ],
        "align_select": "select avg(poker_player.income)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the money rank of the poker player with the highest earnings?",
        "gold_select": "select poker_player.currency_standing",
        "select_candidates": [
            "select poker_player.currency_standing",
            "select poker_player.Poker_Player_ID, poker_player.currency_standing",
            "select poker_player.income, poker_player.currency_standing",
            "select poker_player.People_ID, poker_player.Final_Table_Made"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9887961149215698,
            7.592583278892562e-05,
            0.00022084986267145723,
            7.096199260558933e-05,
            0.00042258904431946576,
            6.971164111746475e-05,
            0.0001849243271863088,
            6.491621024906635e-05
        ],
        "align_select": "select poker_player.currency_standing",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Return the money rank of the player with the greatest earnings.",
        "gold_select": "select poker_player.currency_standing",
        "select_candidates": [
            "select poker_player.currency_standing",
            "select poker_player.Poker_Player_ID, poker_player.currency_standing",
            "select poker_player.income, poker_player.currency_standing",
            "select poker_player.currency_standing, poker_player.income"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9800999760627747,
            6.504199700430036e-05,
            0.00017844630929175764,
            6.343175482470542e-05,
            0.000269929674686864,
            6.282285175984725e-05,
            0.00023402110673487186,
            5.983158916933462e-05
        ],
        "align_select": "select poker_player.currency_standing",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "gold_select": "select max(poker_player.Final_Table_Made)",
        "select_candidates": [
            "select max(poker_player.Final_Table_Made)",
            "select max(poker_player.Final_Table_Made), poker_player.income",
            "select max(poker_player.Final_Table_Made), poker_player.income",
            "select max(poker_player.Final_Table_Made) de poker_player.Poker_Player_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9930745363235474,
            8.299751061713323e-05,
            0.0001838387397583574,
            5.3955587645759806e-05,
            0.0001838387397583574,
            5.3955587645759806e-05,
            0.00014248999650590122,
            7.750218355795369e-05
        ],
        "align_select": "select max(poker_player.Final_Table_Made)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "gold_select": "select max(poker_player.Final_Table_Made)",
        "select_candidates": [
            "select max(poker_player.Final_Table_Made)",
            "select max(poker_player.Final_Table_Made), poker_player.income",
            "select max(poker_player.Final_Table_Made), poker_player.Best_Finish",
            "select max(poker_player.Final_Table_Made) devced poker_player.income"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9944728016853333,
            9.559961472405121e-05,
            0.00013173662591725588,
            6.106805085437372e-05,
            0.0001482704683439806,
            6.299153756117448e-05,
            0.0001287143095396459,
            6.825915625086054e-05
        ],
        "align_select": "select max(poker_player.Final_Table_Made)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of poker players whose earnings is higher than 300000?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, poker_player.People_ID",
            "select people.Name, t1.c5"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9927383065223694,
            0.0002859431551769376,
            0.00014725839719176292,
            7.912649016361684e-05,
            0.00015062381862662733,
            7.706684118602425e-05,
            0.00026555167278274894,
            8.52077646413818e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the names of poker players who have earnings above 300000.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, people.Nationality",
            "select people.Name, t1.c5"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9740304946899414,
            0.00027825290453620255,
            0.00015309281297959387,
            8.648693619761616e-05,
            0.0001827767409849912,
            8.906122093321756e-05,
            0.0002864053822122514,
            8.896853978512809e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the birth date of the poker player with the lowest earnings?",
        "gold_select": "select people.Birth_Date",
        "select_candidates": [
            "select people.Birth_Date",
            "select people.Birth_Date, people.Height",
            "select people.Birth_Date, poker_player.People_ID",
            "select people.People_ID, people.Birth_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.990035891532898,
            0.0001004799414658919,
            0.00018085110059473664,
            6.675808253930882e-05,
            0.00025270687183365226,
            6.535354623338208e-05,
            0.00029963094857521355,
            7.384835043922067e-05
        ],
        "align_select": "select people.Birth_Date",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Return the birth date of the poker player with the lowest earnings.",
        "gold_select": "select people.Birth_Date",
        "select_candidates": [
            "select people.Birth_Date",
            "select people.Birth_Date, people.Height",
            "select people.People_ID, people.Birth_Date",
            "select people.Birth_Date, poker_player.People_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9932001233100891,
            6.78640280966647e-05,
            0.00015927021740935743,
            5.995626997901127e-05,
            0.0003369757905602455,
            5.9512240113690495e-05,
            0.000225871815928258,
            5.555887764785439e-05
        ],
        "align_select": "select people.Birth_Date",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the money rank of the tallest poker player?",
        "gold_select": "select poker_player.currency_standing",
        "select_candidates": [
            "select poker_player.currency_standing",
            "select poker_player.People_ID, poker_player.currency_standing",
            "select poker_player.People_ID, poker_player.Final_Table_Made",
            "select poker_player.currency_standing, people.Height"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people",
            "people poker_player people"
        ],
        "align_scores": [
            0.5541130900382996,
            7.19228555681184e-05,
            0.0001445608795620501,
            6.679457146674395e-05,
            0.00017042222316376865,
            5.826469714520499e-05,
            0.00047084075049497187,
            6.898775609442964e-05
        ],
        "align_select": "select poker_player.currency_standing",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Return the money rank of the poker player with the greatest height.",
        "gold_select": "select poker_player.currency_standing",
        "select_candidates": [
            "select poker_player.currency_standing",
            "select poker_player.People_ID, poker_player.currency_standing",
            "select poker_player.Poker_Player_ID, people.Height",
            "select poker_player.Poker_Player_ID, poker_player.currency_standing"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people",
            "people poker_player people"
        ],
        "align_scores": [
            0.9913263916969299,
            6.646581459790468e-05,
            0.00018767837900668383,
            6.821569695603102e-05,
            0.00014149821072351187,
            6.94672271492891e-05,
            0.0001645663141971454,
            6.499797746073455e-05
        ],
        "align_select": "select poker_player.currency_standing",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the average earnings of poker players with height higher than 200?",
        "gold_select": "select avg(poker_player.income)",
        "select_candidates": [
            "select avg(poker_player.income)",
            "select avg(poker_player.income), people.Height",
            "select an avg(poker_player.income)",
            "select  avg(poker_player.income)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9961163997650146,
            9.23098050407134e-05,
            0.0001677472610026598,
            0.15099848806858063,
            0.0003509243542794138,
            9.408594632986933e-05,
            0.9961163997650146,
            9.23098050407134e-05
        ],
        "align_select": "select avg(poker_player.income)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give average earnings of poker players who are taller than 200.",
        "gold_select": "select avg(poker_player.income)",
        "select_candidates": [
            "select avg(poker_player.income)",
            "select an avg(poker_player.income)",
            "select avg(poker_player.income), people.Height",
            "select  avg(poker_player.income)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9961333274841309,
            0.000116986375360284,
            0.00038244191091507673,
            0.00011601996811805293,
            0.00028038094751536846,
            0.0355096310377121,
            0.9961333274841309,
            0.000116986375360284
        ],
        "align_select": "select avg(poker_player.income)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of poker players in descending order of earnings?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, poker_player.income",
            "select people.Name, poker_player.People_ID",
            "select people.Name, poker_player.Best_Finish"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.994619607925415,
            0.994619607925415,
            0.00021712125453632325,
            0.00021712125453632325,
            0.0001335600099992007,
            0.0001335600099992007,
            0.00018466057372279465,
            0.00018466057372279465
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Return the names of poker players sorted by their earnings descending.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, poker_player.income",
            "select people.Name (ordered by poker_player.income)",
            "select people.Name, poker_player.Best_Finish"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9956242442131042,
            0.9956242442131042,
            0.00023885827977210283,
            0.00023885827977210283,
            0.003727682400494814,
            0.003727682400494814,
            0.00013724742166232318,
            0.00013724742166232318
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What is the money rank of the poker player with the highest earnings?",
        "gold_select": "select poker_player.money_tier",
        "select_candidates": [
            "select poker_player.money_tier",
            "select poker_player.Poker_Player_ID, poker_player.money_tier",
            "select poker_player.People_ID, poker_player.Final_Table_Made",
            "select poker_player.Earnings, poker_player.money_tier"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.884959876537323,
            7.89131736382842e-05,
            0.0001863893703557551,
            6.845223833806813e-05,
            0.0001849243271863088,
            6.491621024906635e-05,
            0.00037311544292606413,
            6.517193833133206e-05
        ],
        "align_select": "select poker_player.money_tier",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Return the money rank of the player with the greatest earnings.",
        "gold_select": "select poker_player.money_tier",
        "select_candidates": [
            "select poker_player.money_tier",
            "select poker_player.Poker_Player_ID, poker_player.money_tier",
            "select poker_player.Earnings, poker_player.money_tier",
            "select poker_player.money_tier, poker_player.Earnings"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.566922664642334,
            6.0049478634027764e-05,
            0.00011679988529067487,
            6.53027746011503e-05,
            0.0002629834634717554,
            6.079414379200898e-05,
            0.00028241262771189213,
            5.977826731395908e-05
        ],
        "align_select": "select poker_player.money_tier",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the money rank of the tallest poker player?",
        "gold_select": "select poker_player.money_tier",
        "select_candidates": [
            "select poker_player.money_tier",
            "select poker_player.Final_Table_Made",
            "select poker_player.Best_Finish",
            "select poker_player.People_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people",
            "people poker_player people"
        ],
        "align_scores": [
            0.020991388708353043,
            6.699378718622029e-05,
            0.003563500940799713,
            6.113295239629224e-05,
            0.006614433601498604,
            7.031626591924578e-05,
            0.0010442864149808884,
            7.153297337936237e-05
        ],
        "align_select": "select poker_player.money_tier",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Return the money rank of the poker player with the greatest height.",
        "gold_select": "select poker_player.money_tier",
        "select_candidates": [
            "select poker_player.money_tier",
            "select poker_player.Final_Table_Made",
            "select poker_player.Earnings",
            "select t0.c6"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people",
            "people poker_player people"
        ],
        "align_scores": [
            0.8999000191688538,
            6.276786734815687e-05,
            0.12457150220870972,
            5.9650541516020894e-05,
            0.8612685799598694,
            5.8069726946996525e-05,
            0.0005741849890910089,
            0.0001107479547499679
        ],
        "align_select": "select poker_player.money_tier",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "List the final tables made and the best finishes of poker players.",
        "gold_select": "select poker_player.last_table_made, poker_player.Best_Finish",
        "select_candidates": [
            "select poker_player.last_table_made, poker_player.Best_Finish",
            "select poker_player.Poker_Player_ID, poker_player.last_table_made, poker_player.Best_Finish",
            "select poker_player.People_ID, poker_player.last_table_made, poker_player.Best_Finish",
            "select poker_player.last_table_made.c2, poker_player.Best_Finish"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9916198253631592,
            0.0030323092360049486,
            0.00017377795302309096,
            0.00016164379485417157,
            0.00016580685041844845,
            0.00011759557673940435,
            0.00028007797664031386,
            0.000131178559968248
        ],
        "align_select": "select poker_player.last_table_made, poker_player.Best_Finish",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the final tables made and best finishes for all poker players?",
        "gold_select": "select poker_player.last_table_made, poker_player.Best_Finish",
        "select_candidates": [
            "select poker_player.last_table_made, poker_player.Best_Finish",
            "select poker_player.Poker_Player_ID, poker_player.last_table_made, poker_player.Best_Finish",
            "select poker_player.People_ID, poker_player.last_table_made, poker_player.Best_Finish",
            "select poker_player.last_table_made.c2, poker_player.Best_Finish"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9880732893943787,
            0.0007117585628293455,
            0.00017312564887106419,
            0.00010696251410990953,
            0.0001823671191232279,
            9.645901445765048e-05,
            0.00041003921069204807,
            0.00010290037607774138
        ],
        "align_select": "select poker_player.last_table_made, poker_player.Best_Finish",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the money rank of the poker player with the highest earnings?",
        "gold_select": "select poker_player.currency_standing",
        "select_candidates": [
            "select poker_player.currency_standing",
            "select poker_player.Poker_Player_ID, poker_player.currency_standing",
            "select poker_player.Earnings, poker_player.currency_standing",
            "select poker_player.People_ID, poker_player.last_table_made"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9887961149215698,
            7.592583278892562e-05,
            0.00022084986267145723,
            7.096199260558933e-05,
            0.00039081519935280085,
            6.742267578374594e-05,
            0.0001533598842797801,
            6.455260881921276e-05
        ],
        "align_select": "select poker_player.currency_standing",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Return the money rank of the player with the greatest earnings.",
        "gold_select": "select poker_player.currency_standing",
        "select_candidates": [
            "select poker_player.currency_standing",
            "select poker_player.Poker_Player_ID, poker_player.currency_standing",
            "select poker_player.Earnings, poker_player.currency_standing",
            "select poker_player.currency_standing, poker_player.Earnings"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9800999760627747,
            6.504199700430036e-05,
            0.00017844630929175764,
            6.343175482470542e-05,
            0.0002749604464042932,
            6.216965994099155e-05,
            0.00023540118127129972,
            5.891280306968838e-05
        ],
        "align_select": "select poker_player.currency_standing",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "gold_select": "select max(poker_player.last_table_made)",
        "select_candidates": [
            "select max(poker_player.last_table_made)",
            "select max(poker_player.last_table_made), poker_player.Earnings",
            "select max(poker_player.last_table_made), poker_player.Best_Finish",
            "select max(poker_player.last_table_made) dependant on poker_player.Earnings"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.988135576248169,
            0.0001094687104341574,
            0.000200931157451123,
            5.9197252994636074e-05,
            0.00017159510753117502,
            7.454663864336908e-05,
            0.0004951280425302684,
            7.302851008716971e-05
        ],
        "align_select": "select max(poker_player.last_table_made)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "gold_select": "select max(poker_player.last_table_made)",
        "select_candidates": [
            "select max(poker_player.last_table_made)",
            "select max(poker_player.last_table_made), poker_player.Earnings",
            "select max(poker_player.last_table_made), poker_player.Best_Finish",
            "select max(poker_player.last_table_made), max(poker_player.Best_Finish)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9941014647483826,
            9.927269275067374e-05,
            0.00013479737390298396,
            6.114461575634778e-05,
            0.00014424555411096662,
            6.34215321042575e-05,
            0.0001518669887445867,
            6.627385300816968e-05
        ],
        "align_select": "select max(poker_player.last_table_made)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the names of poker players ordered by the final tables made in ascending order.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, poker_player.People_ID",
            "select people.Name, poker_player.last_table_made",
            "select people.Name, poker_player.Best_Finish"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9941558837890625,
            0.0032685750629752874,
            0.00011413598258513957,
            9.008001507027075e-05,
            0.0005500661209225655,
            0.00010171777103096247,
            0.0004331538802944124,
            0.00011471220932435244
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, poker_player.last_table_made",
            "select people.Name (ordered by poker_player.last_table_made)",
            "select people.Name, poker_player.People_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9894098043441772,
            0.9894098043441772,
            0.0003362647839821875,
            0.0003362647839821875,
            0.0031970522832125425,
            0.0031970522832125425,
            0.0001560931996209547,
            0.0001560931996209547
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What is the money rank of the tallest poker player?",
        "gold_select": "select poker_player.currency_standing",
        "select_candidates": [
            "select poker_player.currency_standing",
            "select poker_player.People_ID, poker_player.currency_standing",
            "select poker_player.People_ID, poker_player.last_table_made",
            "select poker_player.currency_standing, max(poker_player.Earnings)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people",
            "people poker_player people",
            "people poker_player"
        ],
        "align_scores": [
            0.5541130900382996,
            7.19228555681184e-05,
            0.0001445608795620501,
            6.679457146674395e-05,
            0.0001781861501513049,
            5.8369918406242505e-05,
            0.00012702486128546298,
            7.235272641992196e-05
        ],
        "align_select": "select poker_player.currency_standing",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Return the money rank of the poker player with the greatest height.",
        "gold_select": "select poker_player.currency_standing",
        "select_candidates": [
            "select poker_player.currency_standing",
            "select poker_player.People_ID, poker_player.currency_standing",
            "select poker_player.People_ID, poker_player.last_table_made",
            "select poker_player.Poker_Player_ID, people.Height"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people",
            "people poker_player people"
        ],
        "align_scores": [
            0.9913263916969299,
            6.646581459790468e-05,
            0.00018767837900668383,
            6.821569695603102e-05,
            0.00010629610187606886,
            6.347418093355373e-05,
            0.00014149821072351187,
            6.94672271492891e-05
        ],
        "align_select": "select poker_player.currency_standing",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "List the earnings of poker players in descending order.",
        "gold_select": "select poker_player.revenue",
        "select_candidates": [
            "select poker_player.revenue",
            "select poker_player.revenue, poker_player.Money_Rank",
            "select poker_player.revenue, t0.c6",
            "select poker_player.revenue, poker_player.Poker_Player_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9953626394271851,
            0.9953626394271851,
            0.0002056329685728997,
            0.0002056329685728997,
            0.00038510424201376736,
            0.00038510424201376736,
            0.0001083384413504973,
            0.0001083384413504973
        ],
        "align_select": "select poker_player.revenue",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the earnings of poker players, ordered descending by value?",
        "gold_select": "select poker_player.revenue",
        "select_candidates": [
            "select poker_player.revenue",
            "select poker_player.revenue, poker_player.Money_Rank",
            "select poker_player.revenue, t0.c6",
            "select poker_player.revenue, poker_player.Poker_Player_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9946249127388,
            0.9946249127388,
            0.0001856812450569123,
            0.0001856812450569123,
            0.0004413212591316551,
            0.0004413212591316551,
            9.837387915467843e-05,
            9.837387915467843e-05
        ],
        "align_select": "select poker_player.revenue",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What is the average earnings of poker players?",
        "gold_select": "select avg(poker_player.revenue)",
        "select_candidates": [
            "select avg(poker_player.revenue)",
            "select an avg(poker_player.revenue)",
            "select avg(poker_player.revenue), poker_player.Poker_Player_ID",
            "select the avg(poker_player.revenue)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9957030415534973,
            6.111348193371668e-05,
            0.0004323177272453904,
            9.231843432644382e-05,
            9.266557754017413e-05,
            5.226796929491684e-05,
            0.0004057524784002453,
            9.565678919898346e-05
        ],
        "align_select": "select avg(poker_player.revenue)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Return the average earnings across all poker players.",
        "gold_select": "select avg(poker_player.revenue)",
        "select_candidates": [
            "select avg(poker_player.revenue)",
            "select an avg(poker_player.revenue)",
            "select  avg(poker_player.revenue)",
            "select the avg(poker_player.revenue)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player",
            "poker_player people"
        ],
        "align_scores": [
            0.9962826371192932,
            0.0005002550315111876,
            0.0003360210685059428,
            0.00013462590868584812,
            0.9962826371192932,
            0.0005002550315111876,
            0.00032172995270229876,
            0.00013599509838968515
        ],
        "align_select": "select avg(poker_player.revenue)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the money rank of the poker player with the highest earnings?",
        "gold_select": "select poker_player.Money_Rank",
        "select_candidates": [
            "select poker_player.Money_Rank",
            "select poker_player.Poker_Player_ID, poker_player.Money_Rank",
            "select poker_player.People_ID, poker_player.Final_Table_Made",
            "select poker_player.People_ID, poker_player.Money_Rank"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9878439903259277,
            6.832806684542447e-05,
            0.0002243205381091684,
            6.656433106400073e-05,
            0.0001849243271863088,
            6.491621024906635e-05,
            0.0002171728410758078,
            6.783944263588637e-05
        ],
        "align_select": "select poker_player.Money_Rank",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Return the money rank of the player with the greatest earnings.",
        "gold_select": "select poker_player.Money_Rank",
        "select_candidates": [
            "select poker_player.Money_Rank",
            "select poker_player.Poker_Player_ID, poker_player.Money_Rank",
            "select poker_player.revenue, poker_player.Money_Rank",
            "select poker_player.Money_Rank, poker_player.revenue"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9433497190475464,
            5.7214485423173755e-05,
            0.0001402097987011075,
            6.0512462368933484e-05,
            0.00023133722424972802,
            6.582615606021136e-05,
            0.00019667860760819167,
            5.978726767352782e-05
        ],
        "align_select": "select poker_player.Money_Rank",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "gold_select": "select max(poker_player.Final_Table_Made)",
        "select_candidates": [
            "select max(poker_player.Final_Table_Made)",
            "select max(poker_player.Final_Table_Made), poker_player.revenue",
            "select max(poker_player.Final_Table_Made) dependant on poker_player.revenue",
            "select max(poker_player.Final_Table_Made) de poker_player.Poker_Player_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player",
            "poker_player people"
        ],
        "align_scores": [
            0.9930745363235474,
            8.299751061713323e-05,
            0.00017483934061601758,
            5.382659219321795e-05,
            0.00044354729470796883,
            6.952031253604218e-05,
            0.00014248999650590122,
            7.750218355795369e-05
        ],
        "align_select": "select max(poker_player.Final_Table_Made)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "gold_select": "select max(poker_player.Final_Table_Made)",
        "select_candidates": [
            "select max(poker_player.Final_Table_Made)",
            "select max(poker_player.Final_Table_Made), poker_player.revenue",
            "select max(poker_player.Final_Table_Made) devced poker_player.Poker_Player_ID",
            "select max(poker_player.Final_Table_Made), poker_player.Best_Finish"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player",
            "poker_player people"
        ],
        "align_scores": [
            0.9944728016853333,
            9.559961472405121e-05,
            0.00013101680087856948,
            5.976019747322425e-05,
            0.00014687514340039343,
            6.252210005186498e-05,
            0.0001482704683439806,
            6.299153756117448e-05
        ],
        "align_select": "select max(poker_player.Final_Table_Made)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of poker players whose earnings is higher than 300000?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, poker_player.People_ID",
            "select people.Name, poker_player.Poker_Player_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9927383065223694,
            0.0002859431551769376,
            0.00014725839719176292,
            7.912649016361684e-05,
            0.00015062381862662733,
            7.706684118602425e-05,
            0.00014507789455819875,
            8.193894609576091e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the names of poker players who have earnings above 300000.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, poker_player.People_ID",
            "select people.Name, people.Nationality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9740304946899414,
            0.00027825290453620255,
            0.00015309281297959387,
            8.648693619761616e-05,
            0.0001536776835564524,
            7.731932419119403e-05,
            0.0001827767409849912,
            8.906122093321756e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the birth date of the poker player with the lowest earnings?",
        "gold_select": "select people.Birth_Date",
        "select_candidates": [
            "select people.Birth_Date",
            "select people.Birth_Date, poker_player.People_ID",
            "select people.Birth_Date, poker_player.Money_Rank",
            "select people.People_ID, people.Birth_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.990035891532898,
            0.0001004799414658919,
            0.00025270687183365226,
            6.535354623338208e-05,
            0.0005256625008769333,
            6.201594806043431e-05,
            0.00029963094857521355,
            7.384835043922067e-05
        ],
        "align_select": "select people.Birth_Date",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Return the birth date of the poker player with the lowest earnings.",
        "gold_select": "select people.Birth_Date",
        "select_candidates": [
            "select people.Birth_Date",
            "select people.Birth_Date, people.tallness",
            "select people.People_ID, people.Birth_Date",
            "select people.Birth_Date, poker_player.People_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9932001233100891,
            6.78640280966647e-05,
            0.00020301967742852867,
            5.5514174164272845e-05,
            0.0003369757905602455,
            5.9512240113690495e-05,
            0.000225871815928258,
            5.555887764785439e-05
        ],
        "align_select": "select people.Birth_Date",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the money rank of the tallest poker player?",
        "gold_select": "select poker_player.Money_Rank",
        "select_candidates": [
            "select poker_player.Money_Rank",
            "select poker_player.People_ID, poker_player.Money_Rank",
            "select poker_player.Poker_Player_ID, poker_player.Money_Rank",
            "select poker_player.People_ID, poker_player.Final_Table_Made"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people",
            "people poker_player people"
        ],
        "align_scores": [
            0.6049582362174988,
            6.264600233407691e-05,
            0.00013159701484255493,
            6.353776552714407e-05,
            0.00011381960212020203,
            5.987125405226834e-05,
            0.00017042222316376865,
            5.826469714520499e-05
        ],
        "align_select": "select poker_player.Money_Rank",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Return the money rank of the poker player with the greatest height.",
        "gold_select": "select poker_player.Money_Rank",
        "select_candidates": [
            "select poker_player.Money_Rank",
            "select poker_player.People_ID, poker_player.Money_Rank",
            "select poker_player.Poker_Player_ID, poker_player.Money_Rank",
            "select poker_player.People_ID, poker_player.Final_Table_Made"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people",
            "people poker_player people"
        ],
        "align_scores": [
            0.9799250364303589,
            5.870362656423822e-05,
            0.00012380270345602185,
            6.264552212087438e-05,
            0.00011550259659998119,
            6.0911948821740225e-05,
            0.00013582545216195285,
            6.0273112467257306e-05
        ],
        "align_select": "select poker_player.Money_Rank",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the average earnings of poker players with height higher than 200?",
        "gold_select": "select avg(poker_player.revenue)",
        "select_candidates": [
            "select avg(poker_player.revenue)",
            "select an avg(poker_player.revenue)",
            "select avg(poker_player.revenue), people.tallness",
            "select  avg(poker_player.revenue)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9961737990379333,
            9.335009235655889e-05,
            0.0003610743733588606,
            9.445162868360057e-05,
            0.00020865615806542337,
            0.16657200455665588,
            0.9961737990379333,
            9.335009235655889e-05
        ],
        "align_select": "select avg(poker_player.revenue)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give average earnings of poker players who are taller than 200.",
        "gold_select": "select avg(poker_player.revenue)",
        "select_candidates": [
            "select avg(poker_player.revenue)",
            "select an avg(poker_player.revenue)",
            "select  avg(poker_player.revenue)",
            "select the avg(poker_player.revenue)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9962116479873657,
            0.0001223427098011598,
            0.0003917175345122814,
            0.00011991855717496946,
            0.9962116479873657,
            0.0001223427098011598,
            0.00037382234586402774,
            0.00016309789498336613
        ],
        "align_select": "select avg(poker_player.revenue)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of poker players in descending order of earnings?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, poker_player.revenue",
            "select people.Name, poker_player.People_ID",
            "select people.Name, poker_player.Best_Finish"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.994619607925415,
            0.994619607925415,
            0.00023827962286304682,
            0.00023827962286304682,
            0.0001335600099992007,
            0.0001335600099992007,
            0.00018466057372279465,
            0.00018466057372279465
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Return the names of poker players sorted by their earnings descending.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, poker_player.revenue",
            "select people.Name (ordered by poker_player.revenue)",
            "select people.Name, poker_player.Best_Finish"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9956242442131042,
            0.9956242442131042,
            0.00023983613937161863,
            0.00023983613937161863,
            0.003491114592179656,
            0.003491114592179656,
            0.00013724742166232318,
            0.00013724742166232318
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List the contestant numbers and names, ordered by contestant name descending.",
        "gold_select": "select CONTESTANTS.competitor_digits, CONTESTANTS.participant",
        "select_candidates": [
            "select CONTESTANTS.competitor_digits, CONTESTANTS.participant",
            "select CONTESTANTS.participant, CONTESTANTS.competitor_digits",
            "select t1.c2, CONTESTANTS.participant",
            "select VOTES.vote_id, CONTESTANTS.participant"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "CONTESTANTS",
        "table_candidates": [
            "CONTESTANTS"
        ],
        "align_scores": [
            0.9926862716674805,
            0.9926862716674805,
            0.9903169870376587,
            0.9903169870376587,
            0.00040955556323751807,
            0.00040955556323751807,
            0.0002183194737881422,
            0.0002183194737881422
        ],
        "align_select": "select CONTESTANTS.competitor_digits, CONTESTANTS.participant",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the maximum and minimum values of area codes?",
        "gold_select": "select max(AREA_CODE_STATE.region_digits), min(AREA_CODE_STATE.region_digits)",
        "select_candidates": [
            "select max(AREA_CODE_STATE.state), min(AREA_CODE_STATE.state)",
            "select max(t0.c2), min(t0.c2)",
            "select max(t0.c6), min(t0.c6)",
            "select max(AREA_CODE_STATE.state), min(t0.c2)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "AREA_CODE_STATE",
        "table_candidates": [
            "AREA_CODE_STATE",
            "AREA_CODE_STATE CONTESTANTS",
            "AREA_CODE_STATE VOTES"
        ],
        "align_scores": [
            0.5202499032020569,
            0.001171990530565381,
            0.007588121108710766,
            0.0009788982570171356,
            0.011088525876402855,
            0.0014880874659866095,
            0.0004762713797390461,
            0.00040705379797145724
        ],
        "align_select": "select max(AREA_CODE_STATE.state), min(AREA_CODE_STATE.state)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "gold_select": "select CONTESTANTS.participant",
        "select_candidates": [
            "select CONTESTANTS.participant",
            "select CONTESTANTS.participant, t1.c2",
            "select CONTESTANTS.participant, t1.c2, t1.c3",
            "select distinct CONTESTANTS.participant"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS",
        "table_candidates": [
            "CONTESTANTS",
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9920026063919067,
            0.0006023834575898945,
            0.0003957166336476803,
            0.00011187720519956201,
            0.0003904476761817932,
            9.547753870720044e-05,
            0.030263513326644897,
            0.0812542513012886
        ],
        "align_select": "select CONTESTANTS.participant",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "gold_select": "select CONTESTANTS.competitor_digits, CONTESTANTS.participant",
        "select_candidates": [
            "select CONTESTANTS.competitor_digits, CONTESTANTS.participant",
            "select CONTESTANTS.participant, CONTESTANTS.competitor_digits",
            "select count(*), CONTESTANTS.competitor_digits, CONTESTANTS.participant",
            "select VOTES.competitor_digits, CONTESTANTS.participant"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS VOTES",
        "table_candidates": [
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9221880435943604,
            9.959012822946534e-05,
            0.8639466166496277,
            0.00010905715316766873,
            0.00042271579150110483,
            6.113691779319197e-05,
            0.4467564523220062,
            9.302538819611073e-05
        ],
        "align_select": "select CONTESTANTS.competitor_digits, CONTESTANTS.participant",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "gold_select": "select CONTESTANTS.competitor_digits, CONTESTANTS.participant",
        "select_candidates": [
            "select CONTESTANTS.competitor_digits, CONTESTANTS.participant",
            "select CONTESTANTS.participant, CONTESTANTS.competitor_digits",
            "select CONTESTANTS.participant, t1.c2",
            "select t1.c2, CONTESTANTS.participant"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "CONTESTANTS VOTES",
        "table_candidates": [
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.8569352030754089,
            0.9085789918899536,
            0.7271761298179626,
            0.8170815110206604,
            0.0013291694922372699,
            0.0024928771890699863,
            0.000647868902888149,
            0.0008285606163553894
        ],
        "align_select": "select CONTESTANTS.competitor_digits, CONTESTANTS.participant",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "How many contestants did not get voted?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), CONTESTANTS.participant",
            "select count(*), CONTESTANTS.competitor_digits",
            "select count(*), t1.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS",
        "table_candidates": [
            "CONTESTANTS",
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9866247177124023,
            0.006373102776706219,
            0.0003383092116564512,
            0.0012097142171114683,
            0.00030142281320877373,
            0.0007638594834133983,
            0.0003883718163706362,
            0.0012933501275256276
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the area code in which the most voters voted?",
        "gold_select": "select AREA_CODE_STATE.region_digits",
        "select_candidates": [
            "select AREA_CODE_STATE.region_digits",
            "select VOTES.state",
            "select AREA_CODE_STATE.state",
            "select AREA_CODE_STATE.region_digits, VOTES.state"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "AREA_CODE_STATE VOTES",
        "table_candidates": [
            "AREA_CODE_STATE VOTES",
            "CONTESTANTS VOTES",
            "VOTES"
        ],
        "align_scores": [
            0.001321474788710475,
            7.861521589802578e-05,
            0.001445332425646484,
            7.134005863917992e-05,
            0.0015223738737404346,
            7.011306297499686e-05,
            0.00025517205358482897,
            6.809707701904699e-05
        ],
        "align_select": "select AREA_CODE_STATE.region_digits",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "gold_select": "select VOTES.created, VOTES.state, VOTES.phone_number",
        "select_candidates": [
            "select VOTES.created, VOTES.state, VOTES.phone_number",
            "select VOTES.created, VOTES.state, VOTES.phone_number",
            "select VOTES.created), VOTES.state, VOTES.phone_number",
            "select VOTES.created, VOTES.state.c3, VOTES.phone_number"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS VOTES",
        "table_candidates": [
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9906024932861328,
            0.00014610604557674378,
            0.9906024932861328,
            0.00014610604557674378,
            0.008905489929020405,
            8.674414129927754e-05,
            0.003392413491383195,
            8.699316094862297e-05
        ],
        "align_select": "select VOTES.created, VOTES.state, VOTES.phone_number",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "gold_select": "select AREA_CODE_STATE.region_digits",
        "select_candidates": [
            "select AREA_CODE_STATE.region_digits",
            "select VOTES.state",
            "select AREA_CODE_STATE.state",
            "select t0.c, AREA_CODE_STATE.state"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "AREA_CODE_STATE CONTESTANTS VOTES",
        "table_candidates": [
            "AREA_CODE_STATE CONTESTANTS VOTES",
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.07027991861104965,
            0.07027991861104965,
            0.47783374786376953,
            0.47783374786376953,
            0.029015041887760162,
            0.029015041887760162,
            0.00019101267389487475,
            0.00019101267389487475
        ],
        "align_select": "select VOTES.state",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Return the names of the contestants whose names contain the substring 'Al'.",
        "gold_select": "select CONTESTANTS.participant",
        "select_candidates": [
            "select CONTESTANTS.participant",
            "select distinct CONTESTANTS.participant",
            "select CONTESTANTS.participant, t1.c2",
            "select CONTESTANTS.competitor_digits, CONTESTANTS.participant"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS",
        "table_candidates": [
            "AREA_CODE_STATE CONTESTANTS",
            "VOTES CONTESTANTS"
        ],
        "align_scores": [
            0.9952409267425537,
            7.07383660483174e-05,
            0.021420598030090332,
            7.089665450621396e-05,
            0.00024033263616729528,
            7.247820758493617e-05,
            0.00011474392522359267,
            6.760926771676168e-05
        ],
        "align_select": "select CONTESTANTS.participant",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the contestant numbers and names, ordered by contestant name descending.",
        "gold_select": "select CONTESTANTS.contestant_number, CONTESTANTS.competitor_cognomen",
        "select_candidates": [
            "select CONTESTANTS.contestant_number, CONTESTANTS.competitor_cognomen",
            "select CONTESTANTS.contestant_number, t1.c2",
            "select CONTESTANTS.contestant_number, CONTESTANTS.competitor_cognomen, t1.c2",
            "select CONTESTANTS.contestant_number, CONTESTANTS.competitor_cognomen, t1.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "CONTESTANTS",
        "table_candidates": [
            "CONTESTANTS"
        ],
        "align_scores": [
            0.9950024485588074,
            0.9950024485588074,
            0.0004281690635252744,
            0.0004281690635252744,
            0.00015079039440024644,
            0.00015079039440024644,
            0.00015079039440024644,
            0.00015079039440024644
        ],
        "align_select": "select CONTESTANTS.contestant_number, CONTESTANTS.competitor_cognomen",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List the vote ids, phone numbers and states of all votes.",
        "gold_select": "select VOTES.vote_id, VOTES.ring_up, VOTES.state",
        "select_candidates": [
            "select VOTES.vote_id, VOTES.ring_up, VOTES.state",
            "select VOTES.vote_id, VOTES.ring_up.c1, VOTES.state",
            "select VOTES.vote_id, VOTES.ring_up, VOTES.state",
            "select VOTES.vote_id, VOTES.ring_up), VOTES.state"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES"
        ],
        "align_scores": [
            0.9867615699768066,
            0.9867615699768066,
            0.000380846147891134,
            0.000380846147891134,
            0.9867615699768066,
            0.9867615699768066,
            0.0014652301324531436,
            0.0014652301324531436
        ],
        "align_select": "select VOTES.vote_id, VOTES.ring_up, VOTES.state",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "gold_select": "select CONTESTANTS.competitor_cognomen",
        "select_candidates": [
            "select CONTESTANTS.competitor_cognomen",
            "select t1.c2",
            "select t1.c4",
            "select CONTESTANTS.contestant_number, CONTESTANTS.competitor_cognomen"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS",
        "table_candidates": [
            "CONTESTANTS",
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9068100452423096,
            0.00016067875549197197,
            0.020334454253315926,
            0.00011693763372022659,
            0.001931681646965444,
            9.513155237073079e-05,
            0.000196268898434937,
            6.409275374608114e-05
        ],
        "align_select": "select CONTESTANTS.competitor_cognomen",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "gold_select": "select CONTESTANTS.contestant_number, CONTESTANTS.competitor_cognomen",
        "select_candidates": [
            "select VOTES.contestant_number, CONTESTANTS.competitor_cognomen",
            "select CONTESTANTS.contestant_number, CONTESTANTS.competitor_cognomen",
            "select VOTES.state, CONTESTANTS.contestant_number, CONTESTANTS.competitor_cognomen",
            "select VOTES.contestant_number, CONTESTANTS.competitor_cognomen, CONTESTANTS.contestant_number"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS VOTES",
        "table_candidates": [
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.005477352533489466,
            8.398986392421648e-05,
            0.676706850528717,
            8.483837154926732e-05,
            0.00045458838576450944,
            5.896214861422777e-05,
            0.0002637865545693785,
            8.466284634778276e-05
        ],
        "align_select": "select CONTESTANTS.contestant_number, CONTESTANTS.competitor_cognomen",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "gold_select": "select CONTESTANTS.contestant_number, CONTESTANTS.competitor_cognomen",
        "select_candidates": [
            "select CONTESTANTS.contestant_number, CONTESTANTS.competitor_cognomen",
            "select VOTES.contestant_number, CONTESTANTS.competitor_cognomen",
            "select VOTES.state, CONTESTANTS.contestant_number, CONTESTANTS.competitor_cognomen",
            "select CONTESTANTS.competitor_cognomen, CONTESTANTS.contestant_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "CONTESTANTS VOTES",
        "table_candidates": [
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.8919406533241272,
            0.9331543445587158,
            0.01422088872641325,
            0.09575575590133667,
            0.00047109441948123276,
            0.0006679676589556038,
            0.9458287358283997,
            0.9639032483100891
        ],
        "align_select": "select CONTESTANTS.contestant_number, CONTESTANTS.competitor_cognomen",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "gold_select": "select VOTES.created, VOTES.state, VOTES.ring_up",
        "select_candidates": [
            "select VOTES.created, VOTES.state, VOTES.ring_up",
            "select VOTES.created, VOTES.state, VOTES.ring_up",
            "select VOTES.created, VOTES.state, VOTES.contestant_number",
            "select VOTES.created, VOTES.contestant_number, VOTES.ring_up"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS VOTES",
        "table_candidates": [
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9871934056282043,
            0.0001737395068630576,
            0.9871934056282043,
            0.0001737395068630576,
            0.0008476877119392157,
            8.619498839834705e-05,
            0.0008587115444242954,
            8.448638982372358e-05
        ],
        "align_select": "select VOTES.created, VOTES.state, VOTES.ring_up",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "gold_select": "select AREA_CODE_STATE.area_code",
        "select_candidates": [
            "select AREA_CODE_STATE.area_code",
            "select VOTES.state",
            "select VOTES.vote_id",
            "select AREA_CODE_STATE.state"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "AREA_CODE_STATE CONTESTANTS VOTES",
        "table_candidates": [
            "AREA_CODE_STATE CONTESTANTS VOTES",
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.973541259765625,
            0.973541259765625,
            0.47783374786376953,
            0.47783374786376953,
            0.048684168606996536,
            0.048684168606996536,
            0.029015041887760162,
            0.029015041887760162
        ],
        "align_select": "select AREA_CODE_STATE.area_code",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Return the names of the contestants whose names contain the substring 'Al'.",
        "gold_select": "select CONTESTANTS.competitor_cognomen",
        "select_candidates": [
            "select CONTESTANTS.competitor_cognomen",
            "select CONTESTANTS.competitor_cognomen, t1.c2",
            "select distinct CONTESTANTS.competitor_cognomen",
            "select CONTESTANTS.competitor_cognomen, t1.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS",
        "table_candidates": [
            "AREA_CODE_STATE CONTESTANTS"
        ],
        "align_scores": [
            0.9937536120414734,
            9.971509280148894e-05,
            0.0005006316350772977,
            8.53395031299442e-05,
            0.041696447879076004,
            7.688538607908413e-05,
            0.00035961216781288385,
            8.415029151365161e-05
        ],
        "align_select": "select CONTESTANTS.competitor_cognomen",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the contestant numbers and names, ordered by contestant name descending.",
        "gold_select": "select CONTESTANTS.contestant_number, CONTESTANTS.participant",
        "select_candidates": [
            "select CONTESTANTS.contestant_number, CONTESTANTS.participant",
            "select CONTESTANTS.contestant_number, t1.c2",
            "select CONTESTANTS.contestant_number, CONTESTANTS.participant, t1.c2",
            "select CONTESTANTS.contestant_number, CONTESTANTS.participant, t1.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "CONTESTANTS",
        "table_candidates": [
            "CONTESTANTS"
        ],
        "align_scores": [
            0.9474683403968811,
            0.9474683403968811,
            0.0004281690635252744,
            0.0004281690635252744,
            0.00011058301606681198,
            0.00011058301606681198,
            0.00011058301606681198,
            0.00011058301606681198
        ],
        "align_select": "select CONTESTANTS.contestant_number, CONTESTANTS.participant",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "gold_select": "select CONTESTANTS.participant",
        "select_candidates": [
            "select CONTESTANTS.participant",
            "select CONTESTANTS.participant, t1.c2",
            "select CONTESTANTS.contestant_number, CONTESTANTS.participant",
            "select distinct CONTESTANTS.participant"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS",
        "table_candidates": [
            "CONTESTANTS",
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9920026063919067,
            0.0006023834575898945,
            0.0003957166336476803,
            0.00011187720519956201,
            0.0001704044989310205,
            9.283698454964906e-05,
            0.030263513326644897,
            0.0812542513012886
        ],
        "align_select": "select CONTESTANTS.participant",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "gold_select": "select CONTESTANTS.contestant_number, CONTESTANTS.participant",
        "select_candidates": [
            "select CONTESTANTS.contestant_number, CONTESTANTS.participant",
            "select VOTES.contestant_number, CONTESTANTS.participant",
            "select VOTES.state, CONTESTANTS.contestant_number, CONTESTANTS.participant",
            "select CONTESTANTS.contestant_number, CONTESTANTS.participant, min(VOTES.contestant_number)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS VOTES",
        "table_candidates": [
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.8142871856689453,
            8.304287621285766e-05,
            0.24643655121326447,
            7.867828389862552e-05,
            0.0001834914437495172,
            5.472041084431112e-05,
            0.00014669695519842207,
            5.2445764595177025e-05
        ],
        "align_select": "select CONTESTANTS.contestant_number, CONTESTANTS.participant",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "gold_select": "select CONTESTANTS.contestant_number, CONTESTANTS.participant",
        "select_candidates": [
            "select CONTESTANTS.contestant_number, CONTESTANTS.participant",
            "select VOTES.contestant_number, CONTESTANTS.participant",
            "select VOTES.state, CONTESTANTS.contestant_number, CONTESTANTS.participant",
            "select CONTESTANTS.participant, CONTESTANTS.contestant_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS VOTES",
        "table_candidates": [
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.8320724964141846,
            0.7640138864517212,
            0.46212515234947205,
            0.04371712729334831,
            0.0003162779612466693,
            0.00032861874205991626,
            0.7796416878700256,
            0.5872262716293335
        ],
        "align_select": "select CONTESTANTS.contestant_number, CONTESTANTS.participant",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "gold_select": "select VOTES.created, VOTES.state, VOTES.phone_number",
        "select_candidates": [
            "select VOTES.created, VOTES.state, VOTES.phone_number",
            "select VOTES.created, VOTES.state, VOTES.phone_number",
            "select VOTES.created), VOTES.state, VOTES.phone_number",
            "select VOTES.created, VOTES.state, VOTES.phone_number"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS VOTES",
        "table_candidates": [
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9906024932861328,
            0.00014610604557674378,
            0.9906024932861328,
            0.00014610604557674378,
            0.008905489929020405,
            8.674414129927754e-05,
            0.9906024932861328,
            0.00014610604557674378
        ],
        "align_select": "select VOTES.created, VOTES.state, VOTES.phone_number",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "gold_select": "select AREA_CODE_STATE.area_code",
        "select_candidates": [
            "select AREA_CODE_STATE.area_code",
            "select VOTES.state",
            "select VOTES.vote_id",
            "select VOTES.phone_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "AREA_CODE_STATE CONTESTANTS VOTES",
        "table_candidates": [
            "AREA_CODE_STATE CONTESTANTS VOTES",
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.973541259765625,
            0.973541259765625,
            0.47783374786376953,
            0.47783374786376953,
            0.048684168606996536,
            0.048684168606996536,
            0.9496919512748718,
            0.9496919512748718
        ],
        "align_select": "select AREA_CODE_STATE.area_code",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Return the names of the contestants whose names contain the substring 'Al'.",
        "gold_select": "select CONTESTANTS.participant",
        "select_candidates": [
            "select CONTESTANTS.participant",
            "select CONTESTANTS.participant, t1.c2",
            "select CONTESTANTS.contestant_number, CONTESTANTS.participant",
            "select distinct CONTESTANTS.participant"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS",
        "table_candidates": [
            "AREA_CODE_STATE CONTESTANTS"
        ],
        "align_scores": [
            0.9952409267425537,
            7.07383660483174e-05,
            0.00024033263616729528,
            7.247820758493617e-05,
            0.00011326656385790557,
            6.728780135745183e-05,
            0.021420598030090332,
            7.089665450621396e-05
        ],
        "align_select": "select CONTESTANTS.participant",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the contestant numbers and names, ordered by contestant name descending.",
        "gold_select": "select CONTESTANTS.contestant_number, CONTESTANTS.competitor_cognomen",
        "select_candidates": [
            "select CONTESTANTS.contestant_number, CONTESTANTS.competitor_cognomen",
            "select CONTESTANTS.contestant_number, t1.c2",
            "select CONTESTANTS.contestant_number, CONTESTANTS.competitor_cognomen, t1.c2",
            "select CONTESTANTS.contestant_number, CONTESTANTS.competitor_cognomen, t1.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "CONTESTANTS",
        "table_candidates": [
            "CONTESTANTS"
        ],
        "align_scores": [
            0.9950024485588074,
            0.9950024485588074,
            0.0004281690635252744,
            0.0004281690635252744,
            0.00015079039440024644,
            0.00015079039440024644,
            0.00015079039440024644,
            0.00015079039440024644
        ],
        "align_select": "select CONTESTANTS.contestant_number, CONTESTANTS.competitor_cognomen",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the maximum and minimum values of area codes?",
        "gold_select": "select max(AREA_CODE_STATE.region_digits), min(AREA_CODE_STATE.region_digits)",
        "select_candidates": [
            "select max(AREA_CODE_STATE.state), min(AREA_CODE_STATE.state)",
            "select max(t0.c2), min(t0.c2)",
            "select max(t0.c6), min(t0.c6)",
            "select max(t0.c4), min(t0.c4)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "AREA_CODE_STATE",
        "table_candidates": [
            "AREA_CODE_STATE",
            "AREA_CODE_STATE CONTESTANTS",
            "AREA_CODE_STATE VOTES"
        ],
        "align_scores": [
            0.5202499032020569,
            0.001171990530565381,
            0.007588121108710766,
            0.0009788982570171356,
            0.011088525876402855,
            0.0014880874659866095,
            0.032874807715415955,
            0.0017567347967997193
        ],
        "align_select": "select max(AREA_CODE_STATE.state), min(AREA_CODE_STATE.state)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "gold_select": "select CONTESTANTS.competitor_cognomen",
        "select_candidates": [
            "select CONTESTANTS.competitor_cognomen",
            "select t1.c2",
            "select t1.c4",
            "select CONTESTANTS.contestant_number, CONTESTANTS.competitor_cognomen"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS",
        "table_candidates": [
            "CONTESTANTS",
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9068100452423096,
            0.00016067875549197197,
            0.020334454253315926,
            0.00011693763372022659,
            0.001931681646965444,
            9.513155237073079e-05,
            0.000196268898434937,
            6.409275374608114e-05
        ],
        "align_select": "select CONTESTANTS.competitor_cognomen",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "gold_select": "select CONTESTANTS.contestant_number, CONTESTANTS.competitor_cognomen",
        "select_candidates": [
            "select VOTES.contestant_number, CONTESTANTS.competitor_cognomen",
            "select CONTESTANTS.contestant_number, CONTESTANTS.competitor_cognomen",
            "select VOTES.state, CONTESTANTS.contestant_number, CONTESTANTS.competitor_cognomen",
            "select VOTES.contestant_number, CONTESTANTS.competitor_cognomen, CONTESTANTS.contestant_number"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS VOTES",
        "table_candidates": [
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.005477352533489466,
            8.398986392421648e-05,
            0.676706850528717,
            8.483837154926732e-05,
            0.00045458838576450944,
            5.896214861422777e-05,
            0.0002637865545693785,
            8.466284634778276e-05
        ],
        "align_select": "select CONTESTANTS.contestant_number, CONTESTANTS.competitor_cognomen",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "gold_select": "select CONTESTANTS.contestant_number, CONTESTANTS.competitor_cognomen",
        "select_candidates": [
            "select CONTESTANTS.contestant_number, CONTESTANTS.competitor_cognomen",
            "select VOTES.contestant_number, CONTESTANTS.competitor_cognomen",
            "select VOTES.state, CONTESTANTS.contestant_number, CONTESTANTS.competitor_cognomen",
            "select CONTESTANTS.competitor_cognomen, CONTESTANTS.contestant_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "CONTESTANTS VOTES",
        "table_candidates": [
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.8919406533241272,
            0.9331543445587158,
            0.01422088872641325,
            0.09575575590133667,
            0.00047109441948123276,
            0.0006679676589556038,
            0.9458287358283997,
            0.9639032483100891
        ],
        "align_select": "select CONTESTANTS.contestant_number, CONTESTANTS.competitor_cognomen",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the area code in which the most voters voted?",
        "gold_select": "select AREA_CODE_STATE.region_digits",
        "select_candidates": [
            "select AREA_CODE_STATE.region_digits",
            "select VOTES.state",
            "select AREA_CODE_STATE.state",
            "select AREA_CODE_STATE.region_digits, VOTES.state"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "AREA_CODE_STATE VOTES",
        "table_candidates": [
            "AREA_CODE_STATE VOTES",
            "CONTESTANTS VOTES",
            "VOTES"
        ],
        "align_scores": [
            0.001321474788710475,
            7.861521589802578e-05,
            0.001445332425646484,
            7.134005863917992e-05,
            0.0015223738737404346,
            7.011306297499686e-05,
            0.00025517205358482897,
            6.809707701904699e-05
        ],
        "align_select": "select AREA_CODE_STATE.region_digits",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "gold_select": "select VOTES.created, VOTES.state, VOTES.phone_number",
        "select_candidates": [
            "select VOTES.created, VOTES.state, VOTES.phone_number",
            "select VOTES.created, VOTES.state, VOTES.phone_number",
            "select VOTES.created), VOTES.state, VOTES.phone_number",
            "select VOTES.created, VOTES.state, VOTES.phone_number"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS VOTES",
        "table_candidates": [
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9906024932861328,
            0.00014610604557674378,
            0.9906024932861328,
            0.00014610604557674378,
            0.008905489929020405,
            8.674414129927754e-05,
            0.9906024932861328,
            0.00014610604557674378
        ],
        "align_select": "select VOTES.created, VOTES.state, VOTES.phone_number",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "gold_select": "select AREA_CODE_STATE.region_digits",
        "select_candidates": [
            "select AREA_CODE_STATE.region_digits",
            "select VOTES.state",
            "select VOTES.vote_id",
            "select t0.c, AREA_CODE_STATE.state"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "AREA_CODE_STATE CONTESTANTS VOTES",
        "table_candidates": [
            "AREA_CODE_STATE CONTESTANTS VOTES",
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.07027991861104965,
            0.07027991861104965,
            0.47783374786376953,
            0.47783374786376953,
            0.048684168606996536,
            0.048684168606996536,
            0.00019101267389487475,
            0.00019101267389487475
        ],
        "align_select": "select VOTES.state",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Return the names of the contestants whose names contain the substring 'Al'.",
        "gold_select": "select CONTESTANTS.competitor_cognomen",
        "select_candidates": [
            "select CONTESTANTS.competitor_cognomen",
            "select CONTESTANTS.competitor_cognomen, t1.c2",
            "select distinct CONTESTANTS.competitor_cognomen",
            "select CONTESTANTS.competitor_cognomen, t1.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS",
        "table_candidates": [
            "AREA_CODE_STATE CONTESTANTS"
        ],
        "align_scores": [
            0.9937536120414734,
            9.971509280148894e-05,
            0.0005006316350772977,
            8.53395031299442e-05,
            0.041696447879076004,
            7.688538607908413e-05,
            0.00035961216781288385,
            8.415029151365161e-05
        ],
        "align_select": "select CONTESTANTS.competitor_cognomen",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the vote ids, phone numbers and states of all votes.",
        "gold_select": "select VOTES.vote_id, VOTES.call_up, VOTES.state",
        "select_candidates": [
            "select VOTES.vote_id, VOTES.call_up, VOTES.state",
            "select VOTES.vote_id, VOTES.call_up.c1, VOTES.state",
            "select VOTES.vote_id, VOTES.call_up, VOTES.state",
            "select VOTES.vote_id, VOTES.call_up, VOTES.state."
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES"
        ],
        "align_scores": [
            0.9237633347511292,
            0.00010561189992586151,
            0.0004079441714566201,
            7.100436778273433e-05,
            0.9237633347511292,
            0.00010561189992586151,
            0.005462323315441608,
            0.00011098074173787609
        ],
        "align_select": "select VOTES.vote_id, VOTES.call_up, VOTES.state",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is last date created of votes from the state 'CA'?",
        "gold_select": "select max(VOTES.made)",
        "select_candidates": [
            "select max(VOTES.made)",
            "select VOTES.made",
            "select VOTES.vote_id, max(VOTES.made)",
            "select max(VOTES.made), VOTES.call_up"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES",
            "AREA_CODE_STATE VOTES",
            "CONTESTANTS VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9840340614318848,
            0.0002027492446359247,
            0.9524001479148865,
            0.9965104460716248,
            0.0001855824957601726,
            0.0001264829043066129,
            0.00016185137792490423,
            0.00010761152225313708
        ],
        "align_select": "select max(VOTES.made)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the distinct states and create time of all votes?",
        "gold_select": "select distinct VOTES.state, VOTES.made",
        "select_candidates": [
            "select distinct VOTES.state, VOTES.made",
            "select distinct VOTES.state, VOTES.contestant_number",
            "select distinct VOTES.state, VOTES.contestant_number, VOTES.made",
            "select distinct VOTES.state.c2, VOTES.made"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES"
        ],
        "align_scores": [
            0.9949647188186646,
            9.835099626798183e-05,
            0.00022866533254273236,
            7.668154285056517e-05,
            0.0002261829940835014,
            8.869737212080508e-05,
            0.0005510668270289898,
            8.367386908503249e-05
        ],
        "align_select": "select distinct VOTES.state, VOTES.made",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "gold_select": "select VOTES.made, VOTES.state, VOTES.call_up",
        "select_candidates": [
            "select VOTES.made, VOTES.state, VOTES.call_up",
            "select VOTES.vote_id, VOTES.state, VOTES.call_up",
            "select VOTES.made, VOTES.state, VOTES.call_up",
            "select VOTES.contestant_number, VOTES.state, VOTES.call_up"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS VOTES",
        "table_candidates": [
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9876790642738342,
            0.00014023038966115564,
            0.0009290971793234348,
            9.524401684757322e-05,
            0.9876790642738342,
            0.00014023038966115564,
            0.0009608209365978837,
            8.175348921213299e-05
        ],
        "align_select": "select VOTES.made, VOTES.state, VOTES.call_up",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many countries have a republic as their form of government?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), country.Code",
            "select count(*), country.Name",
            "select count(*), country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.9920794367790222,
            0.00010018431203207001,
            0.00037354230880737305,
            7.382300827885047e-05,
            0.0003605817910283804,
            7.315089897019789e-05,
            0.00026638846611604095,
            6.511665560537949e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many countries have governments that are republics?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), country.Code",
            "select count(*), country.Name",
            "select count(*), country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9934929013252258,
            9.152828715741634e-05,
            0.0005179056897759438,
            7.969200669322163e-05,
            0.0004803082556463778,
            7.590179302496836e-05,
            0.00032904354156926274,
            7.232141797430813e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total surface area of the countries in the Caribbean region?",
        "gold_select": "select sum(country.landscape)",
        "select_candidates": [
            "select sum(country.landscape)",
            "select sum(country.people_number)",
            "select sum(country.net_national_product)",
            "select sum(country.IndepYear)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9961913824081421,
            0.00019727057951968163,
            0.0003338896785862744,
            0.00012079238513251767,
            0.037209488451480865,
            0.00045758174383081496,
            0.00039584378828294575,
            0.00013130821753293276
        ],
        "align_select": "select sum(country.landscape)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How much surface area do the countires in the Carribean cover together?",
        "gold_select": "select sum(country.landscape)",
        "select_candidates": [
            "select sum(country.landscape)",
            "select sum(country.Name)",
            "select sum(country.people_number)",
            "select sum(country.mainland)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "country countrylanguage",
            "city country"
        ],
        "align_scores": [
            0.9748597741127014,
            7.83903306000866e-05,
            0.0009693492320366204,
            8.997940312838182e-05,
            0.0003816783137153834,
            7.87082317401655e-05,
            0.7521415948867798,
            7.237032696139067e-05
        ],
        "align_select": "select sum(country.landscape)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which continent is Anguilla in?",
        "gold_select": "select country.mainland",
        "select_candidates": [
            "select country.mainland",
            "select country.mainland, country.Name",
            "select country.mainland, country.place",
            "select country.Name, country.mainland"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.6724256277084351,
            0.00033009829348884523,
            0.0001531617162982002,
            7.465932139893994e-05,
            0.0001514301693532616,
            7.030707638477907e-05,
            0.00015044973406475037,
            7.400873437291011e-05
        ],
        "align_select": "select country.mainland",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the continent name which Anguilla belongs to?",
        "gold_select": "select country.mainland",
        "select_candidates": [
            "select country.mainland",
            "select country.Code, country.mainland",
            "select country.mainland, country.Name",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country",
            "city sqlite_sequence country"
        ],
        "align_scores": [
            0.07036493718624115,
            0.0002615725970827043,
            0.00019027576490771025,
            9.7756324976217e-05,
            0.00019938661716878414,
            7.989471487235278e-05,
            0.00018202541104983538,
            8.782518125372007e-05
        ],
        "align_select": "select country.mainland",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which region is the city Kabul located in?",
        "gold_select": "select country.place",
        "select_candidates": [
            "select city.region",
            "select city.region, city.CountryCode",
            "select city.Name, city.region",
            "select city.CountryCode, city.region"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country",
        "table_candidates": [
            "city"
        ],
        "align_scores": [
            0.9961316585540771,
            0.0001358621084364131,
            0.00016355638217646629,
            8.354828605661169e-05,
            0.00016854779096320271,
            6.865921022836119e-05,
            0.0002134475071216002,
            8.315475861309096e-05
        ],
        "align_select": "select city.region",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What region is Kabul in?",
        "gold_select": "select country.place",
        "select_candidates": [
            "select city.region",
            "select city.region, city.CountryCode",
            "select city.region, city.native",
            "select city.Name, city.region"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country",
        "table_candidates": [
            "city"
        ],
        "align_scores": [
            0.9958395957946777,
            0.00011924863792955875,
            0.00014187366468831897,
            8.082793647190556e-05,
            0.00017631020455155522,
            6.951401883270591e-05,
            0.0001517524797236547,
            6.599440530408174e-05
        ],
        "align_select": "select city.region",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which language is the most popular in Aruba?",
        "gold_select": "select countrylanguage.official_language",
        "select_candidates": [
            "select countrylanguage.official_language",
            "select countrylanguage.official_language, country.LocalName",
            "select countrylanguage.official_language, country.Code",
            "select countrylanguage.official_language, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9944214224815369,
            0.9931701421737671,
            0.000581722822971642,
            0.0003631700237747282,
            0.00033379613887518644,
            0.00028833470423705876,
            0.0003285801794845611,
            0.0002712285495363176
        ],
        "align_select": "select countrylanguage.official_language",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What language is predominantly spoken in Aruba?",
        "gold_select": "select countrylanguage.official_language",
        "select_candidates": [
            "select countrylanguage.official_language",
            "select countrylanguage.official_language, country.LocalName",
            "select dominant countrylanguage.official_language",
            "select country.LocalName, countrylanguage.official_language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country"
        ],
        "align_scores": [
            0.9917404651641846,
            0.01077583059668541,
            0.0004514420870691538,
            0.00023863771639298648,
            0.003543572500348091,
            0.000381434423616156,
            0.0005376723711378872,
            0.00026662147138267756
        ],
        "align_select": "select countrylanguage.official_language",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the population and life expectancies in Brazil?",
        "gold_select": "select country.people_number, country.life_expectation",
        "select_candidates": [
            "select country.people_number, country.life_expectation",
            "select country.Code, country.people_number, country.life_expectation",
            "select country.IndepYear, country.people_number, country.life_expectation",
            "select population(country.people_number), country.life_expectation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9930168390274048,
            0.00016320896975230426,
            0.00021497890702448785,
            8.3794271631632e-05,
            0.00021015542733948678,
            7.19586678314954e-05,
            0.000607539142947644,
            7.64012656873092e-05
        ],
        "align_select": "select country.people_number, country.life_expectation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me Brazil\u2019s population and life expectancies.",
        "gold_select": "select country.people_number, country.life_expectation",
        "select_candidates": [
            "select country.people_number, country.life_expectation",
            "select country.Code, country.people_number, country.life_expectation",
            "select country.Code, country.Name, country.people_number, country.life_expectation",
            "select country.Name, country.people_number, country.life_expectation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9930496215820312,
            8.607310155639425e-05,
            0.0002115381503244862,
            8.836432971293107e-05,
            0.00018175468721892685,
            7.590483437525108e-05,
            0.00017961804405786097,
            9.202661749441177e-05
        ],
        "align_select": "select country.people_number, country.life_expectation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the region and population of Angola?",
        "gold_select": "select country.people_number, country.place",
        "select_candidates": [
            "select city.region, country.people_number",
            "select city.Name, country.place, country.people_number",
            "select city.Name, city.region, country.people_number",
            "select city.CountryCode, country.people_number"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "city country",
            "city sqlite_sequence country"
        ],
        "align_scores": [
            0.000870920775923878,
            0.00011461750546004623,
            0.000175015302374959,
            6.950904207769781e-05,
            0.00020576438691932708,
            7.084131357260048e-05,
            0.0008599504362791777,
            9.334048809250817e-05
        ],
        "align_select": "select city.region, country.people_number",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What region does Angola belong to and what is its population?",
        "gold_select": "select country.people_number, country.place",
        "select_candidates": [
            "select city.region, country.people_number",
            "select country.place, country.people_number",
            "select city.Name, country.place, country.people_number",
            "select country.Name, country.people_number"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "city country",
            "country",
            "sqlite_sequence country",
            "city sqlite_sequence country",
            "countrylanguage country"
        ],
        "align_scores": [
            0.0008811097941361368,
            0.0003409920900594443,
            0.010085505433380604,
            0.11388330906629562,
            0.00018073695537168533,
            0.0001439587795175612,
            0.0003974485443904996,
            0.003166260663419962
        ],
        "align_select": "select city.region, country.people_number",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
        "gold_select": "select avg(country.life_expectation)",
        "select_candidates": [
            "select avg(country.life_expectation)",
            "select an avg(country.life_expectation)",
            "select  avg(country.life_expectation)",
            "select the avg(country.life_expectation)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.9961276650428772,
            0.00016138091450557113,
            0.00042724370723590255,
            0.00012599609908647835,
            0.9961276650428772,
            0.00016138091450557113,
            0.00043325568549335003,
            0.0001795769203454256
        ],
        "align_select": "select avg(country.life_expectation)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How long is the people\u2019s average life expectancy in Central Africa?",
        "gold_select": "select avg(country.life_expectation)",
        "select_candidates": [
            "select avg(country.life_expectation)",
            "select avg(country.people_number)",
            "select  avg(country.life_expectation)",
            "select an avg(country.life_expectation)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country",
            "sqlite_sequence country",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9962337613105774,
            7.60923940106295e-05,
            0.001512138987891376,
            7.478901534341276e-05,
            0.9962337613105774,
            7.60923940106295e-05,
            0.0004385898064356297,
            0.00010549232683843002
        ],
        "align_select": "select avg(country.life_expectation)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name of country that has the shortest life expectancy in Asia?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.mainland",
            "select country.Name, country.Code",
            "select country.Name, country.place"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9908233880996704,
            0.0002901099796872586,
            0.0006336841033771634,
            0.00013805265189148486,
            0.001089695142582059,
            0.00012899457942694426,
            0.0004077843332197517,
            0.00010504322563065216
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Give the name of the country in Asia with the lowest life expectancy.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.mainland",
            "select country.Name, country.place",
            "select country.Name, country.life_expectation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9912881255149841,
            0.00024138441949617118,
            0.0005521330749616027,
            0.00011551438365131617,
            0.000370529800420627,
            9.07528810785152e-05,
            0.0006618268089368939,
            8.870642341207713e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "What is the total population and maximum GNP in Asia?",
        "gold_select": "select sum(country.people_number), max(country.net_national_product)",
        "select_candidates": [
            "select sum(country.people_number), max(country.net_national_product)",
            "select max(country.net_national_product), sum(country.people_number)",
            "select country.people_number, max(country.net_national_product)",
            "select total(country.people_number), max(country.net_national_product)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9953987002372742,
            7.604691199958324e-05,
            0.9961077570915222,
            0.00010328279313398525,
            0.8963117599487305,
            9.192838479066268e-05,
            0.0007679624832235277,
            0.00012810061161872
        ],
        "align_select": "select sum(country.people_number), max(country.net_national_product)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many people live in Asia, and what is the largest GNP among them?",
        "gold_select": "select sum(country.people_number), max(country.net_national_product)",
        "select_candidates": [
            "select country.Name, country.net_national_product",
            "select country.people_number, country.net_national_product",
            "select country.mainland, country.net_national_product",
            "select country.Code, country.people_number"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.0003285285201855004,
            0.0008805998368188739,
            0.9914093613624573,
            0.6948228478431702,
            0.0004900408675894141,
            0.0005712174461223185,
            0.0011766735697165132,
            0.004405409097671509
        ],
        "align_select": "select country.people_number, country.net_national_product",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "What is the average life expectancy in African countries that are republics?",
        "gold_select": "select avg(country.life_expectation)",
        "select_candidates": [
            "select avg(country.life_expectation)",
            "select an avg(country.life_expectation)",
            "select  avg(country.life_expectation)",
            "select Avg(country.life_expectation)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9964742064476013,
            0.00017889538139570504,
            0.00041219606646336615,
            0.00011153528612339869,
            0.9964742064476013,
            0.00017889538139570504,
            0.9964742064476013,
            0.00017889538139570504
        ],
        "align_select": "select avg(country.life_expectation)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the average life expectancy for countries in Africa which are republics?",
        "gold_select": "select avg(country.life_expectation)",
        "select_candidates": [
            "select avg(country.life_expectation)",
            "select an avg(country.life_expectation)",
            "select  avg(country.life_expectation)",
            "select the avg(country.life_expectation)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.996543824672699,
            0.00013210318866185844,
            0.0003927723446395248,
            0.000116341034299694,
            0.996543824672699,
            0.00013210318866185844,
            0.00042585391202010214,
            0.00015032711962703615
        ],
        "align_select": "select avg(country.life_expectation)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total surface area of the continents Asia and Europe?",
        "gold_select": "select sum(country.landscape)",
        "select_candidates": [
            "select sum(country.net_national_product)",
            "select sum(country.people_number)",
            "select sum(country.landscape)",
            "select sum(country.life_expectation)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country",
            "country countrylanguage"
        ],
        "align_scores": [
            0.04047420248389244,
            0.00030155846616253257,
            0.0004500313079915941,
            0.0003432361991144717,
            0.9959877133369446,
            0.00044268768397159874,
            0.0009378469549119473,
            0.00016130937729030848
        ],
        "align_select": "select sum(country.landscape)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the total surface area covered by countries in Asia or Europe.",
        "gold_select": "select sum(country.landscape)",
        "select_candidates": [
            "select sum(country.landscape)",
            "select sum(country.people_number)",
            "select sum(country.net_national_product)",
            "select sum(country.life_expectation)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9965002536773682,
            0.0021042427979409695,
            0.0002802272792905569,
            0.00011791694851126522,
            0.03928523510694504,
            0.0009136933949775994,
            0.00028947117971256375,
            0.00011946271843044087
        ],
        "align_select": "select sum(country.landscape)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many people live in Gelderland district?",
        "gold_select": "select sum(city.native)",
        "select_candidates": [
            "select count(*)",
            "select count(*), city.region",
            "select count(*), city.region",
            "select sum(city.native)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city",
            "city country"
        ],
        "align_scores": [
            0.9958819150924683,
            0.012538141570985317,
            0.00031696498626843095,
            0.0013758896384388208,
            0.00031696498626843095,
            0.0013758896384388208,
            0.9496784806251526,
            0.0003346283338032663
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total population of Gelderland district?",
        "gold_select": "select sum(city.native)",
        "select_candidates": [
            "select sum(city.native)",
            "select sum(country.people_number)",
            "select sum(t0.c6)",
            "select sum(city.region)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city",
            "city country"
        ],
        "align_scores": [
            0.9536117911338806,
            0.0005041820695623755,
            0.9967371821403503,
            0.01846987009048462,
            0.000430874468293041,
            0.00019997323397547007,
            0.0009473667596466839,
            0.00022356380941346288
        ],
        "align_select": "select sum(city.native)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average GNP and total population in all nations whose government is US territory?",
        "gold_select": "select avg(country.net_national_product), sum(country.people_number)",
        "select_candidates": [
            "select avg(country.net_national_product), avg(country.people_number)",
            "select avg(country.net_national_product), sum(country.people_number)",
            "select avg(country.GNPOld), avg(country.people_number)",
            "select avg(country.people_number), avg(country.net_national_product)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.8315300941467285,
            0.004297436680644751,
            0.9395197033882141,
            0.009302622638642788,
            0.8493697047233582,
            0.0011813180753961205,
            0.9073622822761536,
            0.002554392907768488
        ],
        "align_select": "select avg(country.net_national_product), avg(country.people_number)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the mean GNP and total population of nations which are considered US territory.",
        "gold_select": "select avg(country.net_national_product), sum(country.people_number)",
        "select_candidates": [
            "select avg(country.net_national_product), sum(country.people_number)",
            "select avg(country.GNPOld), sum(country.people_number)",
            "select avg(country.people_number), sum(country.people_number)",
            "select avg(country.net_national_product), avg(country.people_number)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9920458793640137,
            0.0036552695091813803,
            0.9534574151039124,
            0.0008672220865264535,
            0.9733476638793945,
            0.00029385514790192246,
            0.9596549868583679,
            0.0006951357936486602
        ],
        "align_select": "select avg(country.net_national_product), sum(country.people_number)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many unique languages are spoken in the world?",
        "gold_select": "select count(distinct countrylanguage.official_language)",
        "select_candidates": [
            "select count(distinct countrylanguage.official_language)",
            "select count(distinct countrylanguage.is_formal)",
            "select count(distinct countrylanguage.CountryCode)",
            "select count(distinct t11.c2)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "sqlite_sequence",
            "countrylanguage country",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9875766038894653,
            0.9875766038894653,
            0.0014903941191732883,
            0.0014903941191732883,
            0.0015227434923872352,
            0.0015227434923872352,
            0.0009573058341629803,
            0.0009573058341629803
        ],
        "align_select": "select count(distinct countrylanguage.official_language)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the number of distinct languages used around the world?",
        "gold_select": "select count(distinct countrylanguage.official_language)",
        "select_candidates": [
            "select count(distinct countrylanguage.official_language)",
            "select count(distinct countrylanguage.is_formal)",
            "select count(distinct countrylanguage.CountryCode)",
            "select count(count(distinct countrylanguage.official_language)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "countrylanguage country"
        ],
        "align_scores": [
            0.9885968565940857,
            0.9885968565940857,
            0.0012392580974847078,
            0.0012392580974847078,
            0.0009650532738305628,
            0.0009650532738305628,
            0.0004641369450837374,
            0.0004641369450837374
        ],
        "align_select": "select count(distinct countrylanguage.official_language)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many type of governments are in Africa?",
        "gold_select": "select count(distinct country.political_form)",
        "select_candidates": [
            "select count(distinct country.political_form)",
            "select count(distinct country.Name)",
            "select count(distinct country.political_form",
            "select count(distinct country.IndepYear)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9948768019676208,
            0.9948768019676208,
            0.018460864201188087,
            0.018460864201188087,
            0.23059608042240143,
            0.23059608042240143,
            0.0005738649051636457,
            0.0005738649051636457
        ],
        "align_select": "select count(distinct country.political_form)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many different forms of governments are there in Africa?",
        "gold_select": "select count(distinct country.political_form)",
        "select_candidates": [
            "select count(distinct country.political_form)",
            "select count(distinct country.Name)",
            "select count(distinct country.political_form",
            "select count(distinct country.LocalName)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country"
        ],
        "align_scores": [
            0.9960667490959167,
            0.9960667490959167,
            0.06607082486152649,
            0.06607082486152649,
            0.3091892898082733,
            0.3091892898082733,
            0.012495576404035091,
            0.012495576404035091
        ],
        "align_select": "select count(distinct country.political_form)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total number of languages used in Aruba?",
        "gold_select": "select count(countrylanguage.official_language)",
        "select_candidates": [
            "select count(distinct countrylanguage.official_language)",
            "select count(*)",
            "select count(distinct country.LocalName)",
            "select count(distinct country.Name)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9951059818267822,
            0.00016399739251937717,
            0.9939318895339966,
            0.0024279530625790358,
            0.8104724884033203,
            0.0002940838458016515,
            0.024439295753836632,
            0.00016950105782598257
        ],
        "align_select": "select count(distinct countrylanguage.official_language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many languages are spoken in Aruba?",
        "gold_select": "select count(countrylanguage.official_language)",
        "select_candidates": [
            "select count(distinct countrylanguage.official_language)",
            "select count(distinct country.LocalName)",
            "select count(distinct countrylanguage.official_language, count(distinct countrylanguage.is_formal)",
            "select count(distinct country.Name)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country",
            "country"
        ],
        "align_scores": [
            0.9929671287536621,
            0.0001343975745839998,
            0.667280912399292,
            0.00021922937594354153,
            0.00018124034977518022,
            0.0001122074609156698,
            0.0427885502576828,
            0.0002088760957121849
        ],
        "align_select": "select count(distinct countrylanguage.official_language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many official languages does Afghanistan have?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(distinct countrylanguage.official_language)",
            "select count(countrylanguage.official_language)",
            "select count(*)",
            "select count(count(distinct countrylanguage.official_language)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9957382678985596,
            6.441628647735342e-05,
            0.9956957101821899,
            6.692457827739418e-05,
            0.8711315393447876,
            9.44298371905461e-05,
            0.0005112364306114614,
            7.307099440367892e-05
        ],
        "align_select": "select count(distinct countrylanguage.official_language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many official languages are spoken in Afghanistan?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(distinct countrylanguage.official_language)",
            "select count(countrylanguage.official_language)",
            "select count(count(distinct countrylanguage.official_language)",
            "select count(distinct countrylanguage.is_formal)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9956951141357422,
            0.00011180437286384404,
            0.9956259727478027,
            0.0005439985543489456,
            0.0005609048530459404,
            0.00010346673661842942,
            0.5817314386367798,
            0.00011840709339594468
        ],
        "align_select": "select count(distinct countrylanguage.official_language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which continent has the most diverse languages?",
        "gold_select": "select country.mainland",
        "select_candidates": [
            "select country.mainland",
            "select country.mainland, countrylanguage.share",
            "select country.mainland, countrylanguage.official_language",
            "select country.mainland, country.place"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9871960878372192,
            7.556034688604996e-05,
            0.0006653889431618154,
            7.202285632956773e-05,
            0.0002924621512647718,
            7.446002564392984e-05,
            0.00032029522117227316,
            6.314935308182612e-05
        ],
        "align_select": "select country.mainland",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which continent speaks the most languages?",
        "gold_select": "select country.mainland",
        "select_candidates": [
            "select country.mainland",
            "select country.mainland, country.place",
            "select country.mainland, countrylanguage.share",
            "select country.mainland, countrylanguage.official_language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "country country countrylanguage"
        ],
        "align_scores": [
            0.980096161365509,
            9.089803643291816e-05,
            0.00040960771730169654,
            6.658343045273796e-05,
            0.0008335058228112757,
            7.112669118214399e-05,
            0.0002359721838729456,
            7.975054904818535e-05
        ],
        "align_select": "select country.mainland",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "How many countries speak both English and Dutch?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*) dependant on whether countrylanguage.CountryCode consists of countrylanguage.official_language, countrylanguage.is_formal",
            "select count(*) dependant on whether countrylanguage.CountryCode consists of countrylanguage.official_language, countrylanguage.CountryCode",
            "select count(*) dependant on whether countrylanguage.CountryCode consists of countrylanguage.official_language or countrylanguage.is_formal"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9916921854019165,
            0.4901256561279297,
            0.00020466101705096662,
            0.00014605910109821707,
            0.00022273702779784799,
            0.00012313869956415147,
            0.0004714897950179875,
            0.00018816035299096256
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of nations that use English and Dutch?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countrylanguage.CountryCode",
            "select count(*) dependant on countrylanguage.CountryCode, countrylanguage.official_language",
            "select count(*), countrylanguage.CountryCode, countrylanguage.official_language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "countrylanguage"
        ],
        "align_scores": [
            0.9906153678894043,
            0.01515202410519123,
            0.0005115749663673341,
            0.0031121328938752413,
            0.00027410296024754643,
            0.00010066253162221983,
            0.00012867062469013035,
            0.0001759927545208484
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of nations speak both English and French?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.official_language",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.LocalName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9898960590362549,
            0.00022923073265701532,
            0.00034275371581315994,
            0.00011494653153931722,
            0.000275890517514199,
            0.000142536053317599,
            0.0005926791345700622,
            0.00017648967332206666
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Give the names of nations that speak both English and French.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.official_language",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.LocalName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9946801066398621,
            0.00039546130574308336,
            0.0002954237279482186,
            0.000127623527077958,
            0.00030153864645399153,
            0.00016038210014812648,
            0.0005685235955752432,
            0.00022481985797639936
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of nations where both English and French are official languages?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.official_language",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.LocalName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9944774508476257,
            0.0023818337358534336,
            0.0002662653278093785,
            9.760970715433359e-05,
            0.0004511794832069427,
            0.00014193184324540198,
            0.00040095075382851064,
            0.00015491129306610674
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Give the names of countries with English and French as official languages.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.official_language",
            "select country.Name, country.Capital",
            "select country.Name, countrylanguage.CountryCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.0008022414403967559,
            0.9956178665161133,
            7.39861570764333e-05,
            0.00020003273675683886,
            9.521813626633957e-05,
            0.00024065503384917974,
            0.00010606503929011524,
            0.00027677786420099437
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of distinct continents where Chinese is spoken?",
        "gold_select": "select count(distinct country.mainland)",
        "select_candidates": [
            "select count(distinct country.mainland)",
            "select count(distinct countrylanguage.is_formal)",
            "select count(distinct countrylanguage.CountryCode)",
            "select count(distinct countrylanguage.official_language)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.022457044571638107,
            0.00017804688832256943,
            0.00033354354673065245,
            9.746163414092734e-05,
            0.0005292994319461286,
            0.0002841565874405205,
            0.000800479028839618,
            0.00018724368419498205
        ],
        "align_select": "select count(distinct country.mainland)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many continents speak Chinese?",
        "gold_select": "select count(distinct country.mainland)",
        "select_candidates": [
            "select count(*)",
            "select count(continents)",
            "select count(distinct country.mainland)",
            "select count(distinct countrylanguage.CountryCode)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "countrylanguage",
            "sqlite_sequence country countrylanguage",
            "sqlite_sequence countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9846463799476624,
            0.0026095726061612368,
            0.6651768088340759,
            0.00019857878214679658,
            0.01897037774324417,
            8.087173046078533e-05,
            0.0020543907303363085,
            0.00012053006503265351
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the regions that use English or Dutch?",
        "gold_select": "select distinct country.place",
        "select_candidates": [
            "select city.region",
            "select distinct city.region",
            "select city.ID, city.region",
            "select city.region, city.native"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "city countrylanguage",
            "city country countrylanguage",
            "city sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9910372495651245,
            0.05756310746073723,
            0.035229217261075974,
            0.0003011878579854965,
            0.00017852032033260912,
            9.477228013565764e-05,
            0.00026566762244328856,
            0.00013581471284851432
        ],
        "align_select": "select city.region",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which regions speak Dutch or English?",
        "gold_select": "select distinct country.place",
        "select_candidates": [
            "select city.region",
            "select distinct city.region",
            "select city.region, countrylanguage.official_language",
            "select city.ID, city.region"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "city countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9875826239585876,
            0.016959581524133682,
            0.057357411831617355,
            0.0003781754057854414,
            0.00021916812693234533,
            0.00014701049076393247,
            0.00018883636221289635,
            0.00010233380453428254
        ],
        "align_select": "select city.region",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the countries where either English or Dutch is the official language?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select countrylanguage.official_language",
            "select countrylanguage.CountryCode, countrylanguage.official_language",
            "select country.Name, countrylanguage.CountryCode"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage"
        ],
        "align_scores": [
            0.5277655720710754,
            0.08915311098098755,
            0.6848919987678528,
            0.005114971660077572,
            0.0005361710791476071,
            0.00011464703129604459,
            0.0012927578063681722,
            0.00023815175518393517
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which countries have either English or Dutch as an official language?",
        "gold_select": "select *",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name",
            "select countrylanguage.CountryCode, countrylanguage.official_language"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.43929269909858704,
            0.07815416902303696,
            0.0009457009728066623,
            0.00025381179875694215,
            0.9339724183082581,
            0.011120518669486046,
            0.0003739394305739552,
            0.00012145394430262968
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which language is the most popular on the Asian continent?",
        "gold_select": "select countrylanguage.official_language",
        "select_candidates": [
            "select countrylanguage.official_language",
            "select countrylanguage.official_language, country.mainland",
            "select countrylanguage.official_language, country.Code",
            "select countrylanguage.official_language, country.place"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9939490556716919,
            0.989329993724823,
            0.0004774370463564992,
            0.0003621406212914735,
            0.0003371380444150418,
            0.0002823326794896275,
            0.00022625505516771227,
            0.0002248416858492419
        ],
        "align_select": "select countrylanguage.official_language",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the language that is used by the largest number of Asian nations?",
        "gold_select": "select countrylanguage.official_language",
        "select_candidates": [
            "select countrylanguage.official_language",
            "select countrylanguage.official_language, country.Code",
            "select countrylanguage.official_language, country.Capital",
            "select countrylanguage.official_language, country.mainland"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9935640692710876,
            0.0001709827920421958,
            0.0006052753888070583,
            8.815811452222988e-05,
            0.00026041152887046337,
            7.357302820309997e-05,
            0.0005385520635172725,
            8.329810225404799e-05
        ],
        "align_select": "select countrylanguage.official_language",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which languages are spoken by only one country in republic governments?",
        "gold_select": "select countrylanguage.official_language",
        "select_candidates": [
            "select countrylanguage.official_language",
            "select countrylanguage.official_language, country.LocalName",
            "select countrylanguage.official_language, country.Name",
            "select countrylanguage.official_language, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9875544905662537,
            0.2615915834903717,
            0.000422369921579957,
            0.0001327885693171993,
            0.0003762528649531305,
            0.00011660136806312948,
            0.00024913085508160293,
            0.00010470371489645913
        ],
        "align_select": "select countrylanguage.official_language",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "What languages are only used by a single country with a republic government?",
        "gold_select": "select countrylanguage.official_language",
        "select_candidates": [
            "select countrylanguage.official_language",
            "select countrylanguage.official_language, country.LocalName",
            "select countrylanguage.official_language, country.Capital",
            "select countrylanguage.official_language, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.833236038684845,
            0.6031185388565063,
            0.0003729660529643297,
            0.0001654685620451346,
            0.0002621543244458735,
            0.00012059718574164435,
            0.00026235138648189604,
            0.00013858034799341112
        ],
        "align_select": "select countrylanguage.official_language",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the city with the largest population that uses English.",
        "gold_select": "select city.Name, city.native",
        "select_candidates": [
            "select city.Name",
            "select city.Name, countrylanguage.official_language",
            "select city.Name, countrylanguage.is_formal",
            "select city.ID, city.Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "city countrylanguage",
        "table_candidates": [
            "city countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9802011847496033,
            0.9854421615600586,
            0.002710196888074279,
            0.0010685052257031202,
            0.0006470931693911552,
            0.00030695306486450136,
            0.0007859509205445647,
            0.0005970880738459527
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the most populace city that speaks English?",
        "gold_select": "select city.Name, city.native",
        "select_candidates": [
            "select city.Name",
            "select city.ID, city.Name",
            "select city.Name, countrylanguage.official_language",
            "select city.Name, countrylanguage.CountryCode"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city countrylanguage",
        "table_candidates": [
            "city countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9883238077163696,
            0.9755263924598694,
            0.00055233936291188,
            0.0009797641541808844,
            0.0006224320968613029,
            0.001667072530835867,
            0.00025423613260500133,
            0.00027852284256368876
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Find the name, population and expected life length of asian country with the largest area?",
        "gold_select": "select country.Name, country.people_number, country.life_expectation",
        "select_candidates": [
            "select country.Name, country.people_number, country.life_expectation",
            "select country.Name, country.IndepYear, country.people_number, country.life_expectation",
            "select country.Name, country.place, country.people_number, country.life_expectation",
            "select country.Name, country.people_number, country.life_expectation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.985458493232727,
            9.933424735208973e-05,
            0.000424940517405048,
            8.538769179722294e-05,
            0.00032857584301382303,
            7.386342622339725e-05,
            0.985458493232727,
            9.933424735208973e-05
        ],
        "align_select": "select country.Name, country.people_number, country.life_expectation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "gold_select": "select country.Name, country.people_number, country.life_expectation",
        "select_candidates": [
            "select country.Name, country.people_number, country.life_expectation",
            "select country.Name, country.IndepYear, country.people_number, country.life_expectation",
            "select country.Name, country.place, country.people_number, country.life_expectation",
            "select country.Name, country.people_number, country.life_expectation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9901284575462341,
            0.00014383831876330078,
            0.0013968911953270435,
            9.610929555492476e-05,
            0.0003951018152292818,
            7.872685819165781e-05,
            0.9901284575462341,
            0.00014383831876330078
        ],
        "align_select": "select country.Name, country.people_number, country.life_expectation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is average life expectancy in the countries where English is not the official language?",
        "gold_select": "select avg(country.life_expectation)",
        "select_candidates": [
            "select avg(country.life_expectation)",
            "select avg(country.life_expectation), countrylanguage.CountryCode",
            "select an avg(country.life_expectation)",
            "select avg(country.life_expectation), countrylanguage.official_language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "country"
        ],
        "align_scores": [
            0.9948593378067017,
            0.00022966957476455718,
            0.00015447352780029178,
            0.0002563114685472101,
            0.00040301468106918037,
            0.00013106553524266928,
            0.00017486534488853067,
            0.00023769511608406901
        ],
        "align_select": "select avg(country.life_expectation)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the mean life expectancy of countries in which English is not the official language.",
        "gold_select": "select avg(country.life_expectation)",
        "select_candidates": [
            "select avg(country.life_expectation)",
            "select an avg(country.life_expectation)",
            "select avg(country.life_expectation), countrylanguage.CountryCode",
            "select m.avg(country.life_expectation)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "country"
        ],
        "align_scores": [
            0.9960811734199524,
            0.00010286721953889355,
            0.00035963853588327765,
            0.00010396875586593524,
            0.00014401989756152034,
            0.00016782691818661988,
            0.001117617473937571,
            0.00010385481436969712
        ],
        "align_select": "select avg(country.life_expectation)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total number of people living in the nations that do not use English?",
        "gold_select": "select sum(country.people_number)",
        "select_candidates": [
            "select sum(country.people_number)",
            "select sum(country.people_number), countrylanguage.official_language",
            "select sum(country.people_number), countrylanguage.CountryCode",
            "select sum(country.people_number), countrylanguage.official_language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "country",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9919397234916687,
            0.0013255443191155791,
            0.0001381535257678479,
            0.001993815880268812,
            0.0001507331762695685,
            0.002050367882475257,
            0.0001381535257678479,
            0.001993815880268812
        ],
        "align_select": "select sum(country.people_number)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many people live in countries that do not speak English?",
        "gold_select": "select sum(country.people_number)",
        "select_candidates": [
            "select count(*)",
            "select sum(country.people_number)",
            "select count(*), countrylanguage.CountryCode",
            "select count(*), country.Code"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "country",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9891139268875122,
            0.0002755030582193285,
            0.9026442766189575,
            0.00021908812050241977,
            0.00030352099565789104,
            0.006077461875975132,
            0.0003686107520479709,
            0.05026945099234581
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the official language spoken in the country whose head of state is Beatrix?",
        "gold_select": "select countrylanguage.official_language",
        "select_candidates": [
            "select countrylanguage.official_language",
            "select countrylanguage.official_language, country.Capital",
            "select countrylanguage.official_language, country.Code",
            "select countrylanguage.official_language, country.LocalName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9937742948532104,
            0.00012381415581330657,
            0.00023180308926384896,
            6.556353764608502e-05,
            0.00026588933542370796,
            7.460736378561705e-05,
            0.0002470464678481221,
            8.171529771061614e-05
        ],
        "align_select": "select countrylanguage.official_language",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "gold_select": "select countrylanguage.official_language",
        "select_candidates": [
            "select countrylanguage.official_language",
            "select countrylanguage.official_language, country.LocalName",
            "select countrylanguage.official_language, country.Code",
            "select countrylanguage.official_language, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9942923784255981,
            0.00011297789751552045,
            0.00024309860600624233,
            7.646729500265792e-05,
            0.00025712433853186667,
            7.257115794345737e-05,
            0.00023618015984538943,
            6.585126538993791e-05
        ],
        "align_select": "select countrylanguage.official_language",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "gold_select": "select count(distinct countrylanguage.official_language)",
        "select_candidates": [
            "select count(distinct countrylanguage.official_language)",
            "select sum(countrylanguage.official_language)",
            "select count(distinct countrylanguage.official_language), country.Name",
            "select count(count(distinct countrylanguage.official_language)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9939466118812561,
            0.00027242148644290864,
            0.8622661232948303,
            0.004885748960077763,
            0.00025387134519405663,
            0.1547347605228424,
            0.0009024600149132311,
            0.00014306466619018465
        ],
        "align_select": "select count(distinct countrylanguage.official_language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
        "gold_select": "select count(distinct countrylanguage.official_language)",
        "select_candidates": [
            "select count(distinct countrylanguage.official_language)",
            "select sum(countrylanguage.official_language)",
            "select count(distinct countrylanguage.official_language), country.Name",
            "select count(distinct countrylanguage.official_language), country.Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9945585131645203,
            0.00026091356994584203,
            0.7983209490776062,
            0.01617787778377533,
            0.0004513246240094304,
            0.23138293623924255,
            0.0004802423354703933,
            0.44405871629714966
        ],
        "align_select": "select count(distinct countrylanguage.official_language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the countries that have greater surface area than any country in Europe?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.mainland",
            "select country.Name, country.Code",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.6881667971611023,
            0.0012176701566204429,
            0.000443891593022272,
            0.00011725698277587071,
            0.0019288109615445137,
            0.0002350578288314864,
            0.002282618312165141,
            0.000269328651484102
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which countries have greater area than that of any country in Europe?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.mainland",
            "select country.Code, country.Name",
            "select country.Name, country.place"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.7101806402206421,
            0.00042277012835256755,
            0.0004111200396437198,
            9.039539872901514e-05,
            0.002611801726743579,
            0.00015698056085966527,
            0.0003879307769238949,
            9.534641867503524e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the African countries that have a population less than any country in Asia?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.mainland",
            "select distinct country.Name",
            "select country.Name, country.people_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.6452922224998474,
            0.05516931414604187,
            0.0003821280843112618,
            0.00016779395809862763,
            0.1288764625787735,
            0.0016180889215320349,
            0.00039787779678590596,
            0.00016837027214933187
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which African countries have a smaller population than that of any country in Asia?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.mainland",
            "select country.Name, country.people_number",
            "select country.Name, country.place"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.6418523192405701,
            0.0009224491659551859,
            0.0003576655872166157,
            0.00011412129970267415,
            0.00042735738679766655,
            9.933045657817274e-05,
            0.0005279724136926234,
            0.0001181981569970958
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which Asian countries have a population that is larger than any country in Africa?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.mainland",
            "select country.Name, country.mainland, country.people_number",
            "select country.Name, country.mainland, max(country.people_number)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.7112459540367126,
            0.0007658321992494166,
            0.0004111901798751205,
            0.00014204016770236194,
            0.00021818670211359859,
            8.214030822273344e-05,
            0.00023322411288972944,
            8.321758650708944e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.mainland",
            "select distinct country.Name",
            "select country.Name, country.mainland, country.people_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.736194372177124,
            0.10371170192956924,
            0.0003551928384695202,
            0.00019442029588390142,
            0.14539307355880737,
            0.001348678139038384,
            0.00020822667283937335,
            9.971043618861586e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the country codes for countries that do not speak English?",
        "gold_select": "select countrylanguage.CountryCode",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select countrylanguage.CountryCode, countrylanguage.official_language",
            "select countrylanguage.CountryCode, countrylanguage.official_language, countrylanguage.is_formal",
            "select distinct countrylanguage.CountryCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9854282736778259,
            0.00027577902073971927,
            0.00035184991429559886,
            6.854800449218601e-05,
            0.0002336352044949308,
            7.830889808246866e-05,
            0.020596615970134735,
            0.0001271181827178225
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the country codes for countries that do not speak English.",
        "gold_select": "select countrylanguage.CountryCode",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select countrylanguage.CountryCode, countrylanguage.official_language",
            "select countrylanguage.CountryCode, countrylanguage.official_language, countrylanguage.is_formal",
            "select distinct countrylanguage.CountryCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9915137887001038,
            0.0001950832229340449,
            0.0002526355383452028,
            6.155380106065422e-05,
            0.00021346948051359504,
            6.871986261103302e-05,
            0.007788877934217453,
            9.201230568578467e-05
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the country codes of countries where people use languages other than English?",
        "gold_select": "select distinct countrylanguage.CountryCode",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select distinct countrylanguage.CountryCode",
            "select countrylanguage.CountryCode, countrylanguage.official_language",
            "select countrylanguage.CountryCode, countrylanguage.official_language, countrylanguage.is_formal"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9585445523262024,
            0.0002736371534410864,
            0.05479627102613449,
            0.00013374877744354308,
            0.00027931155636906624,
            6.379829574143514e-05,
            0.0001822762133087963,
            7.011466368567199e-05
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the country codes for countries in which people speak langauges that are not English.",
        "gold_select": "select distinct countrylanguage.CountryCode",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select distinct countrylanguage.CountryCode",
            "select countrylanguage.CountryCode, countrylanguage.official_language",
            "select countrylanguage.CountryCode, countrylanguage.official_language, countrylanguage.is_formal"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.7552567720413208,
            0.3010140359401703,
            0.0581262931227684,
            0.0004231446946505457,
            0.0003015759866684675,
            0.00014188964269123971,
            0.00018430208729114383,
            7.702739094384015e-05
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "gold_select": "select country.Code",
        "select_candidates": [
            "select country.Code",
            "select country.Code, country.political_form",
            "select country.Name, country.political_form",
            "select country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9519708156585693,
            0.08273159712553024,
            0.0005792485899291933,
            0.00015960315067786723,
            0.00023862790840212256,
            0.00023800419876351953,
            0.006015425082296133,
            0.8335133194923401
        ],
        "align_select": "select country.Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
        "gold_select": "select country.Code",
        "select_candidates": [
            "select country.Code",
            "select country.Name",
            "select country.Code2",
            "select countrylanguage.CountryCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.009245618246495724,
            0.9563199281692505,
            0.8633577823638916,
            0.0028744242154061794,
            0.007866852916777134,
            0.05139679089188576,
            0.07563527673482895,
            0.8964433073997498
        ],
        "align_select": "select country.Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which cities are in European countries where English is not the official language?",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select city.Name",
            "select city.ID, city.Name",
            "select city.Name, country.Name",
            "select city.Name, country.mainland"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage",
            "city sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.7999190092086792,
            0.0017327343812212348,
            0.0003474141994956881,
            0.00015475806139875203,
            0.0003159377083647996,
            0.00012794022040907294,
            0.0003218839701730758,
            0.0001416256563970819
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of cities in Europe for which English is not the official language?",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select city.Name",
            "select city.Name, country.mainland",
            "select city.Name, country.Name",
            "select countrylanguage.official_language, city.Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage",
            "city sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9881308078765869,
            0.0012755454517900944,
            0.00025926725356839597,
            0.00013080808275844902,
            0.00022000769968144596,
            0.0001340548333246261,
            0.001268099877052009,
            0.00016887595120351762
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which unique cities are in Asian countries where Chinese is the official language?",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select count(*)",
            "select distinct city.ID",
            "select distinct city.Name",
            "select count(distinct city.ID)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage",
            "city sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.037045884877443314,
            9.56164876697585e-05,
            0.8676100969314575,
            0.00027758334181271493,
            0.9801871180534363,
            0.00036284903762862086,
            0.01147723849862814,
            7.306640327442437e-05
        ],
        "align_select": "select distinct city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select distinct city.Name",
            "select distinct city.Name, country.Name",
            "select distinct city.Name, countrylanguage.official_language",
            "select count(distinct city.Name)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage",
            "city sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9935991764068604,
            0.00012576083827298135,
            0.00021376153745222837,
            6.301797111518681e-05,
            0.0005754853482358158,
            6.273538019740954e-05,
            0.0006820526323281229,
            7.030594133539125e-05
        ],
        "align_select": "select distinct city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the name, independence year, and surface area of the country with the smallest population?",
        "gold_select": "select country.Name, country.landscape, country.IndepYear",
        "select_candidates": [
            "select country.Name, country.IndepYear, country.landscape",
            "select country.Name, country.IndepYear, country.mainland",
            "select country.Name, country.IndepYear.c5, country.landscape",
            "select country.Name, country.IndepYear, country.place"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9916178584098816,
            7.43814671295695e-05,
            0.7528659105300903,
            7.335886766668409e-05,
            0.00113458011765033,
            7.773926336085424e-05,
            0.0010962856467813253,
            9.061626042239368e-05
        ],
        "align_select": "select country.Name, country.IndepYear, country.landscape",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
        "gold_select": "select country.Name, country.landscape, country.IndepYear",
        "select_candidates": [
            "select country.Name, country.IndepYear, country.landscape",
            "select country.Name, country.IndepYear, country.mainland",
            "select country.Name, country.IndepYear.c5, country.landscape",
            "select country.Name, country.IndepYear, country.place"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9876537919044495,
            7.386603101622313e-05,
            0.5171853303909302,
            7.045009988360107e-05,
            0.0020714064594358206,
            7.805511268088594e-05,
            0.000896971789188683,
            9.185127419186756e-05
        ],
        "align_select": "select country.Name, country.IndepYear, country.landscape",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the population, name and leader of the country with the largest area?",
        "gold_select": "select country.Name, country.people_number, country.HeadOfState",
        "select_candidates": [
            "select country.people_number, country.Name, country.HeadOfState",
            "select country.Code, country.Name, country.HeadOfState",
            "select country.Name, country.people_number, country.HeadOfState",
            "select country.net_national_product, country.Name, country.HeadOfState"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9889259934425354,
            0.00010137093340745196,
            0.0008182867895811796,
            9.7963675216306e-05,
            0.9892998933792114,
            0.00010142043174710125,
            0.0007031909772194922,
            9.861836588243023e-05
        ],
        "align_select": "select country.people_number, country.Name, country.HeadOfState",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Give the name, population, and head of state for the country that has the largest area.",
        "gold_select": "select country.Name, country.people_number, country.HeadOfState",
        "select_candidates": [
            "select country.Name, country.people_number, country.HeadOfState",
            "select country.Name, country.people_number, country.HeadOfState",
            "select country.Name, country.life_expectation, country.HeadOfState",
            "select country.Name, country.IndepYear, country.HeadOfState"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.986213743686676,
            8.85769331944175e-05,
            0.986213743686676,
            8.85769331944175e-05,
            0.0003108688397333026,
            8.701622573425993e-05,
            0.0003252593451179564,
            7.627648301422596e-05
        ],
        "align_select": "select country.Name, country.people_number, country.HeadOfState",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "gold_select": "select count(countrylanguage.official_language), country.Name",
        "select_candidates": [
            "select country.Name, count(distinct countrylanguage.official_language)",
            "select country.Name, count(distinct country.Name)",
            "select country.Name, count(*)",
            "select country.Name, count(distinct countrylanguage.is_formal)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.029424669221043587,
            8.193112444132566e-05,
            0.00017385203682351857,
            6.773071800125763e-05,
            0.4508833587169647,
            0.00011888384324265644,
            0.0006634601741097867,
            7.368958904407918e-05
        ],
        "align_select": "select country.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
        "gold_select": "select count(countrylanguage.official_language), country.Name",
        "select_candidates": [
            "select country.Name, count(distinct countrylanguage.official_language)",
            "select country.Name, count(distinct country.Name)",
            "select country.Name, count(*)",
            "select country.Name, count(distinct country.mainland)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.11954142898321152,
            0.00010217331146122888,
            0.00025521733914501965,
            7.164282578742132e-05,
            0.954791247844696,
            0.00011787580297095701,
            0.002519809640944004,
            8.626685303170234e-05
        ],
        "align_select": "select country.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
        "gold_select": "select count(*), city.region",
        "select_candidates": [
            "select count(*), city.region",
            "select city.region, count(*)",
            "select count(*), countrylanguage.share",
            "select count(*), country.place"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city",
            "city country"
        ],
        "align_scores": [
            0.9894072413444519,
            0.013596837408840656,
            0.9897655844688416,
            0.03589590638875961,
            0.011158878915011883,
            0.0011767699616029859,
            0.1405114084482193,
            0.008726055733859539
        ],
        "align_select": "select count(*), city.region",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY"
    },
    {
        "question": "How many cities in each district have a population that is above the average population across all cities?",
        "gold_select": "select count(*), city.region",
        "select_candidates": [
            "select count(*), city.region",
            "select city.region, count(*)",
            "select count(*), country.place",
            "select count(*), countrylanguage.share"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city",
            "city country"
        ],
        "align_scores": [
            0.9861565828323364,
            0.00024556563585065305,
            0.9856747984886169,
            0.00023779892944730818,
            0.1270911544561386,
            0.00030068313935771585,
            0.011332533322274685,
            0.00026844421518035233
        ],
        "align_select": "select count(*), city.region",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY"
    },
    {
        "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
        "gold_select": "select sum(country.people_number), country.political_form",
        "select_candidates": [
            "select country.political_form, count(*)",
            "select country.political_form, sum(country.people_number)",
            "select country.Name, count(*)",
            "select country.Name, sum(country.people_number)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9179301261901855,
            0.00041784916538745165,
            0.8799813389778137,
            0.00022382530733011663,
            0.0003924445481970906,
            0.0002501920098438859,
            0.015102984383702278,
            0.0002230783284176141
        ],
        "align_select": "select country.political_form, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
        "gold_select": "select sum(country.people_number), country.political_form",
        "select_candidates": [
            "select country.political_form, sum(country.people_number)",
            "select country.political_form, count(*)",
            "select country.Name, sum(country.people_number)",
            "select country.Name, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9816784262657166,
            0.00017266537179239094,
            0.9794506430625916,
            0.00024289751308970153,
            0.9053996205329895,
            0.00018071438535116613,
            0.00924388412386179,
            0.0001408707321388647
        ],
        "align_select": "select country.political_form, sum(country.people_number)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
        "gold_select": "select sum(country.people_number), avg(country.life_expectation), country.mainland",
        "select_candidates": [
            "select country.Name, avg(country.life_expectation)",
            "select country.Name, avg(country.life_expectation), sum(country.people_number)",
            "select avg(country.life_expectation), sum(country.people_number), country.mainland",
            "select country.mainland, avg(country.life_expectation), sum(country.people_number)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.001051589846611023,
            8.256673027062789e-05,
            0.003620852716267109,
            0.00010856636799871922,
            0.04343830794095993,
            0.00015829368203412741,
            0.010033424012362957,
            0.00014621221635024995
        ],
        "align_select": "select country.Name, avg(country.life_expectation)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
        "gold_select": "select sum(country.people_number), avg(country.life_expectation), country.mainland",
        "select_candidates": [
            "select country.mainland, sum(country.people_number), avg(country.life_expectation)",
            "select country.mainland, count(*), avg(country.life_expectation)",
            "select country.Name, sum(country.people_number), avg(country.life_expectation)",
            "select country.mainland, sum(country.life_expectation), avg(country.life_expectation)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.05946668982505798,
            0.0001044785967678763,
            0.016186272725462914,
            0.00011955535592278466,
            0.09530046582221985,
            0.0001203797000925988,
            0.00025182749959640205,
            6.933334952918813e-05
        ],
        "align_select": "select country.mainland, sum(country.people_number), avg(country.life_expectation)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the names and areas of countries with the top 5 largest area?",
        "gold_select": "select country.Name, country.landscape",
        "select_candidates": [
            "select country.Name, country.mainland",
            "select country.Name, country.landscape",
            "select country.Name, country.place",
            "select country.Name, country.people_number"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9870269894599915,
            7.122299575712532e-05,
            0.9394623637199402,
            6.900341395521536e-05,
            0.05430114269256592,
            6.523374759126455e-05,
            0.0003692485042847693,
            7.369872037088498e-05
        ],
        "align_select": "select country.Name, country.mainland",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Return the names and surface areas of the 5 largest countries.",
        "gold_select": "select country.Name, country.landscape",
        "select_candidates": [
            "select country.Name, country.mainland",
            "select country.Name, country.mainland.c4",
            "select country.Name, country.mainland, country.place",
            "select country.Name, country.place"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.5905275344848633,
            7.78877511038445e-05,
            0.0003284085833001882,
            7.62321287766099e-05,
            0.00019205620628781617,
            6.479159492300823e-05,
            0.0006020600558258593,
            8.297432941617444e-05
        ],
        "align_select": "select country.Name, country.mainland",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are names of countries with the top 3 largest population?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.LocalName",
            "select country.Name, country.Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9893559813499451,
            5.333628359949216e-05,
            0.0006088515510782599,
            5.579136632150039e-05,
            0.00401335721835494,
            5.7044399000005797e-05,
            0.0018632961437106133,
            5.776148827862926e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Return the names of the 3 most populated countries.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.people_number",
            "select country.Name, country.LocalName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9955614805221558,
            5.573526141233742e-05,
            0.0003376711974851787,
            5.078433969174512e-05,
            0.0005581994773820043,
            5.103957300889306e-05,
            0.009231530129909515,
            5.355753091862425e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the names of the nations with the 3 lowest populations?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.LocalName",
            "select country.Name, country.Capital",
            "select country.Name, country.people_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9886292219161987,
            5.632610555039719e-05,
            0.013493743725121021,
            5.523303843801841e-05,
            0.0003458914870861918,
            5.1557475671870634e-05,
            0.0007255638483911753,
            5.1366823754506186e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Return the names of the 3 countries with the fewest people.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.people_number",
            "select country.Name, country.Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9924893379211426,
            5.236485958448611e-05,
            0.000335477088810876,
            5.052836058894172e-05,
            0.0004492544394452125,
            5.139229688211344e-05,
            0.0012964655179530382,
            5.228496593190357e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "how many countries are in Asia?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), country.Code",
            "select count(*), country.Name",
            "select count(*), country.mainland"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.995347797870636,
            0.00031047165975905955,
            0.0005199190345592797,
            0.0011247146176174283,
            0.00041565424180589616,
            0.0015688951825723052,
            0.00026341810007579625,
            0.0005808358546346426
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count the number of countries in Asia.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), country.Name",
            "select count(*), country.Code",
            "select count(*), country.mainland"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9957026839256287,
            0.000186585690244101,
            0.0002219086018158123,
            0.0018845576560124755,
            0.00027474295347929,
            0.002342158230021596,
            0.0002121453289873898,
            0.000713232031557709
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.people_number",
            "select country.Name, country.mainland",
            "select country.Name, country.place"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country"
        ],
        "align_scores": [
            0.9595640897750854,
            0.001315632718615234,
            0.00022307918698061258,
            0.00012723532563541085,
            0.00033957179402932525,
            0.0001248978660441935,
            0.0002773434389382601,
            0.00012237629562150687
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.mainland",
            "select country.Name, country.people_number",
            "select country.Name, country.place"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country"
        ],
        "align_scores": [
            0.8918541669845581,
            0.0005018131341785192,
            0.0002693594724405557,
            7.87683020462282e-05,
            0.0002120983845088631,
            6.683936226181686e-05,
            0.0002400317316642031,
            7.684748561587185e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000?",
        "gold_select": "select sum(country.people_number), avg(country.landscape)",
        "select_candidates": [
            "select sum(country.people_number), avg(country.landscape)",
            "select sum(country.people_number), avg(country.people_number)",
            "select sum(country.people_number), avg(country.IndepYear)",
            "select sum(country.people_number), avg(country.place)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9913329482078552,
            0.0028563060332089663,
            0.002637141617015004,
            0.00021352016483433545,
            0.00045257419697009027,
            0.000179824695806019,
            0.6330940127372742,
            0.0013326494954526424
        ],
        "align_select": "select sum(country.people_number), avg(country.landscape)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000.",
        "gold_select": "select sum(country.people_number), avg(country.landscape)",
        "select_candidates": [
            "select sum(country.people_number), avg(country.landscape)",
            "select sum(country.people_number), avg(country.people_number)",
            "select sum(country.people_number), avg(country.net_national_product)",
            "select country.people_number, avg(country.landscape)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9829065203666687,
            0.0007442034548148513,
            0.0023914258927106857,
            0.00019028827955480665,
            0.0007859479519538581,
            0.00021048792405053973,
            0.4454469084739685,
            0.0006659364444203675
        ],
        "align_select": "select sum(country.people_number), avg(country.landscape)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the cities whose population is between 160000 and 900000?",
        "gold_select": "select city.Name",
        "select_candidates": [
            "select city.Name",
            "select city.ID, city.Name",
            "select city.Name, city.CountryCode",
            "select city.Name, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city country",
            "city",
            "city sqlite_sequence country",
            "city sqlite_sequence"
        ],
        "align_scores": [
            0.9741663932800293,
            0.00020049519662279636,
            0.0002805459371302277,
            9.023614984471351e-05,
            0.00022610666928812861,
            7.706184987910092e-05,
            0.00022691721096634865,
            7.781334716128185e-05
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the names of cities that have a population between 160000 and 900000.",
        "gold_select": "select city.Name",
        "select_candidates": [
            "select city.Name",
            "select city.Name, country.Capital",
            "select city.Name, city.CountryCode",
            "select city.Name, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city country",
            "city",
            "city sqlite_sequence country",
            "city sqlite_sequence"
        ],
        "align_scores": [
            0.9882296323776245,
            0.0002433513873256743,
            0.00020124235015828162,
            7.818586163921282e-05,
            0.000184673786861822,
            6.855675746919587e-05,
            0.00017585823661647737,
            6.882729940116405e-05
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which language is spoken by the largest number of countries?",
        "gold_select": "select countrylanguage.official_language",
        "select_candidates": [
            "select countrylanguage.official_language",
            "select countrylanguage.official_language, country.Name",
            "select countrylanguage.official_language, country.Capital",
            "select countrylanguage.official_language, countrylanguage.is_formal"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9933852553367615,
            8.441535464953631e-05,
            0.0007787320646457374,
            6.352976197376847e-05,
            0.00021656839817296714,
            6.0018392105121166e-05,
            0.000530293385963887,
            7.054126035654917e-05
        ],
        "align_select": "select countrylanguage.official_language",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Give the language that is spoken in the most countries.",
        "gold_select": "select countrylanguage.official_language",
        "select_candidates": [
            "select countrylanguage.official_language",
            "select countrylanguage.official_language, countrylanguage.is_formal",
            "select countrylanguage.official_language, countrylanguage.CountryCode",
            "select countrylanguage.official_language, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9955050945281982,
            8.902470290195197e-05,
            0.00037448201328516006,
            7.632356573594734e-05,
            0.00028122132061980665,
            6.80423472658731e-05,
            0.0005842443788424134,
            6.35445467196405e-05
        ],
        "align_select": "select countrylanguage.official_language",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the language spoken by the largest percentage of people in each country?",
        "gold_select": "select countrylanguage.official_language, countrylanguage.CountryCode, max(countrylanguage.share)",
        "select_candidates": [
            "select countrylanguage.official_language, country.Name",
            "select countrylanguage.official_language",
            "select countrylanguage.official_language, country.Capital",
            "select countrylanguage.official_language, country.Code"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.0014275957364588976,
            7.023330545052886e-05,
            0.9888321161270142,
            7.28894374333322e-05,
            0.0004017500323243439,
            6.387894973158836e-05,
            0.001067552948370576,
            7.464921509381384e-05
        ],
        "align_select": "select countrylanguage.official_language",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
        "gold_select": "select countrylanguage.official_language, countrylanguage.CountryCode, max(countrylanguage.share)",
        "select_candidates": [
            "select country.Code, countrylanguage.official_language",
            "select country.Name, countrylanguage.official_language",
            "select countrylanguage.CountryCode, countrylanguage.official_language",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.7051453590393066,
            8.145903120748699e-05,
            0.00026734720449894667,
            8.741576311876997e-05,
            0.9217432141304016,
            8.00849447841756e-05,
            0.5654302835464478,
            7.560547237517312e-05
        ],
        "align_select": "select countrylanguage.CountryCode, countrylanguage.official_language",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "gold_select": "select count(*), max(countrylanguage.share)",
        "select_candidates": [
            "select count(*)",
            "select count(*), country.Name",
            "select count(*), countrylanguage.CountryCode",
            "select count(*), country.Name, country.Code"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9555000066757202,
            0.010027590207755566,
            0.0010187877342104912,
            0.0035981968976557255,
            0.0018006953177973628,
            0.007015580777078867,
            0.0003465648624114692,
            0.0003718803636729717
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "gold_select": "select count(*), max(countrylanguage.share)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct countrylanguage.CountryCode)",
            "select count(*), countrylanguage.CountryCode",
            "select count(countrylanguage.CountryCode)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9916129112243652,
            7.121213275240734e-05,
            0.9063711166381836,
            5.978082845103927e-05,
            0.0007150219171307981,
            7.424568320857361e-05,
            0.16104888916015625,
            7.024422666290775e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "gold_select": "select countrylanguage.CountryCode, max(countrylanguage.share)",
        "select_candidates": [
            "select country.Code",
            "select country.Name, country.Code",
            "select country.Name, country.Code2",
            "select country.Name, country.mainland"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9816455841064453,
            0.9815635681152344,
            0.001165725407190621,
            0.0031707140151411295,
            0.000636354903690517,
            0.0016266604652628303,
            0.0005910093896090984,
            0.0008090795017778873
        ],
        "align_select": "select country.Code",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
        "gold_select": "select countrylanguage.CountryCode, max(countrylanguage.share)",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select countrylanguage.CountryCode, countrylanguage.official_language",
            "select countrylanguage.CountryCode, countrylanguage.official_language, countrylanguage.is_formal",
            "select distinct countrylanguage.CountryCode"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9650791883468628,
            0.00010376986028859392,
            0.00021599514002446085,
            5.7046789152082056e-05,
            0.00015481207810807973,
            5.421998866950162e-05,
            0.0328526496887207,
            8.170026558218524e-05
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which continent is Anguilla in?",
        "gold_select": "select country.mainland",
        "select_candidates": [
            "select country.mainland",
            "select country.Code, country.mainland",
            "select country.mainland, country.Region",
            "select distinct country.mainland"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.6724256277084351,
            0.00033009829348884523,
            0.00017434454639442265,
            7.995026680873707e-05,
            0.00015391070337500423,
            7.1339585701935e-05,
            0.01225195825099945,
            0.00030213777790777385
        ],
        "align_select": "select country.mainland",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the continent name which Anguilla belongs to?",
        "gold_select": "select country.mainland",
        "select_candidates": [
            "select country.mainland",
            "select country.Code, country.mainland",
            "select country.mainland, country.Region",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.07036493718624115,
            0.0002615725970827043,
            0.00019027576490771025,
            9.7756324976217e-05,
            0.00015393916692119092,
            7.874876610003412e-05,
            0.00018202541104983538,
            8.782518125372007e-05
        ],
        "align_select": "select country.mainland",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which language is the most popular in Aruba?",
        "gold_select": "select countrylanguage.dialect",
        "select_candidates": [
            "select countrylanguage.dialect",
            "select countrylanguage.dialect, country.LocalName",
            "select countrylanguage.dialect, country.Code",
            "select countrylanguage.dialect, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9737226366996765,
            0.8781014680862427,
            0.0006797457463108003,
            0.00046305471914820373,
            0.0004381468752399087,
            0.0002894198405556381,
            0.00048588638310320675,
            0.00032222384470514953
        ],
        "align_select": "select countrylanguage.dialect",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What language is predominantly spoken in Aruba?",
        "gold_select": "select countrylanguage.dialect",
        "select_candidates": [
            "select countrylanguage.dialect",
            "select countrylanguage.dialect, country.LocalName",
            "select countrylanguage.dialect, country.Code",
            "select countrylanguage.dialect, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.977725625038147,
            0.009075627662241459,
            0.0004836658190470189,
            0.0002864343405235559,
            0.00040475843707099557,
            0.00024000632402021438,
            0.0005706576630473137,
            0.00026990188052877784
        ],
        "align_select": "select countrylanguage.dialect",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the population and life expectancies in Brazil?",
        "gold_select": "select country.Population, country.life_expectation",
        "select_candidates": [
            "select country.Population, country.life_expectation",
            "select country.Code, country.Population, country.life_expectation",
            "select country.Code, country.Name, country.Population, country.life_expectation",
            "select country.Name, country.Population, country.life_expectation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9952822327613831,
            0.00023481814423575997,
            0.00020546832820400596,
            7.864310464356095e-05,
            0.00019882735796272755,
            8.386813715333119e-05,
            0.00019860302563756704,
            7.180335524026304e-05
        ],
        "align_select": "select country.Population, country.life_expectation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me Brazil\u2019s population and life expectancies.",
        "gold_select": "select country.Population, country.life_expectation",
        "select_candidates": [
            "select country.Population, country.life_expectation",
            "select country.Code, country.Name, country.Population, country.life_expectation",
            "select country.Code, country.Population, country.life_expectation",
            "select country.Name, country.Population, country.life_expectation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9950343370437622,
            0.00019883910135831684,
            0.00017242351896129549,
            7.942457887111232e-05,
            0.00018237894983030856,
            7.901324715930969e-05,
            0.00017511146143078804,
            6.962640327401459e-05
        ],
        "align_select": "select country.Population, country.life_expectation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
        "gold_select": "select avg(country.life_expectation)",
        "select_candidates": [
            "select avg(country.life_expectation)",
            "select an avg(country.life_expectation)",
            "select  avg(country.life_expectation)",
            "select avg(country.Population)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9961276650428772,
            0.00016138091450557113,
            0.00042724370723590255,
            0.00012599609908647835,
            0.9961276650428772,
            0.00016138091450557113,
            0.0006742457626387477,
            0.00014882968389429152
        ],
        "align_select": "select avg(country.life_expectation)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How long is the people\u2019s average life expectancy in Central Africa?",
        "gold_select": "select avg(country.life_expectation)",
        "select_candidates": [
            "select avg(country.life_expectation)",
            "select an avg(country.life_expectation)",
            "select  avg(country.life_expectation)",
            "select avg(country.Population)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9962337613105774,
            0.0001665182353463024,
            0.0004385898064356297,
            0.00014087797899264842,
            0.9962337613105774,
            0.0001665182353463024,
            0.0015296669444069266,
            0.0001542661339044571
        ],
        "align_select": "select avg(country.life_expectation)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name of country that has the shortest life expectancy in Asia?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.mainland",
            "select country.Name, country.Region",
            "select country.Name, country.Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9908233880996704,
            0.0002901099796872586,
            0.0006336841033771634,
            0.00013805265189148486,
            0.00024537419085390866,
            0.00012181257625343278,
            0.001089695142582059,
            0.00012899457942694426
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Give the name of the country in Asia with the lowest life expectancy.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.mainland",
            "select country.Name, country.Region",
            "select country.Name, country.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9912881255149841,
            0.00024138441949617118,
            0.0005521330749616027,
            0.00011551438365131617,
            0.00021274448954500258,
            9.946220961865038e-05,
            0.00018501852173358202,
            8.411602902924642e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "What is the total population and maximum GNP in Asia?",
        "gold_select": "select sum(country.Population), max(country.gross_national_product)",
        "select_candidates": [
            "select sum(country.Population), max(country.gross_national_product)",
            "select max(country.gross_national_product), sum(country.Population)",
            "select country.Population, max(country.gross_national_product)",
            "select sum(country.IndepYear), max(country.gross_national_product)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9953677654266357,
            8.633219840703532e-05,
            0.9960534572601318,
            6.407502951333299e-05,
            0.9880808591842651,
            0.00011218156578252092,
            0.0002714052679948509,
            0.0001009570769383572
        ],
        "align_select": "select sum(country.Population), max(country.gross_national_product)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many people live in Asia, and what is the largest GNP among them?",
        "gold_select": "select sum(country.Population), max(country.gross_national_product)",
        "select_candidates": [
            "select country.Population, country.gross_national_product",
            "select country.Name, country.gross_national_product",
            "select country.Name, country.Population",
            "select country.Code, country.Population"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9942874312400818,
            0.7083116769790649,
            0.0004329992807470262,
            0.0020989677868783474,
            0.0004004814545623958,
            0.0009210680145770311,
            0.0009547735680826008,
            0.0037568537518382072
        ],
        "align_select": "select country.Population, country.gross_national_product",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "What is the average life expectancy in African countries that are republics?",
        "gold_select": "select avg(country.life_expectation)",
        "select_candidates": [
            "select avg(country.life_expectation)",
            "select an avg(country.life_expectation)",
            "select  avg(country.life_expectation)",
            "select Avg(country.life_expectation)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9964742064476013,
            0.00017889538139570504,
            0.00041219606646336615,
            0.00011153528612339869,
            0.9964742064476013,
            0.00017889538139570504,
            0.9964742064476013,
            0.00017889538139570504
        ],
        "align_select": "select avg(country.life_expectation)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the average life expectancy for countries in Africa which are republics?",
        "gold_select": "select avg(country.life_expectation)",
        "select_candidates": [
            "select avg(country.life_expectation)",
            "select an avg(country.life_expectation)",
            "select  avg(country.life_expectation)",
            "select the avg(country.life_expectation)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.996543824672699,
            0.00022260623518377542,
            0.0003927723446395248,
            0.00011949642794206738,
            0.996543824672699,
            0.00022260623518377542,
            0.00042585391202010214,
            0.00013903806393500417
        ],
        "align_select": "select avg(country.life_expectation)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total surface area of the continents Asia and Europe?",
        "gold_select": "select sum(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.SurfaceArea)",
            "select sum(country.SurfaceArea), country.mainland",
            "select sum(country.SurfaceArea), country.mainland",
            "select sum(country.SurfaceArea) def. country.mainland"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.9965586066246033,
            0.0003860041906591505,
            0.0001505593681940809,
            0.00010122535604750738,
            0.0001505593681940809,
            0.00010122535604750738,
            0.0002460894756950438,
            0.0001519102806923911
        ],
        "align_select": "select sum(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the total surface area covered by countries in Asia or Europe.",
        "gold_select": "select sum(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.SurfaceArea)",
            "select sum(country.SurfaceArea), country.mainland",
            "select sum(country.SurfaceArea) delimited by country.mainland",
            "select sum(country.SurfaceArea), country.IndepYear"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.996503472328186,
            0.002116033574566245,
            0.00013390906678978354,
            0.00011639739386737347,
            0.0006249513826332986,
            0.00011229158553760499,
            0.00011507957242429256,
            0.00016069284174591303
        ],
        "align_select": "select sum(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average GNP and total population in all nations whose government is US territory?",
        "gold_select": "select avg(country.gross_national_product), sum(country.Population)",
        "select_candidates": [
            "select avg(country.gross_national_product), sum(country.Population)",
            "select avg(country.gross_national_product), avg(country.Population)",
            "select avg(country.Population), avg(country.gross_national_product)",
            "select avg(country.GNPOld), avg(country.Population)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9811050295829773,
            0.0013356952695176005,
            0.9091532826423645,
            0.0007723424932919443,
            0.9687934517860413,
            0.0008915683720260859,
            0.9646667242050171,
            0.0007668929174542427
        ],
        "align_select": "select avg(country.gross_national_product), sum(country.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the mean GNP and total population of nations which are considered US territory.",
        "gold_select": "select avg(country.gross_national_product), sum(country.Population)",
        "select_candidates": [
            "select avg(country.gross_national_product), sum(country.Population)",
            "select avg(country.Population), sum(country.Population)",
            "select avg(country.GNPOld), sum(country.Population)",
            "select avg(country.life_expectation), sum(country.Population)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9958827495574951,
            0.0005288764950819314,
            0.022853264585137367,
            0.00015804452414158732,
            0.9941349625587463,
            0.0004441127530299127,
            0.631024181842804,
            0.001122978632338345
        ],
        "align_select": "select avg(country.gross_national_product), sum(country.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many unique languages are spoken in the world?",
        "gold_select": "select count(distinct countrylanguage.dialect)",
        "select_candidates": [
            "select count(distinct countrylanguage.dialect)",
            "select count(distinct countrylanguage.CountryCode)",
            "select count(distinct countrylanguage.is_formal)",
            "select count(distinct t3.c6)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage"
        ],
        "align_scores": [
            0.723130464553833,
            0.723130464553833,
            0.0015227434923872352,
            0.0015227434923872352,
            0.0014903941191732883,
            0.0014903941191732883,
            0.0009655709145590663,
            0.0009655709145590663
        ],
        "align_select": "select count(distinct countrylanguage.dialect)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the number of distinct languages used around the world?",
        "gold_select": "select count(distinct countrylanguage.dialect)",
        "select_candidates": [
            "select count(distinct countrylanguage.dialect)",
            "select count(distinct countrylanguage.CountryCode)",
            "select count(distinct countrylanguage.is_formal)",
            "select count(distinct t3.c6)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage"
        ],
        "align_scores": [
            0.7841232419013977,
            0.7841232419013977,
            0.0009650532738305628,
            0.0009650532738305628,
            0.0012392580974847078,
            0.0012392580974847078,
            0.0007041395292617381,
            0.0007041395292617381
        ],
        "align_select": "select count(distinct countrylanguage.dialect)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many type of governments are in Africa?",
        "gold_select": "select count(distinct country.GovernmentForm)",
        "select_candidates": [
            "select count(distinct country.GovernmentForm)",
            "select count(distinct country.Name)",
            "select count(distinct country.GovernmentForm",
            "select count(distinct country.IndepYear)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9923139214515686,
            0.9923139214515686,
            0.018460864201188087,
            0.018460864201188087,
            0.33534789085388184,
            0.33534789085388184,
            0.0005738649051636457,
            0.0005738649051636457
        ],
        "align_select": "select count(distinct country.GovernmentForm)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many different forms of governments are there in Africa?",
        "gold_select": "select count(distinct country.GovernmentForm)",
        "select_candidates": [
            "select count(distinct country.GovernmentForm)",
            "select count(distinct country.Name)",
            "select count(distinct country.GovernmentForm",
            "select count(distinct country.LocalName)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9953027963638306,
            0.00016050110571086407,
            0.06607082486152649,
            9.18320074561052e-05,
            0.4770737886428833,
            0.00028408615617081523,
            0.012495576404035091,
            0.00011521625856403261
        ],
        "align_select": "select count(distinct country.GovernmentForm)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total number of languages used in Aruba?",
        "gold_select": "select count(countrylanguage.dialect)",
        "select_candidates": [
            "select count(distinct countrylanguage.dialect)",
            "select count(*)",
            "select count(distinct countrylanguage.CountryCode)",
            "select count(distinct countrylanguage.is_formal)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9557844996452332,
            0.00025624720728956163,
            0.9939318895339966,
            0.0024279530625790358,
            0.01750822737812996,
            0.00032509409356862307,
            0.003759035374969244,
            0.00015616138989571482
        ],
        "align_select": "select count(distinct countrylanguage.dialect)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many languages are spoken in Aruba?",
        "gold_select": "select count(countrylanguage.dialect)",
        "select_candidates": [
            "select count(distinct countrylanguage.dialect)",
            "select count(distinct countrylanguage.dialect, country.LocalName)",
            "select count(distinct country.LocalName)",
            "select count(distinct countrylanguage.is_formal)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9957310557365417,
            0.00013530901924241334,
            0.0002528663899283856,
            9.172121644951403e-05,
            0.667280912399292,
            0.00021922937594354153,
            0.00423111766576767,
            0.00013355290866456926
        ],
        "align_select": "select count(distinct countrylanguage.dialect)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many official languages does Afghanistan have?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(distinct countrylanguage.is_formal)",
            "select count(distinct countrylanguage.dialect)",
            "select count(distinct country.Name)",
            "select count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.10784925520420074,
            6.524239870486781e-05,
            0.9819876551628113,
            6.303359987214208e-05,
            0.00277485279366374,
            7.935544999781996e-05,
            0.8711315393447876,
            9.44298371905461e-05
        ],
        "align_select": "select count(distinct countrylanguage.dialect)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many official languages are spoken in Afghanistan?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(distinct countrylanguage.is_formal)",
            "select count(distinct countrylanguage.dialect)",
            "select count(distinct countrylanguage.CountryCode)",
            "select count(distinct country.Name)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.5817314386367798,
            0.00011840709339594468,
            0.8539878129959106,
            0.0001186227091238834,
            0.021636418998241425,
            0.000157984861289151,
            0.00525794830173254,
            0.0001406148076057434
        ],
        "align_select": "select count(distinct countrylanguage.dialect)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which continent has the most diverse languages?",
        "gold_select": "select country.mainland",
        "select_candidates": [
            "select country.mainland",
            "select country.mainland, countrylanguage.Percentage",
            "select country.mainland, country.Region",
            "select country.Code, country.mainland"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9871960878372192,
            7.556034688604996e-05,
            0.00032678080606274307,
            6.606978422496468e-05,
            0.0007630744948983192,
            6.41353108221665e-05,
            0.0005729428958147764,
            7.87990284152329e-05
        ],
        "align_select": "select country.mainland",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which continent speaks the most languages?",
        "gold_select": "select country.mainland",
        "select_candidates": [
            "select country.mainland",
            "select country.mainland, country.Region",
            "select country.Code, country.mainland",
            "select country.mainland, countrylanguage.Percentage"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.980096161365509,
            7.040026684990153e-05,
            0.0011102489661425352,
            6.438796845031902e-05,
            0.0005305755184963346,
            7.275089592440054e-05,
            0.00027373890043236315,
            5.9049143601441756e-05
        ],
        "align_select": "select country.mainland",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "How many countries speak both English and Dutch?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countrylanguage.CountryCode",
            "select count(distinct countrylanguage.CountryCode)",
            "select count(*), countrylanguage.CountryCode, countrylanguage.dialect"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9916921854019165,
            0.4901256561279297,
            0.000489005702547729,
            0.00034222815884277225,
            0.16262021660804749,
            0.0002938873949460685,
            0.00012471542868297547,
            0.00011391754378564656
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of nations that use English and Dutch?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countrylanguage.CountryCode",
            "select count(*), countrylanguage.CountryCode, countrylanguage.dialect",
            "select count(*) dependant on countrylanguage.CountryCode, countrylanguage.dialect"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9906153678894043,
            0.01515202410519123,
            0.0005115749663673341,
            0.0031121328938752413,
            0.0001272814261028543,
            0.00015367093146778643,
            0.0004589052696246654,
            9.971642430173233e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of nations speak both English and French?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.dialect",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.LocalName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9898960590362549,
            0.00022923073265701532,
            0.00033478281693533063,
            0.0001260210992768407,
            0.000275890517514199,
            0.000142536053317599,
            0.0005926791345700622,
            0.00017648967332206666
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Give the names of nations that speak both English and French.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.dialect",
            "select country.Name, country.LocalName",
            "select country.Name, countrylanguage.CountryCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9946801066398621,
            0.00039546130574308336,
            0.00028375591500662267,
            0.00014358687622006983,
            0.0005685235955752432,
            0.00022481985797639936,
            0.00030153864645399153,
            0.00016038210014812648
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of nations where both English and French are official languages?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.dialect",
            "select country.Name, country.LocalName",
            "select country.Name, countrylanguage.CountryCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9944774508476257,
            0.0006832506624050438,
            0.000297692691674456,
            0.00013631032197736204,
            0.00040095075382851064,
            0.00020733258861582726,
            0.0004511794832069427,
            0.0001877784525277093
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Give the names of countries with English and French as official languages.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.dialect",
            "select country.Name, country.Capital",
            "select country.Name, countrylanguage.CountryCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9956178665161133,
            0.0008022414403967559,
            0.000214849816984497,
            9.041306475410238e-05,
            0.00024065503384917974,
            9.521813626633957e-05,
            0.00027677786420099437,
            0.00010606503929011524
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of distinct continents where Chinese is spoken?",
        "gold_select": "select count(distinct country.mainland)",
        "select_candidates": [
            "select count(distinct country.mainland)",
            "select count(distinct countrylanguage.is_formal)",
            "select count(distinct country.Name)",
            "select count(distinct countrylanguage.CountryCode)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.022457044571638107,
            0.00017804688832256943,
            0.00033354354673065245,
            9.746163414092734e-05,
            0.00117464829236269,
            0.00021273230959195644,
            0.0005292994319461286,
            0.0002841565874405205
        ],
        "align_select": "select count(distinct country.mainland)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many continents speak Chinese?",
        "gold_select": "select count(distinct country.mainland)",
        "select_candidates": [
            "select count(*)",
            "select count(continents)",
            "select count(distinct country.mainland)",
            "select count(distinct countrylanguage.is_formal)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "countrylanguage",
            "sqlite_sequence country countrylanguage",
            "sqlite_sequence countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9846463799476624,
            0.0026095726061612368,
            0.6651768088340759,
            0.00019857878214679658,
            0.01897037774324417,
            8.087173046078533e-05,
            0.00031946541275829077,
            9.057010902324691e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the regions that use English or Dutch?",
        "gold_select": "select distinct country.Region",
        "select_candidates": [
            "select country.Region",
            "select distinct country.Region",
            "select country.Region, countrylanguage.CountryCode",
            "select country.Region, country.SurfaceArea"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.99305659532547,
            0.09572670608758926,
            0.024992380291223526,
            0.00021602991910185665,
            0.0002541174180805683,
            0.000136439164634794,
            0.00028440216556191444,
            0.00014581279538106173
        ],
        "align_select": "select country.Region",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which regions speak Dutch or English?",
        "gold_select": "select distinct country.Region",
        "select_candidates": [
            "select country.Region",
            "select country.Region, countrylanguage.dialect",
            "select distinct country.Region",
            "select country.Region, countrylanguage.CountryCode"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9928929209709167,
            0.05288585647940636,
            0.0003495657001622021,
            0.00017079588724300265,
            0.04619019851088524,
            0.00024547477369196713,
            0.00014887610450387,
            0.00013834494166076183
        ],
        "align_select": "select country.Region",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the countries where either English or Dutch is the official language?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.Code",
            "select country.Name, country.mainland"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9091584086418152,
            0.008379027247428894,
            0.0012927578063681722,
            0.00023815175518393517,
            0.00099596893414855,
            0.0001846526429289952,
            0.0003499833692330867,
            0.00013580330414697528
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which countries have either English or Dutch as an official language?",
        "gold_select": "select *",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.Code",
            "select country.Name, country.mainland"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9339724183082581,
            0.011120518669486046,
            0.0009457009728066623,
            0.00025381179875694215,
            0.0012195935705676675,
            0.0002266953233629465,
            0.00032962876139208674,
            0.00014899467350915074
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which language is the most popular on the Asian continent?",
        "gold_select": "select countrylanguage.dialect",
        "select_candidates": [
            "select countrylanguage.dialect",
            "select country.Name",
            "select countrylanguage.dialect, country.mainland",
            "select countrylanguage.dialect, country.Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9489929676055908,
            0.821284830570221,
            0.5744604468345642,
            0.22102496027946472,
            0.0005822867387905717,
            0.0005127493059262633,
            0.0005017782677896321,
            0.0002650826645549387
        ],
        "align_select": "select countrylanguage.dialect",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the language that is used by the largest number of Asian nations?",
        "gold_select": "select countrylanguage.dialect",
        "select_candidates": [
            "select countrylanguage.dialect",
            "select countrylanguage.dialect, country.Code",
            "select countrylanguage.dialect, country.mainland",
            "select countrylanguage.dialect, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.8586381673812866,
            0.000164130688062869,
            0.0013269660994410515,
            0.00011002187966369092,
            0.0008021299145184457,
            9.585283260094002e-05,
            0.0005144137539900839,
            7.642290438525379e-05
        ],
        "align_select": "select countrylanguage.dialect",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which languages are spoken by only one country in republic governments?",
        "gold_select": "select countrylanguage.dialect",
        "select_candidates": [
            "select countrylanguage.dialect",
            "select countrylanguage.dialect, country.GovernmentForm",
            "select countrylanguage.dialect, country.LocalName",
            "select countrylanguage.dialect, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9850384593009949,
            0.22272233664989471,
            0.0006376347155310214,
            0.0001177414451376535,
            0.0006813844083808362,
            0.00017991183267440647,
            0.0007131076417863369,
            0.00014412731979973614
        ],
        "align_select": "select countrylanguage.dialect",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "What languages are only used by a single country with a republic government?",
        "gold_select": "select countrylanguage.dialect",
        "select_candidates": [
            "select countrylanguage.dialect",
            "select countrylanguage.dialect, country.LocalName",
            "select countrylanguage.dialect, country.GovernmentForm",
            "select countrylanguage.dialect, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.7910736799240112,
            0.26716896891593933,
            0.0004890559939667583,
            0.00022039086616132408,
            0.00031079238397069275,
            0.00012661660730373114,
            0.0003294029156677425,
            0.00016254550428129733
        ],
        "align_select": "select countrylanguage.dialect",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the city with the largest population that uses English.",
        "gold_select": "select city.Name, city.Population",
        "select_candidates": [
            "select city.Name",
            "select city.ID, city.Name",
            "select city.Name, countrylanguage.dialect",
            "select city.Name, countrylanguage.is_formal"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city countrylanguage",
        "table_candidates": [
            "city countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9854421615600586,
            0.9802011847496033,
            0.0005970880738459527,
            0.0007859509205445647,
            0.0011751530691981316,
            0.0029625273309648037,
            0.00030695306486450136,
            0.0006470931693911552
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "What is the most populace city that speaks English?",
        "gold_select": "select city.Name, city.Population",
        "select_candidates": [
            "select city.Name",
            "select city.Name, countrylanguage.dialect",
            "select city.ID, city.Name",
            "select city.Name, countrylanguage.is_formal"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city countrylanguage",
        "table_candidates": [
            "city countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9883238077163696,
            0.01298059243708849,
            0.0008979876292869449,
            0.0001516902557341382,
            0.00055233936291188,
            0.00015596971206832677,
            0.0003030525695066899,
            0.00011316820746287704
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Find the name, population and expected life length of asian country with the largest area?",
        "gold_select": "select country.Name, country.Population, country.life_expectation",
        "select_candidates": [
            "select country.Name, country.Population, country.life_expectation",
            "select country.Name, country.Population, country.life_expectation",
            "select country.Name, country.Code, country.Population, country.life_expectation",
            "select country.Name, country.IndepYear, country.Population, country.life_expectation"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9880671501159668,
            0.00010676949750632048,
            0.9880671501159668,
            0.00010676949750632048,
            0.0004145248676650226,
            8.465589780826122e-05,
            0.00034192868042737246,
            8.335149323102087e-05
        ],
        "align_select": "select country.Name, country.Population, country.life_expectation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "gold_select": "select country.Name, country.Population, country.life_expectation",
        "select_candidates": [
            "select country.Name, country.Population, country.life_expectation",
            "select country.Name, country.IndepYear, country.Population, country.life_expectation",
            "select country.Name, country.Code, country.Population, country.life_expectation",
            "select country.Name, country.Population, country.life_expectation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9934819340705872,
            0.00015403844008687884,
            0.0012440952705219388,
            8.21549620013684e-05,
            0.00078709761146456,
            8.706320659257472e-05,
            0.9934819340705872,
            0.00015403844008687884
        ],
        "align_select": "select country.Name, country.Population, country.life_expectation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is average life expectancy in the countries where English is not the official language?",
        "gold_select": "select avg(country.life_expectation)",
        "select_candidates": [
            "select avg(country.life_expectation)",
            "select avg(country.life_expectation), countrylanguage.CountryCode",
            "select avg(country.life_expectation), countrylanguage.dialect",
            "select an avg(country.life_expectation)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "country",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9948593378067017,
            0.00022966957476455718,
            0.00015447352780029178,
            0.0002563114685472101,
            0.00012582357157953084,
            0.00010361503518652171,
            0.00040301468106918037,
            0.00013106553524266928
        ],
        "align_select": "select avg(country.life_expectation)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the mean life expectancy of countries in which English is not the official language.",
        "gold_select": "select avg(country.life_expectation)",
        "select_candidates": [
            "select avg(country.life_expectation)",
            "select an avg(country.life_expectation)",
            "select avg(country.life_expectation), countrylanguage.CountryCode",
            "select avg(country.life_expectation), countrylanguage.dialect"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "country",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9960811734199524,
            0.00010286721953889355,
            0.00035963853588327765,
            0.00010396875586593524,
            0.00014401989756152034,
            0.00016782691818661988,
            0.00011182719026692212,
            9.040462464326993e-05
        ],
        "align_select": "select avg(country.life_expectation)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total number of people living in the nations that do not use English?",
        "gold_select": "select sum(country.Population)",
        "select_candidates": [
            "select sum(country.Population)",
            "select sum(country.Population), countrylanguage.dialect",
            "select sum(country.Population), countrylanguage.CountryCode",
            "select sum(country.Population), countrylanguage.dialect"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "country",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.990595817565918,
            0.0006675663171336055,
            0.00014642403402831405,
            0.0002471734769642353,
            0.00014978241233620793,
            0.0011252224212512374,
            0.00014642403402831405,
            0.0002471734769642353
        ],
        "align_select": "select sum(country.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many people live in countries that do not speak English?",
        "gold_select": "select sum(country.Population)",
        "select_candidates": [
            "select sum(country.Population)",
            "select count(*)",
            "select country.Population",
            "select count(country.Population)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage",
            "country"
        ],
        "align_scores": [
            0.823085606098175,
            7.277385157067329e-05,
            0.9891139268875122,
            0.0001024914308800362,
            0.990470290184021,
            0.00012813189823646098,
            0.9743503332138062,
            7.702423317823559e-05
        ],
        "align_select": "select sum(country.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the official language spoken in the country whose head of state is Beatrix?",
        "gold_select": "select countrylanguage.dialect",
        "select_candidates": [
            "select countrylanguage.dialect",
            "select countrylanguage.is_formal",
            "select countrylanguage.dialect, country.Capital",
            "select countrylanguage.dialect, country.HeadOfState"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.5166335701942444,
            0.00025510782143101096,
            0.009036090224981308,
            0.00022926414385437965,
            0.00022002636978868395,
            7.388054655166343e-05,
            0.0002603571629151702,
            7.66363664297387e-05
        ],
        "align_select": "select countrylanguage.dialect",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "gold_select": "select countrylanguage.dialect",
        "select_candidates": [
            "select countrylanguage.dialect",
            "select countrylanguage.is_formal",
            "select countrylanguage.dialect, countrylanguage.is_formal",
            "select countrylanguage.dialect, country.HeadOfState"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.421470582485199,
            0.00018062996969092637,
            0.00917426310479641,
            0.00015994699788279831,
            0.0002560952852945775,
            8.187792991520837e-05,
            0.00021955945703666657,
            7.550345617346466e-05
        ],
        "align_select": "select countrylanguage.dialect",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "gold_select": "select count(distinct countrylanguage.dialect)",
        "select_candidates": [
            "select count(distinct countrylanguage.is_formal)",
            "select count(distinct countrylanguage.dialect)",
            "select count(distinct country.mainland)",
            "select count(count(distinct countrylanguage.is_formal)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.07499448210000992,
            0.0004062413063365966,
            0.9901379346847534,
            0.00041266472544521093,
            0.06060085818171501,
            0.00026686969795264304,
            0.0013575132470577955,
            0.00017606325855012983
        ],
        "align_select": "select count(distinct countrylanguage.dialect)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
        "gold_select": "select count(distinct countrylanguage.dialect)",
        "select_candidates": [
            "select count(distinct countrylanguage.is_formal)",
            "select count(distinct countrylanguage.dialect)",
            "select count(distinct country.mainland)",
            "select count(distinct t4.c2)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.1571645587682724,
            0.00039106718031689525,
            0.9915763735771179,
            0.00031591576407663524,
            0.062339264899492264,
            0.0001931564329424873,
            0.0007124636322259903,
            0.00020398131164256483
        ],
        "align_select": "select count(distinct countrylanguage.dialect)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the countries that have greater surface area than any country in Europe?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.mainland",
            "select country.Name, country.Region",
            "select country.Name, country.SurfaceArea"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.6881667971611023,
            0.0012176701566204429,
            0.000443891593022272,
            0.00011725698277587071,
            0.0003388389013707638,
            0.00012548197992146015,
            0.0004874889855273068,
            0.00010701554856495932
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which countries have greater area than that of any country in Europe?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.mainland",
            "select country.Name, country.Region",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.7101806402206421,
            0.00042277012835256755,
            0.0004111200396437198,
            9.039539872901514e-05,
            0.00029187052859924734,
            8.750400593271479e-05,
            0.002611801726743579,
            0.00015698056085966527
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the African countries that have a population less than any country in Asia?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.mainland",
            "select distinct country.Name",
            "select country.Name, country.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.6452922224998474,
            0.001985549693927169,
            0.0003821280843112618,
            0.0001368202647427097,
            0.1288764625787735,
            0.0006864503957331181,
            0.000365716201486066,
            9.45761930779554e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which African countries have a smaller population than that of any country in Asia?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.mainland",
            "select country.Name, country.Population",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.6418523192405701,
            0.0009224491659551859,
            0.0003576655872166157,
            0.00011412129970267415,
            0.00046252578613348305,
            8.237759175244719e-05,
            0.004233171232044697,
            0.0001733023818815127
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which Asian countries have a population that is larger than any country in Africa?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.mainland",
            "select country.Name, country.Population",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country",
            "city sqlite_sequence country"
        ],
        "align_scores": [
            0.7112459540367126,
            0.0007658321992494166,
            0.0004111901798751205,
            0.00014204016770236194,
            0.0004487395053729415,
            8.645107300253585e-05,
            0.00552308838814497,
            0.00020789896370843053
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.mainland",
            "select distinct country.Name",
            "select country.Name, country.mainland"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country",
            "city sqlite_sequence country"
        ],
        "align_scores": [
            0.736194372177124,
            0.10371170192956924,
            0.0003551928384695202,
            0.00019442029588390142,
            0.14539307355880737,
            0.001348678139038384,
            0.0003551928384695202,
            0.00019442029588390142
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the country codes for countries that do not speak English?",
        "gold_select": "select countrylanguage.CountryCode",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select distinct countrylanguage.CountryCode",
            "select countrylanguage.CountryCode, countrylanguage.dialect",
            "select countrylanguage.dialect, country.Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9854282736778259,
            0.00027577902073971927,
            0.020596615970134735,
            0.0001271181827178225,
            0.0005212642136029899,
            7.748400093987584e-05,
            0.00037767953472211957,
            7.579026714665815e-05
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the country codes for countries that do not speak English.",
        "gold_select": "select countrylanguage.CountryCode",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select distinct countrylanguage.CountryCode",
            "select countrylanguage.CountryCode, countrylanguage.dialect",
            "select countrylanguage.CountryCode, countrylanguage.dialect, countrylanguage.is_formal"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9915137887001038,
            0.0001950832229340449,
            0.007788877934217453,
            9.201230568578467e-05,
            0.0003674071922432631,
            6.45129184704274e-05,
            0.0003162008069921285,
            7.28710219846107e-05
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the country codes of countries where people use languages other than English?",
        "gold_select": "select distinct countrylanguage.CountryCode",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select distinct countrylanguage.CountryCode",
            "select country.Name, countrylanguage.CountryCode",
            "select countrylanguage.CountryCode, countrylanguage.dialect"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9585445523262024,
            0.2676149010658264,
            0.05479627102613449,
            0.00026256206911057234,
            0.00031956072780303657,
            0.00014617906708735973,
            0.00040950594120658934,
            0.0001542268437333405
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the country codes for countries in which people speak langauges that are not English.",
        "gold_select": "select distinct countrylanguage.CountryCode",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select distinct countrylanguage.CountryCode",
            "select country.Name, countrylanguage.CountryCode",
            "select countrylanguage.CountryCode, countrylanguage.dialect"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.7552567720413208,
            0.3010140359401703,
            0.0581262931227684,
            0.0004231446946505457,
            0.000333743286319077,
            0.00013683747965842485,
            0.00037268034066073596,
            0.00012918475840706378
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "gold_select": "select country.Code",
        "select_candidates": [
            "select country.Code",
            "select country.Code, country.GovernmentForm",
            "select country.Name, country.Code",
            "select country.Name, country.Code2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9519708156585693,
            0.08273159712553024,
            0.000968194508459419,
            0.00016372770187444985,
            0.00041579254320822656,
            0.00032275545527227223,
            0.00028742814902216196,
            0.00025156716583296657
        ],
        "align_select": "select country.Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
        "gold_select": "select country.Code",
        "select_candidates": [
            "select country.Code",
            "select country.Code, country.GovernmentForm",
            "select country.Name, country.Code2",
            "select country.Name, country.Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.009245618246495724,
            0.9563199281692505,
            0.0001897903421195224,
            0.0003906796337105334,
            0.0002038374514086172,
            0.00023079130914993584,
            0.0002557249099481851,
            0.00027478011907078326
        ],
        "align_select": "select country.Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which cities are in European countries where English is not the official language?",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select city.Name",
            "select city.ID, city.Name",
            "select distinct city.Name",
            "select city.Name, country.Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage",
            "city sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.7999190092086792,
            0.0017327343812212348,
            0.0003474141994956881,
            0.00015475806139875203,
            0.08250637352466583,
            0.0484207421541214,
            0.0003159377083647996,
            0.00012794022040907294
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of cities in Europe for which English is not the official language?",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select city.Name",
            "select city.Name, country.Name",
            "select distinct city.Name",
            "select city.Name, country.mainland"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage",
            "city country",
            "city sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9881308078765869,
            0.0012755454517900944,
            0.00022000769968144596,
            0.0001340548333246261,
            0.024760423228144646,
            0.021037956699728966,
            0.00025926725356839597,
            0.00013080808275844902
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which unique cities are in Asian countries where Chinese is the official language?",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select distinct city.Name",
            "select distinct city.ID",
            "select count(*)",
            "select count(distinct city.ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage",
            "city sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9801871180534363,
            0.00036284903762862086,
            0.8676100969314575,
            0.00027758334181271493,
            0.037045884877443314,
            9.56164876697585e-05,
            0.01147723849862814,
            7.306640327442437e-05
        ],
        "align_select": "select distinct city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select distinct city.Name",
            "select distinct city.Name, country.Name",
            "select count(distinct city.Name)",
            "select distinct city.Name, city.CountryCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage",
            "city sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9935991764068604,
            0.00012576083827298135,
            0.00021376153745222837,
            6.301797111518681e-05,
            0.0006820526323281229,
            7.030594133539125e-05,
            0.00015338766388595104,
            6.142315396573395e-05
        ],
        "align_select": "select distinct city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "gold_select": "select count(countrylanguage.dialect), country.Name",
        "select_candidates": [
            "select country.Name, count(distinct countrylanguage.dialect)",
            "select country.Name, count(distinct countrylanguage.CountryCode)",
            "select country.Name, count(*)",
            "select country.Name, count(distinct countrylanguage.is_formal)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.12888695299625397,
            7.545184053014964e-05,
            0.0005113670486025512,
            6.961531471461058e-05,
            0.4508833587169647,
            0.00011888384324265644,
            0.0006634601741097867,
            7.368958904407918e-05
        ],
        "align_select": "select country.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
        "gold_select": "select count(countrylanguage.dialect), country.Name",
        "select_candidates": [
            "select country.Name, count(distinct country.mainland)",
            "select country.Name, count(distinct country.Code)",
            "select country.Name, count(distinct countrylanguage.dialect)",
            "select country.Name, count(distinct country.Name)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage"
        ],
        "align_scores": [
            0.002519809640944004,
            8.626685303170234e-05,
            0.0016842529876157641,
            8.77950296853669e-05,
            0.44368502497673035,
            9.443362068850547e-05,
            0.00025521733914501965,
            7.164282578742132e-05
        ],
        "align_select": "select country.Name, count(distinct countrylanguage.dialect)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
        "gold_select": "select sum(country.Population), country.GovernmentForm",
        "select_candidates": [
            "select country.GovernmentForm, sum(country.Population)",
            "select country.Name, sum(country.Population)",
            "select country.Capital, sum(country.Population)",
            "select country.GovernmentForm, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.16723649203777313,
            0.00018156641453970224,
            0.006742990575730801,
            0.0002276203449582681,
            0.0002997097617480904,
            8.45169197418727e-05,
            0.36535245180130005,
            0.0002746334648691118
        ],
        "align_select": "select country.GovernmentForm, sum(country.Population)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
        "gold_select": "select sum(country.Population), country.GovernmentForm",
        "select_candidates": [
            "select country.GovernmentForm, sum(country.Population)",
            "select country.Name, sum(country.Population)",
            "select country.Capital, sum(country.Population)",
            "select country.LocalName, sum(country.Population)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.7861548066139221,
            0.00016118853818625212,
            0.915673553943634,
            0.00018301511590834707,
            0.0017824491951614618,
            8.500771218677983e-05,
            0.10039723664522171,
            0.00016170760500244796
        ],
        "align_select": "select country.GovernmentForm, sum(country.Population)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
        "gold_select": "select sum(country.Population), avg(country.life_expectation), country.mainland",
        "select_candidates": [
            "select country.mainland, country.Population",
            "select country.mainland, avg(country.life_expectation), sum(country.Population)",
            "select avg(country.life_expectation), sum(country.Population), country.mainland",
            "select country.Name, avg(country.life_expectation), sum(country.Population)"
        ],
        "select_labels": [
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.00032852820004336536,
            8.146407344611362e-05,
            0.00498851016163826,
            0.00012922208406962454,
            0.021764393895864487,
            0.00012892753875348717,
            0.0016085337847471237,
            9.214744932251051e-05
        ],
        "align_select": "select country.mainland, country.Population",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
        "gold_select": "select sum(country.Population), avg(country.life_expectation), country.mainland",
        "select_candidates": [
            "select country.mainland, sum(country.Population), avg(country.Population)",
            "select country.mainland, sum(country.Population), avg(country.life_expectation)",
            "select country.Name, sum(country.Population), avg(country.Population)",
            "select country.mainland, count(*), avg(country.Population)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.00861311610788107,
            9.79840406216681e-05,
            0.020114636048674583,
            9.791250340640545e-05,
            0.03849788382649422,
            0.00010442241909913719,
            0.002108937129378319,
            9.90699409157969e-05
        ],
        "align_select": "select country.mainland, sum(country.Population), avg(country.Population)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "how many countries are in Asia?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), country.Code",
            "select count(*), country.Name",
            "select count(*), country.mainland"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.995347797870636,
            0.0004178169183433056,
            0.0005199190345592797,
            0.0003089996171183884,
            0.00041565424180589616,
            0.0002767195401247591,
            0.00026341810007579625,
            0.0002708830579649657
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count the number of countries in Asia.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), country.Name",
            "select count(*), country.Code",
            "select count(*), country.Name, country.mainland"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9957026839256287,
            0.000186585690244101,
            0.0002219086018158123,
            0.0018845576560124755,
            0.00027474295347929,
            0.002342158230021596,
            0.00012324770796112716,
            9.464204777032137e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Population",
            "select country.Name, country.mainland",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country",
            "sqlite_sequence country",
            "city sqlite_sequence country"
        ],
        "align_scores": [
            0.9595640897750854,
            0.001315632718615234,
            0.00023559090914204717,
            0.00011336316674714908,
            0.00033957179402932525,
            0.0001248978660441935,
            0.0002299614279763773,
            9.96403832687065e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.mainland",
            "select country.Name, country.Region",
            "select country.Name, country.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country"
        ],
        "align_scores": [
            0.8918541669845581,
            0.0005018131341785192,
            0.0002693594724405557,
            7.87683020462282e-05,
            0.0001932177838170901,
            7.36175206839107e-05,
            0.000209209174499847,
            6.498496804852039e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000?",
        "gold_select": "select sum(country.Population), avg(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.Population), avg(country.SurfaceArea)",
            "select sum(country.Population), avg(country.Population)",
            "select sum(country.Population), avg(country.IndepYear)",
            "select sum(country.Population), avg(country.gross_national_product)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9928221106529236,
            0.0006283607799559832,
            0.002171061933040619,
            0.00016823371697682887,
            0.00037617605994455516,
            0.0001735173282213509,
            0.0017632127273827791,
            0.00021201792696956545
        ],
        "align_select": "select sum(country.Population), avg(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000.",
        "gold_select": "select sum(country.Population), avg(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.Population), avg(country.SurfaceArea)",
            "select avg(country.Population), sum(country.Population)",
            "select sum(country.Population), avg(country.Population)",
            "select country.Population, avg(country.SurfaceArea)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9892410635948181,
            0.0003840260033030063,
            0.011217364110052586,
            0.00021531409583985806,
            0.0027732476592063904,
            0.00021181102783884853,
            0.3871621787548065,
            0.0002814876788761467
        ],
        "align_select": "select sum(country.Population), avg(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which language is spoken by the largest number of countries?",
        "gold_select": "select countrylanguage.dialect",
        "select_candidates": [
            "select countrylanguage.dialect",
            "select country.Name",
            "select countrylanguage.dialect, country.Capital",
            "select countrylanguage.dialect, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "sqlite_sequence countrylanguage",
            "city country countrylanguage",
            "countrylanguage"
        ],
        "align_scores": [
            0.5032004714012146,
            7.604712300235406e-05,
            0.8226222991943359,
            6.597107130801305e-05,
            0.0004591420292854309,
            5.9975998738082126e-05,
            0.0013898583129048347,
            6.907623901497573e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Give the language that is spoken in the most countries.",
        "gold_select": "select countrylanguage.dialect",
        "select_candidates": [
            "select countrylanguage.dialect",
            "select country.Name",
            "select country.Name, countrylanguage.dialect",
            "select countrylanguage.dialect, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "sqlite_sequence countrylanguage",
            "city country countrylanguage",
            "countrylanguage"
        ],
        "align_scores": [
            0.7402142286300659,
            6.882631714688614e-05,
            0.8182396292686462,
            6.64184262859635e-05,
            0.001997998682782054,
            6.519059388665482e-05,
            0.00028631690656766295,
            5.389465513871983e-05
        ],
        "align_select": "select countrylanguage.dialect",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the language spoken by the largest percentage of people in each country?",
        "gold_select": "select countrylanguage.dialect, countrylanguage.CountryCode, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select countrylanguage.CountryCode, countrylanguage.dialect",
            "select countrylanguage.dialect, countrylanguage.Percentage",
            "select countrylanguage.CountryCode, countrylanguage.dialect, countrylanguage.Percentage",
            "select countrylanguage.dialect, countrylanguage.is_formal"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.2988797128200531,
            8.787141996435821e-05,
            0.003189793787896633,
            6.368893809849396e-05,
            0.0009938862640410662,
            7.08628649590537e-05,
            0.0016224323771893978,
            7.478709449060261e-05
        ],
        "align_select": "select countrylanguage.CountryCode, countrylanguage.dialect",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
        "gold_select": "select countrylanguage.dialect, countrylanguage.CountryCode, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select countrylanguage.CountryCode, countrylanguage.dialect",
            "select countrylanguage.CountryCode, countrylanguage.dialect, countrylanguage.Percentage",
            "select countrylanguage.dialect, countrylanguage.is_formal",
            "select countrylanguage.dialect, countrylanguage.CountryCode"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.8116855621337891,
            8.079710096353665e-05,
            0.0012390256160870194,
            7.51826519262977e-05,
            0.00021224403462838382,
            6.047133501851931e-05,
            0.9762572050094604,
            8.632676326669753e-05
        ],
        "align_select": "select countrylanguage.CountryCode, countrylanguage.dialect",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "gold_select": "select count(*), max(countrylanguage.Percentage)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countrylanguage.CountryCode",
            "select count(*), countrylanguage.CountryCode, countrylanguage.dialect",
            "select count(*), country.Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9555000066757202,
            0.010027590207755566,
            0.0018006953177973628,
            0.007015580777078867,
            0.00020818259508814663,
            0.00020010695152450353,
            0.0010187877342104912,
            0.0035981968976557255
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "gold_select": "select count(*), max(countrylanguage.Percentage)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countrylanguage.CountryCode",
            "select count(distinct countrylanguage.CountryCode)",
            "select count(*), country.Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9916129112243652,
            0.0016613454790785909,
            0.0007150219171307981,
            0.005745817441493273,
            0.9063711166381836,
            0.00017919552919920534,
            0.00039558764547109604,
            0.0041683814488351345
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "gold_select": "select countrylanguage.CountryCode, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select country.Code",
            "select country.Name, country.Code",
            "select country.Name, country.Code2",
            "select country.Name, country.mainland"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city countrylanguage"
        ],
        "align_scores": [
            0.9816455841064453,
            0.9815635681152344,
            0.001165725407190621,
            0.0031707140151411295,
            0.000636354903690517,
            0.0016266604652628303,
            0.0005910093896090984,
            0.0008090795017778873
        ],
        "align_select": "select country.Code",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
        "gold_select": "select countrylanguage.CountryCode, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select country.Code",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.Code"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9650791883468628,
            0.00010376986028859392,
            0.9836951494216919,
            8.971072384156287e-05,
            0.00025080869090743363,
            6.635580939473584e-05,
            0.0002219725283794105,
            5.867519212188199e-05
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which language is the most popular in Aruba?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.LocalName",
            "select countrylanguage.Language, country.Code",
            "select countrylanguage.Language, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.991671621799469,
            0.9949219822883606,
            0.00041601949487812817,
            0.0003116635780315846,
            0.0003114221035502851,
            0.00025171227753162384,
            0.00019734377565328032,
            0.00025301569257862866
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What language is predominantly spoken in Aruba?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.LocalName",
            "select countrylanguage.Language, country.Code",
            "select countrylanguage.Language, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9934055805206299,
            0.00861097127199173,
            0.0003557350719347596,
            0.00020583874720614403,
            0.00029121674015186727,
            0.0001806733780540526,
            0.0003072066174354404,
            0.0001736900012474507
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the total number of languages used in Aruba?",
        "gold_select": "select count(countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.Language)",
            "select count(countrylanguage.Language)",
            "select count(*)",
            "select count(selection count(distinct countrylanguage.Language)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9949026107788086,
            0.00021062423184048384,
            0.995934247970581,
            0.0011507384479045868,
            0.9939318895339966,
            0.0024279530625790358,
            0.0005786499241366982,
            0.00010467115498613566
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many languages are spoken in Aruba?",
        "gold_select": "select count(countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.Language)",
            "select count(speechcount(distinct countrylanguage.Language)",
            "select count(countrylanguage.Language)",
            "select count(count(distinct countrylanguage.Language)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9968793392181396,
            0.00014572091458830982,
            0.0010048503754660487,
            0.00011644935148069635,
            0.9971092343330383,
            0.0012856408720836043,
            0.0006200874340720475,
            9.90639891824685e-05
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many official languages does Afghanistan have?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(distinct countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.Language)",
            "select count(countrylanguage.IsOfficial)",
            "select count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.14873813092708588,
            6.734210182912648e-05,
            0.9948210716247559,
            6.52025337330997e-05,
            0.006637288257479668,
            7.803769403835759e-05,
            0.8711315393447876,
            9.44298371905461e-05
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many official languages are spoken in Afghanistan?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(distinct countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.Language)",
            "select count(countrylanguage.IsOfficial)",
            "select count(count(distinct countrylanguage.IsOfficial)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.6086193323135376,
            0.00012295482156332582,
            0.9818145632743835,
            0.0001377347216475755,
            0.03984178602695465,
            0.0029554276261478662,
            0.000654432107694447,
            0.00013343426689971238
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is name of the country that speaks the largest number of languages?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, countrylanguage.Language",
            "select country.Name, country.country_head"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9925251007080078,
            6.926178321009502e-05,
            0.00026925085694529116,
            6.068623042665422e-05,
            0.0011245764326304197,
            6.574885628651828e-05,
            0.0007542971288785338,
            6.451199442381039e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Give the name of the nation that uses the greatest amount of languages.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, countrylanguage.Language",
            "select country.Name, countrylanguage.Percentage"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9717080593109131,
            6.48482091492042e-05,
            0.00016448037058580667,
            5.808091373182833e-05,
            0.0013741395669057965,
            6.785509322071448e-05,
            0.0010709010530263186,
            6.16331453784369e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which continent has the most diverse languages?",
        "gold_select": "select country.Continent",
        "select_candidates": [
            "select country.Continent",
            "select country.Continent, countrylanguage.Language",
            "select country.Code, country.Continent",
            "select country.Continent, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9951820969581604,
            6.664689863100648e-05,
            0.0007332157110795379,
            7.165149145293981e-05,
            0.0006033326499164104,
            7.443341019097716e-05,
            0.002313567092642188,
            6.062532338546589e-05
        ],
        "align_select": "select country.Continent",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which continent speaks the most languages?",
        "gold_select": "select country.Continent",
        "select_candidates": [
            "select country.Continent",
            "select country.Continent, countrylanguage.Language",
            "select country.Continent, country.Name",
            "select country.Continent, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9958615899085999,
            6.0989481426076964e-05,
            0.0008065784350037575,
            5.912453343626112e-05,
            0.0008915559737943113,
            5.9936657635262236e-05,
            0.002341458573937416,
            5.839552977704443e-05
        ],
        "align_select": "select country.Continent",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "How many countries speak both English and Dutch?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countrylanguage.Language",
            "select count(*), countrylanguage.country_cipher",
            "select count(distinct countrylanguage.country_cipher)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9916921854019165,
            0.4901256561279297,
            0.00024464671150781214,
            0.00025600887602195144,
            0.00026849587447941303,
            0.00014724870561622083,
            0.0009189550764858723,
            9.874304669210687e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of nations that use English and Dutch?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countrylanguage.Language",
            "select count(*), countrylanguage.country_cipher",
            "select count(countrylanguage.country_cipher)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9906153678894043,
            0.01515202410519123,
            0.00028560368809849024,
            0.0009044157341122627,
            0.00024394888896495104,
            0.0002659897436387837,
            0.001988404430449009,
            0.0005531968781724572
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of nations speak both English and French?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.Language",
            "select country.Name, country.LocalName",
            "select country.Name, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9898960590362549,
            0.00022923073265701532,
            0.0003243167884647846,
            0.0001258736156160012,
            0.0005926791345700622,
            0.00017648967332206666,
            0.00013408102677203715,
            8.121858263621107e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Give the names of nations that speak both English and French.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.Language",
            "select country.Name, country.Capital",
            "select country.Name, country.LocalName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9946801066398621,
            0.00039546130574308336,
            0.00024379354726988822,
            0.0001327580539509654,
            0.0001949612342286855,
            9.6807700174395e-05,
            0.0005685235955752432,
            0.00022481985797639936
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of nations where both English and French are official languages?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.Language",
            "select country.Name, countrylanguage.Language, countrylanguage.IsOfficial",
            "select country.Name, country.LocalName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage"
        ],
        "align_scores": [
            0.9944774508476257,
            0.0006832506624050438,
            0.0002646175562404096,
            0.00013249285984784365,
            0.00016685518494341522,
            0.00011706169607350603,
            0.00040095075382851064,
            0.00020733258861582726
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Give the names of countries with English and French as official languages.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.Language",
            "select country.Name, countrylanguage.Language, countrylanguage.IsOfficial",
            "select country.Name, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage"
        ],
        "align_scores": [
            0.9956178665161133,
            0.0008022414403967559,
            0.0001883481309050694,
            7.464664668077603e-05,
            0.0001330272207269445,
            8.265401993412524e-05,
            0.00024065503384917974,
            9.521813626633957e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of distinct continents where Chinese is spoken?",
        "gold_select": "select count(distinct country.Continent)",
        "select_candidates": [
            "select count(distinct country.Continent)",
            "select count(distinct country.Population)",
            "select count(distinct t2).c2",
            "select count(distinct country.Name)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9965053796768188,
            0.0002231302350992337,
            0.0006025941111147404,
            0.0001282570738112554,
            0.00031463350751437247,
            0.0001251846260856837,
            0.00117464829236269,
            0.00021273230959195644
        ],
        "align_select": "select count(distinct country.Continent)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many continents speak Chinese?",
        "gold_select": "select count(distinct country.Continent)",
        "select_candidates": [
            "select count(distinct country.Continent)",
            "select count(*)",
            "select count(country.Continent)",
            "select count(continents)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9599130153656006,
            9.854315430857241e-05,
            0.9846463799476624,
            0.0026095726061612368,
            0.9709805846214294,
            0.0005512774805538356,
            0.6651768088340759,
            0.00019857878214679658
        ],
        "align_select": "select count(distinct country.Continent)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the regions that use English or Dutch?",
        "gold_select": "select distinct country.Region",
        "select_candidates": [
            "select country.Region",
            "select distinct country.Region",
            "select country.Region, countrylanguage.Language",
            "select country.Region, country.SurfaceArea"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.99305659532547,
            0.09572670608758926,
            0.024992380291223526,
            0.00021602991910185665,
            0.00021782793919555843,
            0.0001265528699150309,
            0.00028440216556191444,
            0.00014581279538106173
        ],
        "align_select": "select country.Region",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which regions speak Dutch or English?",
        "gold_select": "select distinct country.Region",
        "select_candidates": [
            "select country.Region",
            "select distinct country.Region",
            "select country.Region, countrylanguage.Language",
            "select country.Region-, countrylanguage.Language"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9928929209709167,
            0.05288585647940636,
            0.04619019851088524,
            0.00024547477369196713,
            0.0002516201639082283,
            0.00013193525956012309,
            0.00021513969113584608,
            9.59577300818637e-05
        ],
        "align_select": "select country.Region",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the countries where either English or Dutch is the official language?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.IsOfficial",
            "select country.Name, country.country_head",
            "select country.Name, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9091584086418152,
            0.008379027247428894,
            0.0004780162707902491,
            0.00013909282279200852,
            0.0002828709839377552,
            0.00010445559746585786,
            0.00032386102247983217,
            0.00018423267465550452
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which countries have either English or Dutch as an official language?",
        "gold_select": "select *",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.IsOfficial",
            "select country.Name, country.country_head",
            "select country.Name, country.Continent"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9339724183082581,
            0.011120518669486046,
            0.00045755511382594705,
            0.00015098434232641011,
            0.0002624118933454156,
            0.00010646926966728643,
            0.0002933401265181601,
            0.00012759787205141038
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which language is the most popular on the Asian continent?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.Code",
            "select countrylanguage.Language, country.Capital",
            "select countrylanguage.Language, country.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9940105080604553,
            0.9940928816795349,
            0.0002429225278319791,
            0.0003269363078288734,
            0.0002251832775073126,
            0.00018777647346723825,
            0.00023689960653427988,
            0.0005246466025710106
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "What is the language that is used by the largest number of Asian nations?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.Capital",
            "select countrylanguage.Language, country.Code",
            "select countrylanguage.Language, country.country_head"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9928207993507385,
            0.00013152552128303796,
            0.00036742610973306,
            7.130428275559098e-05,
            0.0007691628998145461,
            8.408933354075998e-05,
            0.0004413275746628642,
            7.562941027572379e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which languages are spoken by only one country in republic governments?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.Capital",
            "select countrylanguage.Language, country.LocalName",
            "select countrylanguage.Language, country.GovernmentForm"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9830953478813171,
            0.04665201157331467,
            0.000240649314946495,
            9.648311970522627e-05,
            0.0005242734332568944,
            0.00012841603893321007,
            0.00039117419510148466,
            9.02356332517229e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "What languages are only used by a single country with a republic government?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.Capital",
            "select countrylanguage.Language, country.LocalName",
            "select countrylanguage.Language, country.country_head"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.990331768989563,
            0.08781863003969193,
            0.00021822084090672433,
            0.00010262051364406943,
            0.0003983774804510176,
            0.00015578942839056253,
            0.0002607118512969464,
            0.00012741159298457205
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the city with the largest population that uses English.",
        "gold_select": "select city.Name, city.Population",
        "select_candidates": [
            "select city.Name",
            "select city.ID, city.Name",
            "select city.Name, countrylanguage.Language",
            "select city.Name, city.District"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city countrylanguage",
        "table_candidates": [
            "city countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9854421615600586,
            0.9802011847496033,
            0.0005970880738459527,
            0.0007859509205445647,
            0.0009877467527985573,
            0.0024781760293990374,
            0.0003447792259976268,
            0.000572898134123534
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "What is the most populace city that speaks English?",
        "gold_select": "select city.Name, city.Population",
        "select_candidates": [
            "select city.Name",
            "select city.ID, city.Name",
            "select city.Name, countrylanguage.Language",
            "select city.Name, countrylanguage.Language"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "city countrylanguage",
        "table_candidates": [
            "city countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.01298059243708849,
            0.0001238840923178941,
            0.00015596971206832677,
            7.231941708596423e-05,
            0.00017430218576919287,
            8.497456292388961e-05,
            0.00017430218576919287,
            8.497456292388961e-05
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What is average life expectancy in the countries where English is not the official language?",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), countrylanguage.Language",
            "select an avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), countrylanguage.IsOfficial"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "country",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9939800500869751,
            0.00023655788390897214,
            0.00013233038771431893,
            0.000251695018960163,
            0.00042018727981485426,
            0.000142126067657955,
            0.0001674750674283132,
            0.00017451588064432144
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the mean life expectancy of countries in which English is not the official language.",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), countrylanguage.Language",
            "select an avg(country.LifeExpectancy)",
            "select m.avg(country.LifeExpectancy)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "country",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9952073693275452,
            0.0001013903456623666,
            0.00013440655311569571,
            0.00017803229275159538,
            0.00037163367960602045,
            0.00010477561590960249,
            0.0013062423095107079,
            0.00011141112190671265
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total number of people living in the nations that do not use English?",
        "gold_select": "select sum(country.Population)",
        "select_candidates": [
            "select sum(country.Population)",
            "select sum(country.Population), countrylanguage.Language",
            "select sum(country.Population), countrylanguage.Language",
            "select sum(country.IndepYear)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "sqlite_sequence countrylanguage",
            "country"
        ],
        "align_scores": [
            0.990595817565918,
            0.0006675663171336055,
            0.00017954579379875213,
            0.0003628587583079934,
            0.00017954579379875213,
            0.0003628587583079934,
            0.0008415891206823289,
            0.00025778167764656246
        ],
        "align_select": "select sum(country.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many people live in countries that do not speak English?",
        "gold_select": "select sum(country.Population)",
        "select_candidates": [
            "select sum(country.Population)",
            "select count(*)",
            "select country.Population",
            "select count(country.Population)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage",
            "country"
        ],
        "align_scores": [
            0.823085606098175,
            7.277385157067329e-05,
            0.9891139268875122,
            0.0001024914308800362,
            0.990470290184021,
            0.00012813189823646098,
            0.9743503332138062,
            7.702423317823559e-05
        ],
        "align_select": "select sum(country.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the official language spoken in the country whose head of state is Beatrix?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, countrylanguage.IsOfficial",
            "select countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage",
            "select countrylanguage.Language, countrylanguage.IsOfficial"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.994281530380249,
            0.00019474349392112345,
            0.0003335101355332881,
            8.159880235325545e-05,
            0.00022302773140836507,
            8.159895514836535e-05,
            0.0003335101355332881,
            8.159880235325545e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, countrylanguage.IsOfficial",
            "select countrylanguage.Language, countrylanguage.IsOfficial",
            "select countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.994738757610321,
            0.00014149377238936722,
            0.0003488353395368904,
            7.923514931462705e-05,
            0.0003488353395368904,
            7.923514931462705e-05,
            0.00023190389038063586,
            8.080842962954193e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.Language)",
            "select sum(countrylanguage.IsOfficial)",
            "select count(distinct t3.c6)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.015778161585330963,
            0.0002564363821875304,
            0.993217408657074,
            0.00033036115928553045,
            0.0020098944660276175,
            0.0021642951760441065,
            0.0005603670142591,
            0.00017779649351723492
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.Language)",
            "select sum(countrylanguage.IsOfficial)",
            "select sum(distinct countrylanguage.IsOfficial)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.010099750943481922,
            0.00020970823243260384,
            0.9946157336235046,
            0.00027345557464286685,
            0.0015747209545224905,
            0.0012681415537372231,
            0.004872492048889399,
            0.0002667458029463887
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the country codes for countries that do not speak English?",
        "gold_select": "select countrylanguage.country_cipher",
        "select_candidates": [
            "select country.Code",
            "select countrylanguage.country_cipher",
            "select country.Code2",
            "select country.Name, countrylanguage.country_cipher"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city countrylanguage"
        ],
        "align_scores": [
            0.9861677289009094,
            0.00015944130427669734,
            0.6303800344467163,
            0.0001876275782706216,
            0.022787371650338173,
            0.0002235326828667894,
            0.00030734724714420736,
            8.105701999738812e-05
        ],
        "align_select": "select country.Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the country codes for countries that do not speak English.",
        "gold_select": "select countrylanguage.country_cipher",
        "select_candidates": [
            "select country.Code",
            "select country.Code2",
            "select country.Name, countrylanguage.country_cipher",
            "select countrylanguage.country_cipher"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city countrylanguage"
        ],
        "align_scores": [
            0.9919781684875488,
            9.942142060026526e-05,
            0.013704808428883553,
            0.00014359793567564338,
            0.0002506442251615226,
            6.717866926919669e-05,
            0.05169497802853584,
            0.00010739768913481385
        ],
        "align_select": "select country.Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the country codes of countries where people use languages other than English?",
        "gold_select": "select distinct countrylanguage.country_cipher",
        "select_candidates": [
            "select country.Code",
            "select countrylanguage.country_cipher",
            "select country.Code2",
            "select country.Name, countrylanguage.country_cipher"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.8691986203193665,
            0.12277539819478989,
            0.5507532358169556,
            0.023240452632308006,
            0.01374729909002781,
            0.040724143385887146,
            0.00036456293310038745,
            0.00017939928511623293
        ],
        "align_select": "select country.Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the country codes for countries in which people speak langauges that are not English.",
        "gold_select": "select distinct countrylanguage.country_cipher",
        "select_candidates": [
            "select country.Code",
            "select country.Name, countrylanguage.country_cipher",
            "select country.Name",
            "select country.Name, country.Continent"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.5514557361602783,
            0.06883188337087631,
            0.0003805772284977138,
            0.00013712981308344752,
            0.006618279032409191,
            0.19769729673862457,
            0.00020262517500668764,
            0.00019375814008526504
        ],
        "align_select": "select country.Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "gold_select": "select country.Code",
        "select_candidates": [
            "select country.Code",
            "select country.Name",
            "select country.Code2",
            "select countrylanguage.country_cipher"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9519708156585693,
            0.08273159712553024,
            0.006015425082296133,
            0.8335133194923401,
            0.07296417653560638,
            0.04586660861968994,
            0.9829997420310974,
            0.40167534351348877
        ],
        "align_select": "select country.Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
        "gold_select": "select country.Code",
        "select_candidates": [
            "select country.Code",
            "select country.Code, country.GovernmentForm",
            "select country.Name",
            "select country.Code2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.009245618246495724,
            0.9563199281692505,
            0.0001897903421195224,
            0.0003906796337105334,
            0.8633577823638916,
            0.0028744242154061794,
            0.007866852916777134,
            0.05139679089188576
        ],
        "align_select": "select country.Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which cities are in European countries where English is not the official language?",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select city.Name",
            "select city.ID, city.Name",
            "select distinct city.Name",
            "select city.Name, country.Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage",
            "city sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.7999190092086792,
            0.0017327343812212348,
            0.0003474141994956881,
            0.00015475806139875203,
            0.08250637352466583,
            0.0484207421541214,
            0.0003159377083647996,
            0.00012794022040907294
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of cities in Europe for which English is not the official language?",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select city.Name",
            "select city.Name, country.Name",
            "select distinct city.Name",
            "select city.Name, country.Continent"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage",
            "city sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9881308078765869,
            0.0012755454517900944,
            0.00022000769968144596,
            0.0001340548333246261,
            0.024760423228144646,
            0.021037956699728966,
            0.0002406403364147991,
            0.00012205709936097264
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which unique cities are in Asian countries where Chinese is the official language?",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select distinct city.Name",
            "select distinct city.ID",
            "select count(*)",
            "select count(distinct city.ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage",
            "city sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9801871180534363,
            0.00036284903762862086,
            0.8676100969314575,
            0.00027758334181271493,
            0.037045884877443314,
            9.56164876697585e-05,
            0.01147723849862814,
            7.306640327442437e-05
        ],
        "align_select": "select distinct city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select distinct city.Name",
            "select distinct city.Name, country.Name",
            "select distinct city.Name, countrylanguage.Language",
            "select distinct city.Name, country.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage",
            "city sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9935991764068604,
            0.00012576083827298135,
            0.00021376153745222837,
            6.301797111518681e-05,
            0.00029001428629271686,
            6.192015280248597e-05,
            0.0001759924052748829,
            6.211965228430927e-05
        ],
        "align_select": "select distinct city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the population, name and leader of the country with the largest area?",
        "gold_select": "select country.Name, country.Population, country.country_head",
        "select_candidates": [
            "select country.Population, country.Name, country.country_head",
            "select country.Code, country.Name, country.country_head",
            "select country.Name, country.Population, country.country_head",
            "select country.Population), country.Name, country.country_head"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9940558671951294,
            8.797672489890829e-05,
            0.0008833968313410878,
            9.908185165841132e-05,
            0.9941092729568481,
            8.837359928293154e-05,
            0.003357522888109088,
            8.024318958632648e-05
        ],
        "align_select": "select country.Population, country.Name, country.country_head",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Give the name, population, and head of state for the country that has the largest area.",
        "gold_select": "select country.Name, country.Population, country.country_head",
        "select_candidates": [
            "select country.Name, country.Population, country.country_head",
            "select country.Name, country.IndepYear, country.Population, country.country_head",
            "select country.Name, country.Population, country.country_head",
            "select country.Name, country.Population, country.country_head, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9877251982688904,
            8.684785279911011e-05,
            0.0006066634086892009,
            7.209012255771086e-05,
            0.9877251982688904,
            8.684785279911011e-05,
            0.00033128305221907794,
            7.665697194170207e-05
        ],
        "align_select": "select country.Name, country.Population, country.country_head",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "gold_select": "select count(countrylanguage.Language), country.Name",
        "select_candidates": [
            "select country.Name, count(distinct countrylanguage.Language)",
            "select country.Name, count(*)",
            "select country.Name, count(countrylanguage.Language)",
            "select country.Name, count(distinct country.Name)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage"
        ],
        "align_scores": [
            0.042853280901908875,
            8.621784945717081e-05,
            0.4508833587169647,
            0.00011888384324265644,
            0.005402419250458479,
            8.691364200785756e-05,
            0.00017385203682351857,
            6.773071800125763e-05
        ],
        "align_select": "select country.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
        "gold_select": "select count(countrylanguage.Language), country.Name",
        "select_candidates": [
            "select country.Name, count(distinct countrylanguage.Language)",
            "select country.Name, count(countrylanguage.Language)",
            "select country.Name, count(*)",
            "select country.Name, count(distinct country.Name)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage"
        ],
        "align_scores": [
            0.40973904728889465,
            0.000103365360700991,
            0.033649832010269165,
            8.77178754308261e-05,
            0.954791247844696,
            0.00011787580297095701,
            0.00025521733914501965,
            7.164282578742132e-05
        ],
        "align_select": "select country.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the language spoken by the largest percentage of people in each country?",
        "gold_select": "select countrylanguage.Language, countrylanguage.country_cipher, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, countrylanguage.Percentage",
            "select countrylanguage.Language, country.Capital",
            "select countrylanguage.Language, country.Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9938149452209473,
            7.349546649493277e-05,
            0.004935701377689838,
            6.387443863786757e-05,
            0.0004347547946963459,
            5.7790362916421145e-05,
            0.0037227575667202473,
            6.608888361370191e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
        "gold_select": "select countrylanguage.Language, countrylanguage.country_cipher, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select countrylanguage.country_cipher, countrylanguage.Language",
            "select countrylanguage.Language, countrylanguage.IsOfficial",
            "select countrylanguage.Language, country.Continent",
            "select countrylanguage.Language, country.Code"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.8959137797355652,
            8.658292063046247e-05,
            0.0002993116795551032,
            7.059347990434617e-05,
            0.0003448910138104111,
            8.472608169540763e-05,
            0.9847080707550049,
            8.08396507636644e-05
        ],
        "align_select": "select countrylanguage.country_cipher, countrylanguage.Language",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "gold_select": "select count(*), max(countrylanguage.Percentage)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countrylanguage.Language",
            "select count(*), countrylanguage.Language, countrylanguage.Percentage",
            "select count(*), countrylanguage.country_cipher"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9555000066757202,
            0.010027590207755566,
            0.00047733262181282043,
            0.0014428391586989164,
            0.00016413818229921162,
            0.00014867506979499012,
            0.0005240915343165398,
            0.0010256085079163313
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "gold_select": "select count(*), max(countrylanguage.Percentage)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countrylanguage.Language",
            "select count(*), countrylanguage.country_cipher",
            "select count(distinct countrylanguage.Language)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9916129112243652,
            0.0016613454790785909,
            0.0002795358595903963,
            0.001282663899473846,
            0.00024733543978072703,
            0.00032187753822654486,
            0.005647973623126745,
            8.476317452732474e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "gold_select": "select countrylanguage.country_cipher, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select country.Code",
            "select country.Name, country.Code2",
            "select country.Name, country.Continent",
            "select country.Code2"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9816455841064453,
            0.9815635681152344,
            0.000636354903690517,
            0.0016266604652628303,
            0.0004214286454953253,
            0.0007936304318718612,
            0.2293468862771988,
            0.4316323399543762
        ],
        "align_select": "select country.Code",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
        "gold_select": "select countrylanguage.country_cipher, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select country.Code",
            "select country.Name, country.Code2",
            "select country.Name, countrylanguage.Language4",
            "select country.Name, country.Continent"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9836951494216919,
            8.971072384156287e-05,
            0.0001813112321542576,
            7.01780736562796e-05,
            0.0001616499648662284,
            8.29024356789887e-05,
            0.00014603152521885931,
            7.435338193317875e-05
        ],
        "align_select": "select country.Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many countries have a republic as their form of government?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), country.Code",
            "select count(*), country.Name",
            "select count(*), country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.9920794367790222,
            0.0005000602686777711,
            0.00037354230880737305,
            0.0003294223570264876,
            0.0003605817910283804,
            0.0004520632792264223,
            0.00026638846611604095,
            0.00014387138071469963
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many countries have governments that are republics?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), country.Code",
            "select count(*), country.Name",
            "select count(*), country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9934929013252258,
            0.000494031875859946,
            0.0005179056897759438,
            0.013414314948022366,
            0.0004803082556463778,
            0.05039898306131363,
            0.00032904354156926274,
            0.0007292461232282221
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total surface area of the countries in the Caribbean region?",
        "gold_select": "select sum(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.SurfaceArea)",
            "select sum(country.SurfaceArea), country.Name",
            "select sum(country.SurfaceArea), country.Code",
            "select sum(country.SurfaceArea) descripted in country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.9964147806167603,
            0.00015232193982228637,
            0.0001607464801054448,
            0.00010289390775142238,
            0.00013228900206740946,
            9.321577090304345e-05,
            0.00066485779825598,
            0.0001266243343707174
        ],
        "align_select": "select sum(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How much surface area do the countires in the Carribean cover together?",
        "gold_select": "select sum(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.SurfaceArea)",
            "select sum(country.SurfaceArea), country.Name",
            "select country.SurfaceArea",
            "select sum(country.SurfaceArea)as country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country"
        ],
        "align_scores": [
            0.88716721534729,
            7.941784133436158e-05,
            0.00017500578542239964,
            6.204599048942327e-05,
            0.9816786646842957,
            0.0001352690305793658,
            0.0003514801792334765,
            0.0001279109565075487
        ],
        "align_select": "select sum(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which region is the city Kabul located in?",
        "gold_select": "select country.place",
        "select_candidates": [
            "select city.District",
            "select city.Name, city.District",
            "select city.District, city.CountryCode",
            "select city.CountryCode, city.District"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country",
        "table_candidates": [
            "city",
            "city country"
        ],
        "align_scores": [
            0.17723040282726288,
            0.00020378008775878698,
            0.00016572339518461376,
            6.549961108248681e-05,
            0.0001646598830120638,
            8.94585537025705e-05,
            0.00021719789947383106,
            8.893900667317212e-05
        ],
        "align_select": "select city.District",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What region is Kabul in?",
        "gold_select": "select country.place",
        "select_candidates": [
            "select city.District",
            "select city.Name, city.District",
            "select city.District, city.CountryCode",
            "select distinct city.District"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country",
        "table_candidates": [
            "city",
            "city country"
        ],
        "align_scores": [
            0.47549140453338623,
            0.0001786979555618018,
            0.00015025402535684407,
            6.229012797120959e-05,
            0.00016203885024879128,
            8.199991134461015e-05,
            0.03707245737314224,
            0.00022005909704603255
        ],
        "align_select": "select city.District",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which language is the most popular in Aruba?",
        "gold_select": "select countrylanguage.dialect",
        "select_candidates": [
            "select countrylanguage.dialect",
            "select countrylanguage.dialect, country.LocalName",
            "select countrylanguage.dialect, country.Code",
            "select countrylanguage.dialect, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9737226366996765,
            0.8781014680862427,
            0.0006797457463108003,
            0.00046305471914820373,
            0.0004381468752399087,
            0.0002894198405556381,
            0.00022815227566752583,
            0.00024333329929504544
        ],
        "align_select": "select countrylanguage.dialect",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What language is predominantly spoken in Aruba?",
        "gold_select": "select countrylanguage.dialect",
        "select_candidates": [
            "select countrylanguage.dialect",
            "select countrylanguage.dialect, country.LocalName",
            "select countrylanguage.dialect, country.Code",
            "select countrylanguage.dialect, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.977725625038147,
            0.009075627662241459,
            0.0004836658190470189,
            0.0002864343405235559,
            0.00040475843707099557,
            0.00024000632402021438,
            0.00021412708156276494,
            0.00013045084779150784
        ],
        "align_select": "select countrylanguage.dialect",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the population and life expectancies in Brazil?",
        "gold_select": "select country.how_many_people, country.LifeExpectancy",
        "select_candidates": [
            "select country.how_many_people, country.LifeExpectancy",
            "select country.Code, country.Name, country.how_many_people, country.LifeExpectancy",
            "select country.Code, country.how_many_people, country.LifeExpectancy",
            "select country.Code, country.Name, country.LifeExpectancy"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.961816668510437,
            0.00016250088810920715,
            0.00019149082072544843,
            8.67331400513649e-05,
            0.00020815125026274472,
            8.112336217891425e-05,
            0.00027577506261877716,
            8.447325672022998e-05
        ],
        "align_select": "select country.how_many_people, country.LifeExpectancy",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me Brazil\u2019s population and life expectancies.",
        "gold_select": "select country.how_many_people, country.LifeExpectancy",
        "select_candidates": [
            "select country.how_many_people, country.LifeExpectancy",
            "select country.Code, country.Name, country.how_many_people, country.LifeExpectancy",
            "select country.Code, country.how_many_people, country.LifeExpectancy",
            "select country.Name, country.how_many_people, country.LifeExpectancy"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9760389924049377,
            8.945736044552177e-05,
            0.00017593470693100244,
            7.399490277748555e-05,
            0.00020695911371149123,
            8.662197069497779e-05,
            0.00017651860252954066,
            8.392221934627742e-05
        ],
        "align_select": "select country.how_many_people, country.LifeExpectancy",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the region and population of Angola?",
        "gold_select": "select country.how_many_people, country.place",
        "select_candidates": [
            "select country.place, country.how_many_people",
            "select country.Name, country.place, country.how_many_people",
            "select country.Continent, country.place, country.how_many_people",
            "select country.SurfaceArea, country.how_many_people"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country"
        ],
        "align_scores": [
            0.008846095763146877,
            0.00015454452659469098,
            0.0001868951367214322,
            7.612084300490096e-05,
            0.00028362878947518766,
            7.168758020270616e-05,
            0.0002568205236457288,
            6.784364813938737e-05
        ],
        "align_select": "select country.place, country.how_many_people",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What region does Angola belong to and what is its population?",
        "gold_select": "select country.how_many_people, country.place",
        "select_candidates": [
            "select country.Continent, country.how_many_people",
            "select country.place, country.how_many_people",
            "select country.Name, country.how_many_people",
            "select country.Name, country.place, country.how_many_people"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country"
        ],
        "align_scores": [
            0.7426874041557312,
            0.050826139748096466,
            0.0016174906631931663,
            0.01438533142209053,
            0.00036385987186804414,
            0.0016836244612932205,
            0.00017782226495910436,
            0.00016070633137132972
        ],
        "align_select": "select country.Continent, country.how_many_people",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select an avg(country.LifeExpectancy)",
            "select  avg(country.LifeExpectancy)",
            "select avg(country.how_many_people)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.9934577345848083,
            0.0001588803861523047,
            0.0004244941519573331,
            0.00012590555706992745,
            0.9934577345848083,
            0.0001588803861523047,
            0.0004999882658012211,
            0.00013228596071712673
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How long is the people\u2019s average life expectancy in Central Africa?",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select an avg(country.LifeExpectancy)",
            "select  avg(country.LifeExpectancy)",
            "select avg(country.how_many_people)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.9944180250167847,
            7.549006113549694e-05,
            0.0004456963506527245,
            0.00010866278898902237,
            0.9944180250167847,
            7.549006113549694e-05,
            0.004289735574275255,
            6.995370495133102e-05
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total population and maximum GNP in Asia?",
        "gold_select": "select sum(country.how_many_people), max(country.GNP)",
        "select_candidates": [
            "select sum(country.how_many_people), max(country.GNP)",
            "select max(country.GNP), sum(country.how_many_people)",
            "select country.how_many_people, max(country.GNP)",
            "select sum(country.IndepYear), max(country.GNP)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9923189282417297,
            0.00010375850251875818,
            0.9940294027328491,
            9.542518819216639e-05,
            0.002341051120311022,
            0.00014985384768806398,
            0.00022871831606607884,
            9.307915752287954e-05
        ],
        "align_select": "select sum(country.how_many_people), max(country.GNP)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many people live in Asia, and what is the largest GNP among them?",
        "gold_select": "select sum(country.how_many_people), max(country.GNP)",
        "select_candidates": [
            "select country.how_many_people, country.GNP",
            "select country.Name, country.how_many_people",
            "select country.Code, country.how_many_people",
            "select country.Name, country.GNP"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9904413223266602,
            0.2588898241519928,
            0.00046490784734487534,
            0.0023720157332718372,
            0.003473219694569707,
            0.020049728453159332,
            0.0008552867802791297,
            0.02990031987428665
        ],
        "align_select": "select country.how_many_people, country.GNP",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "What is the average life expectancy in African countries that are republics?",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select an avg(country.LifeExpectancy)",
            "select  avg(country.LifeExpectancy)",
            "select Avg(country.LifeExpectancy)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9944633841514587,
            0.0001712466182652861,
            0.00042896406375803053,
            0.00011194177932338789,
            0.9944633841514587,
            0.0001712466182652861,
            0.9944633841514587,
            0.0001712466182652861
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the average life expectancy for countries in Africa which are republics?",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select an avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), country.how_many_people",
            "select avg(country.LifeExpectancy), country.political_form"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9950900077819824,
            0.00013272895012050867,
            0.0004084250540472567,
            0.0001172182965092361,
            0.00016445902292616665,
            0.00036426488077268004,
            0.0002383784594712779,
            0.3502993881702423
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many people live in Gelderland district?",
        "gold_select": "select sum(city.total_citizens)",
        "select_candidates": [
            "select sum(city.total_citizens)",
            "select count(*)",
            "select sum(city.total_citizens), city.District",
            "select sum(city.total_citizens), city.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city",
            "city country"
        ],
        "align_scores": [
            0.7366337180137634,
            0.0023232242092490196,
            0.9958819150924683,
            0.012538141570985317,
            0.00013347498315852135,
            0.00046253675827756524,
            0.00013347498315852135,
            0.00046253675827756524
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total population of Gelderland district?",
        "gold_select": "select sum(city.total_citizens)",
        "select_candidates": [
            "select sum(city.total_citizens)",
            "select sum(city.total_citizens), city.District",
            "select sum(city.total_citizens) dependant on city.District, city.total_citizens",
            "select sum(city.total_citizens), city.District, city.total_citizens"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city"
        ],
        "align_scores": [
            0.9958395957946777,
            8.572014485253021e-05,
            0.00013225102156866342,
            7.030506822047755e-05,
            0.00016219838289543986,
            8.586815238231793e-05,
            0.00016778323333710432,
            7.356025162152946e-05
        ],
        "align_select": "select sum(city.total_citizens)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average GNP and total population in all nations whose government is US territory?",
        "gold_select": "select avg(country.GNP), sum(country.how_many_people)",
        "select_candidates": [
            "select avg(country.GNP), avg(country.how_many_people)",
            "select avg(country.how_many_people), avg(country.GNP)",
            "select avg(country.GNP, avg(country.how_many_people)",
            "select avg(country.LifeExpectancy), avg(country.how_many_people)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9499203562736511,
            9.972869156626984e-05,
            0.9789767265319824,
            9.084847260965034e-05,
            0.005953407846391201,
            8.40278371470049e-05,
            0.0003452571399975568,
            9.473883983446285e-05
        ],
        "align_select": "select avg(country.GNP), avg(country.how_many_people)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the mean GNP and total population of nations which are considered US territory.",
        "gold_select": "select avg(country.GNP), sum(country.how_many_people)",
        "select_candidates": [
            "select avg(country.GNP), sum(country.how_many_people)",
            "select avg(country.GNP), avg(country.how_many_people)",
            "select avg(country.how_many_people), avg(country.GNP)",
            "select avg(country.GNP), country.how_many_people"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9935107827186584,
            0.0010411408729851246,
            0.9536153674125671,
            0.00031854509143158793,
            0.9942942261695862,
            0.00044728448847308755,
            0.9722273349761963,
            0.0013954286696389318
        ],
        "align_select": "select avg(country.GNP), sum(country.how_many_people)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many unique languages are spoken in the world?",
        "gold_select": "select count(distinct countrylanguage.dialect)",
        "select_candidates": [
            "select count(distinct countrylanguage.dialect)",
            "select count(distinct countrylanguage.formal)",
            "select count(distinct countrylanguage.CountryCode)",
            "select count(distinct t3.c6)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage"
        ],
        "align_scores": [
            0.723130464553833,
            0.723130464553833,
            0.684371829032898,
            0.684371829032898,
            0.0015227434923872352,
            0.0015227434923872352,
            0.0009655709145590663,
            0.0009655709145590663
        ],
        "align_select": "select count(distinct countrylanguage.dialect)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the number of distinct languages used around the world?",
        "gold_select": "select count(distinct countrylanguage.dialect)",
        "select_candidates": [
            "select count(distinct countrylanguage.dialect)",
            "select count(distinct countrylanguage.formal)",
            "select count(distinct countrylanguage.CountryCode)",
            "select count(distinct t3.c6)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage"
        ],
        "align_scores": [
            0.7841232419013977,
            0.7841232419013977,
            0.7067731618881226,
            0.7067731618881226,
            0.0009650532738305628,
            0.0009650532738305628,
            0.0007041395292617381,
            0.0007041395292617381
        ],
        "align_select": "select count(distinct countrylanguage.dialect)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many type of governments are in Africa?",
        "gold_select": "select count(distinct country.political_form)",
        "select_candidates": [
            "select count(distinct country.political_form)",
            "select count(distinct country.Name)",
            "select count(distinct country.political_form",
            "select count(distinct country.IndepYear)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9948768019676208,
            0.9948768019676208,
            0.018460864201188087,
            0.018460864201188087,
            0.23059608042240143,
            0.23059608042240143,
            0.0005738649051636457,
            0.0005738649051636457
        ],
        "align_select": "select count(distinct country.political_form)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many different forms of governments are there in Africa?",
        "gold_select": "select count(distinct country.political_form)",
        "select_candidates": [
            "select count(distinct country.political_form)",
            "select count(distinct country.Name)",
            "select count(distinct country.political_form",
            "select count(distinct country.LocalName)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9960667490959167,
            0.9960667490959167,
            0.06607082486152649,
            0.06607082486152649,
            0.3091892898082733,
            0.3091892898082733,
            0.012495576404035091,
            0.012495576404035091
        ],
        "align_select": "select count(distinct country.political_form)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total number of languages used in Aruba?",
        "gold_select": "select count(countrylanguage.dialect)",
        "select_candidates": [
            "select count(distinct countrylanguage.dialect)",
            "select count(distinct countrylanguage.formal)",
            "select count(distinct countrylanguage.CountryCode)",
            "select count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9557844996452332,
            0.00025624720728956163,
            0.8179543614387512,
            0.00015245912072714418,
            0.01750822737812996,
            0.00032509409356862307,
            0.9939318895339966,
            0.0024279530625790358
        ],
        "align_select": "select count(distinct countrylanguage.dialect)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many languages are spoken in Aruba?",
        "gold_select": "select count(countrylanguage.dialect)",
        "select_candidates": [
            "select count(distinct countrylanguage.dialect)",
            "select count(distinct countrylanguage.formal)",
            "select count(distinct countrylanguage.dialect, country.LocalName)",
            "select count(distinct countrylanguage.dialect, countrylanguage.formal)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9957310557365417,
            0.00013530901924241334,
            0.9936331510543823,
            0.0001332694519078359,
            0.0002528663899283856,
            9.172121644951403e-05,
            0.0006776896771043539,
            8.556277316529304e-05
        ],
        "align_select": "select count(distinct countrylanguage.dialect)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many official languages does Afghanistan have?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(distinct countrylanguage.formal)",
            "select count(distinct countrylanguage.dialect)",
            "select count(1 - countrylanguage.formal)",
            "select count(distinct country.Name)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9937615990638733,
            6.241481605684385e-05,
            0.9819876551628113,
            6.303359987214208e-05,
            0.002115704584866762,
            6.691327871521935e-05,
            0.00277485279366374,
            7.935544999781996e-05
        ],
        "align_select": "select count(distinct countrylanguage.formal)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many official languages are spoken in Afghanistan?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(distinct countrylanguage.formal)",
            "select count(distinct countrylanguage.dialect)",
            "select count(distinct countrylanguage.CountryCode)",
            "select count(distinct t3.c6)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9942784309387207,
            0.00012943333422299474,
            0.8539878129959106,
            0.0001186227091238834,
            0.021636418998241425,
            0.000157984861289151,
            0.0005421335226856172,
            0.00012465313193388283
        ],
        "align_select": "select count(distinct countrylanguage.formal)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many countries speak both English and Dutch?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countrylanguage.CountryCode",
            "select count(distinct countrylanguage.CountryCode)",
            "select count(*), countrylanguage.CountryCode, countrylanguage.dialect"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9916921854019165,
            0.4901256561279297,
            0.000489005702547729,
            0.00034222815884277225,
            0.16262021660804749,
            0.0002938873949460685,
            0.00012471542868297547,
            0.00011391754378564656
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of nations that use English and Dutch?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countrylanguage.CountryCode",
            "select count(*), countrylanguage.CountryCode, countrylanguage.dialect",
            "select count(*), countrylanguage.CountryCode-dialect-combination(countrylanguage.dialect)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9906153678894043,
            0.01515202410519123,
            0.0005115749663673341,
            0.0031121328938752413,
            0.0001272814261028543,
            0.00015367093146778643,
            0.0001715154357952997,
            0.00010600134555716068
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of nations speak both English and French?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.dialect",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.LocalName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9898960590362549,
            0.00022923073265701532,
            0.00033478281693533063,
            0.0001260210992768407,
            0.000275890517514199,
            0.000142536053317599,
            0.0005926791345700622,
            0.00017648967332206666
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Give the names of nations that speak both English and French.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.dialect",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9946801066398621,
            0.00039546130574308336,
            0.00028375591500662267,
            0.00014358687622006983,
            0.00030153864645399153,
            0.00016038210014812648,
            0.0001949612342286855,
            9.6807700174395e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of nations where both English and French are official languages?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.dialect",
            "select country.Name, country.LocalName",
            "select country.Name, countrylanguage.CountryCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage"
        ],
        "align_scores": [
            0.9944774508476257,
            0.0006832506624050438,
            0.000297692691674456,
            0.00013631032197736204,
            0.00040095075382851064,
            0.00020733258861582726,
            0.0004511794832069427,
            0.0001877784525277093
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Give the names of countries with English and French as official languages.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.dialect",
            "select country.Name, country.Capital",
            "select country.Name, countrylanguage.CountryCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage"
        ],
        "align_scores": [
            0.9956178665161133,
            0.0008022414403967559,
            0.000214849816984497,
            9.041306475410238e-05,
            0.00024065503384917974,
            9.521813626633957e-05,
            0.00027677786420099437,
            0.00010606503929011524
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of distinct continents where Chinese is spoken?",
        "gold_select": "select count(distinct country.Continent)",
        "select_candidates": [
            "select count(distinct country.Continent)",
            "select count(distinct country.how_many_people)",
            "select count(distinct country.Name)",
            "select count(distinct t2).c2)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9965053796768188,
            0.0002231302350992337,
            0.00022268775501288474,
            7.678742986172438e-05,
            0.00117464829236269,
            0.00021273230959195644,
            0.000328552327118814,
            0.00014638018910773098
        ],
        "align_select": "select count(distinct country.Continent)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many continents speak Chinese?",
        "gold_select": "select count(distinct country.Continent)",
        "select_candidates": [
            "select count(*)",
            "select count(country.Continent)",
            "select count(distinct country.Continent)",
            "select count(continents)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9846463799476624,
            0.0026095726061612368,
            0.9709805846214294,
            0.0005512774805538356,
            0.9599130153656006,
            9.854315430857241e-05,
            0.6651768088340759,
            0.00019857878214679658
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the regions that use English or Dutch?",
        "gold_select": "select distinct country.place",
        "select_candidates": [
            "select country.place",
            "select country.Name",
            "select country.LocalName",
            "select country.Name, country.place"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9782453179359436,
            0.38667306303977966,
            0.3077843189239502,
            0.3347448408603668,
            0.06462167948484421,
            0.5926347970962524,
            0.00027209677500650287,
            0.00015213382721412927
        ],
        "align_select": "select country.place",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which regions speak Dutch or English?",
        "gold_select": "select distinct country.place",
        "select_candidates": [
            "select country.place",
            "select country.place, countrylanguage.dialect",
            "select country.place, countrylanguage.CountryCode",
            "select country.place, country.SurfaceArea"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "countrylanguage"
        ],
        "align_scores": [
            0.9868549108505249,
            0.3460693359375,
            0.00033318917849101126,
            0.00018214434385299683,
            0.00021480496798176318,
            0.00019684781727846712,
            0.0002499740803614259,
            0.00017120222037192434
        ],
        "align_select": "select country.place",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the countries where either English or Dutch is the official language?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.Code",
            "select country.Name, country.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9091584086418152,
            0.008379027247428894,
            0.0012927578063681722,
            0.00023815175518393517,
            0.00099596893414855,
            0.0001846526429289952,
            0.00032258746796287596,
            0.00012283695104997605
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which countries have either English or Dutch as an official language?",
        "gold_select": "select *",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Code",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.Continent"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9339724183082581,
            0.011120518669486046,
            0.0012195935705676675,
            0.0002266953233629465,
            0.0009457009728066623,
            0.00025381179875694215,
            0.0002933401265181601,
            0.00012759787205141038
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which language is the most popular on the Asian continent?",
        "gold_select": "select countrylanguage.dialect",
        "select_candidates": [
            "select countrylanguage.dialect",
            "select countrylanguage.dialect, country.Continent",
            "select countrylanguage.dialect, country.Code",
            "select country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9489929676055908,
            0.821284830570221,
            0.0005032578483223915,
            0.00023726330255158246,
            0.0005017782677896321,
            0.0002650826645549387,
            0.5744604468345642,
            0.22102496027946472
        ],
        "align_select": "select countrylanguage.dialect",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the language that is used by the largest number of Asian nations?",
        "gold_select": "select countrylanguage.dialect",
        "select_candidates": [
            "select countrylanguage.dialect",
            "select countrylanguage.dialect, country.Code",
            "select countrylanguage.dialect, country.Continent",
            "select countrylanguage.dialect, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.8586381673812866,
            0.000164130688062869,
            0.0013269660994410515,
            0.00011002187966369092,
            0.0005870095919817686,
            8.863877155818045e-05,
            0.0005144137539900839,
            7.642290438525379e-05
        ],
        "align_select": "select countrylanguage.dialect",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which languages are spoken by only one country in republic governments?",
        "gold_select": "select countrylanguage.dialect",
        "select_candidates": [
            "select countrylanguage.dialect",
            "select countrylanguage.dialect, country.LocalName",
            "select countrylanguage.dialect, country.political_form",
            "select countrylanguage.dialect, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9850384593009949,
            0.22272233664989471,
            0.0006813844083808362,
            0.00017991183267440647,
            0.0006917309365235269,
            0.0001253432419616729,
            0.00033808560692705214,
            0.00012370417243801057
        ],
        "align_select": "select countrylanguage.dialect",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "What languages are only used by a single country with a republic government?",
        "gold_select": "select countrylanguage.dialect",
        "select_candidates": [
            "select countrylanguage.dialect",
            "select countrylanguage.dialect, country.LocalName",
            "select countrylanguage.dialect, countrylanguage.formal",
            "select countrylanguage.dialect, country.political_form"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.7910736799240112,
            0.26716896891593933,
            0.0004890559939667583,
            0.00022039086616132408,
            0.030803296715021133,
            0.000614845659583807,
            0.00037257513031363487,
            0.0001482693332945928
        ],
        "align_select": "select countrylanguage.dialect",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the city with the largest population that uses English.",
        "gold_select": "select city.Name, city.total_citizens",
        "select_candidates": [
            "select city.Name",
            "select city.Name, countrylanguage.dialect",
            "select city.ID, city.Name",
            "select city.Name, countrylanguage.formal"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city countrylanguage",
        "table_candidates": [
            "city countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9854421615600586,
            0.9802011847496033,
            0.0011751530691981316,
            0.0029625273309648037,
            0.0005970880738459527,
            0.0007859509205445647,
            0.0003809665213339031,
            0.0011755290906876326
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "What is the most populace city that speaks English?",
        "gold_select": "select city.Name, city.total_citizens",
        "select_candidates": [
            "select city.Name",
            "select city.Name, countrylanguage.dialect",
            "select city.ID, city.Name",
            "select city.Name, countrylanguage.CountryCode, countrylanguage.dialect"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city countrylanguage",
        "table_candidates": [
            "city countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9883238077163696,
            0.0001238840923178941,
            0.0008979876292869449,
            8.179778524208814e-05,
            0.00055233936291188,
            7.231941708596423e-05,
            0.00020182535808999091,
            6.522329931613058e-05
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Find the name, population and expected life length of asian country with the largest area?",
        "gold_select": "select country.Name, country.how_many_people, country.LifeExpectancy",
        "select_candidates": [
            "select country.Name, country.how_many_people, country.LifeExpectancy",
            "select country.Name, country.IndepYear, country.how_many_people, country.LifeExpectancy",
            "select country.Name, country.Code, country.how_many_people, country.LifeExpectancy",
            "select country.Name, country.how_many_people, country.LifeExpectancy"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9514670372009277,
            0.00010459781333338469,
            0.0004395960713736713,
            9.419080015504733e-05,
            0.0004056998295709491,
            0.0001026230602292344,
            0.9514670372009277,
            0.00010459781333338469
        ],
        "align_select": "select country.Name, country.how_many_people, country.LifeExpectancy",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "gold_select": "select country.Name, country.how_many_people, country.LifeExpectancy",
        "select_candidates": [
            "select country.Name, country.how_many_people, country.LifeExpectancy",
            "select country.Name, country.IndepYear, country.how_many_people, country.LifeExpectancy",
            "select country.Name, country.Code, country.how_many_people, country.LifeExpectancy",
            "select country.Name, country.place, country.how_many_people, country.LifeExpectancy"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9725426435470581,
            0.0001577847870066762,
            0.0017252069665119052,
            9.85926017165184e-05,
            0.0007831220282241702,
            8.787863043835387e-05,
            0.0004278758424334228,
            7.901008211774752e-05
        ],
        "align_select": "select country.Name, country.how_many_people, country.LifeExpectancy",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is average life expectancy in the countries where English is not the official language?",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), countrylanguage.dialect",
            "select avg(country.LifeExpectancy), countrylanguage.CountryCode",
            "select an avg(country.LifeExpectancy)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "country",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9939800500869751,
            0.00023655788390897214,
            0.00013172056060284376,
            0.00012290080485399812,
            0.0001583972480148077,
            0.00030706607503816485,
            0.00042018727981485426,
            0.000142126067657955
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the mean life expectancy of countries in which English is not the official language.",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select an avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), countrylanguage.dialect",
            "select avg(country.LifeExpectancy), countrylanguage.CountryCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "country",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9952073693275452,
            0.0001013903456623666,
            0.00037163367960602045,
            0.00010477561590960249,
            0.00011811884178314358,
            0.0001060145950759761,
            0.00014850788284093142,
            0.00020897651847917587
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total number of people living in the nations that do not use English?",
        "gold_select": "select sum(country.how_many_people)",
        "select_candidates": [
            "select sum(country.how_many_people)",
            "select sum(country.how_many_people), countrylanguage.dialect",
            "select sum(country.how_many_people), countrylanguage.CountryCode",
            "select sum(country.how_many_people), countrylanguage.dialect"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage",
            "country"
        ],
        "align_scores": [
            0.9908941984176636,
            0.0007580670062452555,
            0.00013208958262111992,
            0.00021494552493095398,
            0.00014738019672222435,
            0.00093765405472368,
            0.00013208958262111992,
            0.00021494552493095398
        ],
        "align_select": "select sum(country.how_many_people)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many people live in countries that do not speak English?",
        "gold_select": "select sum(country.how_many_people)",
        "select_candidates": [
            "select sum(country.how_many_people)",
            "select count(*)",
            "select country.how_many_people",
            "select country.Code, sum(country.how_many_people)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "country",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.508047878742218,
            7.207032467704266e-05,
            0.9891139268875122,
            0.0001024914308800362,
            0.9916084408760071,
            9.958273585652933e-05,
            0.0002985416795127094,
            6.674789619864896e-05
        ],
        "align_select": "select country.how_many_people",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the official language spoken in the country whose head of state is Beatrix?",
        "gold_select": "select countrylanguage.dialect",
        "select_candidates": [
            "select countrylanguage.formal",
            "select countrylanguage.dialect",
            "select countrylanguage.dialect, countrylanguage.formal",
            "select countrylanguage.formal, countrylanguage.dialect"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9903850555419922,
            0.00019896884623449296,
            0.5166335701942444,
            0.00025510782143101096,
            0.0005452126497402787,
            9.711484744912013e-05,
            0.0016843370394781232,
            0.00010436926095280796
        ],
        "align_select": "select countrylanguage.formal",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "gold_select": "select countrylanguage.dialect",
        "select_candidates": [
            "select countrylanguage.formal",
            "select countrylanguage.dialect",
            "select countrylanguage.dialect, countrylanguage.formal",
            "select countrylanguage.formal, countrylanguage.dialect"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9933912754058838,
            0.0001287992490688339,
            0.421470582485199,
            0.00018062996969092637,
            0.0003866129263769835,
            9.085505735129118e-05,
            0.0010748973581939936,
            9.791156480787322e-05
        ],
        "align_select": "select countrylanguage.formal",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "gold_select": "select count(distinct countrylanguage.dialect)",
        "select_candidates": [
            "select count(distinct countrylanguage.formal)",
            "select count(distinct countrylanguage.dialect)",
            "select count(distinct countrylanguage.formal, countrylanguage.Percentage)",
            "select count(distinct countrylanguage.formal), country.Name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9919352531433105,
            0.0003037383721675724,
            0.9901379346847534,
            0.00041266472544521093,
            0.00018870945496018976,
            0.000124023063108325,
            0.000242484689806588,
            0.0189750324934721
        ],
        "align_select": "select count(distinct countrylanguage.formal)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
        "gold_select": "select count(distinct countrylanguage.dialect)",
        "select_candidates": [
            "select count(distinct countrylanguage.formal)",
            "select count(distinct countrylanguage.dialect)",
            "select count(distinct country.Continent)",
            "select count(distinct countrylanguage.formal"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9944040775299072,
            0.00026700712624005973,
            0.9915763735771179,
            0.00031591576407663524,
            0.0005984822637401521,
            0.00012725083797704428,
            0.27678272128105164,
            0.00020381022477522492
        ],
        "align_select": "select count(distinct countrylanguage.formal)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the African countries that have a population less than any country in Asia?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.how_many_people",
            "select distinct country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.6452922224998474,
            0.1877032071352005,
            0.00033743129461072385,
            0.00015981162141542882,
            0.0003071378159802407,
            0.0001932000886881724,
            0.1288764625787735,
            0.10659950226545334
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which African countries have a smaller population than that of any country in Asia?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.how_many_people",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.6418523192405701,
            0.0009224491659551859,
            0.0003444334724918008,
            0.00011998728587059304,
            0.0003432212979532778,
            8.64162138896063e-05,
            0.004233171232044697,
            0.0001733023818815127
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which Asian countries have a population that is larger than any country in Africa?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.how_many_people",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.7112459540367126,
            0.0007658321992494166,
            0.0004406676162034273,
            0.00012729987793136388,
            0.0003560373734217137,
            8.562407310819253e-05,
            0.00552308838814497,
            0.00020789896370843053
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select distinct country.Name",
            "select country.Name, country.how_many_people"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.736194372177124,
            0.10371170192956924,
            0.000376800395315513,
            0.0002094656665576622,
            0.14539307355880737,
            0.001348678139038384,
            0.00029878682107664645,
            0.00013650412438437343
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the country codes for countries that do not speak English?",
        "gold_select": "select countrylanguage.CountryCode",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select distinct countrylanguage.CountryCode",
            "select countrylanguage.CountryCode, countrylanguage.dialect",
            "select countrylanguage.dialect, countrylanguage.formal"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9854282736778259,
            0.00027577902073971927,
            0.020596615970134735,
            0.0001271181827178225,
            0.0005212642136029899,
            7.748400093987584e-05,
            0.0010735966498032212,
            0.0001345404307357967
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the country codes for countries that do not speak English.",
        "gold_select": "select countrylanguage.CountryCode",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select distinct countrylanguage.CountryCode",
            "select countrylanguage.CountryCode, countrylanguage.dialect",
            "select countrylanguage.CountryCode, countrylanguage.dialect, countrylanguage.formal"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9915137887001038,
            0.0001950832229340449,
            0.007788877934217453,
            9.201230568578467e-05,
            0.0003674071922432631,
            6.45129184704274e-05,
            0.00033807221916504204,
            6.332737393677235e-05
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the country codes of countries where people use languages other than English?",
        "gold_select": "select distinct countrylanguage.CountryCode",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select distinct countrylanguage.CountryCode",
            "select countrylanguage.CountryCode, countrylanguage.dialect",
            "select countrylanguage.CountryCode, countrylanguage.dialect, countrylanguage.formal"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9585445523262024,
            0.2676149010658264,
            0.05479627102613449,
            0.00026256206911057234,
            0.00040950594120658934,
            0.0001542268437333405,
            0.0003203352098353207,
            9.705135016702116e-05
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the country codes for countries in which people speak langauges that are not English.",
        "gold_select": "select distinct countrylanguage.CountryCode",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select distinct countrylanguage.CountryCode",
            "select country.Name, countrylanguage.CountryCode",
            "select countrylanguage.CountryCode, countrylanguage.dialect"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.7552567720413208,
            0.3010140359401703,
            0.0581262931227684,
            0.0004231446946505457,
            0.000333743286319077,
            0.00013683747965842485,
            0.00037268034066073596,
            0.00012918475840706378
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "gold_select": "select country.Code",
        "select_candidates": [
            "select country.Code",
            "select country.Code, country.political_form",
            "select country.Name, country.Code2",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9519708156585693,
            0.08273159712553024,
            0.0005792485899291933,
            0.00015960315067786723,
            0.00028742814902216196,
            0.00025156716583296657,
            0.0005930849001742899,
            0.0003526219225022942
        ],
        "align_select": "select country.Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
        "gold_select": "select country.Code",
        "select_candidates": [
            "select country.Code",
            "select country.Name",
            "select country.Code2",
            "select country.Code0"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.009245618246495724,
            0.9563199281692505,
            0.8633577823638916,
            0.0028744242154061794,
            0.007866852916777134,
            0.05139679089188576,
            0.012313631363213062,
            0.05784069374203682
        ],
        "align_select": "select country.Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which cities are in European countries where English is not the official language?",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select city.Name",
            "select distinct city.Name",
            "select city.ID, city.Name",
            "select city.Name, country.Name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage",
            "city sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.7999190092086792,
            0.0017327343812212348,
            0.08250637352466583,
            0.0484207421541214,
            0.0003474141994956881,
            0.00015475806139875203,
            0.0003159377083647996,
            0.00012794022040907294
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of cities in Europe for which English is not the official language?",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select city.Name",
            "select city.Name, country.Name",
            "select distinct city.Name",
            "select city.Name, country.Continent"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage",
            "city sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9881308078765869,
            0.0012755454517900944,
            0.00022000769968144596,
            0.0001340548333246261,
            0.024760423228144646,
            0.021037956699728966,
            0.0002406403364147991,
            0.00012205709936097264
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which unique cities are in Asian countries where Chinese is the official language?",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select distinct city.ID",
            "select distinct city.Name",
            "select count(*)",
            "select distinct city.ID, city.Name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage",
            "city sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.8676100969314575,
            0.00027758334181271493,
            0.9801871180534363,
            0.00036284903762862086,
            0.037045884877443314,
            9.56164876697585e-05,
            0.000604712578933686,
            8.269075624411926e-05
        ],
        "align_select": "select distinct city.ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select distinct city.Name",
            "select distinct city.Name, country.Name",
            "select distinct city.Name, city.CountryCode",
            "select distinct city.Name, country.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage",
            "city sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9935991764068604,
            0.00012576083827298135,
            0.00021376153745222837,
            6.301797111518681e-05,
            0.00015338766388595104,
            6.142315396573395e-05,
            0.0001759924052748829,
            6.211965228430927e-05
        ],
        "align_select": "select distinct city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the name, independence year, and surface area of the country with the smallest population?",
        "gold_select": "select country.Name, country.SurfaceArea, country.IndepYear",
        "select_candidates": [
            "select country.Name, country.IndepYear, country.SurfaceArea",
            "select country.Name, country.IndepYear., country.SurfaceArea",
            "select country.Name, country.IndepYear, country.SurfaceArea",
            "select country.Name, country.IndepYear.c4, country.IndepYear"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9922298789024353,
            8.28841730253771e-05,
            0.03752491623163223,
            0.00010773411486297846,
            0.9922298789024353,
            8.28841730253771e-05,
            0.00044180345139466226,
            8.222572796512395e-05
        ],
        "align_select": "select country.Name, country.IndepYear, country.SurfaceArea",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
        "gold_select": "select country.Name, country.SurfaceArea, country.IndepYear",
        "select_candidates": [
            "select country.Name, country.IndepYear, country.SurfaceArea",
            "select country.Name, country.IndepYear.c4, country.IndepYear",
            "select country.Name, country.IndepYear, country.SurfaceArea",
            "select country.Name, country.IndepYear, country.SurfaceArea"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.987623929977417,
            7.862540951464325e-05,
            0.00041417154716327786,
            8.120416896417737e-05,
            0.987623929977417,
            7.862540951464325e-05,
            0.987623929977417,
            7.862540951464325e-05
        ],
        "align_select": "select country.Name, country.IndepYear, country.SurfaceArea",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the population, name and leader of the country with the largest area?",
        "gold_select": "select country.Name, country.how_many_people, country.nation_president",
        "select_candidates": [
            "select country.how_many_people, country.Name, country.nation_president",
            "select country.Code, country.Name, country.nation_president",
            "select country.Code, country.how_many_people, country.nation_president",
            "select country.how_many_people), country.Name, country.nation_president"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9722386002540588,
            9.114463318837807e-05,
            0.000677490490488708,
            0.0001021906646201387,
            0.00675721000880003,
            8.878139487933367e-05,
            0.0018573242705315351,
            7.539717626059428e-05
        ],
        "align_select": "select country.how_many_people, country.Name, country.nation_president",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Give the name, population, and head of state for the country that has the largest area.",
        "gold_select": "select country.Name, country.how_many_people, country.nation_president",
        "select_candidates": [
            "select country.Name, country.how_many_people, country.nation_president",
            "select country.Name, country.IndepYear, country.how_many_people, country.nation_president",
            "select country.Name, country.how_many_people, country.nation_president",
            "select country.Name, country.how_many_people, country.nation_president, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.6956893801689148,
            0.00010624321294017136,
            0.0010736623080447316,
            8.272877312265337e-05,
            0.6956893801689148,
            0.00010624321294017136,
            0.0003209438582416624,
            7.43779237382114e-05
        ],
        "align_select": "select country.Name, country.how_many_people, country.nation_president",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "gold_select": "select count(countrylanguage.dialect), country.Name",
        "select_candidates": [
            "select country.Name, count(distinct countrylanguage.dialect)",
            "select country.Name, count(distinct countrylanguage.formal)",
            "select country.Name, count(distinct countrylanguage.CountryCode)",
            "select country.Name, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.12888695299625397,
            7.545184053014964e-05,
            0.0005893264315091074,
            7.602936238981783e-05,
            0.0005113670486025512,
            6.961531471461058e-05,
            0.4508833587169647,
            0.00011888384324265644
        ],
        "align_select": "select country.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
        "gold_select": "select count(countrylanguage.dialect), country.Name",
        "select_candidates": [
            "select country.Name, count(distinct country.Continent)",
            "select country.Name, count(distinct country.Code)",
            "select country.Name, country.place",
            "select country.Name, count(distinct country.Name)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.00040552238351665437,
            7.74839281802997e-05,
            0.0016842529876157641,
            8.77950296853669e-05,
            0.0003991597914136946,
            6.74141920171678e-05,
            0.00025521733914501965,
            7.164282578742132e-05
        ],
        "align_select": "select country.Name, count(distinct country.Continent)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
        "gold_select": "select count(*), city.District",
        "select_candidates": [
            "select count(*), city.District",
            "select city.District, count(*)",
            "select count(*), city.District, city.total_citizens",
            "select count(*), city.District, max(city.total_citizens)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city"
        ],
        "align_scores": [
            0.9914209246635437,
            0.015044402331113815,
            0.9926546812057495,
            0.04880184680223465,
            0.006687577813863754,
            0.0002634288975968957,
            0.0012488265056163073,
            0.00018412695499137044
        ],
        "align_select": "select count(*), city.District",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY"
    },
    {
        "question": "How many cities in each district have a population that is above the average population across all cities?",
        "gold_select": "select count(*), city.District",
        "select_candidates": [
            "select count(*), city.District",
            "select city.District, count(*)",
            "select count(*), city.District, max(city.total_citizens)",
            "select count(*), city.District, city.total_citizens"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city"
        ],
        "align_scores": [
            0.9905192852020264,
            0.0002491042541805655,
            0.9919633865356445,
            0.00022171744785737246,
            0.002452263841405511,
            0.00012876624532509595,
            0.0009064218611456454,
            0.00013658119132742286
        ],
        "align_select": "select count(*), city.District",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY"
    },
    {
        "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
        "gold_select": "select sum(country.how_many_people), country.political_form",
        "select_candidates": [
            "select country.political_form, sum(country.how_many_people)",
            "select country.Name, sum(country.how_many_people)",
            "select country.political_form, count(*)",
            "select country.Name, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country"
        ],
        "align_scores": [
            0.9448129534721375,
            0.00021171006665099412,
            0.0217620637267828,
            0.00019662007980514318,
            0.9179301261901855,
            0.00041784916538745165,
            0.0003924445481970906,
            0.0002501920098438859
        ],
        "align_select": "select country.political_form, sum(country.how_many_people)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
        "gold_select": "select sum(country.how_many_people), country.political_form",
        "select_candidates": [
            "select country.political_form, sum(country.how_many_people)",
            "select country.Name, sum(country.how_many_people)",
            "select country.political_form, count(*)",
            "select country.Capital, sum(country.how_many_people)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.985957682132721,
            0.00016406556824222207,
            0.9236539006233215,
            0.0001589658495504409,
            0.9794506430625916,
            0.00024289751308970153,
            0.002049105940386653,
            8.934686047723517e-05
        ],
        "align_select": "select country.political_form, sum(country.how_many_people)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
        "gold_select": "select sum(country.how_many_people), avg(country.LifeExpectancy), country.Continent",
        "select_candidates": [
            "select country.Name, avg(country.LifeExpectancy), sum(country.how_many_people)",
            "select avg(country.LifeExpectancy), sum(country.how_many_people), country.Continent",
            "select country.LifeExpectancy, country.how_many_people",
            "select avg(country.LifeExpectancy), avg(country.how_many_people), country.Continent"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.0017515444196760654,
            0.00027549490914680064,
            0.025452161207795143,
            0.0008295646402984858,
            0.009869469329714775,
            0.0011119208065792918,
            0.008334469981491566,
            0.0005167401977814734
        ],
        "align_select": "select country.Name, avg(country.LifeExpectancy), sum(country.how_many_people)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
        "gold_select": "select sum(country.how_many_people), avg(country.LifeExpectancy), country.Continent",
        "select_candidates": [
            "select country.Continent, sum(country.how_many_people), avg(country.LifeExpectancy)",
            "select country.Continent, sum(country.how_many_people), avg(country.how_many_people)",
            "select country.Continent, count(*), avg(country.LifeExpectancy)",
            "select country.Continent, count(*), avg(country.how_many_people)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.6164365410804749,
            0.05379699915647507,
            0.4680229723453522,
            0.044879499822854996,
            0.8292869925498962,
            0.33925268054008484,
            0.3027360439300537,
            0.11024068295955658
        ],
        "align_select": "select country.Continent, count(*), avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are names of countries with the top 3 largest population?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Code",
            "select country.Name, country.place",
            "select country.Name, country.how_many_people"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9893559813499451,
            5.333628359949216e-05,
            0.0018632961437106133,
            5.776148827862926e-05,
            0.000467257690615952,
            5.967379911453463e-05,
            0.0006943365442566574,
            5.3700066928286105e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Return the names of the 3 most populated countries.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.place",
            "select country.Name, country.how_many_people"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9955614805221558,
            5.573526141233742e-05,
            0.0003376711974851787,
            5.078433969174512e-05,
            0.00035736203426495194,
            5.330932981451042e-05,
            0.000659003562759608,
            5.086547389510088e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the names of the nations with the 3 lowest populations?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.LocalName",
            "select country.Name, country.Capital",
            "select country.Name, country.Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9886292219161987,
            5.632610555039719e-05,
            0.013493743725121021,
            5.523303843801841e-05,
            0.0003458914870861918,
            5.1557475671870634e-05,
            0.002333836629986763,
            5.594891626969911e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Return the names of the 3 countries with the fewest people.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Code",
            "select country.Name, country.how_many_people",
            "select country.Name, country.place"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9924893379211426,
            5.236485958448611e-05,
            0.0012964655179530382,
            5.228496593190357e-05,
            0.0006684206891804934,
            5.074072032584809e-05,
            0.0003718190419021994,
            5.3207852033665404e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.place",
            "select country.Name, country.Continent",
            "select country.Name, country.how_many_people"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country"
        ],
        "align_scores": [
            0.9595640897750854,
            0.001315632718615234,
            0.0002773434389382601,
            0.00012237629562150687,
            0.00025281388661824167,
            0.00010754238610388711,
            0.00020436831982806325,
            0.00011360425560269505
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.place",
            "select country.Name, country.Continent",
            "select country.Name, country.how_many_people"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.8918541669845581,
            0.0005018131341785192,
            0.0002400317316642031,
            7.684748561587185e-05,
            0.00020290317479521036,
            7.972643652465194e-05,
            0.00019313582743052393,
            6.081884930608794e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000?",
        "gold_select": "select sum(country.how_many_people), avg(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.how_many_people), avg(country.SurfaceArea)",
            "select avg(country.how_many_people), sum(country.how_many_people)",
            "select country.how_many_people, avg(country.SurfaceArea)",
            "select total(country.how_many_people), avg(country.SurfaceArea)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9831141233444214,
            0.0005404969560913742,
            0.457220196723938,
            0.00015825139416847378,
            0.0026635145768523216,
            0.00025240296963602304,
            0.0006830003694631159,
            0.00013514280726667494
        ],
        "align_select": "select sum(country.how_many_people), avg(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000.",
        "gold_select": "select sum(country.how_many_people), avg(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.how_many_people), avg(country.SurfaceArea)",
            "select avg(country.how_many_people), sum(country.how_many_people)",
            "select country.how_many_people, avg(country.SurfaceArea)",
            "select total(country.how_many_people), avg(country.SurfaceArea)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.923101544380188,
            0.0003091504913754761,
            0.06950615346431732,
            0.00017068471061065793,
            0.001042582094669342,
            0.00020523573039099574,
            0.0005122266593389213,
            0.00011303943756502122
        ],
        "align_select": "select sum(country.how_many_people), avg(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the cities whose population is between 160000 and 900000?",
        "gold_select": "select city.Name",
        "select_candidates": [
            "select city.Name",
            "select city.ID, city.Name",
            "select city.Name, city.District",
            "select city.Name, city.CountryCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city",
            "city country"
        ],
        "align_scores": [
            0.9741663932800293,
            0.00026226683985441923,
            0.0002805459371302277,
            0.00010489388660062104,
            0.00021223352814558893,
            9.920598677126691e-05,
            0.00022610666928812861,
            0.00011407864803913981
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the names of cities that have a population between 160000 and 900000.",
        "gold_select": "select city.Name",
        "select_candidates": [
            "select city.Name",
            "select city.Name, city.District",
            "select city.Name, city.CountryCode",
            "select city.ID, city.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city",
            "city country"
        ],
        "align_scores": [
            0.9882296323776245,
            0.0002433513873256743,
            0.00018871431529987603,
            6.799559196224436e-05,
            0.000184673786861822,
            6.855675746919587e-05,
            0.00017898956139106303,
            7.761482265777886e-05
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which language is spoken by the largest number of countries?",
        "gold_select": "select countrylanguage.dialect",
        "select_candidates": [
            "select countrylanguage.dialect",
            "select countrylanguage.dialect, country.Code",
            "select countrylanguage.dialect, country.Capital",
            "select countrylanguage.dialect, country.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.5032004714012146,
            7.604712300235406e-05,
            0.000609228853136301,
            7.065530371619388e-05,
            0.0004591420292854309,
            5.9975998738082126e-05,
            0.0009029210195876658,
            7.594211638206616e-05
        ],
        "align_select": "select countrylanguage.dialect",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Give the language that is spoken in the most countries.",
        "gold_select": "select countrylanguage.dialect",
        "select_candidates": [
            "select countrylanguage.dialect",
            "select country.Name",
            "select countrylanguage.dialect, country.Code",
            "select countrylanguage.dialect, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.7402142286300659,
            6.882631714688614e-05,
            0.8182396292686462,
            6.64184262859635e-05,
            0.000498234701808542,
            6.261189992073923e-05,
            0.00028631690656766295,
            5.389465513871983e-05
        ],
        "align_select": "select countrylanguage.dialect",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the language spoken by the largest percentage of people in each country?",
        "gold_select": "select countrylanguage.dialect, countrylanguage.CountryCode, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select countrylanguage.CountryCode, countrylanguage.dialect",
            "select countrylanguage.dialect, countrylanguage.formal",
            "select countrylanguage.dialect, countrylanguage.CountryCode",
            "select countrylanguage.dialect, country.Continent"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.2988797128200531,
            8.787141996435821e-05,
            0.05100543051958084,
            6.684408435830846e-05,
            0.07683520764112473,
            8.261414768639952e-05,
            0.0009578797034919262,
            7.532753807026893e-05
        ],
        "align_select": "select countrylanguage.CountryCode, countrylanguage.dialect",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
        "gold_select": "select countrylanguage.dialect, countrylanguage.CountryCode, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select country.Code, countrylanguage.dialect",
            "select country.Name, countrylanguage.CountryCode",
            "select countrylanguage.CountryCode, countrylanguage.dialect",
            "select country.Name, country.Continent"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.7081411480903625,
            8.395240001846105e-05,
            0.6614461541175842,
            8.61957305460237e-05,
            0.8116855621337891,
            8.079710096353665e-05,
            0.00025410964735783637,
            6.723956175846979e-05
        ],
        "align_select": "select country.Code, countrylanguage.dialect",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "gold_select": "select count(*), max(countrylanguage.Percentage)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countrylanguage.CountryCode",
            "select count(*), country.Name",
            "select count(*), countrylanguage.CountryCode, countrylanguage.dialect"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "countrylanguage",
            "sqlite_sequence country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9555000066757202,
            0.010027590207755566,
            0.0018006953177973628,
            0.007015580777078867,
            0.0010187877342104912,
            0.0035981968976557255,
            0.00020818259508814663,
            0.00020010695152450353
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "gold_select": "select count(*), max(countrylanguage.Percentage)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countrylanguage.CountryCode",
            "select count(distinct countrylanguage.CountryCode)",
            "select count(countrylanguage.CountryCode)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9916129112243652,
            0.0016613454790785909,
            0.0007150219171307981,
            0.005745817441493273,
            0.9063711166381836,
            0.00017919552919920534,
            0.16104888916015625,
            0.0004988329601474106
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "gold_select": "select countrylanguage.CountryCode, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select country.Code",
            "select country.Name, country.Code",
            "select country.Name, country.Code2",
            "select country.Name, country.Continent"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "sqlite_sequence countrylanguage",
            "countrylanguage"
        ],
        "align_scores": [
            0.9816455841064453,
            0.9815635681152344,
            0.001165725407190621,
            0.0031707140151411295,
            0.000636354903690517,
            0.0016266604652628303,
            0.0004214286454953253,
            0.0007936304318718612
        ],
        "align_select": "select country.Code",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
        "gold_select": "select countrylanguage.CountryCode, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select countrylanguage.CountryCode, countrylanguage.dialect",
            "select distinct countrylanguage.CountryCode",
            "select countrylanguage.dialect, countrylanguage.CountryCode"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9650791883468628,
            0.00010376986028859392,
            0.00022275059018284082,
            6.940876482985914e-05,
            0.0328526496887207,
            8.170026558218524e-05,
            0.0003020277654286474,
            7.589397137053311e-05
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which continent is Anguilla in?",
        "gold_select": "select country.mainland",
        "select_candidates": [
            "select country.mainland",
            "select country.mainland, country.Region",
            "select country.codification, country.mainland",
            "select distinct country.mainland"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.6724256277084351,
            0.00033009829348884523,
            0.00015391070337500423,
            7.1339585701935e-05,
            0.0002106115862261504,
            8.551032078685239e-05,
            0.01225195825099945,
            0.00030213777790777385
        ],
        "align_select": "select country.mainland",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the continent name which Anguilla belongs to?",
        "gold_select": "select country.mainland",
        "select_candidates": [
            "select country.mainland",
            "select country.mainland, country.Region",
            "select country.mainland, country.Name",
            "select country.codification, country.mainland"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.07036493718624115,
            0.0002615725970827043,
            0.00015393916692119092,
            7.874876610003412e-05,
            0.00019938661716878414,
            7.989471487235278e-05,
            0.0002162036398658529,
            8.23205045890063e-05
        ],
        "align_select": "select country.mainland",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which region is the city Kabul located in?",
        "gold_select": "select country.Region",
        "select_candidates": [
            "select country.Region",
            "select country.Region, city.country_num",
            "select country.Region, city.Name",
            "select country.Name, city.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country",
        "table_candidates": [
            "city country",
            "city sqlite_sequence country",
            "city"
        ],
        "align_scores": [
            0.9959432482719421,
            0.00014211413508746773,
            0.00014303041098173708,
            6.811117054894567e-05,
            0.000182525793206878,
            7.755311526125297e-05,
            0.0001941172668011859,
            7.229101174743846e-05
        ],
        "align_select": "select country.Region",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What region is Kabul in?",
        "gold_select": "select country.Region",
        "select_candidates": [
            "select country.Region",
            "select country.Region, city.Name",
            "select country.Region, city.country_num",
            "select country.Name, city.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country",
        "table_candidates": [
            "city country",
            "city sqlite_sequence country"
        ],
        "align_scores": [
            0.995927631855011,
            0.00012034205428790301,
            0.00018699924112297595,
            7.51633633626625e-05,
            0.0001488646084908396,
            6.60491205053404e-05,
            0.00020799768390133977,
            7.031009590718895e-05
        ],
        "align_select": "select country.Region",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which language is the most popular in Aruba?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.LocalName",
            "select countrylanguage.Language, country.codification",
            "select countrylanguage.Language, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.991671621799469,
            0.9949219822883606,
            0.00041601949487812817,
            0.0003116635780315846,
            0.0004743012541439384,
            0.00035909589496441185,
            0.0002602048043627292,
            0.00023336826416198164
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What language is predominantly spoken in Aruba?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.LocalName",
            "select countrylanguage.Language, country.codification",
            "select countrylanguage.Language, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9934055805206299,
            0.00861097127199173,
            0.0003557350719347596,
            0.00020583874720614403,
            0.0004197315138299018,
            0.00021836883388459682,
            0.0003072066174354404,
            0.0001736900012474507
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the population and life expectancies in Brazil?",
        "gold_select": "select country.citizens, country.LifeExpectancy",
        "select_candidates": [
            "select country.citizens, country.LifeExpectancy",
            "select city.Population, country.LifeExpectancy",
            "select country.codification, country.Name, country.citizens, country.LifeExpectancy",
            "select city.Name, country.citizens, country.LifeExpectancy"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country",
            "sqlite_sequence country",
            "city sqlite_sequence country"
        ],
        "align_scores": [
            0.9914956092834473,
            0.00016292350483126938,
            0.0007079755887389183,
            0.00016583815158810467,
            0.0002174366090912372,
            8.807367703411728e-05,
            0.00026438076747581363,
            7.186526636360213e-05
        ],
        "align_select": "select country.citizens, country.LifeExpectancy",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me Brazil\u2019s population and life expectancies.",
        "gold_select": "select country.citizens, country.LifeExpectancy",
        "select_candidates": [
            "select country.citizens, country.LifeExpectancy",
            "select country.codification, country.Name, country.citizens, country.LifeExpectancy",
            "select country.codification, country.citizens, country.LifeExpectancy",
            "select country.Name, country.citizens, country.LifeExpectancy"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country"
        ],
        "align_scores": [
            0.9913560152053833,
            0.00014606647891923785,
            0.0001958447537617758,
            7.703025767114013e-05,
            0.00025247689336538315,
            7.435628504026681e-05,
            0.0002151039952877909,
            7.096883200574666e-05
        ],
        "align_select": "select country.citizens, country.LifeExpectancy",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the region and population of Angola?",
        "gold_select": "select country.citizens, country.Region",
        "select_candidates": [
            "select country.Region, city.Population",
            "select country.Region, country.citizens",
            "select country.Region, country.SurfaceArea",
            "select country.Name, city.Population"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "city country",
            "city sqlite_sequence country",
            "sqlite_sequence country",
            "country",
            "countrylanguage country"
        ],
        "align_scores": [
            0.0007053632871247828,
            9.885572944767773e-05,
            0.9961684346199036,
            8.533510117558762e-05,
            0.0004665660089813173,
            9.72015768638812e-05,
            0.0005918724928051233,
            0.00011008934961864725
        ],
        "align_select": "select country.Region, country.citizens",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What region does Angola belong to and what is its population?",
        "gold_select": "select country.citizens, country.Region",
        "select_candidates": [
            "select country.Region, city.Population",
            "select country.Region, country.citizens",
            "select country.Region, count(*)",
            "select city.District, city.Population"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "city country",
            "sqlite_sequence country",
            "city sqlite_sequence country",
            "country",
            "countrylanguage country"
        ],
        "align_scores": [
            0.0005641752504743636,
            0.00020049960585311055,
            0.996322512626648,
            0.04129470884799957,
            0.9350617527961731,
            0.9732460379600525,
            0.0018024352611973882,
            0.0013365994673222303
        ],
        "align_select": "select country.Region, country.citizens",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name of country that has the shortest life expectancy in Asia?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.mainland",
            "select country.Name, country.Region",
            "select country.Name, country.LifeExpectancy"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9908233880996704,
            0.0002901099796872586,
            0.0006336841033771634,
            0.00013805265189148486,
            0.00024537419085390866,
            0.00012181257625343278,
            0.0007543913088738918,
            0.00010255478991894051
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Give the name of the country in Asia with the lowest life expectancy.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.mainland",
            "select country.Name, country.Region",
            "select country.Name, country.LifeExpectancy"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9912881255149841,
            0.00024138441949617118,
            0.0005521330749616027,
            0.00011551438365131617,
            0.00021274448954500258,
            9.946220961865038e-05,
            0.0007356181158684194,
            8.969687769422308e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "What is the total population and maximum GNP in Asia?",
        "gold_select": "select sum(country.citizens), max(country.net_national_product)",
        "select_candidates": [
            "select sum(country.citizens), max(country.net_national_product)",
            "select max(country.net_national_product), sum(country.citizens)",
            "select country.citizens, max(country.net_national_product)",
            "select sum(country.SurfaceArea), max(country.net_national_product)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country"
        ],
        "align_scores": [
            0.9954246878623962,
            9.240456711268052e-05,
            0.9964011907577515,
            8.019729284569621e-05,
            0.9868177175521851,
            0.00011271232506260276,
            0.0002545203606132418,
            9.306034189648926e-05
        ],
        "align_select": "select sum(country.citizens), max(country.net_national_product)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many people live in Asia, and what is the largest GNP among them?",
        "gold_select": "select sum(country.citizens), max(country.net_national_product)",
        "select_candidates": [
            "select country.Name, country.net_national_product",
            "select country.citizens, country.net_national_product",
            "select country.mainland, country.net_national_product",
            "select country.codification, country.net_national_product"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country"
        ],
        "align_scores": [
            0.0003285285201855004,
            0.0008805998368188739,
            0.959172248840332,
            0.8999592065811157,
            0.0004900408675894141,
            0.0005712174461223185,
            0.0004256290849298239,
            0.0006153953145258129
        ],
        "align_select": "select country.citizens, country.net_national_product",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "What is the average life expectancy in African countries that are republics?",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select an avg(country.LifeExpectancy)",
            "select  avg(country.LifeExpectancy)",
            "select Avg(country.LifeExpectancy)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9944633841514587,
            0.0001712466182652861,
            0.00042896406375803053,
            0.00011194177932338789,
            0.9944633841514587,
            0.0001712466182652861,
            0.9944633841514587,
            0.0001712466182652861
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the average life expectancy for countries in Africa which are republics?",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select an avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), country.mainland",
            "select avg(country.LifeExpectancy), country.citizens"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9950900077819824,
            0.00013272895012050867,
            0.0004084250540472567,
            0.0001172182965092361,
            0.00015422419528476894,
            0.0008129769121296704,
            0.00014446911518462002,
            0.0002352685696678236
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total surface area of the continents Asia and Europe?",
        "gold_select": "select sum(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.SurfaceArea)",
            "select sum(country.SurfaceArea), country.mainland",
            "select sum(country.SurfaceArea) def. country.mainland",
            "select sum(country.SurfaceArea), country.mainland"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.9965586066246033,
            0.0003860041906591505,
            0.0001505593681940809,
            0.00010122535604750738,
            0.0002460894756950438,
            0.0001519102806923911,
            0.0001505593681940809,
            0.00010122535604750738
        ],
        "align_select": "select sum(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the total surface area covered by countries in Asia or Europe.",
        "gold_select": "select sum(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.SurfaceArea)",
            "select sum(country.SurfaceArea), country.mainland",
            "select sum(country.SurfaceArea) delimited by country.mainland",
            "select sum(country.SurfaceArea), country.IndepYear"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country"
        ],
        "align_scores": [
            0.996503472328186,
            0.002116033574566245,
            0.00013390906678978354,
            0.00011639739386737347,
            0.0006249513826332986,
            0.00011229158553760499,
            0.00011507957242429256,
            0.00016069284174591303
        ],
        "align_select": "select sum(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average GNP and total population in all nations whose government is US territory?",
        "gold_select": "select avg(country.net_national_product), sum(country.citizens)",
        "select_candidates": [
            "select avg(country.net_national_product), sum(country.citizens)",
            "select avg(country.net_national_product), avg(country.citizens)",
            "select avg(country.net_national_product), avg(country.GNPOld)",
            "select avg(country.net_national_product), sum(country.SurfaceArea)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9759780168533325,
            0.04774235188961029,
            0.7588872909545898,
            0.007149714510887861,
            0.27270036935806274,
            0.004274265840649605,
            0.000999954529106617,
            0.0003725932911038399
        ],
        "align_select": "select avg(country.net_national_product), sum(country.citizens)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the mean GNP and total population of nations which are considered US territory.",
        "gold_select": "select avg(country.net_national_product), sum(country.citizens)",
        "select_candidates": [
            "select avg(country.net_national_product), sum(country.citizens)",
            "select avg(country.net_national_product), sum(country.SurfaceArea)",
            "select avg(country.net_national_product), sum(country.GNPOld)",
            "select avg(country.net_national_product), sum(country.IndepYear)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9941283464431763,
            0.016641194000840187,
            0.0006710421293973923,
            0.00019602145766839385,
            0.9725172519683838,
            0.005533692892640829,
            0.00026459054788574576,
            0.00014001125236973166
        ],
        "align_select": "select avg(country.net_national_product), sum(country.citizens)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many type of governments are in Africa?",
        "gold_select": "select count(distinct country.GovernmentForm)",
        "select_candidates": [
            "select count(distinct country.GovernmentForm)",
            "select count(distinct country.Name)",
            "select count(distinct country.GovernmentForm",
            "select count(distinct country.IndepYear)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "country countrylanguage",
            "sqlite_sequence country",
            "city country"
        ],
        "align_scores": [
            0.9923139214515686,
            0.9923139214515686,
            0.018460864201188087,
            0.018460864201188087,
            0.33534789085388184,
            0.33534789085388184,
            0.0005738649051636457,
            0.0005738649051636457
        ],
        "align_select": "select count(distinct country.GovernmentForm)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many different forms of governments are there in Africa?",
        "gold_select": "select count(distinct country.GovernmentForm)",
        "select_candidates": [
            "select count(distinct country.GovernmentForm)",
            "select count(distinct country.Name)",
            "select count(distinct country.GovernmentForm",
            "select count(distinct country.LocalName)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9953027963638306,
            0.00016050110571086407,
            0.06607082486152649,
            9.18320074561052e-05,
            0.4770737886428833,
            0.00028408615617081523,
            0.012495576404035091,
            0.00011521625856403261
        ],
        "align_select": "select count(distinct country.GovernmentForm)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total number of languages used in Aruba?",
        "gold_select": "select count(countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.Language)",
            "select count(countrylanguage.Language)",
            "select count(*)",
            "select count(selection count(distinct countrylanguage.Language)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9949026107788086,
            0.00021062423184048384,
            0.995934247970581,
            0.0011507384479045868,
            0.9939318895339966,
            0.0024279530625790358,
            0.0005786499241366982,
            0.00010467115498613566
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many languages are spoken in Aruba?",
        "gold_select": "select count(countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.Language)",
            "select count(speechcount(distinct countrylanguage.Language)",
            "select count(countrylanguage.Language)",
            "select count(count(distinct countrylanguage.Language)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9968793392181396,
            0.00014572091458830982,
            0.0010048503754660487,
            0.00011644935148069635,
            0.9971092343330383,
            0.0012856408720836043,
            0.0006200874340720475,
            9.90639891824685e-05
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many official languages does Afghanistan have?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(distinct countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.Language)",
            "select count(countrylanguage.IsOfficial)",
            "select count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.14873813092708588,
            6.734210182912648e-05,
            0.9948210716247559,
            6.52025337330997e-05,
            0.006637288257479668,
            7.803769403835759e-05,
            0.8711315393447876,
            9.44298371905461e-05
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many official languages are spoken in Afghanistan?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(distinct countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.Language)",
            "select count(countrylanguage.IsOfficial)",
            "select count((distinct countrylanguage.IsOfficial)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.6086193323135376,
            0.00012295482156332582,
            0.9818145632743835,
            0.0001377347216475755,
            0.03984178602695465,
            0.0029554276261478662,
            0.005195905454456806,
            0.0001363684277748689
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is name of the country that speaks the largest number of languages?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, countrylanguage.Language",
            "select country.Name, country.country_principal"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9925251007080078,
            6.926178321009502e-05,
            0.00026925085694529116,
            6.068623042665422e-05,
            0.0011245764326304197,
            6.574885628651828e-05,
            0.0007984875701367855,
            6.64143735775724e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Give the name of the nation that uses the greatest amount of languages.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, countrylanguage.Language",
            "select country.Name, country.LocalName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9717080593109131,
            6.48482091492042e-05,
            0.00016448037058580667,
            5.808091373182833e-05,
            0.0013741395669057965,
            6.785509322071448e-05,
            0.002617809223011136,
            7.258486584760249e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which continent has the most diverse languages?",
        "gold_select": "select country.mainland",
        "select_candidates": [
            "select country.mainland",
            "select country.mainland, countrylanguage.Percentage",
            "select country.codification, country.mainland",
            "select country.mainland, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9871960878372192,
            7.556034688604996e-05,
            0.00032678080606274307,
            6.606978422496468e-05,
            0.0007670175400562584,
            6.937402213225141e-05,
            0.0007630744948983192,
            6.41353108221665e-05
        ],
        "align_select": "select country.mainland",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which continent speaks the most languages?",
        "gold_select": "select country.mainland",
        "select_candidates": [
            "select country.mainland",
            "select country.mainland, countrylanguage.Percentage",
            "select country.codification, country.mainland",
            "select country.mainland, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.980096161365509,
            7.040026684990153e-05,
            0.00027373890043236315,
            5.9049143601441756e-05,
            0.0006988475215621293,
            6.554552965098992e-05,
            0.0011102489661425352,
            6.438796845031902e-05
        ],
        "align_select": "select country.mainland",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "How many countries speak both English and Dutch?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countrylanguage.Language",
            "select count(*), countrylanguage.country_cipher",
            "select count(distinct countrylanguage.country_cipher)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9916921854019165,
            0.4901256561279297,
            0.00024464671150781214,
            0.00025600887602195144,
            0.00026849587447941303,
            0.00014724870561622083,
            0.0009189550764858723,
            9.874304669210687e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of nations that use English and Dutch?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countrylanguage.Language",
            "select count(*), countrylanguage.country_cipher",
            "select count(countrylanguage.country_cipher)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9906153678894043,
            0.01515202410519123,
            0.00028560368809849024,
            0.0009044157341122627,
            0.00024394888896495104,
            0.0002659897436387837,
            0.001988404430449009,
            0.0005531968781724572
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of nations speak both English and French?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.Language",
            "select country.Name, country.LocalName",
            "select country.Name (country.codification)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9898960590362549,
            0.00022923073265701532,
            0.0003243167884647846,
            0.0001258736156160012,
            0.0005926791345700622,
            0.00017648967332206666,
            0.00039523441228084266,
            0.00010597527580102906
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Give the names of nations that speak both English and French.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.Language",
            "select country.Name, country.LocalName",
            "select countrylanguage.Language, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9946801066398621,
            0.00039546130574308336,
            0.00024379354726988822,
            0.0001327580539509654,
            0.0005685235955752432,
            0.00022481985797639936,
            0.00021989591186866164,
            0.00012662287917919457
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of nations where both English and French are official languages?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.Language",
            "select country.Name, country.LocalName",
            "select country.Name, countrylanguage.Language, countrylanguage.IsOfficial"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage"
        ],
        "align_scores": [
            0.9944774508476257,
            0.0006832506624050438,
            0.0002646175562404096,
            0.00013249285984784365,
            0.00040095075382851064,
            0.00020733258861582726,
            0.00016685518494341522,
            0.00011706169607350603
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Give the names of countries with English and French as official languages.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.Language",
            "select country.Name, countrylanguage.Language, countrylanguage.IsOfficial",
            "select country.Name, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage"
        ],
        "align_scores": [
            0.9956178665161133,
            0.0008022414403967559,
            0.0001883481309050694,
            7.464664668077603e-05,
            0.0001330272207269445,
            8.265401993412524e-05,
            0.00024065503384917974,
            9.521813626633957e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of distinct continents where Chinese is spoken?",
        "gold_select": "select count(distinct country.mainland)",
        "select_candidates": [
            "select count(distinct country.mainland)",
            "select count(distinct countrylanguage.IsOfficial)",
            "select count(distinct country.Name)",
            "select count(distinct country.citizens)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.022457044571638107,
            0.00017804688832256943,
            0.00047274489770643413,
            0.0001235311501659453,
            0.00117464829236269,
            0.00021273230959195644,
            0.0005665437784045935,
            0.0001288992934860289
        ],
        "align_select": "select count(distinct country.mainland)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many continents speak Chinese?",
        "gold_select": "select count(distinct country.mainland)",
        "select_candidates": [
            "select count(*)",
            "select count(continents)",
            "select count(distinct country.mainland)",
            "select count(distinct countrylanguage.IsOfficial)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9846463799476624,
            0.0026095726061612368,
            0.6651768088340759,
            0.00019857878214679658,
            0.01897037774324417,
            8.087173046078533e-05,
            0.000854377809446305,
            0.00010626084258547053
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the regions that use English or Dutch?",
        "gold_select": "select distinct country.Region",
        "select_candidates": [
            "select country.Region",
            "select distinct country.Region",
            "select country.Region, countrylanguage.Language",
            "select country.Region, country.SurfaceArea"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.99305659532547,
            0.09572670608758926,
            0.024992380291223526,
            0.00021602991910185665,
            0.00021782793919555843,
            0.0001265528699150309,
            0.00028440216556191444,
            0.00014581279538106173
        ],
        "align_select": "select country.Region",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which regions speak Dutch or English?",
        "gold_select": "select distinct country.Region",
        "select_candidates": [
            "select country.Region",
            "select distinct country.Region",
            "select country.Region, countrylanguage.Language",
            "select country.Region, countrylanguage.Language"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9928929209709167,
            0.05288585647940636,
            0.04619019851088524,
            0.00024547477369196713,
            0.0002516201639082283,
            0.00013193525956012309,
            0.0002516201639082283,
            0.00013193525956012309
        ],
        "align_select": "select country.Region",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the countries where either English or Dutch is the official language?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.IsOfficial",
            "select country.Name, country.Capital",
            "select country.Name, country.country_principal"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9091584086418152,
            0.008379027247428894,
            0.0004780162707902491,
            0.00013909282279200852,
            0.00032386102247983217,
            0.00018423267465550452,
            0.00032371722045354545,
            0.00010149801528314129
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which countries have either English or Dutch as an official language?",
        "gold_select": "select *",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.IsOfficial",
            "select country.Name, country.country_principal",
            "select country.Name, country.Capital"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage",
            "sqlite_sequence country countrylanguage",
            "countrylanguage"
        ],
        "align_scores": [
            0.9339724183082581,
            0.011120518669486046,
            0.00045755511382594705,
            0.00015098434232641011,
            0.00026481616077944636,
            0.00010741961159510538,
            0.00029183406149968505,
            0.0001853342109825462
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which language is the most popular on the Asian continent?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.Capital",
            "select countrylanguage.Language, country.mainland",
            "select countrylanguage.Language, country.codification"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9940928816795349,
            0.9940105080604553,
            0.00018777647346723825,
            0.0002251832775073126,
            0.0004397883894853294,
            0.0002998744312208146,
            0.0004749855725094676,
            0.00030415799119509757
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the language that is used by the largest number of Asian nations?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.Capital",
            "select countrylanguage.Language, country.Name",
            "select countrylanguage.Language, country.codification"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9928207993507385,
            0.00013152552128303796,
            0.00036742610973306,
            7.130428275559098e-05,
            0.0013540441868826747,
            8.126893226290122e-05,
            0.0007631206535734236,
            8.533526852261275e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which languages are spoken by only one country in republic governments?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.LocalName",
            "select countrylanguage.Language, country.GovernmentForm",
            "select countrylanguage.Language, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9830953478813171,
            0.04665201157331467,
            0.0005242734332568944,
            0.00012841603893321007,
            0.00039117419510148466,
            9.02356332517229e-05,
            0.000240649314946495,
            9.648311970522627e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "What languages are only used by a single country with a republic government?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.LocalName",
            "select countrylanguage.Language, country.Capital",
            "select countrylanguage.Language, country.GovernmentForm"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.990331768989563,
            0.08781863003969193,
            0.0003983774804510176,
            0.00015578942839056253,
            0.00021822084090672433,
            0.00010262051364406943,
            0.00024221067724283785,
            9.793770004762337e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the city with the largest population that uses English.",
        "gold_select": "select city.Name, city.Population",
        "select_candidates": [
            "select city.Name",
            "select city.ID, city.Name",
            "select city.Name, countrylanguage.Language",
            "select city.Name, city.District"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city countrylanguage",
        "table_candidates": [
            "city countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9854421615600586,
            0.9802011847496033,
            0.0005970880738459527,
            0.0007859509205445647,
            0.0009877467527985573,
            0.0024781760293990374,
            0.0003447792259976268,
            0.000572898134123534
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "What is the most populace city that speaks English?",
        "gold_select": "select city.Name, city.Population",
        "select_candidates": [
            "select city.Name",
            "select city.Name, countrylanguage.Language",
            "select city.ID, city.Name",
            "select city.Name (city.Population)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "city countrylanguage",
        "table_candidates": [
            "city countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.14721757173538208,
            0.01298059243708849,
            0.00017002552340272814,
            0.00017430218576919287,
            0.00022997985070105642,
            0.00015596971206832677,
            0.0004651511844713241,
            0.00012505266931839287
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the name, population and expected life length of asian country with the largest area?",
        "gold_select": "select country.Name, country.citizens, country.LifeExpectancy",
        "select_candidates": [
            "select country.Name, country.citizens, country.LifeExpectancy",
            "select country.Name, country.IndepYear, country.citizens, country.LifeExpectancy",
            "select country.Name, country.LifeExpectancy, country.citizens",
            "select country.Name, country.citizens, country.LifeExpectancy"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9832997918128967,
            0.0001466973772039637,
            0.0005292044952511787,
            0.00012752317707054317,
            0.9820106625556946,
            0.00015431981591973454,
            0.9832997918128967,
            0.0001466973772039637
        ],
        "align_select": "select country.Name, country.citizens, country.LifeExpectancy",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "gold_select": "select country.Name, country.citizens, country.LifeExpectancy",
        "select_candidates": [
            "select country.Name, country.citizens, country.LifeExpectancy",
            "select country.Name, country.IndepYear, country.citizens, country.LifeExpectancy",
            "select country.Name, country.LifeExpectancy, country.citizens",
            "select country.Name, country.citizens, country.LifeExpectancy"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9896973967552185,
            0.000268689967924729,
            0.0017168408958241343,
            0.000133414170704782,
            0.9900851249694824,
            0.0002077130920952186,
            0.9896973967552185,
            0.000268689967924729
        ],
        "align_select": "select country.Name, country.citizens, country.LifeExpectancy",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is average life expectancy in the countries where English is not the official language?",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), countrylanguage.Language",
            "select an avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), countrylanguage.IsOfficial"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "country",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9939800500869751,
            0.00023655788390897214,
            0.00013233038771431893,
            0.000251695018960163,
            0.00042018727981485426,
            0.000142126067657955,
            0.0001674750674283132,
            0.00017451588064432144
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the mean life expectancy of countries in which English is not the official language.",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), countrylanguage.Language",
            "select an avg(country.LifeExpectancy)",
            "select m.avg(country.LifeExpectancy)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9952073693275452,
            0.0001013903456623666,
            0.00013440655311569571,
            0.00017803229275159538,
            0.00037163367960602045,
            0.00010477561590960249,
            0.0013062423095107079,
            0.00011141112190671265
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total number of people living in the nations that do not use English?",
        "gold_select": "select sum(country.citizens)",
        "select_candidates": [
            "select sum(country.citizens)",
            "select sum(country.SurfaceArea)",
            "select sum(t3.c6)",
            "select sum(city.Population)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "sqlite_sequence countrylanguage",
            "city sqlite_sequence country countrylanguage",
            "city sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.990958571434021,
            0.0009264585096389055,
            0.0010085758985951543,
            0.0002162549935746938,
            0.0008196727139875293,
            0.00019086759130004793,
            0.9570164680480957,
            0.0009125502547249198
        ],
        "align_select": "select sum(country.citizens)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many people live in countries that do not speak English?",
        "gold_select": "select sum(country.citizens)",
        "select_candidates": [
            "select count(*)",
            "select sum(city.Population)",
            "select sum(country.citizens)",
            "select sum(country.SurfaceArea)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "city country countrylanguage",
            "city sqlite_sequence country countrylanguage",
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country",
            "city sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9891139268875122,
            0.0002755030582193285,
            0.8393142223358154,
            0.00026989003526978195,
            0.978904664516449,
            0.00022905331570655107,
            0.0015493076061829925,
            0.00018302873650100082
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the official language spoken in the country whose head of state is Beatrix?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, countrylanguage.IsOfficial",
            "select countrylanguage.Language, countrylanguage.IsOfficial",
            "select countrylanguage.Language (countrylanguage.IsOfficial)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.994281530380249,
            0.00019474349392112345,
            0.0003335101355332881,
            8.159880235325545e-05,
            0.0003335101355332881,
            8.159880235325545e-05,
            0.005868825595825911,
            9.62756821536459e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, countrylanguage.IsOfficial",
            "select countrylanguage.Language, countrylanguage.IsOfficial",
            "select countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.994738757610321,
            0.00014149377238936722,
            0.0003488353395368904,
            7.923514931462705e-05,
            0.0003488353395368904,
            7.923514931462705e-05,
            0.00023190389038063586,
            8.080842962954193e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.Language)",
            "select sum(countrylanguage.IsOfficial)",
            "select count(distinct t3.c6)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage"
        ],
        "align_scores": [
            0.015778161585330963,
            0.0002564363821875304,
            0.993217408657074,
            0.00033036115928553045,
            0.0020098944660276175,
            0.0021642951760441065,
            0.0005603670142591,
            0.00017779649351723492
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.Language)",
            "select sum(countrylanguage.IsOfficial)",
            "select sum(distinct countrylanguage.IsOfficial)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage"
        ],
        "align_scores": [
            0.010099750943481922,
            0.00020970823243260384,
            0.9946157336235046,
            0.00027345557464286685,
            0.0015747209545224905,
            0.0012681415537372231,
            0.004872492048889399,
            0.0002667458029463887
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the countries that have greater surface area than any country in Europe?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Region",
            "select country.Name, country.mainland",
            "select country.Name, country.SurfaceArea"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.6881667971611023,
            0.0012176701566204429,
            0.0003388389013707638,
            0.00012548197992146015,
            0.000443891593022272,
            0.00011725698277587071,
            0.0004874889855273068,
            0.00010701554856495932
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which countries have greater area than that of any country in Europe?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.mainland",
            "select country.Name, country.Region",
            "select country.Name, country.SurfaceArea"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.7101806402206421,
            0.00042277012835256755,
            0.0004111200396437198,
            9.039539872901514e-05,
            0.00029187052859924734,
            8.750400593271479e-05,
            0.0004462990036699921,
            8.742811041884124e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the African countries that have a population less than any country in Asia?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, city.country_num",
            "select country.Name, country.mainland",
            "select country.Name, city.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country",
            "city sqlite_sequence country",
            "sqlite_sequence country",
            "countrylanguage country"
        ],
        "align_scores": [
            0.6452922224998474,
            0.1877032071352005,
            0.0004241543065290898,
            0.00031416170531883836,
            0.0003821280843112618,
            0.00019407138461247087,
            0.00025244196876883507,
            0.00012512877583503723
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which African countries have a smaller population than that of any country in Asia?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.mainland",
            "select country.Name, city.country_num",
            "select country.Name, country.citizens"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country",
            "city sqlite_sequence country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.6418523192405701,
            0.0009224491659551859,
            0.0003576655872166157,
            0.00011412129970267415,
            0.0004471144638955593,
            0.00013355721603147686,
            0.00037053527194075286,
            9.561365732224658e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which Asian countries have a population that is larger than any country in Africa?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.mainland",
            "select country.Name, city.country_num",
            "select country.Name, city.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "city country",
            "city sqlite_sequence country",
            "sqlite_sequence country",
            "country",
            "countrylanguage country",
            "city sqlite_sequence"
        ],
        "align_scores": [
            0.7112459540367126,
            0.0007658321992494166,
            0.0004111901798751205,
            0.00014204016770236194,
            0.0003921999305021018,
            0.00015114597044885159,
            0.00021805547294206917,
            9.694775508251041e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.mainland",
            "select country.Name, city.country_num",
            "select distinct country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country",
            "city sqlite_sequence country",
            "sqlite_sequence country",
            "city sqlite_sequence"
        ],
        "align_scores": [
            0.736194372177124,
            0.10371170192956924,
            0.0003551928384695202,
            0.00019442029588390142,
            0.0004464127996470779,
            0.00027699803467839956,
            0.14539307355880737,
            0.001348678139038384
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the country codes for countries that do not speak English?",
        "gold_select": "select countrylanguage.country_cipher",
        "select_candidates": [
            "select country.Code2",
            "select country.codification",
            "select countrylanguage.country_cipher",
            "select country.Name, countrylanguage.country_cipher"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.022787371650338173,
            0.0002235326828667894,
            0.9844105243682861,
            0.00015137239824980497,
            0.6303800344467163,
            0.0001876275782706216,
            0.00030734724714420736,
            8.105701999738812e-05
        ],
        "align_select": "select country.codification",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the country codes for countries that do not speak English.",
        "gold_select": "select countrylanguage.country_cipher",
        "select_candidates": [
            "select country.Code2",
            "select country.codification",
            "select country.Name, countrylanguage.country_cipher",
            "select country.Name, country.Code2"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.013704808428883553,
            0.00014359793567564338,
            0.9892275333404541,
            0.00010679831029847264,
            0.0002506442251615226,
            6.717866926919669e-05,
            0.00017186382319778204,
            6.870506331324577e-05
        ],
        "align_select": "select country.codification",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the country codes of countries where people use languages other than English?",
        "gold_select": "select distinct countrylanguage.country_cipher",
        "select_candidates": [
            "select country.Code2",
            "select country.codification",
            "select country.Name, country.Code2",
            "select country.Name, countrylanguage.country_cipher"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.01374729909002781,
            0.040724143385887146,
            0.9059823155403137,
            0.06513483077287674,
            0.00024444106384180486,
            0.0001198426543851383,
            0.00036456293310038745,
            0.00017939928511623293
        ],
        "align_select": "select country.codification",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the country codes for countries in which people speak langauges that are not English.",
        "gold_select": "select distinct countrylanguage.country_cipher",
        "select_candidates": [
            "select country.codification",
            "select country.Code2",
            "select country.Name, country.Code2",
            "select country.Name, countrylanguage.country_cipher"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.6995936036109924,
            0.09977507591247559,
            0.011262994259595871,
            0.010175193659961224,
            0.00024878547992557287,
            0.00012048453936586156,
            0.0003805772284977138,
            0.00013712981308344752
        ],
        "align_select": "select country.codification",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "gold_select": "select country.codification",
        "select_candidates": [
            "select country.codification",
            "select country.Code2",
            "select country.Name, country.Code2",
            "select country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9864535927772522,
            0.08771556615829468,
            0.07296417653560638,
            0.04586660861968994,
            0.00028742814902216196,
            0.00025156716583296657,
            0.006015425082296133,
            0.8335133194923401
        ],
        "align_select": "select country.codification",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
        "gold_select": "select country.codification",
        "select_candidates": [
            "select country.codification",
            "select country.Code2",
            "select country.Name",
            "select country.Name, country.Code2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9721450805664062,
            0.09480458498001099,
            0.05139679089188576,
            0.007866852916777134,
            0.0028744242154061794,
            0.8633577823638916,
            0.00023079130914993584,
            0.0002038374514086172
        ],
        "align_select": "select country.codification",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which cities are in European countries where English is not the official language?",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select city.Name",
            "select city.ID, city.Name",
            "select city.Name, country.Name",
            "select distinct city.Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage",
            "city sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.7999190092086792,
            0.0017327343812212348,
            0.0003474141994956881,
            0.00015475806139875203,
            0.0003159377083647996,
            0.00012794022040907294,
            0.08250637352466583,
            0.0484207421541214
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of cities in Europe for which English is not the official language?",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select city.Name",
            "select city.Name, country.Name",
            "select city.Name, country.mainland",
            "select distinct city.Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage",
            "city sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9881308078765869,
            0.0012755454517900944,
            0.00022000769968144596,
            0.0001340548333246261,
            0.00025926725356839597,
            0.00013080808275844902,
            0.024760423228144646,
            0.021037956699728966
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which unique cities are in Asian countries where Chinese is the official language?",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select distinct city.Name",
            "select distinct city.ID",
            "select count(*)",
            "select distinct city.ID, city.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage",
            "city sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9801871180534363,
            0.00036284903762862086,
            0.8676100969314575,
            0.00027758334181271493,
            0.037045884877443314,
            9.56164876697585e-05,
            0.000604712578933686,
            8.269075624411926e-05
        ],
        "align_select": "select distinct city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select distinct city.Name",
            "select distinct city.Name, country.Name",
            "select distinct city.Name, countrylanguage.IsOfficial",
            "select distinct city.Name, country.mainland"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage",
            "city sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9935991764068604,
            0.00012576083827298135,
            0.00021376153745222837,
            6.301797111518681e-05,
            0.0005192108219489455,
            7.053163426462561e-05,
            0.00028432568069547415,
            7.008023385424167e-05
        ],
        "align_select": "select distinct city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the name, independence year, and surface area of the country with the smallest population?",
        "gold_select": "select country.Name, country.SurfaceArea, country.IndepYear",
        "select_candidates": [
            "select country.Name, country.IndepYear, country.SurfaceArea",
            "select country.Name, country.IndepYear., country.SurfaceArea",
            "select country.Name, country.IndepYear, country.SurfaceArea",
            "select country.Name, country.IndepYear\", country.SurfaceArea"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9922298789024353,
            8.28841730253771e-05,
            0.03752491623163223,
            0.00010773411486297846,
            0.9922298789024353,
            8.28841730253771e-05,
            0.012275617569684982,
            7.993105828063563e-05
        ],
        "align_select": "select country.Name, country.IndepYear, country.SurfaceArea",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
        "gold_select": "select country.Name, country.SurfaceArea, country.IndepYear",
        "select_candidates": [
            "select country.Name, country.IndepYear, country.SurfaceArea",
            "select country.Name, country.IndepYear.c4, country.IndepYear",
            "select country.Name, country.IndepYear, country.SurfaceArea",
            "select country.Name, country.IndepYear, country.SurfaceArea, country.SurfaceArea"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.987623929977417,
            7.862540951464325e-05,
            0.00041417154716327786,
            8.120416896417737e-05,
            0.987623929977417,
            7.862540951464325e-05,
            0.000668572960421443,
            8.092981443041936e-05
        ],
        "align_select": "select country.Name, country.IndepYear, country.SurfaceArea",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the population, name and leader of the country with the largest area?",
        "gold_select": "select country.Name, country.citizens, country.country_principal",
        "select_candidates": [
            "select country.citizens, country.Name, country.country_principal",
            "select city.Population, country.Name, country.country_principal",
            "select city.Name, country.Name, country.country_principal",
            "select city.Population, country.Name, country.country_principal"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.5716490149497986,
            9.438949928153306e-05,
            0.00046913570258766413,
            7.988702418515459e-05,
            0.0009120282484218478,
            0.0001524069084553048,
            0.00046913570258766413,
            7.988702418515459e-05
        ],
        "align_select": "select country.citizens, country.Name, country.country_principal",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Give the name, population, and head of state for the country that has the largest area.",
        "gold_select": "select country.Name, country.citizens, country.country_principal",
        "select_candidates": [
            "select country.Name, country.citizens, country.country_principal",
            "select country.Name, country.GovernmentForm, country.country_principal",
            "select country.Name, country.LocalName, country.country_principal",
            "select country.Name, country.country_principal, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.0008615808910690248,
            9.085454075830057e-05,
            0.0004559480585157871,
            8.62097876961343e-05,
            0.00034221154055558145,
            8.340484055224806e-05,
            0.0003777891688514501,
            8.226102363551036e-05
        ],
        "align_select": "select country.Name, country.citizens, country.country_principal",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "gold_select": "select count(countrylanguage.Language), country.Name",
        "select_candidates": [
            "select country.Name, count(distinct countrylanguage.Language)",
            "select country.Name, count(*)",
            "select country.Name, count(countrylanguage.Language)",
            "select country.Name, count(distinct country.Name)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.042853280901908875,
            8.621784945717081e-05,
            0.4508833587169647,
            0.00011888384324265644,
            0.005402419250458479,
            8.691364200785756e-05,
            0.00017385203682351857,
            6.773071800125763e-05
        ],
        "align_select": "select country.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
        "gold_select": "select count(countrylanguage.Language), country.Name",
        "select_candidates": [
            "select country.Name, count(distinct countrylanguage.Language)",
            "select country.Name, count(countrylanguage.Language)",
            "select country.Name, count(*)",
            "select country.Name, count(distinct country.Name)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage"
        ],
        "align_scores": [
            0.40973904728889465,
            0.000103365360700991,
            0.033649832010269165,
            8.77178754308261e-05,
            0.954791247844696,
            0.00011787580297095701,
            0.00025521733914501965,
            7.164282578742132e-05
        ],
        "align_select": "select country.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
        "gold_select": "select sum(country.citizens), country.GovernmentForm",
        "select_candidates": [
            "select country.GovernmentForm, sum(country.citizens)",
            "select country.GovernmentForm, sum(country.SurfaceArea)",
            "select country.Name, sum(country.citizens)",
            "select country.Name, sum(country.SurfaceArea)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country"
        ],
        "align_scores": [
            0.5330750346183777,
            0.0001742649619700387,
            0.00025610849843360484,
            0.00013145053526386619,
            0.031236160546541214,
            0.00019834622798953205,
            0.0002867001458071172,
            0.0001420688786311075
        ],
        "align_select": "select country.GovernmentForm, sum(country.citizens)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
        "gold_select": "select sum(country.citizens), country.GovernmentForm",
        "select_candidates": [
            "select country.GovernmentForm, sum(country.citizens)",
            "select country.Name, sum(country.citizens)",
            "select country.GovernmentForm, sum(country.SurfaceArea)",
            "select country.GovernmentForm, sum(country.IndepYear)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9614567160606384,
            0.00015348919259849936,
            0.9766073822975159,
            0.00016311826766468585,
            0.0002813674509525299,
            9.241513907909393e-05,
            0.0002816900669131428,
            7.724505121586844e-05
        ],
        "align_select": "select country.GovernmentForm, sum(country.citizens)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
        "gold_select": "select sum(country.citizens), avg(country.LifeExpectancy), country.mainland",
        "select_candidates": [
            "select country.mainland, sum(country.citizens)",
            "select avg(country.LifeExpectancy), sum(country.SurfaceArea), country.mainland",
            "select country.Name, avg(country.LifeExpectancy)",
            "select country.Name, avg(country.LifeExpectancy), sum(country.citizens)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.0013066877145320177,
            7.64630749472417e-05,
            0.0001425816008122638,
            6.109297828515992e-05,
            0.0007441921043209732,
            8.325331145897508e-05,
            0.0035953684709966183,
            9.911273809848353e-05
        ],
        "align_select": "select country.mainland, sum(country.citizens)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
        "gold_select": "select sum(country.citizens), avg(country.LifeExpectancy), country.mainland",
        "select_candidates": [
            "select country.mainland, sum(country.SurfaceArea), avg(country.LifeExpectancy)",
            "select country.mainland, count(*), avg(country.LifeExpectancy)",
            "select country.Name, sum(country.SurfaceArea), avg(country.LifeExpectancy)",
            "select country.mainland, sum(country.Region), avg(country.LifeExpectancy)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.00017704773927107453,
            7.201276457635686e-05,
            0.025804443284869194,
            0.00012105528003303334,
            0.000166764366440475,
            8.509425242664292e-05,
            0.0002487155143171549,
            7.447223470080644e-05
        ],
        "align_select": "select country.mainland, sum(country.SurfaceArea), avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are names of countries with the top 3 largest population?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, city.country_num",
            "select country.Name, city.District",
            "select country.Name, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "city country",
            "city sqlite_sequence country",
            "country",
            "sqlite_sequence country",
            "countrylanguage country"
        ],
        "align_scores": [
            0.9893559813499451,
            5.333628359949216e-05,
            0.0002910346956923604,
            6.0274491261225194e-05,
            0.0010493017034605145,
            5.636941932607442e-05,
            0.0006088515510782599,
            5.579136632150039e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Return the names of the 3 most populated countries.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, city.country_num",
            "select country.Name, city.District",
            "select country.Name, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "city country",
            "city sqlite_sequence country",
            "countrylanguage country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.9955614805221558,
            5.573526141233742e-05,
            0.0004890564596280456,
            5.4214662668528035e-05,
            0.0009441669099032879,
            5.086833698442206e-05,
            0.0003376711974851787,
            5.078433969174512e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the names of the nations with the 3 lowest populations?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, city.country_num",
            "select country.Name, city.District",
            "select country.Name, country.LocalName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "city country",
            "city sqlite_sequence country"
        ],
        "align_scores": [
            0.9886292219161987,
            5.632610555039719e-05,
            0.00037052363040857017,
            5.8877532865153626e-05,
            0.0009222145308740437,
            5.66397538932506e-05,
            0.013493743725121021,
            5.523303843801841e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Return the names of the 3 countries with the fewest people.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.country_principal",
            "select country.Name, country.citizens"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9924893379211426,
            5.236485958448611e-05,
            0.000335477088810876,
            5.052836058894172e-05,
            0.0005748333060182631,
            5.194716140977107e-05,
            0.000516516447532922,
            5.01743852510117e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "how many countries are in Asia?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), country.Name",
            "select count(*), country.codification",
            "select count(*), country.mainland"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.995347797870636,
            0.0004178169183433056,
            0.00041565424180589616,
            0.0002767195401247591,
            0.00023744911595713347,
            0.00018312076281290501,
            0.00026341810007579625,
            0.0002708830579649657
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count the number of countries in Asia.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), country.Name",
            "select count(*), country.Name, country.mainland",
            "select count(*), country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9957026839256287,
            0.000186585690244101,
            0.0002219086018158123,
            0.0018845576560124755,
            0.00012324770796112716,
            9.464204777032137e-05,
            0.0001085428666556254,
            8.743627404328436e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, city.Population",
            "select country.Name, city.District",
            "select country.Name, city.country_num"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "city country",
            "sqlite_sequence country",
            "city sqlite_sequence country",
            "country",
            "countrylanguage country",
            "city city country"
        ],
        "align_scores": [
            0.9595640897750854,
            0.00023445214901585132,
            0.0002234811254311353,
            8.813189924694598e-05,
            0.00027234567096456885,
            0.00011846976849483326,
            0.0002839973312802613,
            0.00011567971523618326
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, city.Population",
            "select country.Name, city.country_num",
            "select country.Name, city.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country",
            "sqlite_sequence country",
            "city sqlite_sequence country",
            "countrylanguage country"
        ],
        "align_scores": [
            0.8918541669845581,
            0.001108874916099012,
            0.00020367014803923666,
            8.742944191908464e-05,
            0.00020906182180624455,
            0.00011334543523844332,
            0.00023821531794965267,
            9.359895921079442e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000?",
        "gold_select": "select sum(country.citizens), avg(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.citizens), avg(country.SurfaceArea)",
            "select avg(country.citizens), sum(country.citizens)",
            "select sum(country.net_national_product), avg(country.SurfaceArea)",
            "select sum(country.SurfaceArea), avg(country.SurfaceArea)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9910489320755005,
            0.0007409965619444847,
            0.013041108846664429,
            0.00018346190336160362,
            0.000403076148359105,
            0.00011416330380598083,
            0.0002284970978507772,
            0.00011256046127527952
        ],
        "align_select": "select sum(country.citizens), avg(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000.",
        "gold_select": "select sum(country.citizens), avg(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.citizens), avg(country.SurfaceArea)",
            "select avg(country.citizens), sum(country.citizens)",
            "select country.citizens, avg(country.SurfaceArea)",
            "select sum(t0.c6), avg(country.SurfaceArea)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9831603169441223,
            0.000531510915607214,
            0.008259293623268604,
            0.0002727920946199447,
            0.22698186337947845,
            0.0003018397546838969,
            0.0004838124441448599,
            0.00022797132260166109
        ],
        "align_select": "select sum(country.citizens), avg(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the language spoken by the largest percentage of people in each country?",
        "gold_select": "select countrylanguage.Language, countrylanguage.country_cipher, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, countrylanguage.Percentage",
            "select countrylanguage.Language, country.Name",
            "select countrylanguage.Language, countrylanguage.IsOfficial"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9938149452209473,
            7.349546649493277e-05,
            0.004935701377689838,
            6.387443863786757e-05,
            0.0037227575667202473,
            6.608888361370191e-05,
            0.0013218807289376855,
            6.364000000758097e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
        "gold_select": "select countrylanguage.Language, countrylanguage.country_cipher, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select countrylanguage.country_cipher, countrylanguage.Language",
            "select countrylanguage.Language, countrylanguage.IsOfficial",
            "select countrylanguage.Language4, countrylanguage.Language",
            "select countrylanguage.Language, countrylanguage.Language4"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage"
        ],
        "align_scores": [
            0.8959137797355652,
            8.658292063046247e-05,
            0.0002993116795551032,
            7.059347990434617e-05,
            0.0003245596308261156,
            0.0001076929402188398,
            0.00024551854585297406,
            0.00010060457861982286
        ],
        "align_select": "select countrylanguage.country_cipher, countrylanguage.Language",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "gold_select": "select count(*), max(countrylanguage.Percentage)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countrylanguage.country_cipher",
            "select count(*), countrylanguage.Language",
            "select count(*), country.Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9555000066757202,
            0.010027590207755566,
            0.0005240915343165398,
            0.0010256085079163313,
            0.00047733262181282043,
            0.0014428391586989164,
            0.0010187877342104912,
            0.0035981968976557255
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "gold_select": "select count(*), max(countrylanguage.Percentage)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countrylanguage.country_cipher",
            "select count(*), countrylanguage.Language",
            "select count(distinct countrylanguage.country_cipher)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9916129112243652,
            0.0016613454790785909,
            0.00024733543978072703,
            0.00032187753822654486,
            0.0002795358595903963,
            0.001282663899473846,
            0.004269991535693407,
            7.680017006350681e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "gold_select": "select countrylanguage.country_cipher, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select country.Code2",
            "select country.Name, country.Code2",
            "select country.codification",
            "select country.Name, country.mainland"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.2293468862771988,
            0.4316323399543762,
            0.000636354903690517,
            0.0016266604652628303,
            0.984190046787262,
            0.9599173069000244,
            0.0005910093896090984,
            0.0008090795017778873
        ],
        "align_select": "select country.codification",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
        "gold_select": "select countrylanguage.country_cipher, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select country.codification",
            "select country.Code2",
            "select country.Name, country.Code2",
            "select country.Name, country.mainland"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9801642298698425,
            0.00010710048081818968,
            0.06245662271976471,
            0.00012765920837409794,
            0.0001813112321542576,
            7.01780736562796e-05,
            0.00017716274305712432,
            6.732707697665319e-05
        ],
        "align_select": "select country.codification",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of conductors whose nationalities are not \"USA\"?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.citizen_of",
            "select conductor.Name, conductor.Age",
            "select conductor.Conductor_ID, conductor.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor",
            "conductor orchestra"
        ],
        "align_scores": [
            0.9950769543647766,
            0.00017500312242191285,
            0.00020020961528643966,
            6.0914211644558236e-05,
            0.00014345710224006325,
            6.744956772308797e-05,
            0.00018391586490906775,
            7.27299484424293e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the names of conductors that do not have the nationality \"USA\".",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.citizen_of",
            "select conductor.Name, conductor.Age",
            "select conductor.Conductor_ID, conductor.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor",
            "conductor orchestra",
            "conductor performance"
        ],
        "align_scores": [
            0.9947819113731384,
            0.00010303980525350198,
            0.00018065786571241915,
            5.442117981147021e-05,
            0.00014451374590862542,
            5.844043334946036e-05,
            0.0001353474654024467,
            6.241844675969332e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "gold_select": "select orchestra.record_firm",
        "select_candidates": [
            "select orchestra.record_firm",
            "select orchestra.record_firm, orchestra.year_foundation",
            "select orchestra.record_firm (orchestrated orchestra.year_foundation)",
            "select orchestra.record_firm (orchestral_orchestra.record_firm)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9932878613471985,
            0.9932878613471985,
            0.00028855420532636344,
            0.00028855420532636344,
            0.000877668964676559,
            0.000877668964676559,
            0.0002847410214599222,
            0.0002847410214599222
        ],
        "align_select": "select orchestra.record_firm",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "gold_select": "select orchestra.record_firm",
        "select_candidates": [
            "select orchestra.record_firm",
            "select orchestra.record_firm, orchestra.year_foundation",
            "select orchestra.record_firm (ordered orchestra.year_foundation)",
            "select orchestra.record_firm (orchestrated orchestra.year_foundation)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9948508143424988,
            0.00034849709481932223,
            0.0003135991282761097,
            0.00014757450844626874,
            0.01087412890046835,
            0.00034894575946964324,
            0.0006983900675550103,
            0.00023698952281847596
        ],
        "align_select": "select orchestra.record_firm",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What is the average attendance of shows?",
        "gold_select": "select avg(show.audience_number)",
        "select_candidates": [
            "select avg(show.audience_number)",
            "select an avg(show.audience_number)",
            "select the avg(show.audience_number)",
            "select  avg(show.audience_number)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "show",
        "table_candidates": [
            "show"
        ],
        "align_scores": [
            0.9959164261817932,
            5.251642505754717e-05,
            0.00044778280425816774,
            8.123360748868436e-05,
            0.00046787585597485304,
            9.216731268679723e-05,
            0.9959164261817932,
            5.251642505754717e-05
        ],
        "align_select": "select avg(show.audience_number)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Return the average attendance across all shows.",
        "gold_select": "select avg(show.audience_number)",
        "select_candidates": [
            "select avg(show.audience_number)",
            "select an avg(show.audience_number)",
            "select the avg(show.audience_number)",
            "select  avg(show.audience_number)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "show",
        "table_candidates": [
            "show"
        ],
        "align_scores": [
            0.9968379735946655,
            6.393270450644195e-05,
            0.0003543885250110179,
            9.863501327345148e-05,
            0.00035751095856539905,
            0.000113858470285777,
            0.9968379735946655,
            6.393270450644195e-05
        ],
        "align_select": "select avg(show.audience_number)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "gold_select": "select max(performance.Share), min(performance.Share)",
        "select_candidates": [
            "select max(performance.Share), min(performance.Share)",
            "select max(t2.c8), min(performance.Share)",
            "select max(t2.c7), min(performance.Share)",
            "select max(performance.Share ), min(performance.Share)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "performance",
        "table_candidates": [
            "performance"
        ],
        "align_scores": [
            0.9964653253555298,
            0.00011344988160999492,
            0.0003313165216241032,
            8.284165960503742e-05,
            0.0003354716463945806,
            8.330873970407993e-05,
            0.004223482217639685,
            0.00010122430103365332
        ],
        "align_select": "select max(performance.Share), min(performance.Share)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
        "gold_select": "select max(performance.Share), min(performance.Share)",
        "select_candidates": [
            "select max(performance.Share), min(performance.Share)",
            "select max(t2.c8), min(performance.Share)",
            "select max(t2.c7), min(performance.Share)",
            "select max(performance.Share ), min(performance.Share)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "performance",
        "table_candidates": [
            "performance"
        ],
        "align_scores": [
            0.9960416555404663,
            0.00012017451808787882,
            0.0003626073303166777,
            8.931074989959598e-05,
            0.0003763929125852883,
            8.962881111074239e-05,
            0.0034888244699686766,
            0.00011250315583311021
        ],
        "align_select": "select max(performance.Share), min(performance.Share)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many different nationalities do conductors have?",
        "gold_select": "select count(distinct conductor.citizen_of)",
        "select_candidates": [
            "select count(distinct conductor.citizen_of)",
            "select count(distinct conductor.Age)",
            "select count(distinct conductor.Name)",
            "select count(distinct conductor.how_long_worked)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.993160605430603,
            0.993160605430603,
            0.0008457929361611605,
            0.0008457929361611605,
            0.0009559395257383585,
            0.0009559395257383585,
            0.00029001483926549554,
            0.00029001483926549554
        ],
        "align_select": "select count(distinct conductor.citizen_of)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Count the number of different nationalities of conductors.",
        "gold_select": "select count(distinct conductor.citizen_of)",
        "select_candidates": [
            "select count(distinct conductor.citizen_of)",
            "select count(distinct conductor.Age)",
            "select count(distinct conductor.Name)",
            "select count(distinct conductor.how_long_worked)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.994574248790741,
            0.994574248790741,
            0.0005902315024286509,
            0.0005902315024286509,
            0.0007900680648162961,
            0.0007900680648162961,
            0.00020433247846085578,
            0.00020433247846085578
        ],
        "align_select": "select count(distinct conductor.citizen_of)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List names of conductors in descending order of years of work.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.how_long_worked",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.citizen_of"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9954786896705627,
            0.0002639062877278775,
            0.0002287983661517501,
            7.516637560911477e-05,
            0.00016541696095373482,
            0.00013769848737865686,
            0.0001376906002406031,
            0.00012275601329747587
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.how_long_worked",
            "select conductor.Name, conductor.Age",
            "select conductor.Name (ordered conductor.Conductor_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9911822080612183,
            0.9911822080612183,
            0.00017385583487339318,
            0.00017385583487339318,
            0.00015837700630072504,
            0.00015837700630072504,
            0.00024382471747230738,
            0.00024382471747230738
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List the name of the conductor with the most years of work.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.citizen_of",
            "select conductor.Name, conductor.how_long_worked"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9834744334220886,
            6.62299498799257e-05,
            0.00028782663866877556,
            5.905472062295303e-05,
            0.0002748304104898125,
            5.232965850154869e-05,
            0.0003968925157096237,
            5.8166384405922145e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the conductor who has worked the greatest number of years?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.how_long_worked",
            "select conductor.Name, conductor.citizen_of"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.930965781211853,
            7.122829265426844e-05,
            0.0004319510771892965,
            6.303005648078397e-05,
            0.00033199251629412174,
            6.414265226339921e-05,
            0.0002441834658384323,
            5.765698733739555e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Name (or conductor.Age)",
            "select conductor.Name (ORDER BY-LIMIT)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9788501858711243,
            9.503453475190327e-05,
            0.00018300501687917858,
            7.193191413534805e-05,
            0.0008024586131796241,
            8.295011502923444e-05,
            0.05293092131614685,
            7.827887748135254e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Name (or conductor.Age)",
            "select conductor.Name, conductor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9868473410606384,
            0.00011097524111391976,
            0.00024056280381046236,
            6.85127088217996e-05,
            0.0011921824188902974,
            8.457520743831992e-05,
            0.00020516529912129045,
            6.767357263015583e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please show the different record companies and the corresponding number of orchestras.",
        "gold_select": "select orchestra.record_firm, count(*)",
        "select_candidates": [
            "select orchestra.record_firm, count(*)",
            "select orchestra.record_firm, count(orchestrations)",
            "select orchestra.record_firm., count(*)",
            "select orchestra.record_firm, count(**)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9964891672134399,
            0.00037134825834073126,
            0.015027333050966263,
            0.00042416766518726945,
            0.0044418335892260075,
            0.00043506993097253144,
            0.9955443739891052,
            0.0003638924390543252
        ],
        "align_select": "select orchestra.record_firm, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How many orchestras does each record company manage?",
        "gold_select": "select orchestra.record_firm, count(*)",
        "select_candidates": [
            "select orchestra.record_firm, count(*)",
            "select orchestra.record_firm.c3, count(*)",
            "select orchestra.Orchestra, count(*)",
            "select count(*), orchestra.record_firm"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9957094192504883,
            0.00020523670536931604,
            0.0010265018790960312,
            0.00014895036292728037,
            0.3381219506263733,
            0.00017085339641198516,
            0.9955670237541199,
            0.00017147553444374353
        ],
        "align_select": "select orchestra.record_firm, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Please show the record formats of orchestras in ascending order of count.",
        "gold_select": "select orchestra.main_format",
        "select_candidates": [
            "select orchestra.main_format",
            "select orchestra.main_format, count(*)",
            "select orchestra.main_format (orchestrated by count(*)",
            "select count(*), orchestra.main_format"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.418622761964798,
            0.00016775299445725977,
            0.0006351866759359837,
            8.085399167612195e-05,
            0.0004726710612885654,
            0.00014986285532359034,
            0.00035025225952267647,
            0.00014358246698975563
        ],
        "align_select": "select orchestra.main_format",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY"
    },
    {
        "question": "What are the major record formats of orchestras, sorted by their frequency?",
        "gold_select": "select orchestra.main_format",
        "select_candidates": [
            "select orchestra.main_format",
            "select orchestra.main_format, t1.c6",
            "select orchestra.main_format, t1.c7",
            "select orchestra.main_format, orchestra.record_firm"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9941539168357849,
            0.0011640670709311962,
            0.0003063374024350196,
            0.0001834256836446002,
            0.0003028901992365718,
            0.0001795344869606197,
            0.00020024742116220295,
            0.0001272491499548778
        ],
        "align_select": "select orchestra.main_format",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY"
    },
    {
        "question": "List the record company shared by the most number of orchestras.",
        "gold_select": "select orchestra.record_firm",
        "select_candidates": [
            "select orchestra.record_firm",
            "select orchestra.record_firm, orchestra.year_foundation",
            "select orchestra.record_firm, orchestra.Conductor_ID",
            "select orchestra.record_firm, orchestra.main_format"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9948044419288635,
            8.188909851014614e-05,
            0.0002795215114019811,
            5.72845819988288e-05,
            0.00014617264969274402,
            6.063631008146331e-05,
            0.000289611954940483,
            6.347224552882835e-05
        ],
        "align_select": "select orchestra.record_firm",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the record company used by the greatest number of orchestras?",
        "gold_select": "select orchestra.record_firm",
        "select_candidates": [
            "select orchestra.record_firm",
            "select orchestra.record_firm, orchestra.year_foundation",
            "select orchestra.record_firm, orchestra.Conductor_ID",
            "select orchestra.record_firm (http://www.orchestra.record_firm)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9950205087661743,
            8.101829735096544e-05,
            0.00029799056937918067,
            5.5018605053192005e-05,
            0.00014769475092180073,
            5.823492392664775e-05,
            0.00780866714194417,
            7.447315874742344e-05
        ],
        "align_select": "select orchestra.record_firm",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
        "gold_select": "select orchestra.record_firm",
        "select_candidates": [
            "select orchestra.record_firm",
            "select orchestra.record_firm, orchestra.year_foundation",
            "select orchestra.record_firm (symbol orchestra.record_firm)",
            "select orchestra.record_firm (orchestrator's choice)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9956029653549194,
            0.023738918825984,
            0.0002226537762908265,
            0.00014163131709210575,
            0.00015494586841668934,
            8.202868775697425e-05,
            0.9908186793327332,
            0.006898416206240654
        ],
        "align_select": "select orchestra.record_firm",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
        "gold_select": "select orchestra.record_firm",
        "select_candidates": [
            "select orchestra.record_firm",
            "select orchestra.record_firm, orchestra.year_foundation",
            "select orchestra.record_firm (orchestrator_id), orchestra.year_foundation",
            "select orchestra.record_firm (orchestrator_id, orchestra.year_foundation)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9927669763565063,
            0.02052343636751175,
            0.00045415706699714065,
            0.00017400775686837733,
            0.0005775132449343801,
            0.0002248423406854272,
            0.0006937281577847898,
            0.00022514612646773458
        ],
        "align_select": "select orchestra.record_firm",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), orchestra.main_format",
            "select count(*), orchestra.Orchestra_ID",
            "select count(*),"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9936802387237549,
            7.778301369398832e-05,
            0.00035453756572678685,
            6.47524357191287e-05,
            0.0001787168876035139,
            7.113299943739548e-05,
            0.0008220075396820903,
            6.741580000380054e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count the number of orchestras that have CD or DVD as their record format.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), orchestra.main_format",
            "select count(*), orchestra.main_format, t1.c6",
            "select count(*), orchestra.main_format, orchestra.year_foundation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9912707805633545,
            0.007571327034384012,
            0.00032620993442833424,
            0.5393157601356506,
            0.0002079425466945395,
            9.435377432964742e-05,
            0.00011545975576154888,
            0.00021716931951232255
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the years in which orchestras that have given more than one performance are founded.",
        "gold_select": "select orchestra.year_foundation",
        "select_candidates": [
            "select orchestra.year_foundation",
            "select orchestra.year_foundation, orchestra.main_format",
            "select orchestra.year_foundation (orchestrator_id)",
            "select orchestra.year_foundation (orchestrating_orchestra.year_foundation)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra performance",
        "table_candidates": [
            "orchestra performance",
            "orchestra"
        ],
        "align_scores": [
            0.5031869411468506,
            8.677790174260736e-05,
            0.00022733690275344998,
            6.099157690186985e-05,
            0.00208067474886775,
            7.566346175735816e-05,
            0.00046166832908056676,
            6.763532292097807e-05
        ],
        "align_select": "select orchestra.year_foundation",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are years of founding for orchestras that have had more than a single performance?",
        "gold_select": "select orchestra.year_foundation",
        "select_candidates": [
            "select orchestra.year_foundation",
            "select orchestra.year_foundation, orchestra.main_format",
            "select orchestra.year_foundation (orchestrator_orchestra.year_foundation)",
            "select orchestra.year_foundation (orchestrator_id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra performance",
        "table_candidates": [
            "orchestra performance",
            "orchestra"
        ],
        "align_scores": [
            0.7368418574333191,
            0.0001014579611364752,
            0.0001757167628966272,
            6.237799243535846e-05,
            0.0003854979877360165,
            7.083462696755305e-05,
            0.0021125366911292076,
            8.627392526250333e-05
        ],
        "align_select": "select orchestra.year_foundation",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "gold_select": "select orchestra.Record_Company",
        "select_candidates": [
            "select orchestra.Record_Company",
            "select orchestra.Record_Company, orchestra.year_of_created",
            "select orchestra.Record_Company (orchestrated orchestra.year_of_created)",
            "select orchestra.Record_Company (orchestrator_orchestra.Record_Company)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.993690013885498,
            0.993690013885498,
            0.0002434920461382717,
            0.0002434920461382717,
            0.000600703526288271,
            0.000600703526288271,
            0.00043262611143290997,
            0.00043262611143290997
        ],
        "align_select": "select orchestra.Record_Company",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "gold_select": "select orchestra.Record_Company",
        "select_candidates": [
            "select orchestra.Record_Company",
            "select orchestra.Record_Company, orchestra.year_of_created",
            "select orchestra.Record_Company (orchestrated orchestra.year_of_created)",
            "select orchestra.Record_Company (ordered orchestra.year_of_created)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9941249489784241,
            0.00033858316601254046,
            0.0002614494296722114,
            9.454679093323648e-05,
            0.0006051299860700965,
            0.00016904172662179917,
            0.0024093070533126593,
            0.00024805410066619515
        ],
        "align_select": "select orchestra.Record_Company",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "gold_select": "select max(performance.portion), min(performance.portion)",
        "select_candidates": [
            "select max(performance.portion), min(performance.portion)",
            "select max(t2.c8), min(performance.portion)",
            "select max(t2.c7), min(performance.portion)",
            "select max(performance.portion ), min(performance.portion)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "performance",
        "table_candidates": [
            "performance"
        ],
        "align_scores": [
            0.9963955283164978,
            0.00011083966091973707,
            0.0003633402520790696,
            8.554123633075505e-05,
            0.00036775393527932465,
            8.678237645654008e-05,
            0.004113998729735613,
            0.0001005717713269405
        ],
        "align_select": "select max(performance.portion), min(performance.portion)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
        "gold_select": "select max(performance.portion), min(performance.portion)",
        "select_candidates": [
            "select max(performance.portion), min(performance.portion)",
            "select max(t2.c8), min(performance.portion)",
            "select max(t2.c7), min(performance.portion)",
            "select max(performance.portion ), min(performance.portion)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "performance",
        "table_candidates": [
            "performance"
        ],
        "align_scores": [
            0.9961062073707581,
            0.00011855235788971186,
            0.0003803048748522997,
            8.943765715230256e-05,
            0.0004021208733320236,
            9.122863411903381e-05,
            0.0033790618181228638,
            0.00011319464829284698
        ],
        "align_select": "select max(performance.portion), min(performance.portion)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List names of conductors in descending order of years of work.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.how_long_worked",
            "select conductor.Name, conductor.Nationality, conductor.how_long_worked",
            "select conductor.Name, conductor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9954786896705627,
            0.0002639062877278775,
            0.0002287983661517501,
            7.516637560911477e-05,
            0.00011274350981693715,
            9.038651478476822e-05,
            0.00016541696095373482,
            0.00013769848737865686
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.how_long_worked",
            "select conductor.Name, conductor.Nationality, conductor.how_long_worked",
            "select conductor.Name, conductor.Age, conductor.Nationality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9911822080612183,
            0.9911822080612183,
            0.00017385583487339318,
            0.00017385583487339318,
            0.00013516277249436826,
            0.00013516277249436826,
            0.0001628574973437935,
            0.0001628574973437935
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List the name of the conductor with the most years of work.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.Nationality, conductor.how_long_worked",
            "select conductor.Name, conductor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9834744334220886,
            6.62299498799257e-05,
            0.00027671450516209006,
            5.590139335254207e-05,
            0.0001438532635802403,
            5.2526647777995095e-05,
            0.00028782663866877556,
            5.905472062295303e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the conductor who has worked the greatest number of years?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.how_long_worked"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.930965781211853,
            7.122829265426844e-05,
            0.000353159848600626,
            5.9519621572690085e-05,
            0.0004319510771892965,
            6.303005648078397e-05,
            0.00033199251629412174,
            6.414265226339921e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Name (orchestrator_conductor.Age)",
            "select conductor.Name (orchestrator_conductor.Conductor_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9788501858711243,
            9.503453475190327e-05,
            0.00018300501687917858,
            7.193191413534805e-05,
            0.0006037818966433406,
            8.565175085095689e-05,
            0.0005469306488521397,
            7.629452738910913e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select distinct conductor.Name",
            "select conductor.Name, conductor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9868473410606384,
            0.00011097524111391976,
            0.00024056280381046236,
            6.85127088217996e-05,
            0.06415452063083649,
            0.00012368435272946954,
            0.00020516529912129045,
            6.767357263015583e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
        "gold_select": "select orchestra.Record_Company",
        "select_candidates": [
            "select orchestra.Record_Company",
            "select orchestra.Record_Company, orchestra.year_of_created",
            "select orchestra.Record_Company (symbol orchestra.Record_Company)",
            "select orchestra.Record_Company (orchestra.Record_Company)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9953004121780396,
            0.01195711549371481,
            0.00016040808986872435,
            0.00013649709580931813,
            0.00015009452181402594,
            8.330468699568883e-05,
            0.00017687275249045342,
            9.403948206454515e-05
        ],
        "align_select": "select orchestra.Record_Company",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
        "gold_select": "select orchestra.Record_Company",
        "select_candidates": [
            "select orchestra.Record_Company",
            "select orchestra.Record_Company, orchestra.year_of_created",
            "select orchestra.Record_Company (orchestrator-id: orchestra.Record_Company)",
            "select orchestra.Record_Company (orchestrator-id: orchestra.year_of_created)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9924154281616211,
            0.008304226212203503,
            0.00024123763432726264,
            0.00012879754649475217,
            0.0004759568255394697,
            0.0001390846009599045,
            0.0007798657170496881,
            0.00021910607756581157
        ],
        "align_select": "select orchestra.Record_Company",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show the years in which orchestras that have given more than one performance are founded.",
        "gold_select": "select orchestra.year_of_created",
        "select_candidates": [
            "select orchestra.year_of_created",
            "select orchestra.year_of_created (orchestrator_orchestra.year_of_created)",
            "select orchestra.year_of_created, orchestra.Major_Record_Format",
            "select orchestra.year_of_created (orchestrating_orchestra.year_of_created)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra performance",
        "table_candidates": [
            "orchestra performance",
            "orchestra"
        ],
        "align_scores": [
            0.7552487850189209,
            9.020637662615627e-05,
            0.0004361794563010335,
            6.926673813723028e-05,
            0.00019384668848942965,
            6.231247243704274e-05,
            0.00035166717134416103,
            7.07854560459964e-05
        ],
        "align_select": "select orchestra.year_of_created",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are years of founding for orchestras that have had more than a single performance?",
        "gold_select": "select orchestra.year_of_created",
        "select_candidates": [
            "select orchestra.year_of_created",
            "select orchestra.Orchestra_ID, orchestra.year_of_created",
            "select orchestra.year_of_created (orchestrator_orchestra.year_of_created)",
            "select orchestra.year_of_created, orchestra.Major_Record_Format"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra performance",
        "table_candidates": [
            "orchestra performance",
            "orchestra"
        ],
        "align_scores": [
            0.7686172723770142,
            0.0001092361708288081,
            0.0005276247975416481,
            7.151238241931424e-05,
            0.00040136033203452826,
            7.438762986566871e-05,
            0.00020134233636781573,
            6.783213029848412e-05
        ],
        "align_select": "select orchestra.year_of_created",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "gold_select": "select max(performance.Share), min(performance.Share)",
        "select_candidates": [
            "select max(performance.Share), min(performance.Share)",
            "select max(t2.c8), min(performance.Share)",
            "select max(t2.c7), min(performance.Share)",
            "select max(performance.Share ), min(performance.Share)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "performance",
        "table_candidates": [
            "performance"
        ],
        "align_scores": [
            0.9964653253555298,
            0.00011344988160999492,
            0.0003313165216241032,
            8.284165960503742e-05,
            0.0003354716463945806,
            8.330873970407993e-05,
            0.004223482217639685,
            0.00010122430103365332
        ],
        "align_select": "select max(performance.Share), min(performance.Share)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
        "gold_select": "select max(performance.Share), min(performance.Share)",
        "select_candidates": [
            "select max(performance.Share), min(performance.Share)",
            "select max(t2.c8), min(performance.Share)",
            "select max(t2.c7), min(performance.Share)",
            "select max(performance.Share ), min(performance.Share)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "performance",
        "table_candidates": [
            "performance"
        ],
        "align_scores": [
            0.9960416555404663,
            0.00012017451808787882,
            0.0003626073303166777,
            8.931074989959598e-05,
            0.0003763929125852883,
            8.962881111074239e-05,
            0.0034888244699686766,
            0.00011250315583311021
        ],
        "align_select": "select max(performance.Share), min(performance.Share)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of conductors whose nationalities are not \"USA\"?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.ethnic_group",
            "select conductor.Name, conductor.Age",
            "select conductor.Conductor_ID, conductor.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor",
            "conductor orchestra"
        ],
        "align_scores": [
            0.9950769543647766,
            0.00017500312242191285,
            0.00014119051047600806,
            6.313779158517718e-05,
            0.00014345710224006325,
            6.744956772308797e-05,
            0.00018391586490906775,
            7.27299484424293e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the names of conductors that do not have the nationality \"USA\".",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.ethnic_group",
            "select conductor.Name, conductor.Age",
            "select conductor.Conductor_ID, conductor.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor",
            "conductor orchestra",
            "conductor performance"
        ],
        "align_scores": [
            0.9947819113731384,
            0.0002504655276425183,
            0.0001380862231599167,
            8.098409307422116e-05,
            0.00014451374590862542,
            8.53460151120089e-05,
            0.0001353474654024467,
            8.511437772540376e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "gold_select": "select orchestra.recorded_by",
        "select_candidates": [
            "select orchestra.recorded_by",
            "select orchestra.recorded_by, orchestra.Year_of_Founded",
            "select orchestra.recorded_by (orchestrated orchestra.Year_of_Founded)",
            "select orchestra.recorded_by (orchestrated_by-ORDER BY"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra",
            "orchestra performance",
            "orchestra show",
            "orchestra performance show"
        ],
        "align_scores": [
            0.9928240776062012,
            0.9928240776062012,
            0.00025802067830227315,
            0.00025802067830227315,
            0.0007847557426430285,
            0.0007847557426430285,
            0.0006980960024520755,
            0.0006980960024520755
        ],
        "align_select": "select orchestra.recorded_by",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "gold_select": "select orchestra.recorded_by",
        "select_candidates": [
            "select orchestra.recorded_by",
            "select orchestra.recorded_by (orchestrated orchestra.Year_of_Founded)",
            "select orchestra.recorded_by, orchestra.Year_of_Founded",
            "select orchestra.recorded_by (orchestrated orchestra.recorded_by)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra",
            "orchestra show",
            "orchestra performance",
            "orchestra performance show"
        ],
        "align_scores": [
            0.9943687319755554,
            0.9943687319755554,
            0.0006436205003410578,
            0.0006436205003410578,
            0.0003338973328936845,
            0.0003338973328936845,
            0.00023540343681816012,
            0.00023540343681816012
        ],
        "align_select": "select orchestra.recorded_by",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What is the average attendance of shows?",
        "gold_select": "select avg(show.audience_number)",
        "select_candidates": [
            "select avg(show.audience_number)",
            "select an avg(show.audience_number)",
            "select the avg(show.audience_number)",
            "select  avg(show.audience_number)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "show",
        "table_candidates": [
            "show"
        ],
        "align_scores": [
            0.9959164261817932,
            5.251642505754717e-05,
            0.00044778280425816774,
            8.123360748868436e-05,
            0.00046787585597485304,
            9.216731268679723e-05,
            0.9959164261817932,
            5.251642505754717e-05
        ],
        "align_select": "select avg(show.audience_number)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Return the average attendance across all shows.",
        "gold_select": "select avg(show.audience_number)",
        "select_candidates": [
            "select avg(show.audience_number)",
            "select an avg(show.audience_number)",
            "select the avg(show.audience_number)",
            "select  avg(show.audience_number)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "show",
        "table_candidates": [
            "show"
        ],
        "align_scores": [
            0.9968379735946655,
            6.393270450644195e-05,
            0.0003543885250110179,
            9.863501327345148e-05,
            0.00035751095856539905,
            0.000113858470285777,
            0.9968379735946655,
            6.393270450644195e-05
        ],
        "align_select": "select avg(show.audience_number)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "gold_select": "select max(performance.Share), min(performance.Share)",
        "select_candidates": [
            "select max(performance.Share), min(performance.Share)",
            "select max(t2.c8), min(performance.Share)",
            "select max(t2.c7), min(performance.Share)",
            "select max(performance.Share ), min(performance.Share)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "performance",
        "table_candidates": [
            "performance"
        ],
        "align_scores": [
            0.9964653253555298,
            0.00011344988160999492,
            0.0003313165216241032,
            8.284165960503742e-05,
            0.0003354716463945806,
            8.330873970407993e-05,
            0.004223482217639685,
            0.00010122430103365332
        ],
        "align_select": "select max(performance.Share), min(performance.Share)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
        "gold_select": "select max(performance.Share), min(performance.Share)",
        "select_candidates": [
            "select max(performance.Share), min(performance.Share)",
            "select max(t2.c8), min(performance.Share)",
            "select max(t2.c7), min(performance.Share)",
            "select max(performance.Share ), min(performance.Share)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "performance",
        "table_candidates": [
            "performance"
        ],
        "align_scores": [
            0.9960416555404663,
            0.00012017451808787882,
            0.0003626073303166777,
            8.931074989959598e-05,
            0.0003763929125852883,
            8.962881111074239e-05,
            0.0034888244699686766,
            0.00011250315583311021
        ],
        "align_select": "select max(performance.Share), min(performance.Share)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many different nationalities do conductors have?",
        "gold_select": "select count(distinct conductor.ethnic_group)",
        "select_candidates": [
            "select count(distinct conductor.ethnic_group)",
            "select count(distinct conductor.Age)",
            "select count(distinct conductor.Name)",
            "select count(distinct conductor.Year_of_Work)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.012122933752834797,
            0.012122933752834797,
            0.0008457929361611605,
            0.0008457929361611605,
            0.0009559395257383585,
            0.0009559395257383585,
            0.0003966786025557667,
            0.0003966786025557667
        ],
        "align_select": "select count(distinct conductor.ethnic_group)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Count the number of different nationalities of conductors.",
        "gold_select": "select count(distinct conductor.ethnic_group)",
        "select_candidates": [
            "select count(distinct conductor.ethnic_group)",
            "select count(distinct conductor.Age)",
            "select count(distinct conductor.Name)",
            "select count(distinct conductor.Year_of_Work)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.08866165578365326,
            0.08866165578365326,
            0.0005902315024286509,
            0.0005902315024286509,
            0.0007900680648162961,
            0.0007900680648162961,
            0.00023671085364185274,
            0.00023671085364185274
        ],
        "align_select": "select count(distinct conductor.ethnic_group)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please show the different record companies and the corresponding number of orchestras.",
        "gold_select": "select orchestra.recorded_by, count(*)",
        "select_candidates": [
            "select orchestra.recorded_by, count(*)",
            "select orchestra.recorded_by.c3, count(*)",
            "select orchestra.Orchestra, count(*)",
            "select orchestra.recorded_by, count(**)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9962050318717957,
            0.00045483268331736326,
            0.0004024921217933297,
            0.00038217767723836005,
            0.012884515337646008,
            0.00020060707174707204,
            0.9954763054847717,
            0.0004516573389992118
        ],
        "align_select": "select orchestra.recorded_by, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How many orchestras does each record company manage?",
        "gold_select": "select orchestra.recorded_by, count(*)",
        "select_candidates": [
            "select orchestra.recorded_by, count(*)",
            "select count(*), orchestra.recorded_by",
            "select orchestra.Orchestra, count(*)",
            "select orchestra.Major_Record_Format, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9670570492744446,
            0.00023922660329844803,
            0.9031561017036438,
            0.00021425308659672737,
            0.3381219506263733,
            0.00017085339641198516,
            0.001671157544478774,
            0.000237123531405814
        ],
        "align_select": "select orchestra.recorded_by, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "List the record company shared by the most number of orchestras.",
        "gold_select": "select orchestra.recorded_by",
        "select_candidates": [
            "select orchestra.recorded_by",
            "select orchestra.recorded_by, orchestra.Major_Record_Format",
            "select orchestra.recorded_by, orchestra.Year_of_Founded",
            "select orchestra.recorded_by, t1.c6"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9949848651885986,
            8.268649253295735e-05,
            0.00017989227490033954,
            5.43979367648717e-05,
            0.00041711371159181,
            5.48998978047166e-05,
            0.0004921752843074501,
            5.8682242524810135e-05
        ],
        "align_select": "select orchestra.recorded_by",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the record company used by the greatest number of orchestras?",
        "gold_select": "select orchestra.recorded_by",
        "select_candidates": [
            "select orchestra.recorded_by",
            "select orchestra.recorded_by, orchestra.Major_Record_Format",
            "select orchestra.recorded_by, orchestra.Year_of_Founded",
            "select orchestra.recorded_by (orchestra.Major_Record_Format)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9950054287910461,
            7.420322071993724e-05,
            0.000198117719264701,
            5.5014039389789104e-05,
            0.00022171699674800038,
            5.250461617833935e-05,
            0.0003572555724531412,
            5.444360795081593e-05
        ],
        "align_select": "select orchestra.recorded_by",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
        "gold_select": "select orchestra.recorded_by",
        "select_candidates": [
            "select orchestra.recorded_by",
            "select orchestra.recorded_by, orchestra.Year_of_Founded",
            "select orchestra.recorded_by, orchestra.Major_Record_Format",
            "select orchestra.recorded_by, orchestra.Conductor_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra",
            "orchestra performance",
            "orchestra show"
        ],
        "align_scores": [
            0.9952486157417297,
            0.01667143404483795,
            0.0001819756143959239,
            0.00016000329924281687,
            0.000122837649541907,
            8.885940769687295e-05,
            9.236191544914618e-05,
            7.358271250268444e-05
        ],
        "align_select": "select orchestra.recorded_by",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
        "gold_select": "select orchestra.recorded_by",
        "select_candidates": [
            "select orchestra.recorded_by",
            "select orchestra.recorded_by, orchestra.Major_Record_Format",
            "select orchestra.recorded_by, orchestra.Year_of_Founded",
            "select orchestra.recorded_by, orchestra.Major_Record_Format"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9932536482810974,
            0.01975882612168789,
            0.00020526821026578546,
            9.38041994231753e-05,
            0.00022556359181180596,
            0.00014739549078512937,
            0.00020526821026578546,
            9.38041994231753e-05
        ],
        "align_select": "select orchestra.recorded_by",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "gold_select": "select max(performance.portion), min(performance.portion)",
        "select_candidates": [
            "select max(performance.portion), min(performance.portion)",
            "select max(t2.c8), min(performance.portion)",
            "select max(t2.c7), min(performance.portion)",
            "select max(performance.portion ), min(performance.portion)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "performance",
        "table_candidates": [
            "performance"
        ],
        "align_scores": [
            0.9963955283164978,
            0.00011083966091973707,
            0.0003633402520790696,
            8.554123633075505e-05,
            0.00036775393527932465,
            8.678237645654008e-05,
            0.004113998729735613,
            0.0001005717713269405
        ],
        "align_select": "select max(performance.portion), min(performance.portion)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
        "gold_select": "select max(performance.portion), min(performance.portion)",
        "select_candidates": [
            "select max(performance.portion), min(performance.portion)",
            "select max(t2.c8), min(performance.portion)",
            "select max(t2.c7), min(performance.portion)",
            "select max(performance.portion ), min(performance.portion)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "performance",
        "table_candidates": [
            "performance"
        ],
        "align_scores": [
            0.9961062073707581,
            0.00011855235788971186,
            0.0003803048748522997,
            8.943765715230256e-05,
            0.0004021208733320236,
            9.122863411903381e-05,
            0.0033790618181228638,
            0.00011319464829284698
        ],
        "align_select": "select max(performance.portion), min(performance.portion)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List names of conductors in descending order of years of work.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Age",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Name, conductor.practition_length"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9954786896705627,
            0.0002639062877278775,
            0.00016541696095373482,
            0.00013769848737865686,
            0.0001516344491392374,
            9.883886377792805e-05,
            0.0002322258078493178,
            8.421387610724196e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Age",
            "select conductor.Name (ordered conductor.Age)",
            "select conductor.Name, conductor.Age, conductor.practition_length"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9911822080612183,
            0.9911822080612183,
            0.00015837700630072504,
            0.00015837700630072504,
            0.0018590965773910284,
            0.0018590965773910284,
            0.00012484750186558813,
            0.00012484750186558813
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List the name of the conductor with the most years of work.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.practition_length"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9834744334220886,
            0.9945269227027893,
            0.00028782663866877556,
            0.0004869985277764499,
            0.00027671450516209006,
            0.0003542371850926429,
            0.0005797523190267384,
            0.00058688287390396
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the conductor who has worked the greatest number of years?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.practition_length"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor",
            "conductor orchestra",
            "conductor orchestra performance"
        ],
        "align_scores": [
            0.930965781211853,
            7.122829265426844e-05,
            0.0004319510771892965,
            6.303005648078397e-05,
            0.000353159848600626,
            5.9519621572690085e-05,
            0.0007236130768433213,
            6.694410694763064e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Please show the record formats of orchestras in ascending order of count.",
        "gold_select": "select orchestra.main_format",
        "select_candidates": [
            "select orchestra.main_format",
            "select orchestra.main_format, count(*)",
            "select orchestra.main_format (orchestrated by count(*)",
            "select count(*), orchestra.main_format"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY",
            "SELECT-FROM-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.418622761964798,
            0.0003379799018148333,
            0.0006351866759359837,
            0.00016938781482167542,
            0.0004726710612885654,
            0.00011855033517349511,
            0.00035025225952267647,
            0.0001556225324748084
        ],
        "align_select": "select orchestra.main_format",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY"
    },
    {
        "question": "What are the major record formats of orchestras, sorted by their frequency?",
        "gold_select": "select orchestra.main_format",
        "select_candidates": [
            "select orchestra.main_format",
            "select orchestra.main_format, t1.c6",
            "select orchestra.main_format, orchestra.Record_Company",
            "select orchestra.main_format, t1.c7"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9941539168357849,
            0.0011640670709311962,
            0.0003063374024350196,
            0.0001834256836446002,
            0.00014366218238137662,
            0.00011494971113279462,
            0.0003028901992365718,
            0.0001795344869606197
        ],
        "align_select": "select orchestra.main_format",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY"
    },
    {
        "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), orchestra.main_format",
            "select count(*), orchestra.Orchestra_ID",
            "select count(*), orchestra.Orchestra"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9936802387237549,
            7.778301369398832e-05,
            0.00035453756572678685,
            6.47524357191287e-05,
            0.0001787168876035139,
            7.113299943739548e-05,
            0.0002745538658928126,
            6.645738176302984e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count the number of orchestras that have CD or DVD as their record format.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), orchestra.main_format",
            "select count(*), orchestra.main_format, t1.c6",
            "select count(*), orchestra.main_format, t1.c6"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9912707805633545,
            0.007571327034384012,
            0.00032620993442833424,
            0.5393157601356506,
            0.0002079425466945395,
            9.435377432964742e-05,
            0.0002079425466945395,
            9.435377432964742e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the names and grades of each high schooler.",
        "gold_select": "select Highschooler.name, Highschooler.school_level",
        "select_candidates": [
            "select Highschooler.name, Highschooler.school_level",
            "select Highschooler.ID, Highschooler.name, Highschooler.school_level",
            "select Highschooler.name, Highschooler.school_level, Highschooler.ID",
            "select distinct Highschooler.name, Highschooler.school_level"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.041618462651968,
            9.255528129870072e-05,
            0.00025439809542149305,
            8.466059080092236e-05,
            0.00027815080829896033,
            8.797613554634154e-05,
            0.0009270802256651223,
            0.00010892661521211267
        ],
        "align_select": "select Highschooler.name, Highschooler.school_level",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the names and grades for each high schooler?",
        "gold_select": "select Highschooler.name, Highschooler.school_level",
        "select_candidates": [
            "select Highschooler.name, Highschooler.school_level",
            "select distinct Highschooler.name, Highschooler.school_level",
            "select Highschooler.ID, Highschooler.name, Highschooler.school_level",
            "select Highschooler.name, Highschooler.school_level, Highschooler.ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.0090944217517972,
            0.00014170548820402473,
            0.0015190215781331062,
            0.00011486697621876374,
            0.0002881690161302686,
            0.00010129748261533678,
            0.0003691404708661139,
            0.00010578868386801332
        ],
        "align_select": "select Highschooler.name, Highschooler.school_level",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show all the grades of the high schoolers.",
        "gold_select": "select Highschooler.school_level",
        "select_candidates": [
            "select distinct Highschooler.school_level",
            "select distinct Highschooler.name, Highschooler.school_level",
            "select distinct Highschooler.school_level, t0.c3",
            "select distinct Highschooler.school_level, Highschooler.name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.12913961708545685,
            0.7618952989578247,
            0.00015560472093056887,
            0.00013911192945670336,
            0.00032447295961901546,
            0.0002445294230710715,
            0.00011611869558691978,
            0.00011587337212404236
        ],
        "align_select": "select distinct Highschooler.school_level",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the grade of each high schooler?",
        "gold_select": "select Highschooler.school_level",
        "select_candidates": [
            "select Highschooler.school_level",
            "select distinct Highschooler.school_level",
            "select Highschooler.name, Highschooler.school_level",
            "select Highschooler.ID, Highschooler.school_level"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.01773943193256855,
            0.42461827397346497,
            0.011204509995877743,
            0.005424061790108681,
            0.00022801417799200863,
            0.0001541424571769312,
            0.00022109340352471918,
            0.0001570590102346614
        ],
        "align_select": "select Highschooler.school_level",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What grade is Kyle in?",
        "gold_select": "select Highschooler.school_level",
        "select_candidates": [
            "select Highschooler.school_level",
            "select distinct Highschooler.school_level",
            "select Highschooler.name, Highschooler.school_level",
            "select Highschooler.school_level, Highschooler.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.3144412934780121,
            0.00010214497160632163,
            0.011619173921644688,
            0.00017207876953762025,
            0.00017769649275578558,
            6.363101419992745e-05,
            0.0001373845007037744,
            5.9457899624248967e-05
        ],
        "align_select": "select Highschooler.school_level",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the grade for the high schooler named Kyle.",
        "gold_select": "select Highschooler.school_level",
        "select_candidates": [
            "select Highschooler.school_level",
            "select Highschooler.ID, Highschooler.school_level",
            "select Highschooler.name, Highschooler.school_level",
            "select Highschooler.ID, Highschooler.name, Highschooler.school_level"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.970761775970459,
            7.027899846434593e-05,
            0.00020485252025537193,
            6.811961793573573e-05,
            0.00019215530483052135,
            7.209218892967328e-05,
            0.0001414894504705444,
            6.966445653233677e-05
        ],
        "align_select": "select Highschooler.school_level",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the names of all high schoolers in grade 10.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.school_level",
            "select distinct Highschooler.name",
            "select distinct Highschooler.name, Highschooler.school_level"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9812538027763367,
            9.16907811188139e-05,
            0.0001484741660533473,
            5.931258056079969e-05,
            0.02534715086221695,
            8.786639955360442e-05,
            0.00013923508231528103,
            6.515994755318388e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of all high schoolers in grade 10?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.school_level",
            "select distinct Highschooler.name",
            "select distinct Highschooler.name, Highschooler.school_level"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9809210300445557,
            0.00013870740076527,
            0.00017168234626296908,
            5.8739682572195306e-05,
            0.07494764775037766,
            0.00021677231416106224,
            0.00014188504428602755,
            6.252734601730481e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many high schoolers are there in grade 9 or 10?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Highschooler.school_level",
            "select count(*), t0.c9, Highschooler.name0",
            "select count(*), Highschooler.ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9934023022651672,
            9.339745156466961e-05,
            0.0002451394102536142,
            7.856739830458537e-05,
            0.00015930422523524612,
            5.984767994959839e-05,
            0.0004054419987369329,
            8.385279215872288e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count the number of high schoolers in grades 9 or 10.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Highschooler.school_level",
            "select count(*), Highschooler.ID",
            "select count(*), database: Highschooler.school_level"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9937055706977844,
            0.00020330733968876302,
            0.00025900735636241734,
            0.0021550024393945932,
            0.0003000849101226777,
            0.0011235852725803852,
            0.00024244286760222167,
            0.00027724297251552343
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of high schoolers for each grade.",
        "gold_select": "select Highschooler.school_level, count(*)",
        "select_candidates": [
            "select Highschooler.school_level, count(*)",
            "select highschooler Highschooler.school_level, count(*)",
            "select count(*), Highschooler.school_level",
            "select Highschooler.school_level, count(*), Highschooler.ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.4214356541633606,
            0.0001717655104584992,
            0.00045689305989071727,
            0.0001320397132076323,
            0.03808434307575226,
            0.00017513199418317527,
            0.00015138972958084196,
            0.00010810170351760462
        ],
        "align_select": "select Highschooler.school_level, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How many high schoolers are in each grade?",
        "gold_select": "select Highschooler.school_level, count(*)",
        "select_candidates": [
            "select Highschooler.school_level, count(*)",
            "select count(*), Highschooler.school_level",
            "select distinct Highschooler.school_level, count(*)",
            "select highschooler_Highschooler.school_level, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.16896608471870422,
            0.00022193400945980102,
            0.02748279832303524,
            0.00020837722695432603,
            0.0003201196959707886,
            0.00011560893472051248,
            0.00030183716444298625,
            0.0001274585083592683
        ],
        "align_select": "select Highschooler.school_level, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Which grade has the most high schoolers?",
        "gold_select": "select Highschooler.school_level",
        "select_candidates": [
            "select Highschooler.school_level",
            "select Highschooler.school_level, Highschooler.name",
            "select Highschooler.ID, Highschooler.school_level",
            "select Highschooler.name, Highschooler.school_level"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler",
            "Highschooler Friend"
        ],
        "align_scores": [
            0.4799291491508484,
            9.589389082975686e-05,
            0.00020064650743734092,
            5.899420284549706e-05,
            0.00029953295597806573,
            6.100507016526535e-05,
            0.00029203720623627305,
            6.059764200472273e-05
        ],
        "align_select": "select Highschooler.school_level",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Return the grade that has the greatest number of high schoolers.",
        "gold_select": "select Highschooler.school_level",
        "select_candidates": [
            "select Highschooler.school_level",
            "select Highschooler.school_level, t0.c3",
            "select Highschooler.school_level, Highschooler.name",
            "select Highschooler.ID, Highschooler.school_level"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9472081661224365,
            6.015000690240413e-05,
            0.00041437929030507803,
            6.929844676051289e-05,
            0.00019887056259904057,
            5.2644896641140804e-05,
            0.00023246572527568787,
            5.8832014474319294e-05
        ],
        "align_select": "select Highschooler.school_level",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me all grades that have at least 4 students.",
        "gold_select": "select Highschooler.school_level",
        "select_candidates": [
            "select Highschooler.school_level",
            "select Highschooler.school_level, max(Highschooler.ID)",
            "select Highschooler.school_level, count(*)",
            "select Highschooler.name, Highschooler.school_level"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler",
            "Highschooler Friend",
            "Highschooler Likes"
        ],
        "align_scores": [
            0.8913898468017578,
            0.00011939711112063378,
            0.00017431663582101464,
            5.797538688057102e-05,
            0.0014746631495654583,
            8.125002204906195e-05,
            0.00023011892335489392,
            7.417746382998303e-05
        ],
        "align_select": "select Highschooler.school_level",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which grades have 4 or more high schoolers?",
        "gold_select": "select Highschooler.school_level",
        "select_candidates": [
            "select Highschooler.school_level",
            "select Highschooler.school_level, Highschooler.name",
            "select Highschooler.school_level, max(Highschooler.ID)",
            "select Highschooler.school_level, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9754003882408142,
            0.00016920363123062998,
            0.0002688050444703549,
            8.688902744324878e-05,
            0.00021684489911422133,
            6.934154953341931e-05,
            0.011675642803311348,
            9.086164936888963e-05
        ],
        "align_select": "select Highschooler.school_level",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.school_level",
            "select Highschooler.name, Friend.friend_id",
            "select Highschooler.name, Friend.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.17595355212688446,
            0.09194862097501755,
            0.0003144092042930424,
            0.00018748735601548105,
            0.0004902424989268184,
            0.000229931203648448,
            0.0012079478474333882,
            0.0005171310622245073
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.school_level",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Friend.friend_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.06089133396744728,
            0.07147642970085144,
            0.0002518164983484894,
            0.0001843693753471598,
            0.00025857676519080997,
            0.00021007267059758306,
            0.0003665871045086533,
            0.00023335267906077206
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the average grade of all students who have some friends.",
        "gold_select": "select avg(Highschooler.school_level)",
        "select_candidates": [
            "select avg(Highschooler.school_level)",
            "select avg(t0.c4)",
            "select an avg(Highschooler.school_level)",
            "select avg(t0.c3)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.7290470004081726,
            0.011778642423450947,
            0.0012089447118341923,
            0.00038888235576450825,
            0.0004961686208844185,
            0.0005170282674953341,
            0.0014884185511618853,
            0.00041936838533729315
        ],
        "align_select": "select avg(Highschooler.school_level)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average grade of students who have friends?",
        "gold_select": "select avg(Highschooler.school_level)",
        "select_candidates": [
            "select avg(Highschooler.school_level)",
            "select an avg(Highschooler.school_level)",
            "select avg(t0-Highschooler.school_level)",
            "select avg(Highschooler.name)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9775797724723816,
            0.006374714896082878,
            0.0004684274608734995,
            0.00043210946023464203,
            0.0007448142278008163,
            0.0004202666168566793,
            0.0010803434997797012,
            0.00022920536866877228
        ],
        "align_select": "select avg(Highschooler.school_level)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the minimum grade of students who have no friends.",
        "gold_select": "select min(Highschooler.school_level)",
        "select_candidates": [
            "select min(Highschooler.school_level)",
            "select min(Highschooler.school_level), Highschooler.name",
            "select min(Highschooler.school_level), Highschooler.ID",
            "select min(Highschooler.school_level), t0.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes",
            "Highschooler"
        ],
        "align_scores": [
            0.9907069206237793,
            0.1642647236585617,
            0.0002200272137997672,
            0.0003462822933215648,
            0.00022257566160988063,
            0.00039193828706629574,
            0.0003265578125137836,
            0.00013235158985480666
        ],
        "align_select": "select min(Highschooler.school_level)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the lowest grade of students who do not have any friends?",
        "gold_select": "select min(Highschooler.school_level)",
        "select_candidates": [
            "select min(Highschooler.school_level)",
            "select min(Highschooler.school_level), Highschooler.name",
            "select min(Highschooler.school_level), Highschooler.ID",
            "select min(Highschooler.school_level), t0.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9833980798721313,
            0.04633718356490135,
            0.00016264719306491315,
            0.00019968800188507885,
            0.00015758449444547296,
            0.0001620033144718036,
            0.00037516900920309126,
            0.00012368906755000353
        ],
        "align_select": "select min(Highschooler.school_level)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the names and grades of each high schooler.",
        "gold_select": "select Highschooler.name, Highschooler.level",
        "select_candidates": [
            "select Highschooler.name, Highschooler.level",
            "select Highschooler.ID, Highschooler.name, Highschooler.level",
            "select distinct Highschooler.name, Highschooler.level",
            "select Highschooler.name, Highschooler.level, Highschooler.ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9915659427642822,
            8.804369281278923e-05,
            0.00028349252534098923,
            8.385677938349545e-05,
            0.0030956107657402754,
            8.903948037186638e-05,
            0.0002854828198906034,
            7.870883564464748e-05
        ],
        "align_select": "select Highschooler.name, Highschooler.level",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the names and grades for each high schooler?",
        "gold_select": "select Highschooler.name, Highschooler.level",
        "select_candidates": [
            "select Highschooler.name, Highschooler.level",
            "select distinct Highschooler.name, Highschooler.level",
            "select Highschooler.ID, Highschooler.name, Highschooler.level",
            "select Highschooler.name, Highschooler.level, Highschooler.ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.991617739200592,
            0.0001363762276014313,
            0.007466061972081661,
            0.00010060496424557641,
            0.00031506153754889965,
            0.00010064238449558616,
            0.00028343117446638644,
            9.170897101284936e-05
        ],
        "align_select": "select Highschooler.name, Highschooler.level",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show all the grades of the high schoolers.",
        "gold_select": "select Highschooler.level",
        "select_candidates": [
            "select distinct Highschooler.level",
            "select distinct Highschooler.name, Highschooler.level",
            "select distinct Highschooler.level, t0.c3",
            "select distinct Highschooler.level, Highschooler.name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.98504239320755,
            0.00019811261154245585,
            0.00020513791241683066,
            8.862998947734013e-05,
            0.000324465858284384,
            0.0001305828773183748,
            0.00011708380043273792,
            7.836536678951234e-05
        ],
        "align_select": "select distinct Highschooler.level",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the grade of each high schooler?",
        "gold_select": "select Highschooler.level",
        "select_candidates": [
            "select distinct Highschooler.level",
            "select Highschooler.level",
            "select Highschooler.name, Highschooler.level",
            "select distinct Highschooler.level, Highschooler.name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.33364740014076233,
            0.00010442162601975724,
            0.9450843334197998,
            8.116274693747982e-05,
            0.0001727329072309658,
            7.477924373233691e-05,
            0.00011018871737178415,
            6.320441752905026e-05
        ],
        "align_select": "select Highschooler.level",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What grade is Kyle in?",
        "gold_select": "select Highschooler.level",
        "select_candidates": [
            "select Highschooler.level",
            "select distinct Highschooler.level",
            "select Highschooler.name, Highschooler.level",
            "select Highschooler.ID, Highschooler.level"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9803662896156311,
            9.002609294839203e-05,
            0.05892594903707504,
            0.0002695685834623873,
            0.0001710129581624642,
            6.361638952512294e-05,
            0.00020386153482832015,
            6.819409463787451e-05
        ],
        "align_select": "select Highschooler.level",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the grade for the high schooler named Kyle.",
        "gold_select": "select Highschooler.level",
        "select_candidates": [
            "select Highschooler.level",
            "select Highschooler.ID, Highschooler.level",
            "select Highschooler.name, Highschooler.level",
            "select Highschooler.ID, Highschooler.name, Highschooler.level"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9760435223579407,
            6.8225126597099e-05,
            0.0002719564363360405,
            7.4106763349846e-05,
            0.000204241689061746,
            7.776506390655413e-05,
            0.0001635959924897179,
            7.51382831367664e-05
        ],
        "align_select": "select Highschooler.level",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the names of all high schoolers in grade 10.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.level",
            "select distinct Highschooler.name",
            "select distinct Highschooler.name, Highschooler.level"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9812538027763367,
            9.16907811188139e-05,
            0.00021721940720453858,
            6.117010343587026e-05,
            0.02534715086221695,
            8.786639955360442e-05,
            0.00016169558512046933,
            6.098000085330568e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of all high schoolers in grade 10?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.level",
            "select distinct Highschooler.name",
            "select distinct Highschooler.name, Highschooler.level"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9809210300445557,
            0.00013870740076527,
            0.000241317437030375,
            6.106351065682247e-05,
            0.07494764775037766,
            0.00021677231416106224,
            0.00013881536142434925,
            5.855624476680532e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many high schoolers are there in grade 9 or 10?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Highschooler.level",
            "select count(*), t0.c9, Highschooler.name0",
            "select count(*), Highschooler.ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9934023022651672,
            9.339745156466961e-05,
            0.00032911504968069494,
            6.825941818533465e-05,
            0.00015930422523524612,
            5.984767994959839e-05,
            0.0004054419987369329,
            8.385279215872288e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count the number of high schoolers in grades 9 or 10.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Highschooler.level",
            "select count(*), Highschooler.ID",
            "select count(*), database: Highschooler.level"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9937055706977844,
            0.00020330733968876302,
            0.00030858631362207234,
            0.008432738482952118,
            0.0003000849101226777,
            0.0011235852725803852,
            0.00027326925192028284,
            0.00033373787300661206
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of high schoolers for each grade.",
        "gold_select": "select Highschooler.level, count(*)",
        "select_candidates": [
            "select Highschooler.level, count(*)",
            "select highschooler Highschooler.level, count(*)",
            "select highschooler, Highschooler.level, count(*)",
            "select count(*), Highschooler.level"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9923742413520813,
            0.000161657968419604,
            0.0007529634749516845,
            0.00012307330325711519,
            0.0006500890594907105,
            0.00011077584349550307,
            0.9951635599136353,
            0.00018739532970357686
        ],
        "align_select": "select Highschooler.level, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How many high schoolers are in each grade?",
        "gold_select": "select Highschooler.level, count(*)",
        "select_candidates": [
            "select Highschooler.level, count(*)",
            "select count(*), Highschooler.level",
            "select distinct Highschooler.level, count(*)",
            "select sum(Highschooler.level), Highschooler.name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9841448068618774,
            0.00021679031488019973,
            0.99176424741745,
            0.0002585526090115309,
            0.0005193633260205388,
            0.00012445550237316638,
            0.00018638528126757592,
            0.0001545109407743439
        ],
        "align_select": "select Highschooler.level, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Which grade has the most high schoolers?",
        "gold_select": "select Highschooler.level",
        "select_candidates": [
            "select Highschooler.level",
            "select Highschooler.level, Highschooler.name",
            "select Highschooler.name, Highschooler.level",
            "select Highschooler.level, t0.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler",
            "Highschooler Friend"
        ],
        "align_scores": [
            0.9937337040901184,
            7.919073686935008e-05,
            0.00022308769985102117,
            5.733727084589191e-05,
            0.0002496615925338119,
            5.9298785345163196e-05,
            0.0004247307369951159,
            6.067876529414207e-05
        ],
        "align_select": "select Highschooler.level",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Return the grade that has the greatest number of high schoolers.",
        "gold_select": "select Highschooler.level",
        "select_candidates": [
            "select Highschooler.level",
            "select Highschooler.level, Highschooler.name",
            "select Highschooler.level, t0.c3",
            "select Highschooler.ID, Highschooler.level"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9921271800994873,
            5.478933235281147e-05,
            0.00018588478269521147,
            5.546063039219007e-05,
            0.000383076403522864,
            6.427649350371212e-05,
            0.00019389676162973046,
            6.197917537065223e-05
        ],
        "align_select": "select Highschooler.level",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me all grades that have at least 4 students.",
        "gold_select": "select Highschooler.level",
        "select_candidates": [
            "select Highschooler.level",
            "select Highschooler.name, Highschooler.level",
            "select Highschooler.level, count(*)",
            "select Highschooler.level, t0.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler",
            "Highschooler Friend"
        ],
        "align_scores": [
            0.9860715270042419,
            0.0001067872071871534,
            0.00017956047668121755,
            6.872366793686524e-05,
            0.0027454488445073366,
            8.133739174809307e-05,
            0.0004067756235599518,
            6.084193228161894e-05
        ],
        "align_select": "select Highschooler.level",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which grades have 4 or more high schoolers?",
        "gold_select": "select Highschooler.level",
        "select_candidates": [
            "select Highschooler.level",
            "select Highschooler.level, count(*)",
            "select Highschooler.level, Highschooler.name",
            "select Highschooler.level, max(Highschooler.ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler",
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9855920076370239,
            0.0001241051941178739,
            0.005322167184203863,
            8.072241325862706e-05,
            0.0001816392905311659,
            7.266990724019706e-05,
            0.00015902239829301834,
            5.870429959031753e-05
        ],
        "align_select": "select Highschooler.level",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.level",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, t0.c5"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.17595355212688446,
            0.09194862097501755,
            0.0005498396349139512,
            0.00024803681299090385,
            0.00030315687763504684,
            0.00021120601741131395,
            0.0003026258491445333,
            0.00012904869799967855
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.level",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, t0.c5"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.06089133396744728,
            0.07147642970085144,
            0.0004203321586828679,
            0.00023940682876855135,
            0.00025857676519080997,
            0.00021007267059758306,
            0.0002712009008973837,
            0.00014842265227343887
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the average grade of all students who have some friends.",
        "gold_select": "select avg(Highschooler.level)",
        "select_candidates": [
            "select avg(Highschooler.level)",
            "select an avg(Highschooler.level)",
            "select avg(t0-Highschooler.level)",
            "select avg(t0.c4)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9141345620155334,
            0.01044390443712473,
            0.000621114217210561,
            0.0006529262755066156,
            0.0014115954982116818,
            0.0013763634487986565,
            0.0012089447118341923,
            0.00038888235576450825
        ],
        "align_select": "select avg(Highschooler.level)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average grade of students who have friends?",
        "gold_select": "select avg(Highschooler.level)",
        "select_candidates": [
            "select avg(Highschooler.level)",
            "select an avg(Highschooler.level)",
            "select avg(t0-Highschooler.level)",
            "select avg(Highschooler.name)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.984880805015564,
            0.008913313038647175,
            0.000523596943821758,
            0.0006159554468467832,
            0.001263143727555871,
            0.0009876611875370145,
            0.0010803434997797012,
            0.00022920536866877228
        ],
        "align_select": "select avg(Highschooler.level)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the minimum grade of students who have no friends.",
        "gold_select": "select min(Highschooler.level)",
        "select_candidates": [
            "select min(Highschooler.level)",
            "select min(Highschooler.level), Highschooler.name",
            "select min(Highschooler.level), Highschooler.ID",
            "select min(Highschooler.level), t0.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9893864393234253,
            0.2141149789094925,
            0.00023849646095186472,
            0.000488072051666677,
            0.00018376074149273336,
            0.0003433710371609777,
            0.0003083886404056102,
            0.00012978666927665472
        ],
        "align_select": "select min(Highschooler.level)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the lowest grade of students who do not have any friends?",
        "gold_select": "select min(Highschooler.level)",
        "select_candidates": [
            "select min(Highschooler.level)",
            "select min(Highschooler.level), Highschooler.name",
            "select min(Highschooler.level), Highschooler.ID",
            "select min(Highschooler.level), t0.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9804537296295166,
            0.04127831012010574,
            0.00016948458505794406,
            0.0002098358527291566,
            0.0001697213447187096,
            0.00014072359772399068,
            0.00040873046964406967,
            0.00013074310845695436
        ],
        "align_select": "select min(Highschooler.level)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the names and grades of each high schooler.",
        "gold_select": "select Highschooler.name, Highschooler.class",
        "select_candidates": [
            "select Highschooler.name, Highschooler.class",
            "select Highschooler.ID, Highschooler.name, Highschooler.class",
            "select distinct Highschooler.name, Highschooler.class",
            "select Highschooler.name, Highschooler.class, Highschooler.ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9831050038337708,
            0.00011856626952067018,
            0.0002994729729834944,
            9.030036017065868e-05,
            0.0022329024504870176,
            0.0001118172804126516,
            0.00027104580658487976,
            0.00010263577860314399
        ],
        "align_select": "select Highschooler.name, Highschooler.class",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the names and grades for each high schooler?",
        "gold_select": "select Highschooler.name, Highschooler.class",
        "select_candidates": [
            "select Highschooler.name, Highschooler.class",
            "select distinct Highschooler.name, Highschooler.class",
            "select Highschooler.ID, Highschooler.name, Highschooler.class",
            "select Highschooler.name, Highschooler.class, Highschooler.ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9863366484642029,
            0.00026504602283239365,
            0.004681255668401718,
            0.00011809598072431982,
            0.0003423348825890571,
            0.00011308654211461544,
            0.0003141622873954475,
            0.00012501834135036916
        ],
        "align_select": "select Highschooler.name, Highschooler.class",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show all the grades of the high schoolers.",
        "gold_select": "select Highschooler.class",
        "select_candidates": [
            "select distinct Highschooler.class",
            "select distinct Highschooler.name, Highschooler.class",
            "select distinct Highschooler.class, t0.c3",
            "select distinct Highschooler.class, Highschooler.name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.28903111815452576,
            0.10781177133321762,
            0.00016047114331740886,
            0.00012920175504405051,
            0.00028141308575868607,
            0.000211320846574381,
            0.00010942841618089005,
            0.00010761604062281549
        ],
        "align_select": "select distinct Highschooler.class",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the grade of each high schooler?",
        "gold_select": "select Highschooler.class",
        "select_candidates": [
            "select Highschooler.class",
            "select distinct Highschooler.class",
            "select Highschooler.name, Highschooler.class",
            "select Highschooler.ID, Highschooler.class"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.052994418889284134,
            8.315714512718841e-05,
            0.07350555807352066,
            8.840663213049993e-05,
            0.00021116051357239485,
            7.368199294432998e-05,
            0.0003653995809145272,
            7.489906420232728e-05
        ],
        "align_select": "select Highschooler.class",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What grade is Kyle in?",
        "gold_select": "select Highschooler.class",
        "select_candidates": [
            "select Highschooler.class",
            "select distinct Highschooler.class",
            "select Highschooler.name, Highschooler.class",
            "select Highschooler.class, Highschooler.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.7318316102027893,
            0.0001014047593344003,
            0.014005359262228012,
            0.0001785692002158612,
            0.00016420877363998443,
            6.427478365367278e-05,
            0.00015207681281026453,
            6.26868786639534e-05
        ],
        "align_select": "select Highschooler.class",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the grade for the high schooler named Kyle.",
        "gold_select": "select Highschooler.class",
        "select_candidates": [
            "select Highschooler.class",
            "select Highschooler.ID, Highschooler.class",
            "select Highschooler.ID, Highschooler.name, Highschooler.class",
            "select Highschooler.ID, Highschooler.name, max(Highschooler.class)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.8356741070747375,
            7.7006385254208e-05,
            0.00022749103663954884,
            8.242780313594267e-05,
            0.00015291321324184537,
            8.200131560442969e-05,
            0.00011612158414209262,
            6.883143214508891e-05
        ],
        "align_select": "select Highschooler.class",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the names of all high schoolers in grade 10.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select distinct Highschooler.name",
            "select Highschooler.name, Highschooler.class",
            "select distinct Highschooler.name, Highschooler.class"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9812538027763367,
            9.16907811188139e-05,
            0.02534715086221695,
            8.786639955360442e-05,
            0.00017180877330247313,
            6.210555147845298e-05,
            0.00014503639249596745,
            6.20657010586001e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of all high schoolers in grade 10?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select distinct Highschooler.name",
            "select Highschooler.name, Highschooler.class",
            "select distinct Highschooler.name, Highschooler.class"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9809210300445557,
            0.00013870740076527,
            0.07494764775037766,
            0.00021677231416106224,
            0.00019357424753252417,
            6.145366933196783e-05,
            0.00013636543008033186,
            5.716245505027473e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many high schoolers are there in grade 9 or 10?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Highschooler.class",
            "select count(*), t0.c9, Highschooler.name0",
            "select count(*), Highschooler.class, Highschooler.ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9934023022651672,
            9.339745156466961e-05,
            0.00029638971318490803,
            6.95973212714307e-05,
            0.00015930422523524612,
            5.984767994959839e-05,
            0.00014538795221596956,
            5.437833533505909e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count the number of high schoolers in grades 9 or 10.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Highschooler.class",
            "select count(*), Highschooler.ID",
            "select count(*), database: network_1_2.c0"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9937055706977844,
            0.00020330733968876302,
            0.00039431994082406163,
            0.011108627542853355,
            0.0003000849101226777,
            0.0011235852725803852,
            0.0003805543528869748,
            0.0003151228011120111
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of high schoolers for each grade.",
        "gold_select": "select Highschooler.class, count(*)",
        "select_candidates": [
            "select Highschooler.class, count(*)",
            "select highschooler, Highschooler.class, count(*)",
            "select count(*), Highschooler.class",
            "select highschooler Highschooler.class, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.4395982623100281,
            0.00020060650422237813,
            0.00036966800689697266,
            0.00012061605229973793,
            0.886748194694519,
            0.00023787964892107993,
            0.0004910188727080822,
            0.00013876786397304386
        ],
        "align_select": "select count(*), Highschooler.class",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How many high schoolers are in each grade?",
        "gold_select": "select Highschooler.class, count(*)",
        "select_candidates": [
            "select Highschooler.class, count(*)",
            "select count(*), Highschooler.class",
            "select distinct Highschooler.class, count(*)",
            "select highschooler_Highschooler.class, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.8771523833274841,
            0.0002635537530295551,
            0.9704674482345581,
            0.00027985055930912495,
            0.0005546131287701428,
            0.0001360531896352768,
            0.0006085226195864379,
            0.00014428490248974413
        ],
        "align_select": "select Highschooler.class, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Which grade has the most high schoolers?",
        "gold_select": "select Highschooler.class",
        "select_candidates": [
            "select Highschooler.class",
            "select Highschooler.class, Highschooler.name",
            "select Highschooler.name, Highschooler.class",
            "select Highschooler.class, t0.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler",
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9911932349205017,
            7.594312774017453e-05,
            0.00027038968983106315,
            5.863771366421133e-05,
            0.00025751220528036356,
            6.1012397054582834e-05,
            0.00043435610132291913,
            6.264761032070965e-05
        ],
        "align_select": "select Highschooler.class",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Return the grade that has the greatest number of high schoolers.",
        "gold_select": "select Highschooler.class",
        "select_candidates": [
            "select Highschooler.class",
            "select Highschooler.class the SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "select Highschooler.class, t0.c3",
            "select Highschooler.ID, Highschooler.class"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9619283676147461,
            6.216273322934285e-05,
            0.0002546135801821947,
            9.294877236243337e-05,
            0.00034058516030199826,
            6.352055061142892e-05,
            0.0002370211441302672,
            5.7137167459586635e-05
        ],
        "align_select": "select Highschooler.class",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me all grades that have at least 4 students.",
        "gold_select": "select Highschooler.class",
        "select_candidates": [
            "select Highschooler.class",
            "select Highschooler.class, t0.c3",
            "select Highschooler.name, Highschooler.class",
            "select Highschooler.class, max(Highschooler.ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler",
            "Highschooler Likes",
            "Highschooler Friend"
        ],
        "align_scores": [
            0.8957263231277466,
            0.00012066782073816285,
            0.0006295935600064695,
            6.403545557986945e-05,
            0.00034555941238068044,
            7.63778734835796e-05,
            0.00017593285883776844,
            5.644026168738492e-05
        ],
        "align_select": "select Highschooler.class",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which grades have 4 or more high schoolers?",
        "gold_select": "select Highschooler.class",
        "select_candidates": [
            "select Highschooler.class",
            "select Highschooler.class, t0.c3",
            "select Highschooler.class, max(Highschooler.ID)",
            "select Highschooler.class, Highschooler.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler",
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9846227765083313,
            0.00012143889762228355,
            0.0005983886658214033,
            6.996904994593933e-05,
            0.00017583307635504752,
            5.815734402858652e-05,
            0.0002392332098679617,
            7.558125798823312e-05
        ],
        "align_select": "select Highschooler.class",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.class",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Friend.friend_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.17595355212688446,
            0.09194862097501755,
            0.00023086060537025332,
            0.0001510508736828342,
            0.00030315687763504684,
            0.00021120601741131395,
            0.0004902424989268184,
            0.000229931203648448
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.class",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Friend.friend_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.06089133396744728,
            0.07147642970085144,
            0.00021923769963905215,
            0.00016717654943931848,
            0.00025857676519080997,
            0.00021007267059758306,
            0.0003665871045086533,
            0.00023335267906077206
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the average grade of all students who have some friends.",
        "gold_select": "select avg(Highschooler.class)",
        "select_candidates": [
            "select avg(Highschooler.class)",
            "select an avg(Highschooler.class)",
            "select avg(t0-Highschooler.class)",
            "select avg(Highschooler.name)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.23164485394954681,
            0.0007321771699935198,
            0.0006500314921140671,
            0.0002243650087621063,
            0.0013503142399713397,
            0.00018749147420749068,
            0.0012070243246853352,
            0.0001932835584739223
        ],
        "align_select": "select avg(Highschooler.class)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average grade of students who have friends?",
        "gold_select": "select avg(Highschooler.class)",
        "select_candidates": [
            "select avg(Highschooler.class)",
            "select an avg(Highschooler.class)",
            "select avg(t0-Highschooler.class)",
            "select avg(Highschooler.name)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9410238265991211,
            7.436288433382288e-05,
            0.000614121207036078,
            8.354183955816552e-05,
            0.0011280302423983812,
            7.720468420302495e-05,
            0.0010803434997797012,
            8.273066487163305e-05
        ],
        "align_select": "select avg(Highschooler.class)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the minimum grade of students who have no friends.",
        "gold_select": "select min(Highschooler.class)",
        "select_candidates": [
            "select min(Highschooler.class)",
            "select min(Highschooler.class), Highschooler.name",
            "select min(Highschooler.class), Highschooler.ID",
            "select min(Highschooler.class), t0.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.964878261089325,
            0.00010776782437460497,
            0.00024293642491102219,
            7.135324995033443e-05,
            0.00019892974523827434,
            6.423029844881967e-05,
            0.0003018518618773669,
            8.575506217312068e-05
        ],
        "align_select": "select min(Highschooler.class)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the lowest grade of students who do not have any friends?",
        "gold_select": "select min(Highschooler.class)",
        "select_candidates": [
            "select min(Highschooler.class)",
            "select min(Highschooler.class), Highschooler.name",
            "select min(Highschooler.class), Highschooler.ID",
            "select min(Highschooler.class), t0.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9779941439628601,
            0.03174851834774017,
            0.00017957967065740377,
            0.00021078654390294105,
            0.00017082440899685025,
            0.00014660690794698894,
            0.0003829814959317446,
            0.00012874745880253613
        ],
        "align_select": "select min(Highschooler.class)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which states have both owners and professionals living there?",
        "gold_select": "select Owners.province",
        "select_candidates": [
            "select Owners.province",
            "select Owners.province, Professionals.zip_code",
            "select Owners.city",
            "select Owners.province, Professionals.region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-INTERSECT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Professionals",
        "table_candidates": [
            "Owners Professionals",
            "Treatment_Types Owners Professionals",
            "Sizes Owners Professionals",
            "Charges Owners Professionals"
        ],
        "align_scores": [
            0.987040102481842,
            0.00025571807054802775,
            0.00023612072982359678,
            8.54960671858862e-05,
            0.03557836636900902,
            0.00014514043868985027,
            0.007736859377473593,
            9.38045559450984e-05
        ],
        "align_select": "select Owners.province",
        "align_structure": "SELECT-FROM-INTERSECT-SELECT-FROM"
    },
    {
        "question": "Find the states where both owners and professionals live.",
        "gold_select": "select Owners.province",
        "select_candidates": [
            "select Owners.province",
            "select Owners.province, Professionals.region",
            "select Owners.province, Owners.zip_number",
            "select Owners.province, Professionals.zip_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-INTERSECT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Professionals",
        "table_candidates": [
            "Owners Professionals",
            "Treatment_Types Owners Professionals",
            "Sizes Owners Professionals",
            "Charges Owners Professionals"
        ],
        "align_scores": [
            0.37565237283706665,
            0.08788858354091644,
            0.0012724839616566896,
            0.00013626871805172414,
            0.00028434491832740605,
            0.00011478069791337475,
            0.00026489418814890087,
            9.855941607384011e-05
        ],
        "align_select": "select Owners.province",
        "align_structure": "SELECT-FROM-INTERSECT-SELECT-FROM"
    },
    {
        "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "gold_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_no",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.last_name, Professionals.cell_no",
            "select Professionals.forename, Professionals.last_name, Professionals.cell_no",
            "select Treatments.professional_id, Professionals.last_name, Professionals.cell_no",
            "select Professionals.part_code, Professionals.last_name, Professionals.cell_no"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Breeds Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Charges Professionals Treatments",
            "Sizes Professionals Treatments"
        ],
        "align_scores": [
            0.17551790177822113,
            0.004258373752236366,
            0.0007205182919278741,
            0.0003548036911524832,
            0.1320251226425171,
            0.00513888243585825,
            0.00047498400090262294,
            0.00028261548141017556
        ],
        "align_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_no",
        "align_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
        "gold_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_no",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.last_name, Professionals.cell_no",
            "select Treatments.professional_id, Professionals.last_name, Professionals.cell_no",
            "select Professionals.forename, Professionals.last_name, Professionals.cell_no",
            "select Professionals.part_code, Professionals.last_name, Professionals.cell_no"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Breeds Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Charges Professionals Treatments",
            "Sizes Professionals Treatments"
        ],
        "align_scores": [
            0.7512302398681641,
            0.04711509123444557,
            0.6094164252281189,
            0.03188800439238548,
            0.003498569130897522,
            0.001317311660386622,
            0.0010082753142341971,
            0.00042643319466151297
        ],
        "align_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_no",
        "align_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which first names are used for professionals or owners but are not used as dog names?",
        "gold_select": "select Professionals.forename",
        "select_candidates": [
            "select Owners.first_name",
            "select Owners.first_name, Owners.family_name",
            "select Owners.first_name, Owners.family_name, Owners.street",
            "select distinct Owners.first_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-UNION-SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Owners Dogs Professionals",
        "table_candidates": [
            "Owners Dogs Professionals",
            "Treatment_Types Owners Dogs Professionals",
            "Charges Owners Dogs Professionals",
            "Sizes Owners Dogs Professionals",
            "Breeds Owners Dogs Professionals",
            "Owners Professionals",
            "Owners Dogs"
        ],
        "align_scores": [
            0.9575756788253784,
            0.23276709020137787,
            0.0002501361595932394,
            0.00013755413237959146,
            0.0001577047660248354,
            8.974923548521474e-05,
            0.04844803735613823,
            0.015391514636576176
        ],
        "align_select": "select Owners.first_name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
        "gold_select": "select Professionals.forename",
        "select_candidates": [
            "select Owners.first_name",
            "select Owners.first_name, Owners.family_name",
            "select Owners.first_name, Owners.family_name, Owners.street",
            "select Owners.first_name, Dogs.owner_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-UNION-SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Owners Dogs Professionals",
        "table_candidates": [
            "Owners Dogs Professionals",
            "Treatment_Types Owners Dogs Professionals",
            "Sizes Owners Dogs Professionals",
            "Charges Owners Dogs Professionals",
            "Breeds Owners Dogs Professionals",
            "Owners Professionals",
            "Owners Dogs"
        ],
        "align_scores": [
            0.952595055103302,
            0.16262586414813995,
            0.0001960210793185979,
            0.00013232193305157125,
            0.0001440102787455544,
            8.697980229044333e-05,
            0.0002777978079393506,
            0.0001805326755857095
        ],
        "align_select": "select Owners.first_name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "gold_select": "select Professionals.professional_id, Professionals.part_code, Professionals.e_mail_address",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.metropolis, Professionals.e_mail_address",
            "select Professionals.professional_id, Professionals.region, Professionals.e_mail_address",
            "select Professionals.professional_id, Professionals.avenue, Professionals.e_mail_address",
            "select Professionals.professional_id, Professionals.last_name, Professionals.e_mail_address"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.0021914897952228785,
            0.0021914897952228785,
            0.0005065823206678033,
            0.0005065823206678033,
            0.0005775248282589018,
            0.0005775248282589018,
            0.00043484478374011815,
            0.00043484478374011815
        ],
        "align_select": "select Professionals.professional_id, Professionals.metropolis, Professionals.e_mail_address",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
        "gold_select": "select Professionals.professional_id, Professionals.part_code, Professionals.e_mail_address",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.part_code, Professionals.e_mail_address",
            "select Professionals.professional_id, Professionals.avenue, Professionals.e_mail_address",
            "select Professionals.professional_id, Professionals.forename, Professionals.e_mail_address",
            "select Professionals.professional_id, Professionals.metropolis, Professionals.e_mail_address"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Owners Professionals Treatments",
            "Charges Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments"
        ],
        "align_scores": [
            0.007696386426687241,
            0.0006472804234363139,
            0.0012236720649525523,
            0.0002687502419576049,
            0.0009349154424853623,
            0.00030508849886246026,
            0.004561089910566807,
            0.0005016261711716652
        ],
        "align_select": "select Professionals.professional_id, Professionals.part_code, Professionals.e_mail_address",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "gold_select": "select Dogs.owner_id, Owners.first_name, Owners.family_name",
        "select_candidates": [
            "select Owners.owner_id, Owners.first_name, Owners.mail",
            "select Dogs.owner_id, Owners.first_name, Owners.mail",
            "select Owners.owner_id, Owners.first_name, Owners.family_name",
            "select Sizes.size_number, Owners.first_name, Owners.mail"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Charges Owners Dogs",
            "Breeds Owners Dogs"
        ],
        "align_scores": [
            0.0005099027184769511,
            8.291578706121072e-05,
            0.0004231108177918941,
            8.764597441768274e-05,
            0.9773009419441223,
            9.443488670513034e-05,
            0.00038852496072649956,
            7.967650890350342e-05
        ],
        "align_select": "select Owners.owner_id, Owners.first_name, Owners.family_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "gold_select": "select Dogs.owner_id, Owners.first_name, Owners.family_name",
        "select_candidates": [
            "select Owners.owner_id, Owners.first_name, Owners.mail",
            "select Dogs.owner_id, Owners.first_name, Owners.mail",
            "select t8.c1, Owners.first_name, Owners.mail",
            "select t8.c0, Owners.first_name, Owners.mail"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Charges Owners Dogs"
        ],
        "align_scores": [
            0.00038527202559635043,
            7.843190542189404e-05,
            0.0003658678906504065,
            7.933365850476548e-05,
            0.0004078655911143869,
            8.433345647063106e-05,
            0.0004029874107800424,
            7.816073048161343e-05
        ],
        "align_select": "select Owners.owner_id, Owners.first_name, Owners.mail",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
        "gold_select": "select Professionals.professional_id, Professionals.part_code, Professionals.forename",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.part_code, Professionals.forename",
            "select Professionals.professional_id, Professionals.forename, Professionals.last_name",
            "select Treatments.professional_id, Professionals.part_code, Professionals.forename",
            "select t8.c2, Professionals.part_code, Professionals.forename"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments"
        ],
        "align_scores": [
            0.0004350840172264725,
            7.144326809793711e-05,
            0.0004542722017504275,
            7.206606824183837e-05,
            0.0003224291140213609,
            7.020692282821983e-05,
            0.0005188106442801654,
            7.706492760917172e-05
        ],
        "align_select": "select Professionals.professional_id, Professionals.part_code, Professionals.forename",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
        "gold_select": "select Professionals.professional_id, Professionals.part_code, Professionals.forename",
        "select_candidates": [
            "select Treatments.professional_id, Professionals.part_code, Professionals.forename",
            "select Treatments.professional_id, Professionals.forename, Professionals.last_name",
            "select Treatments.professional_id, Professionals.part_code, Professionals.forename",
            "select Professionals.professional_id, Professionals.part_code, Professionals.forename"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Breeds Professionals Treatments"
        ],
        "align_scores": [
            0.000459815637441352,
            7.378979353234172e-05,
            0.00034255816717632115,
            6.719116208842024e-05,
            0.000459815637441352,
            7.378979353234172e-05,
            0.0022822555620223284,
            7.42212578188628e-05
        ],
        "align_select": "select Treatments.professional_id, Professionals.part_code, Professionals.forename",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the name of the breed with the most dogs?",
        "gold_select": "select Breeds.breed_name",
        "select_candidates": [
            "select Breeds.breed_name",
            "select Breeds.breed_name, Dogs.breed_cipher",
            "select Breeds.breed_name, Dogs.owner_id",
            "select Breeds.breed_name - Dogs.breed_cipher"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Breeds Dogs",
        "table_candidates": [
            "Breeds Dogs"
        ],
        "align_scores": [
            0.9936808347702026,
            8.679760503582656e-05,
            0.0008635970880277455,
            6.992802082095295e-05,
            0.0003042269963771105,
            5.8338595408713445e-05,
            0.07605741918087006,
            8.172028901753947e-05
        ],
        "align_select": "select Breeds.breed_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which breed do the most dogs have? Give me the breed name.",
        "gold_select": "select Breeds.breed_name",
        "select_candidates": [
            "select Breeds.breed_name",
            "select Breeds.breed_name, Dogs.breed_cipher",
            "select Breeds.breed_cipher, Breeds.breed_name",
            "select Breeds.breed_name - Dogs.breed_cipher"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Breeds Dogs",
        "table_candidates": [
            "Breeds Dogs",
            "Breeds Charges Dogs"
        ],
        "align_scores": [
            0.9916725754737854,
            0.00013162200048100203,
            0.001252353424206376,
            7.5614130764734e-05,
            0.0007070756983011961,
            7.955671026138589e-05,
            0.0376875177025795,
            0.00010735262185335159
        ],
        "align_select": "select Breeds.breed_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "gold_select": "select Owners.owner_id, Owners.family_name",
        "select_candidates": [
            "select Owners.owner_id, Owners.mail",
            "select Treatments.dog_id, Owners.mail",
            "select Dogs.owner_id, Owners.mail",
            "select Dogs.dog_id, Owners.mail"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Owners Dogs Treatments",
            "Dogs Treatments",
            "Treatment_Types Owners Dogs Treatments",
            "Sizes Dogs Treatments",
            "Charges Dogs Treatments",
            "Treatment_Types Dogs Treatments",
            "Sizes Treatments",
            "Owners Treatments"
        ],
        "align_scores": [
            0.0008357692277058959,
            7.200561231002212e-05,
            0.0006177733303047717,
            9.387157479068264e-05,
            0.0005118391127325594,
            6.62039965391159e-05,
            0.0008568787015974522,
            9.623548976378515e-05
        ],
        "align_select": "select Owners.owner_id, Owners.mail",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "gold_select": "select Owners.owner_id, Owners.family_name",
        "select_candidates": [
            "select Owners.owner_id, Owners.mail",
            "select Dogs.owner_id, Owners.mail",
            "select Treatments.dog_id, Owners.mail",
            "select Dogs.owner_id, Dogs.date_of_birth"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Owners Dogs Treatments",
            "Dogs Treatments",
            "Sizes Owners Dogs Treatments",
            "Treatment_Types Owners Dogs Treatments",
            "Sizes Dogs Treatments",
            "Charges Dogs Treatments",
            "Treatment_Types Dogs Treatments"
        ],
        "align_scores": [
            0.0008030851604416966,
            6.958955782465637e-05,
            0.0003705043636728078,
            6.935894634807482e-05,
            0.0003769696340896189,
            7.975343032740057e-05,
            0.0002542036527302116,
            7.058055052766576e-05
        ],
        "align_select": "select Owners.owner_id, Owners.mail",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the description of the treatment type that costs the least money in total?",
        "gold_select": "select Treatment_Types.treatment_category_description",
        "select_candidates": [
            "select Treatment_Types.treatment_category_description",
            "select Treatment_Types.treatment_category_description, Treatments.care_type_encipher",
            "select Treatment_Types.treatment_category_description, t7",
            "select Treatment_Types.medical_category_code, Treatment_Types.treatment_category_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments",
            "Charges Treatments"
        ],
        "align_scores": [
            0.9938693046569824,
            9.06506393221207e-05,
            0.000535448722075671,
            6.277301872614771e-05,
            0.0006349360919557512,
            6.849108467577025e-05,
            0.002240728586912155,
            7.783287583151832e-05
        ],
        "align_select": "select Treatment_Types.treatment_category_description",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Give me the description of the treatment type whose total cost is the lowest.",
        "gold_select": "select Treatment_Types.treatment_category_description",
        "select_candidates": [
            "select Treatment_Types.treatment_category_description",
            "select Treatment_Types.treatment_category_description, Treatments.care_type_encipher",
            "select Treatment_Types.treatment_category_description, Treatments.professional_id",
            "select Treatment_Types.medical_category_code, Treatment_Types.treatment_category_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments",
            "Charges Treatments"
        ],
        "align_scores": [
            0.9950565099716187,
            8.25546812848188e-05,
            0.00027675938326865435,
            5.841168240294792e-05,
            0.00011948846076847985,
            5.577620686381124e-05,
            0.001106402138248086,
            7.694127998547629e-05
        ],
        "align_select": "select Treatment_Types.treatment_category_description",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "gold_select": "select Owners.owner_id, Owners.zip_number",
        "select_candidates": [
            "select Owners.owner_id, Owners.zip_number",
            "select Dogs.owner_id, Owners.zip_number",
            "select Sizes.size_number, Owners.zip_number",
            "select Owners.owner_id-, Owners.zip_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs"
        ],
        "align_scores": [
            0.26187455654144287,
            9.35323114390485e-05,
            0.012051247991621494,
            9.590887930244207e-05,
            0.0006129055400379002,
            9.23355037230067e-05,
            0.0018701651133596897,
            8.600164437666535e-05
        ],
        "align_select": "select Owners.owner_id, Owners.zip_number",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "gold_select": "select Owners.owner_id, Owners.zip_number",
        "select_candidates": [
            "select Owners.owner_id, Owners.zip_number",
            "select Dogs.owner_id, Owners.zip_number",
            "select Owners.owner_id-, Owners.zip_number",
            "select Owners.first_name, Owners.zip_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Owners Dogs Treatments",
            "Owners Dogs",
            "Sizes Owners Dogs Treatments",
            "Sizes Owners Dogs",
            "Charges Owners Dogs Treatments",
            "Treatment_Types Owners Dogs Treatments"
        ],
        "align_scores": [
            0.3262440860271454,
            0.00011279425962129608,
            0.033529266715049744,
            0.00010164117702515796,
            0.002065397333353758,
            8.133980009006336e-05,
            0.0004713639500550926,
            8.585234172642231e-05
        ],
        "align_select": "select Owners.owner_id, Owners.zip_number",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
        "gold_select": "select Professionals.professional_id, Professionals.cell_no",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.cell_no",
            "select Treatments.professional_id, Professionals.cell_no",
            "select Professionals.forename, Professionals.cell_no",
            "select t8.c2, Professionals.cell_no"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Owners Professionals Treatments",
            "Charges Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Treatments"
        ],
        "align_scores": [
            0.9740281701087952,
            0.0005333294975571334,
            0.36580073833465576,
            0.00028803522582165897,
            0.0004422444326337427,
            8.119503036141396e-05,
            0.0008404916734434664,
            0.00014133169315755367
        ],
        "align_select": "select Professionals.professional_id, Professionals.cell_no",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "gold_select": "select Professionals.professional_id, Professionals.cell_no",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.cell_no",
            "select Treatments.professional_id, Professionals.cell_no",
            "select Professionals.forename, Professionals.cell_no",
            "select Professionals.part_code, Professionals.cell_no"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Owners Professionals Treatments",
            "Sizes Professionals Treatments",
            "Charges Professionals Treatments",
            "Breeds Professionals Treatments"
        ],
        "align_scores": [
            0.9801099300384521,
            0.0003147991083096713,
            0.8414413928985596,
            0.0002382100938120857,
            0.0010265116579830647,
            9.452948143007234e-05,
            0.0013124644756317139,
            9.274062904296443e-05
        ],
        "align_select": "select Professionals.professional_id, Professionals.cell_no",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "gold_select": "select distinct Professionals.forename, Professionals.last_name",
        "select_candidates": [
            "select Professionals.forename, Professionals.last_name",
            "select distinct Professionals.forename, Professionals.last_name",
            "select Professionals.part_code, Professionals.last_name",
            "select t6).c2, Professionals.last_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Sizes Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Breeds Professionals Treatments",
            "Charges Professionals Treatments"
        ],
        "align_scores": [
            0.26515841484069824,
            0.00031552385189570487,
            0.006874762941151857,
            9.420059359399602e-05,
            0.0005939883412793279,
            0.00010832965926965699,
            0.0007528566638939083,
            0.0001118214349844493
        ],
        "align_select": "select Professionals.forename, Professionals.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "gold_select": "select distinct Professionals.forename, Professionals.last_name",
        "select_candidates": [
            "select Professionals.forename, Professionals.last_name",
            "select distinct Professionals.forename, Professionals.last_name",
            "select Professionals.part_code, Professionals.last_name",
            "select Dogs.abandoned_yn, Professionals.last_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Charges Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments"
        ],
        "align_scores": [
            0.03320705518126488,
            0.00023048254661262035,
            0.008676577359437943,
            0.00013746759213972837,
            0.0007347160135395825,
            0.00017681962344795465,
            0.0006820888957008719,
            0.0001950412115547806
        ],
        "align_select": "select Professionals.forename, Professionals.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the date of each treatment, together with the first name of the professional who operated it.",
        "gold_select": "select Treatments.time_of_therapeutics, Professionals.forename",
        "select_candidates": [
            "select Treatments.time_of_therapeutics, Professionals.forename",
            "select Treatments.cost_of_treatment, Professionals.forename",
            "select Treatments.care_type_encipher, Professionals.forename",
            "select Treatments.dog_id, Professionals.forename"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments",
            "Charges Professionals Treatments"
        ],
        "align_scores": [
            0.9424421787261963,
            0.0018569246167317033,
            0.0009733754559420049,
            0.0003482555039227009,
            0.0008258428424596786,
            0.00026725392672233284,
            0.0005552261136472225,
            0.0001864398509496823
        ],
        "align_select": "select Treatments.time_of_therapeutics, Professionals.forename",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the date and the operating professional's first name of each treatment?",
        "gold_select": "select Treatments.time_of_therapeutics, Professionals.forename",
        "select_candidates": [
            "select Treatments.time_of_therapeutics, Professionals.forename",
            "select Treatments.cost_of_treatment, Professionals.forename",
            "select Treatments.care_type_encipher, Professionals.forename",
            "select t7.c6, Professionals.forename"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Sizes Professionals Treatments",
            "Charges Professionals Treatments",
            "Breeds Professionals Treatments"
        ],
        "align_scores": [
            0.9709721207618713,
            0.0007587829022668302,
            0.0012306752614676952,
            0.0006506440695375204,
            0.0008543175063095987,
            0.0003330907493364066,
            0.0007050910498946905,
            0.0004556800122372806
        ],
        "align_select": "select Treatments.time_of_therapeutics, Professionals.forename",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the cost of each treatment and the corresponding treatment type description.",
        "gold_select": "select Treatments.cost_of_treatment, Treatment_Types.treatment_category_description",
        "select_candidates": [
            "select Treatments.cost_of_treatment, Treatment_Types.treatment_category_description",
            "select Treatments.cost_of_treatment, t3 - Treatment_Types.treatment_category_description",
            "select Treatments.cost_of_treatment, Treatment_Types.medical_category_code_description",
            "select Treatments.dog_id, Treatment_Types.treatment_category_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Charges Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments"
        ],
        "align_scores": [
            0.9948810338973999,
            0.9926404356956482,
            0.0006449422799050808,
            0.00036977091804146767,
            0.9943015575408936,
            0.9927353858947754,
            0.0004055436293128878,
            0.0003148645628243685
        ],
        "align_select": "select Treatments.cost_of_treatment, Treatment_Types.treatment_category_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the cost and treatment type description of each treatment?",
        "gold_select": "select Treatments.cost_of_treatment, Treatment_Types.treatment_category_description",
        "select_candidates": [
            "select Treatments.cost_of_treatment, Treatment_Types.treatment_category_description",
            "select Treatments.cost_of_treatment, Treatment_Types.treatment_category_description, Treatments.care_type_encipher",
            "select Treatments.cost_of_treatment, Treatment_Types.treatment_category_description, Treatments.professional_id",
            "select Treatments.cost_of_treatment, Treatment_Types.treatment_category_description, Treatments.treatment_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Charges Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments"
        ],
        "align_scores": [
            0.9945977926254272,
            0.00011635501141427085,
            0.00035416934406384826,
            7.15005153324455e-05,
            0.00030110968509688973,
            7.535499025834724e-05,
            0.00021719768119510263,
            7.399448077194393e-05
        ],
        "align_select": "select Treatments.cost_of_treatment, Treatment_Types.treatment_category_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List each owner's first name, last name, and the size of his for her dog.",
        "gold_select": "select Owners.first_name, Owners.family_name, Dogs.measurement_number",
        "select_candidates": [
            "select Owners.first_name, Owners.mail, Sizes.size_specifications",
            "select Owners.first_name, Owners.mail, Dogs.weight",
            "select Owners.first_name, Owners.mail, Sizes.size_number",
            "select Owners.first_name, Owners.mail, Owners.first_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Sizes Owners Dogs",
            "Breeds Sizes Owners Dogs"
        ],
        "align_scores": [
            0.0007498071645386517,
            0.0003132011624984443,
            0.0007002861239016056,
            0.0003558419120963663,
            0.0008563778828829527,
            0.0003344080178067088,
            0.0007516257464885712,
            0.00043722562259063125
        ],
        "align_select": "select Owners.first_name, Owners.mail, Sizes.size_specifications",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are each owner's first name, last name, and the size of their dog?",
        "gold_select": "select Owners.first_name, Owners.family_name, Dogs.measurement_number",
        "select_candidates": [
            "select Owners.first_name, Owners.mail, Dogs.weight",
            "select Owners.first_name, Owners.mail, Sizes.size_specifications",
            "select Owners.first_name, Owners.family_name, Dogs.weight",
            "select Owners.first_name, Owners.mail, Owners.cell_number"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Sizes Owners Dogs",
            "Breeds Sizes Owners Dogs"
        ],
        "align_scores": [
            0.0007019566255621612,
            0.0003628710110206157,
            0.0006795436493121088,
            0.0003011286607943475,
            0.9899207353591919,
            0.9908207058906555,
            0.0005439207889139652,
            0.00023197686823550612
        ],
        "align_select": "select Owners.first_name, Owners.family_name, Dogs.weight",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "gold_select": "select Dogs.name, Treatments.time_of_therapeutics",
        "select_candidates": [
            "select Dogs.name, Treatments.time_of_therapeutics",
            "select Dogs.name, Treatments.care_type_encipher",
            "select Dogs.name, Treatments.cost_of_treatment",
            "select Dogs.name, Treatments.professional_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Breeds Dogs Treatments",
            "Breeds Charges Dogs Treatments",
            "Breeds Sizes Dogs Treatments",
            "Breeds Charges Sizes Dogs Treatments",
            "Charges Dogs Treatments",
            "Sizes Dogs Treatments",
            "Dogs Treatments"
        ],
        "align_scores": [
            0.9692364931106567,
            0.9670657515525818,
            0.0004931589355692267,
            0.0004462660290300846,
            0.0005251426482573152,
            0.0003978014283347875,
            0.0006614361191168427,
            0.0008566758478991687
        ],
        "align_select": "select Dogs.name, Treatments.time_of_therapeutics",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "gold_select": "select Dogs.name, Treatments.time_of_therapeutics",
        "select_candidates": [
            "select Dogs.name, Treatments.care_type_encipher",
            "select Dogs.name, Treatments.time_of_therapeutics",
            "select Dogs.name, Treatments.professional_id",
            "select Dogs.name, Treatments.dog_id"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Breeds Dogs Treatments",
            "Breeds Charges Dogs Treatments",
            "Breeds Sizes Dogs Treatments",
            "Breeds Dogs Professionals Treatments",
            "Charges Dogs Treatments",
            "Dogs Treatments"
        ],
        "align_scores": [
            0.0005451376200653613,
            0.0004282259615138173,
            0.9569547772407532,
            0.9816890954971313,
            0.0003727969015017152,
            0.0003965047362726182,
            0.00046508206287398934,
            0.00042648689122870564
        ],
        "align_select": "select Dogs.name, Treatments.time_of_therapeutics",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "gold_select": "select Owners.first_name, Dogs.name",
        "select_candidates": [
            "select Owners.first_name, Dogs.name",
            "select Dogs.owner_id, Dogs.name",
            "select Owners.first_name, Owners.province",
            "select Owners.first_name, Dogs.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Sizes Owners Dogs",
            "Breeds Owners Dogs",
            "Owners Dogs Charges Dogs"
        ],
        "align_scores": [
            0.9524298906326294,
            0.0002601975866127759,
            0.00046559309703297913,
            8.315388549817726e-05,
            0.0010271589271724224,
            0.0001030852145049721,
            0.9524298906326294,
            0.0002601975866127759
        ],
        "align_select": "select Owners.first_name, Dogs.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
        "gold_select": "select Owners.first_name, Dogs.name",
        "select_candidates": [
            "select Owners.first_name, Dogs.name",
            "select Owners.first_name, Owners.province",
            "select Owners.first_name, Dogs.name, Owners.zip_number",
            "select Owners.first_name, Dogs.name, Owners.owner_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs"
        ],
        "align_scores": [
            0.9424425959587097,
            0.00014725347864441574,
            0.0007023279904387891,
            8.165360486600548e-05,
            0.0002072555071208626,
            7.162130350479856e-05,
            0.00016235929797403514,
            6.782876153010875e-05
        ],
        "align_select": "select Owners.first_name, Dogs.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "gold_select": "select distinct Dogs.time_reached, Dogs.leave_time",
        "select_candidates": [
            "select Dogs.date_adopted, Dogs.leave_time",
            "select Dogs.owner_id3, Dogs.leave_time",
            "select Dogs.leave_time, Dogs.owner_id3",
            "select Dogs.dog_id, Dogs.leave_time"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.03197726979851723,
            0.00470108212903142,
            0.0008578303968533874,
            0.000446160149294883,
            0.0006886332994326949,
            0.00023952420451678336,
            0.0007240781560540199,
            0.00022125199029687792
        ],
        "align_select": "select Dogs.date_adopted, Dogs.leave_time",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "gold_select": "select distinct Dogs.time_reached, Dogs.leave_time",
        "select_candidates": [
            "select Dogs.time_reached, Dogs.leave_time",
            "select Dogs.dog_id, Dogs.leave_time",
            "select Dogs.date_adopted, Dogs.leave_time",
            "select Dogs.owner_id3, Dogs.owner_id4"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs Professionals Treatments",
            "Owners Dogs Treatments"
        ],
        "align_scores": [
            0.03610048070549965,
            0.0002861799148377031,
            0.0005309413536451757,
            0.00023309294192586094,
            0.005750112701207399,
            0.00023737121955491602,
            0.017653044313192368,
            0.0003522672923281789
        ],
        "align_select": "select Dogs.time_reached, Dogs.leave_time",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the last name of the owner owning the youngest dog.",
        "gold_select": "select Owners.family_name",
        "select_candidates": [
            "select Professionals.last_name",
            "select Owners.mail",
            "select Owners.first_name, Owners.family_name",
            "select Dogs.date_of_birth"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Dogs",
            "Owners Dogs",
            "Dogs Owners Dogs",
            "Dogs Owners Treatments",
            "Treatment_Types Owners Dogs",
            "Charges Owners Dogs",
            "Sizes Owners Dogs"
        ],
        "align_scores": [
            0.9856212735176086,
            0.00010045426461147144,
            0.0015870843781158328,
            5.83251821808517e-05,
            0.00033934833481907845,
            7.106601697159931e-05,
            0.01437592227011919,
            6.992668932070956e-05
        ],
        "align_select": "select Professionals.last_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Who owns the youngest dog? Give me his or her last name.",
        "gold_select": "select Owners.family_name",
        "select_candidates": [
            "select Owners.mail",
            "select Dogs.owner_id, Dogs.date_of_birth",
            "select Owners.first_name, Owners.family_name",
            "select Dogs.owner_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Dogs",
            "Owners Dogs",
            "Dogs Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Dogs Owners Treatments",
            "Treatment_Types Dogs"
        ],
        "align_scores": [
            0.06926235556602478,
            6.976976874284446e-05,
            0.00016563807730562985,
            5.721966954297386e-05,
            0.0002987318439409137,
            8.787846309132874e-05,
            0.007750283926725388,
            7.152083708206192e-05
        ],
        "align_select": "select Owners.mail",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "gold_select": "select Professionals.e_mail_address",
        "select_candidates": [
            "select Professionals.e_mail_address",
            "select Professionals.e_mail_address, Professionals.dwelling_calling",
            "select Professionals.e_mail_address (or Professionals.dwelling_calling)",
            "select Professionals.e_mail_address, Professionals.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals",
            "Dogs Professionals",
            "Professionals Treatments"
        ],
        "align_scores": [
            0.9674537777900696,
            0.19250920414924622,
            0.0001931070873979479,
            9.72887355601415e-05,
            0.0007887021056376398,
            0.00019667598826345056,
            0.00019541684014257044,
            9.07769426703453e-05
        ],
        "align_select": "select Professionals.e_mail_address",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
        "gold_select": "select Professionals.e_mail_address",
        "select_candidates": [
            "select Professionals.e_mail_address",
            "select Professionals.e_mail_address, Professionals.dwelling_calling",
            "select Professionals.e_mail_address, Professionals.dwelling_calling, Professionals.cell_no",
            "select Professionals.e_mail_address, Professionals.dwelling_calling, Professionals.part_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals",
            "Dogs Professionals",
            "Professionals Treatments"
        ],
        "align_scores": [
            0.9822283387184143,
            0.015831224620342255,
            0.00019219926616642624,
            7.951240695547312e-05,
            0.00020275040878914297,
            8.220299787353724e-05,
            0.0001729303039610386,
            8.031897596083581e-05
        ],
        "align_select": "select Professionals.e_mail_address",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the arriving date and the departing date of all the dogs?",
        "gold_select": "select Dogs.time_reached, Dogs.leave_time",
        "select_candidates": [
            "select Dogs.date_adopted, Dogs.leave_time",
            "select Dogs.owner_id3, Dogs.owner_id4",
            "select Dogs.weight, Dogs.leave_time",
            "select Dogs.time_reached, Dogs.leave_time"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.011334249749779701,
            0.00010924096568487585,
            0.02838399074971676,
            0.0003809583722613752,
            0.0007135304622352123,
            0.00025272922357544303,
            0.732784628868103,
            0.00011238863953622058
        ],
        "align_select": "select Dogs.time_reached, Dogs.leave_time",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the arrival date and the departure date for all the dogs.",
        "gold_select": "select Dogs.time_reached, Dogs.leave_time",
        "select_candidates": [
            "select Dogs.date_adopted, Dogs.leave_time",
            "select Dogs.date_of_birth, Dogs.leave_time",
            "select Dogs.owner_id3, Dogs.owner_id4",
            "select Dogs.weight, Dogs.leave_time"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.0058370656333863735,
            0.00010199302778346464,
            0.0003517141449265182,
            0.00014624150935560465,
            0.014568251557648182,
            0.0003938897862099111,
            0.0006420197314582765,
            0.00024176121223717928
        ],
        "align_select": "select Dogs.date_adopted, Dogs.leave_time",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "gold_select": "select Professionals.part_code, Professionals.avenue, Professionals.metropolis, Professionals.region",
        "select_candidates": [
            "select Professionals.forename, Professionals.avenue, Professionals.metropolis, Professionals.region",
            "select Professionals.part_code, Professionals.avenue, Professionals.metropolis, Professionals.region",
            "select Professionals.part_code, Professionals.forename, Professionals.avenue, Professionals.metropolis, Professionals.region",
            "select Professionals.professional_id, Professionals.forename, Professionals.avenue, Professionals.metropolis, Professionals.region"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals",
            "Dogs Professionals",
            "Owners Professionals",
            "Professionals Treatments",
            "Treatment_Types Professionals",
            "Charges Professionals"
        ],
        "align_scores": [
            0.0029591333586722612,
            0.00013274238153826445,
            0.9796283841133118,
            0.0001667171309236437,
            0.04459426552057266,
            0.0001795880525605753,
            0.000433627370512113,
            0.0001182312989840284
        ],
        "align_select": "select Professionals.part_code, Professionals.avenue, Professionals.metropolis, Professionals.region",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "gold_select": "select Professionals.part_code, Professionals.avenue, Professionals.metropolis, Professionals.region",
        "select_candidates": [
            "select Professionals.part_code, Professionals.avenue, Professionals.metropolis, Professionals.region",
            "select Professionals.forename, Professionals.avenue, Professionals.metropolis, Professionals.region",
            "select Professionals.part_code, Professionals.forename, Professionals.avenue, Professionals.metropolis, Professionals.region",
            "select t8.c1, Professionals.forename, Professionals.avenue, Professionals.metropolis, Professionals.region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Owners Professionals",
            "Dogs Professionals",
            "Treatment_Types Owners Professionals",
            "Treatment_Types Professionals",
            "Sizes Professionals",
            "Owners Dogs Professionals",
            "Owners Professionals Treatments",
            "Charges Professionals"
        ],
        "align_scores": [
            0.9894010424613953,
            0.00012151928240200505,
            0.0013929536798968911,
            0.00010501116776140407,
            0.003927092999219894,
            0.00010795646085171029,
            0.0005735367885790765,
            0.00011919576354557648
        ],
        "align_select": "select Professionals.part_code, Professionals.avenue, Professionals.metropolis, Professionals.region",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "gold_select": "select Owners.first_name, Owners.family_name, Owners.mail",
        "select_candidates": [
            "select Owners.first_name, Owners.mail, Owners.home_phone",
            "select Owners.first_name, Owners.family_name, Owners.mail",
            "select Owners.first_name, Owners.mail and Owners.home_phone",
            "select Owners.first_name, Owners.mail, Owners.home_phone"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners",
        "table_candidates": [
            "Owners"
        ],
        "align_scores": [
            0.00042188321822322905,
            9.106695506488904e-05,
            0.9803897738456726,
            0.00011767276009777561,
            0.0004662928404286504,
            8.977422839961946e-05,
            0.00042188321822322905,
            9.106695506488904e-05
        ],
        "align_select": "select Owners.first_name, Owners.family_name, Owners.mail",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "gold_select": "select Owners.first_name, Owners.family_name, Owners.mail",
        "select_candidates": [
            "select Owners.first_name, Owners.mail, Owners.home_phone",
            "select Owners.first_name, Owners.mail, Owners.mail",
            "select Owners.first_name, Owners.family_name, Owners.mail",
            "select Owners.first_name, Owners.zip_number, Owners.mail"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners",
        "table_candidates": [
            "Owners"
        ],
        "align_scores": [
            0.000280027772532776,
            9.635062451707199e-05,
            0.0004191651241853833,
            0.00011709786485880613,
            0.9859228134155273,
            9.462986054131761e-05,
            0.0003427127085160464,
            0.0001275701361009851
        ],
        "align_select": "select Owners.first_name, Owners.family_name, Owners.mail",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How much does the most recent treatment cost?",
        "gold_select": "select Treatments.cost_of_treatment",
        "select_candidates": [
            "select Treatments.cost_of_treatment",
            "select max(Treatments.cost_of_treatment)",
            "select min(Treatments.cost_of_treatment)",
            "select Treatments.cost_of_treatment, Treatments.dog_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatments",
        "table_candidates": [
            "Treatments",
            "Dogs Treatments",
            "Charges Treatments",
            "Breeds Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.11166725307703018,
            5.781643631053157e-05,
            6.669178401352838e-05,
            6.148866668809205e-05,
            8.205403719330207e-05,
            6.185210804687813e-05,
            0.000267384632024914,
            5.140573193784803e-05
        ],
        "align_select": "select Treatments.cost_of_treatment",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the cost of the most recently performed treatment.",
        "gold_select": "select Treatments.cost_of_treatment",
        "select_candidates": [
            "select Treatments.cost_of_treatment",
            "select Treatments.cost_of_treatment, Treatments.dog_id",
            "select max(Treatments.cost_of_treatment)",
            "select Treatments.cost_of_treatment, Treatments.professional_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatments",
        "table_candidates": [
            "Treatments",
            "Dogs Treatments",
            "Breeds Treatments",
            "Charges Treatments",
            "Dogs Professionals Treatments",
            "Professionals Treatments"
        ],
        "align_scores": [
            0.9770729541778564,
            6.16673642070964e-05,
            0.0005073054344393313,
            5.631370368064381e-05,
            0.00023145414888858795,
            5.5181761126732454e-05,
            0.0005103250732645392,
            5.408984361565672e-05
        ],
        "align_select": "select Treatments.cost_of_treatment",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "How much does each charge type costs? List both charge type and amount.",
        "gold_select": "select Charges.cost_category, Charges.charges",
        "select_candidates": [
            "select Charges.cost_category, Charges.charges",
            "select Charges.cost_category, sum(Charges.charges)",
            "select Charges.charges, Charges.cost_category",
            "select Charges.cost_category, amount(Charges.charges)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Charges",
        "table_candidates": [
            "Charges"
        ],
        "align_scores": [
            0.9695111513137817,
            0.0012038912391290069,
            0.9899284243583679,
            0.0003208948764950037,
            0.8879098296165466,
            0.0011783060617744923,
            0.0013448302634060383,
            0.00023331887496169657
        ],
        "align_select": "select Charges.cost_category, Charges.charges",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "List each charge type and its amount.",
        "gold_select": "select Charges.cost_category, Charges.charges",
        "select_candidates": [
            "select Charges.cost_category, sum(Charges.charges)",
            "select Charges.charges, Charges.charge_id",
            "select Charges.charges, sum(Charges.charges)",
            "select Charges.charges, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Charges",
        "table_candidates": [
            "Charges"
        ],
        "align_scores": [
            0.9936389327049255,
            0.00015617375902365893,
            0.0001532143069198355,
            0.0001790091919247061,
            0.2344384789466858,
            0.00014613641542382538,
            0.5800676941871643,
            0.00013458931061904877
        ],
        "align_select": "select Charges.cost_category, sum(Charges.charges)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How much does the most expensive charge type costs?",
        "gold_select": "select max(Charges.charges)",
        "select_candidates": [
            "select Charges.cost_category, Charges.charges",
            "select Charges.charges",
            "select Charges.cost_category, sum(Charges.charges)",
            "select Charges.charge_id, Charges.cost_category"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Charges",
        "table_candidates": [
            "Charges"
        ],
        "align_scores": [
            0.0006563046481460333,
            0.0009402269497513771,
            0.9167738556861877,
            0.9872819781303406,
            0.0002497139503248036,
            0.0005640937597490847,
            0.00015262130182236433,
            0.00020444317487999797
        ],
        "align_select": "select Charges.charges",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the charge amount of the most expensive charge type?",
        "gold_select": "select max(Charges.charges)",
        "select_candidates": [
            "select Charges.charges",
            "select Charges.charge_id, Charges.charges",
            "select Charges.charges, Charges.cost_category",
            "select Charges.charges, Charges.cost_category"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Charges",
        "table_candidates": [
            "Charges"
        ],
        "align_scores": [
            0.7276370525360107,
            0.9621992707252502,
            0.00015304097905755043,
            0.00014155825192574412,
            0.00022032992274034768,
            0.00020672597747761756,
            0.00022032992274034768,
            0.00020672597747761756
        ],
        "align_select": "select Charges.charges",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List the email, cell phone and home phone of all the professionals.",
        "gold_select": "select Professionals.e_mail_address, Professionals.cell_no, Professionals.dwelling_calling",
        "select_candidates": [
            "select Professionals.e_mail_address, Professionals.cell_no, Professionals.e_mail_address",
            "select Professionals.e_mail_address, t6.cten, Professionals.e_mail_address",
            "select Professionals.e_mail_address, Professionals.dwelling_calling, Professionals.e_mail_address",
            "select Professionals.e_mail_address, Professionals.cell_no., Professionals.e_mail_address"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals",
            "Dogs Professionals",
            "Owners Professionals"
        ],
        "align_scores": [
            0.0003190341521985829,
            0.00012189321569167078,
            0.0002766683464869857,
            0.00011348191037541255,
            0.0003993261489085853,
            0.00013521757500711828,
            0.00032743127667345107,
            0.00012650545977521688
        ],
        "align_select": "select Professionals.e_mail_address, Professionals.cell_no, Professionals.e_mail_address",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the email, cell phone and home phone of each professional?",
        "gold_select": "select Professionals.e_mail_address, Professionals.cell_no, Professionals.dwelling_calling",
        "select_candidates": [
            "select Professionals.e_mail_address, Professionals.cell_no, Professionals.e_mail_address",
            "select Professionals.e_mail_address, Professionals.dwelling_calling, Professionals.e_mail_address",
            "select Professionals.e_mail_address, t6.cten, Professionals.e_mail_address",
            "select Professionals.e_mail_address, Professionals.cell_no., Professionals.e_mail_address"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals",
            "Dogs Professionals",
            "Owners Professionals"
        ],
        "align_scores": [
            0.0003571415145415813,
            7.413630373775959e-05,
            0.0004609162569977343,
            7.546666893176734e-05,
            0.00033400970278307796,
            6.506041972897947e-05,
            0.0004943960811942816,
            7.335823465837166e-05
        ],
        "align_select": "select Professionals.e_mail_address, Professionals.cell_no, Professionals.e_mail_address",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are all the possible breed type and size type combinations?",
        "gold_select": "select distinct Dogs.breed_cipher, Dogs.measurement_number",
        "select_candidates": [
            "select Sizes.size_specifications, Breeds.breed_name",
            "select possible Sizes.size_specifications, t2.c2",
            "select possible Sizes.size_specifications, Breeds.breed_name",
            "select Sizes.size_specifications, t2.c2"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Breeds Sizes",
            "Sizes Dogs",
            "Sizes Owners",
            "Sizes Treatment_Types"
        ],
        "align_scores": [
            0.009766826406121254,
            0.0002226427459390834,
            0.0007206691079773009,
            8.610921940999106e-05,
            0.0004576923092827201,
            0.00010409751848783344,
            0.0009843019070103765,
            0.00010615924838930368
        ],
        "align_select": "select Sizes.size_specifications, Breeds.breed_name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find the distinct breed type and size type combinations for dogs.",
        "gold_select": "select distinct Dogs.breed_cipher, Dogs.measurement_number",
        "select_candidates": [
            "select distinct Dogs.breed_cipher, Dogs.owner_id",
            "select distinct Dogs.breed_cipher, Sizes.size_specifications",
            "select distinct Sizes.size_specifications, t2.c2",
            "select distinct Sizes.size_specifications, Dogs.breed_cipher"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Breeds Sizes Dogs",
            "Sizes Dogs",
            "Charges Sizes Dogs",
            "Breeds Charges Sizes Dogs",
            "Breeds Sizes Owners Dogs"
        ],
        "align_scores": [
            0.00028851593378931284,
            0.00010731988732004538,
            0.003982635214924812,
            9.406907338416204e-05,
            0.0012043920578435063,
            9.332285117125139e-05,
            0.01385787408798933,
            9.153492283076048e-05
        ],
        "align_select": "select distinct Dogs.breed_cipher, Dogs.owner_id",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the first name of all the professionals along with the description of the treatment they have done.",
        "gold_select": "select distinct Professionals.forename, Treatment_Types.treatment_category_description",
        "select_candidates": [
            "select Professionals.forename, Treatment_Types.treatment_category_description",
            "select Professionals.forename, Treatment_Types.treatment_category_description, Treatments.professional_id",
            "select Professionals.forename, t3 - Treatments.dog_id",
            "select Professionals.forename, Treatment_Types.treatment_category_description - Treatments.professional_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Professionals Treatments",
        "table_candidates": [
            "Treatment_Types Professionals Treatments",
            "Sizes Treatment_Types Professionals Treatments",
            "Charges Treatment_Types Professionals Treatments",
            "Breeds Treatment_Types Professionals Treatments"
        ],
        "align_scores": [
            0.9423258304595947,
            0.00011228505900362507,
            0.00016700863488949835,
            7.648727478226647e-05,
            0.0004244977899361402,
            0.0001264862803509459,
            0.001009156578220427,
            0.00011164967872900888
        ],
        "align_select": "select Professionals.forename, Treatment_Types.treatment_category_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are each professional's first name and description of the treatment they have performed?",
        "gold_select": "select distinct Professionals.forename, Treatment_Types.treatment_category_description",
        "select_candidates": [
            "select Professionals.forename, Treatment_Types.treatment_category_description",
            "select Professionals.forename, Treatment_Types.treatment_category_description, Treatments.professional_id",
            "select Professionals.forename, t3 - Treatments.dog_id",
            "select Professionals.forename, Treatment_Types.treatment_category_description - Treatments.professional_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Professionals Treatments",
        "table_candidates": [
            "Treatment_Types Professionals Treatments",
            "Sizes Treatment_Types Professionals Treatments",
            "Charges Treatment_Types Professionals Treatments",
            "Breeds Treatment_Types Professionals Treatments",
            "Charges Professionals Treatments"
        ],
        "align_scores": [
            0.935222864151001,
            0.00013699024566449225,
            0.00022297073155641556,
            8.930155308917165e-05,
            0.0005492144846357405,
            0.0001648710313020274,
            0.003034403081983328,
            0.00014125462621450424
        ],
        "align_select": "select Professionals.forename, Treatment_Types.treatment_category_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Which states have both owners and professionals living there?",
        "gold_select": "select Owners.province",
        "select_candidates": [
            "select Professionals.state",
            "select Professionals.state, Owners.city",
            "select Professionals.state, Owners.street",
            "select Owners.street, Owners.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-INTERSECT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Professionals",
        "table_candidates": [
            "Owners Professionals",
            "Treatment_Types Owners Professionals",
            "Sizes Owners Professionals",
            "Charges Owners Professionals",
            "Breeds Owners Professionals"
        ],
        "align_scores": [
            0.9841645359992981,
            0.00019494858861435205,
            0.00028911427943967283,
            6.15573808318004e-05,
            0.00045334300375543535,
            6.375443626893684e-05,
            0.00022978521883487701,
            7.017332245595753e-05
        ],
        "align_select": "select Professionals.state",
        "align_structure": "SELECT-FROM-INTERSECT-SELECT-FROM"
    },
    {
        "question": "Find the states where both owners and professionals live.",
        "gold_select": "select Owners.province",
        "select_candidates": [
            "select Professionals.state",
            "select Professionals.state, Owners.city",
            "select Professionals.state, Owners.street",
            "select Owners.street, Professionals.state"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-INTERSECT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Professionals",
        "table_candidates": [
            "Owners Professionals",
            "Treatment_Types Owners Professionals",
            "Sizes Owners Professionals",
            "Charges Owners Professionals",
            "Breeds Owners Professionals"
        ],
        "align_scores": [
            0.9937044978141785,
            0.30149197578430176,
            0.000268688949290663,
            9.501994645688683e-05,
            0.0003708565200213343,
            0.00010495171591173857,
            0.0006846784963272512,
            0.00019270538177806884
        ],
        "align_select": "select Professionals.state",
        "align_structure": "SELECT-FROM-INTERSECT-SELECT-FROM"
    },
    {
        "question": "What is the average age of the dogs who have gone through any treatments?",
        "gold_select": "select avg(Dogs.age)",
        "select_candidates": [
            "select avg(Dogs.age)",
            "select Treatments.dog_included, avg(Dogs.age)",
            "select an avg(Dogs.age)",
            "select avg(Dogs.age), Treatments.dog_included"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.990545392036438,
            0.0007176302606239915,
            0.000557157676666975,
            0.0009779204847291112,
            0.0005715275765396655,
            0.00020061549730598927,
            0.00014788527914788574,
            0.0006141098565421999
        ],
        "align_select": "select avg(Dogs.age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the average age of the dogs who went through treatments.",
        "gold_select": "select avg(Dogs.age)",
        "select_candidates": [
            "select avg(Dogs.age)",
            "select an avg(Dogs.age)",
            "select avg(Dogs.age)",
            "select the avg(Dogs.age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-INTERSECT-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs Treatments"
        ],
        "align_scores": [
            0.9765507578849792,
            5.635049819829874e-05,
            0.0011064468417316675,
            7.209617615444586e-05,
            0.9765507578849792,
            5.635049819829874e-05,
            0.0006483089528046548,
            7.598993397550657e-05
        ],
        "align_select": "select avg(Dogs.age)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Which dogs have not cost their owner more than 1000 for treatment? List the dog names.",
        "gold_select": "select Dogs.name",
        "select_candidates": [
            "select Dogs.name",
            "select Dogs.name, Treatments.dog_included",
            "select Dogs.name, Treatments.professional_id",
            "select Dogs.dog_id, Dogs.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Charges Dogs Treatments",
            "Treatment_Types Dogs Treatments",
            "Owners Dogs Treatments",
            "Sizes Dogs Treatments"
        ],
        "align_scores": [
            0.035953231155872345,
            0.0021722926758229733,
            0.0004319881845731288,
            0.0003275043563917279,
            0.00026840734062716365,
            0.00024049881903920323,
            0.00034477890585549176,
            0.00030033334041945636
        ],
        "align_select": "select Dogs.name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment?",
        "gold_select": "select Dogs.name",
        "select_candidates": [
            "select Dogs.name",
            "select Dogs.name, Treatments.dog_included",
            "select Dogs.name, Dogs.age",
            "select Dogs.name, Dogs.owner_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Charges Dogs Treatments",
            "Owners Dogs Treatments",
            "Treatment_Types Dogs Treatments",
            "Sizes Dogs Treatments"
        ],
        "align_scores": [
            0.9501652717590332,
            0.5781142711639404,
            0.0004067415720783174,
            0.001258495613001287,
            0.00016578628856223077,
            0.00017466838471591473,
            0.0001928568526636809,
            0.0006379580590873957
        ],
        "align_select": "select Dogs.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name of the breed with the most dogs?",
        "gold_select": "select Breeds.breed_designation",
        "select_candidates": [
            "select Breeds.breed_designation",
            "select Breeds.breed_designation, Dogs.breed_code",
            "select Breeds.breed_code, Breeds.breed_designation",
            "select Breeds.breed_designation (or Dogs.breed_code)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Breeds Dogs",
        "table_candidates": [
            "Breeds Dogs",
            "Breeds Charges Dogs",
            "Breeds Treatment_Types Dogs"
        ],
        "align_scores": [
            0.9945188164710999,
            9.239169594366103e-05,
            0.004322339780628681,
            7.675469532841817e-05,
            0.001480656093917787,
            8.753722067922354e-05,
            0.9904747605323792,
            9.363582648802549e-05
        ],
        "align_select": "select Breeds.breed_designation",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which breed do the most dogs have? Give me the breed name.",
        "gold_select": "select Breeds.breed_designation",
        "select_candidates": [
            "select Breeds.breed_designation",
            "select Breeds.breed_designation, Dogs.breed_code",
            "select Breeds.breed_code, Breeds.breed_designation",
            "select Breeds.breed_designation (or Dogs.breed_code)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Breeds Dogs",
        "table_candidates": [
            "Breeds Dogs"
        ],
        "align_scores": [
            0.9925372004508972,
            0.00010878876491915435,
            0.007600634358823299,
            8.609017095295712e-05,
            0.0015720954397693276,
            9.21492901397869e-05,
            0.9889206290245056,
            0.00011364846432115883
        ],
        "align_select": "select Breeds.breed_designation",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "gold_select": "select Owners.owner_id, Owners.last_name",
        "select_candidates": [
            "select Owners.owner_id, Owners.last_name",
            "select Treatments.professional_id, Owners.last_name",
            "select Treatments.dog_included, Owners.last_name",
            "select Dogs.owner_id, Owners.owner_id, Owners.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Owners Dogs Treatments",
            "Sizes Owners Dogs Treatments",
            "Treatment_Types Owners Dogs Treatments",
            "Owners Treatments",
            "Sizes Owners Treatments",
            "Sizes Dogs Treatments"
        ],
        "align_scores": [
            0.9850560426712036,
            0.00010625861614244059,
            0.0018250428838655353,
            0.00010784965706989169,
            0.0015426119789481163,
            8.684892964083701e-05,
            0.000414577079936862,
            7.866515079513192e-05
        ],
        "align_select": "select Owners.owner_id, Owners.last_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "gold_select": "select Owners.owner_id, Owners.last_name",
        "select_candidates": [
            "select Owners.owner_id, Owners.last_name",
            "select Treatments.dog_included, Owners.last_name",
            "select Dogs.owner_id, Owners.last_name",
            "select Treatments.professional_id, Owners.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Owners Dogs Treatments",
            "Sizes Owners Dogs Treatments",
            "Treatment_Types Owners Dogs Treatments",
            "Sizes Dogs Treatments"
        ],
        "align_scores": [
            0.9571389555931091,
            8.778933988651261e-05,
            0.0015304783592000604,
            7.415850996039808e-05,
            0.8435884118080139,
            8.67386843310669e-05,
            0.0010686427121981978,
            8.148201595759019e-05
        ],
        "align_select": "select Owners.owner_id, Owners.last_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the description of the treatment type that costs the least money in total?",
        "gold_select": "select Treatment_Types.therapy_type_fine_grained_info",
        "select_candidates": [
            "select Treatment_Types.therapy_type_fine_grained_info",
            "select Treatment_Types.therapy_type_fine_grained_info, Treatments.treatment_type_code",
            "select Treatment_Types.therapy_type_fine_grained_info, Treatments.professional_id",
            "select Treatment_Types.therapy_type_fine_grained_info, t7"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Charges Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments"
        ],
        "align_scores": [
            0.9923576712608337,
            7.889413245720789e-05,
            0.0013944434467703104,
            6.822637078585103e-05,
            0.0001716286496957764,
            6.202967779245228e-05,
            0.0006022275192663074,
            8.219609298976138e-05
        ],
        "align_select": "select Treatment_Types.therapy_type_fine_grained_info",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Give me the description of the treatment type whose total cost is the lowest.",
        "gold_select": "select Treatment_Types.therapy_type_fine_grained_info",
        "select_candidates": [
            "select Treatment_Types.therapy_type_fine_grained_info",
            "select Treatment_Types.therapy_type_fine_grained_info, Treatments.treatment_type_code",
            "select Treatment_Types.therapy_type_fine_grained_info, Treatments.professional_id",
            "select Treatment_Types.therapy_type_fine_grained_info, t7"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Charges Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments"
        ],
        "align_scores": [
            0.9938609600067139,
            7.153100159484893e-05,
            0.0009863564046099782,
            6.217155168997124e-05,
            0.00014472281327471137,
            5.70766678720247e-05,
            0.000441888376371935,
            6.924448098288849e-05
        ],
        "align_select": "select Treatment_Types.therapy_type_fine_grained_info",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "gold_select": "select Owners.owner_id, Owners.zip_number",
        "select_candidates": [
            "select Owners.owner_id, Owners.zip_number",
            "select Dogs.owner_id, Owners.zip_number",
            "select Sizes.measurement_codification, Owners.zip_number",
            "select Owners.owner_id-, Owners.zip_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Charges Owners Dogs",
            "Owners Dogs",
            "Breeds Charges Owners Dogs",
            "Charges Sizes Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Charges Sizes Dogs"
        ],
        "align_scores": [
            0.26187455654144287,
            9.35323114390485e-05,
            0.012051247991621494,
            9.590887930244207e-05,
            0.0008305866504088044,
            9.542000043438748e-05,
            0.0018701651133596897,
            8.600164437666535e-05
        ],
        "align_select": "select Owners.owner_id, Owners.zip_number",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "gold_select": "select Owners.owner_id, Owners.zip_number",
        "select_candidates": [
            "select Owners.owner_id, Owners.zip_number",
            "select Dogs.owner_id, Owners.zip_number",
            "select Owners.owner_id-, Owners.zip_number",
            "select Sizes.size_specifications, Owners.zip_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Owners Dogs Treatments",
            "Sizes Owners Dogs Treatments",
            "Charges Owners Dogs Treatments",
            "Treatment_Types Owners Dogs Treatments",
            "Breeds Owners Dogs Treatments",
            "Owners Dogs",
            "Charges Owners Dogs"
        ],
        "align_scores": [
            0.3262440860271454,
            9.205944661516696e-05,
            0.033529266715049744,
            9.257556666852906e-05,
            0.002065397333353758,
            8.11179488664493e-05,
            0.0007265204330906272,
            9.371417399961501e-05
        ],
        "align_select": "select Owners.owner_id, Owners.zip_number",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List the cost of each treatment and the corresponding treatment type description.",
        "gold_select": "select Treatments.cost_of_treatment, Treatment_Types.therapy_type_fine_grained_info",
        "select_candidates": [
            "select Treatments.cost_of_treatment, Treatment_Types.therapy_type_fine_grained_info",
            "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_code_description",
            "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_code_fine_grained_info",
            "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Charges Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments"
        ],
        "align_scores": [
            0.9924877882003784,
            0.9929805397987366,
            0.9905555844306946,
            0.9904882907867432,
            0.9851356148719788,
            0.945861279964447,
            0.5888912677764893,
            0.006216159090399742
        ],
        "align_select": "select Treatments.cost_of_treatment, Treatment_Types.therapy_type_fine_grained_info",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the cost and treatment type description of each treatment?",
        "gold_select": "select Treatments.cost_of_treatment, Treatment_Types.therapy_type_fine_grained_info",
        "select_candidates": [
            "select Treatments.cost_of_treatment, Treatment_Types.therapy_type_fine_grained_info",
            "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_code",
            "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_code_description",
            "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_code_fine_grained_info"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Charges Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments"
        ],
        "align_scores": [
            0.9934396147727966,
            0.00010453500726725906,
            0.02490467019379139,
            0.00013202511763665825,
            0.9922478199005127,
            0.00011046518920920789,
            0.9607800245285034,
            0.00010048635886050761
        ],
        "align_select": "select Treatments.cost_of_treatment, Treatment_Types.therapy_type_fine_grained_info",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "gold_select": "select Dogs.name, Treatments.date_of_treatment",
        "select_candidates": [
            "select Dogs.name, Treatments.date_of_treatment",
            "select Dogs.name, Treatments.treatment_type_code",
            "select Dogs.name, t07.c4",
            "select Dogs.name, Dogs.size_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Breeds Dogs Treatments",
            "Charges Dogs Treatments",
            "Sizes Dogs Treatments"
        ],
        "align_scores": [
            0.9696211814880371,
            0.9765933752059937,
            0.0010897902538999915,
            0.00064808689057827,
            0.000648588698823005,
            0.000631358998361975,
            0.00028110708808526397,
            0.0002919863036368042
        ],
        "align_select": "select Dogs.name, Treatments.date_of_treatment",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "gold_select": "select Dogs.name, Treatments.date_of_treatment",
        "select_candidates": [
            "select Dogs.name, Treatments.date_of_treatment",
            "select Dogs.name, Treatments.treatment_type_code",
            "select Dogs.name, Dogs.size_code",
            "select Dogs.name, t07.c4"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Breeds Dogs Treatments",
            "Charges Dogs Treatments",
            "Treatment_Types Dogs Treatments",
            "Sizes Dogs Treatments"
        ],
        "align_scores": [
            0.9652599692344666,
            0.9898021817207336,
            0.0006440077559091151,
            0.0005936207016929984,
            0.00042070646304637194,
            0.00030139839509502053,
            0.0006012792000547051,
            0.0004914631717838347
        ],
        "align_select": "select Dogs.name, Treatments.date_of_treatment",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "gold_select": "select Owners.first_name, Dogs.name",
        "select_candidates": [
            "select Owners.first_name, Dogs.name",
            "select Owners.first_name, Owners.province",
            "select Dogs.owner_id, Dogs.name",
            "select Owners.first_name, Dogs.name, Owners.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Sizes Owners Dogs",
            "Breeds Owners Dogs"
        ],
        "align_scores": [
            0.9524298906326294,
            0.0002601975866127759,
            0.0010271589271724224,
            0.0001030852145049721,
            0.00046559309703297913,
            8.315388549817726e-05,
            0.0002961583959404379,
            8.358868944924325e-05
        ],
        "align_select": "select Owners.first_name, Dogs.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
        "gold_select": "select Owners.first_name, Dogs.name",
        "select_candidates": [
            "select Owners.first_name, Owners.last_name",
            "select Owners.first_name, Owners.last_name, Dogs.name",
            "select Owners.first_name, Owners.last_name, Owners.province",
            "select Owners.first_name, Owners.last_name, Dogs.name, Owners.owner_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs"
        ],
        "align_scores": [
            0.0006670861621387303,
            8.818973583402112e-05,
            0.00018675014143809676,
            6.232429586816579e-05,
            0.00019008661911357194,
            7.55570363253355e-05,
            0.00012969945964869112,
            6.675629992969334e-05
        ],
        "align_select": "select Owners.first_name, Owners.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "gold_select": "select distinct Dogs.when_arrived, Dogs.date_departed",
        "select_candidates": [
            "select Dogs.when_arrived, Dogs.date_departed",
            "select Dogs.dog_id, Dogs.date_departed",
            "select Dogs.owner_id, Dogs.date_departed",
            "select Dogs.weight, Dogs.date_departed"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.014852670952677727,
            8.514645014656708e-05,
            0.0008029151940718293,
            7.877175085013732e-05,
            0.0007202568231150508,
            8.126242028083652e-05,
            0.0010533129097893834,
            0.0001472152944188565
        ],
        "align_select": "select Dogs.when_arrived, Dogs.date_departed",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "gold_select": "select distinct Dogs.when_arrived, Dogs.date_departed",
        "select_candidates": [
            "select Dogs.when_arrived, Dogs.date_departed",
            "select Dogs.dog_id, Dogs.date_departed",
            "select Treatments.date_of_treatment, Dogs.when_arrived, Dogs.date_departed",
            "select Dogs.owner_id, Dogs.date_departed"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-INTERSECT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.03420757129788399,
            0.00011182291927980259,
            0.0006641048239544034,
            0.00014700712927151471,
            0.00047634736984036863,
            7.383237243629992e-05,
            0.0006282717804424465,
            0.00015350719331763685
        ],
        "align_select": "select Dogs.when_arrived, Dogs.date_departed",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the arriving date and the departing date of all the dogs?",
        "gold_select": "select Dogs.when_arrived, Dogs.date_departed",
        "select_candidates": [
            "select Dogs.when_arrived, Dogs.date_departed",
            "select Dogs.dog_id, Dogs.date_departed",
            "select Dogs.owner_id, Dogs.date_departed",
            "select Dogs.weight, Dogs.date_departed"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.013060135766863823,
            0.00010112589370692149,
            0.00043096067383885384,
            7.622950943186879e-05,
            0.0005937975947745144,
            8.529685874236748e-05,
            0.0006937783327884972,
            0.00022662381525151432
        ],
        "align_select": "select Dogs.when_arrived, Dogs.date_departed",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the arrival date and the departure date for all the dogs.",
        "gold_select": "select Dogs.when_arrived, Dogs.date_departed",
        "select_candidates": [
            "select Dogs.when_arrived, Dogs.date_departed",
            "select Dogs.dog_id, Dogs.date_departed",
            "select Dogs.owner_id, Dogs.date_departed",
            "select Dogs.weight, Dogs.date_departed"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.024839719757437706,
            8.83701432030648e-05,
            0.0003840358695015311,
            6.764717545593157e-05,
            0.0004444483492989093,
            8.675572462379932e-05,
            0.0005760052590630949,
            0.00019534530292730778
        ],
        "align_select": "select Dogs.when_arrived, Dogs.date_departed",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many dogs went through any treatments?",
        "gold_select": "select count(distinct Treatments.dog_included)",
        "select_candidates": [
            "select count(*)",
            "select count(Treatments.dog_included)",
            "select count(distinct Treatments.dog_included)",
            "select count(distinct Treatments.treatment_id)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Treatments",
        "table_candidates": [
            "Treatments",
            "Dogs Treatments",
            "Professionals Treatments",
            "Breeds Dogs Treatments",
            "Breeds Treatments",
            "Treatment_Types Treatments",
            "Charges Treatments",
            "Treatment_Types Dogs Treatments"
        ],
        "align_scores": [
            0.9758580923080444,
            0.9758580923080444,
            0.9904168844223022,
            0.9904168844223022,
            0.9860500693321228,
            0.9860500693321228,
            0.016133561730384827,
            0.016133561730384827
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Count the number of dogs that went through a treatment.",
        "gold_select": "select count(distinct Treatments.dog_included)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct Treatments.dog_included)",
            "select count(Treatments.dog_included)",
            "select count(distinct Treatments.treatment_id)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Treatments",
        "table_candidates": [
            "Treatments",
            "Dogs Treatments",
            "Professionals Treatments",
            "Breeds Treatments",
            "Treatment_Types Treatments",
            "Breeds Dogs Treatments",
            "Breeds Charges Treatments"
        ],
        "align_scores": [
            0.969106912612915,
            0.969106912612915,
            0.8249934911727905,
            0.8249934911727905,
            0.985905647277832,
            0.985905647277832,
            0.5995891094207764,
            0.5995891094207764
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "gold_select": "select Owners.first_name, Owners.last_name, Owners.email_address",
        "select_candidates": [
            "select Owners.first_name, Owners.last_name, Owners.email_address",
            "select Owners.first_name., Owners.last_name, Owners.email_address",
            "select Owners.first_name, Owners.last_name and Owners.email_address",
            "select Owners.first_name, Owners.last_name, Owners.email_address"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners",
        "table_candidates": [
            "Owners"
        ],
        "align_scores": [
            0.9887463450431824,
            0.0001086262273020111,
            0.012037403881549835,
            0.0001271647197427228,
            0.9859949946403503,
            0.00011152486695209518,
            0.9887463450431824,
            0.0001086262273020111
        ],
        "align_select": "select Owners.first_name, Owners.last_name, Owners.email_address",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "gold_select": "select Owners.first_name, Owners.last_name, Owners.email_address",
        "select_candidates": [
            "select Owners.first_name, Owners.last_name, Owners.email_address",
            "select Owners.first_name., Owners.last_name, Owners.email_address",
            "select Owners.first_name, Owners.last_name, Owners.email_address",
            "select Owners.first_name, Owners.last_name and Owners.email_address"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners",
        "table_candidates": [
            "Owners"
        ],
        "align_scores": [
            0.9914905428886414,
            9.688804129837081e-05,
            0.03497546166181564,
            0.00010746590851340443,
            0.9914905428886414,
            9.688804129837081e-05,
            0.9890214800834656,
            0.00010368381481384858
        ],
        "align_select": "select Owners.first_name, Owners.last_name, Owners.email_address",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many dogs have not gone through any treatment?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Dogs.dog_id",
            "select count(*), Dogs.breed_code",
            "select count(*), Treatments.dog_included"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs Professionals Treatments",
            "Dogs"
        ],
        "align_scores": [
            0.9845408201217651,
            0.0031732888892292976,
            0.00025069891125895083,
            0.0009839643025770783,
            0.0002350524446228519,
            0.0063913543708622456,
            0.00021982674661558121,
            0.000547447707504034
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Tell me the number of dogs that have not received any treatment.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Dogs.dog_id",
            "select count(*), Dogs.breed_code",
            "select count(*), Treatments.dog_included"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs",
            "Dogs Professionals Treatments",
            "Dogs Professionals"
        ],
        "align_scores": [
            0.9830970764160156,
            0.0041976673528552055,
            0.00019960346980951726,
            0.0005257762386463583,
            0.00018634636944625527,
            0.00353790121152997,
            0.000182061325176619,
            0.0004274527309462428
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the email, cell phone and home phone of all the professionals.",
        "gold_select": "select Professionals.email_address, Professionals.cell_number, Professionals.home_ring_up",
        "select_candidates": [
            "select Professionals.email_address, Professionals.cell_number, Professionals.email_address",
            "select Professionals.email_address, Professionals.home_ring_up, Professionals.email_address",
            "select Professionals.email_address, t6.cten, Professionals.email_address",
            "select Professionals.email_address, Professionals.cell_number, Professionals.home_ring_up"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals"
        ],
        "align_scores": [
            0.0004039428022224456,
            0.00010606828436721116,
            0.00047217498649843037,
            0.00012278447684366256,
            0.0004383971099741757,
            0.00011210649245185778,
            0.8785340785980225,
            0.00011568170884856954
        ],
        "align_select": "select Professionals.email_address, Professionals.cell_number, Professionals.home_ring_up",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the email, cell phone and home phone of each professional?",
        "gold_select": "select Professionals.email_address, Professionals.cell_number, Professionals.home_ring_up",
        "select_candidates": [
            "select Professionals.email_address, Professionals.cell_number, Professionals.email_address",
            "select Professionals.email_address, Professionals.home_ring_up, Professionals.email_address",
            "select Professionals.email_address, t6.cten, Professionals.email_address",
            "select Professionals.email_address, Professionals.professional_id9, Professionals.email_address"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals"
        ],
        "align_scores": [
            0.0004286399343982339,
            7.91419661254622e-05,
            0.0005128388293087482,
            8.202336175600067e-05,
            0.00044702470768243074,
            6.16259130765684e-05,
            0.0003072576073464006,
            6.800168921472505e-05
        ],
        "align_select": "select Professionals.email_address, Professionals.cell_number, Professionals.email_address",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the first name of all the professionals along with the description of the treatment they have done.",
        "gold_select": "select distinct Professionals.first_name, Treatment_Types.therapy_type_fine_grained_info",
        "select_candidates": [
            "select Professionals.first_name, Treatments.treatment_type_code",
            "select Professionals.first_name, Treatments.date_of_treatment",
            "select Professionals.first_name, Treatments.cost_of_treatment",
            "select Professionals.first_name, Treatments.treatment_type_code, Professionals.city"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Charges Professionals Treatments",
            "Owners Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments",
            "Sizes Treatments"
        ],
        "align_scores": [
            0.1735076606273651,
            0.8317829966545105,
            0.0006399103440344334,
            0.000452029868029058,
            0.0004780892049893737,
            0.0003281976387370378,
            0.0002846601128112525,
            0.0002329845301574096
        ],
        "align_select": "select Professionals.first_name, Treatments.treatment_type_code",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are each professional's first name and description of the treatment they have performed?",
        "gold_select": "select distinct Professionals.first_name, Treatment_Types.therapy_type_fine_grained_info",
        "select_candidates": [
            "select Professionals.first_name, Treatments.treatment_type_code",
            "select Professionals.first_name, Treatments.date_of_treatment",
            "select Professionals.first_name, Professionals.last_name",
            "select Professionals.first_name, Treatments.cost_of_treatment"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Charges Professionals Treatments",
            "Owners Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments"
        ],
        "align_scores": [
            0.026572883129119873,
            0.6516394019126892,
            0.0007827101508155465,
            0.0005054191569797695,
            0.0004938619676977396,
            0.00048442312981933355,
            0.0011054313508793712,
            0.0005727992975153029
        ],
        "align_select": "select Professionals.first_name, Treatments.treatment_type_code",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Which dogs have not cost their owner more than 1000 for treatment? List the dog names.",
        "gold_select": "select Dogs.name",
        "select_candidates": [
            "select Dogs.name",
            "select Dogs.name, Treatments.dog_id",
            "select Dogs.name, Charges.charge_amount",
            "select Dogs.name, Treatments.professional_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Charges Dogs Treatments",
            "Charges Sizes Dogs Treatments",
            "Breeds Charges Dogs Treatments"
        ],
        "align_scores": [
            0.035953231155872345,
            0.0021722926758229733,
            0.0005938495742157102,
            0.0005188372451812029,
            0.00037652175524272025,
            0.0003949508536607027,
            0.00026840734062716365,
            0.00024049881903920323
        ],
        "align_select": "select Dogs.name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment?",
        "gold_select": "select Dogs.name",
        "select_candidates": [
            "select Dogs.name",
            "select Dogs.name, Dogs.age",
            "select Dogs.name, Treatments.dog_id",
            "select Dogs.name, Dogs.breed_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Charges Dogs Treatments",
            "Breeds Charges Dogs Treatments",
            "Charges Sizes Dogs Treatments"
        ],
        "align_scores": [
            0.5781142711639404,
            0.9501652717590332,
            0.00017466838471591473,
            0.00016578628856223077,
            0.0013660078402608633,
            0.0002676305011846125,
            0.0013422711053863168,
            0.00038073654286563396
        ],
        "align_select": "select Dogs.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "gold_select": "select Professionals.professional_id, Professionals.role_code, Professionals.mail",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.role_code, Professionals.mail",
            "select Professionals.professional_id, Professionals.first_name, Professionals.mail",
            "select Professionals.professional_id, Professionals.role_code, Professionals.mail",
            "select Professionals.professional_id, Professionals.street, Professionals.mail"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.6607669591903687,
            0.02515137568116188,
            0.00039089462370611727,
            0.0001619444665266201,
            0.6607669591903687,
            0.02515137568116188,
            0.000626995344646275,
            0.00019919147598557174
        ],
        "align_select": "select Professionals.professional_id, Professionals.role_code, Professionals.mail",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
        "gold_select": "select Professionals.professional_id, Professionals.role_code, Professionals.mail",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.role_code, Professionals.mail",
            "select Professionals.professional_id, Professionals.first_name, Professionals.mail",
            "select Professionals.role_code, Professionals.first_name, Professionals.mail",
            "select Professionals.professional_id, Professionals.role_code, Professionals.mail"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.744138777256012,
            0.01905805431306362,
            0.00039992391248233616,
            0.00013832042168360204,
            0.000414614420151338,
            0.00014425022527575493,
            0.744138777256012,
            0.01905805431306362
        ],
        "align_select": "select Professionals.professional_id, Professionals.role_code, Professionals.mail",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "What is the description of the treatment type that costs the least money in total?",
        "gold_select": "select Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatment_Types.treatment_type_description",
            "select Treatment_Types.treatment_type_description, Treatments.treatment_type_code",
            "select Treatment_Types.treatment_type_description, Treatments.professional_id",
            "select Treatment_Types.treatment_type_description, Treatments.dog_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Charges Treatment_Types Treatments",
            "Charges Sizes Treatment_Types Treatments",
            "Breeds Charges Treatment_Types Treatments",
            "Treatment_Types Treatments"
        ],
        "align_scores": [
            0.9937441945075989,
            7.971069862833247e-05,
            0.0007021152414381504,
            6.0568752815015614e-05,
            0.00012490585504565388,
            5.8748591982293874e-05,
            0.0002291341224918142,
            6.342589040286839e-05
        ],
        "align_select": "select Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Give me the description of the treatment type whose total cost is the lowest.",
        "gold_select": "select Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatment_Types.treatment_type_description",
            "select Treatment_Types.treatment_type_description, Treatments.treatment_type_code",
            "select Treatment_Types.treatment_type_description, Treatments.professional_id",
            "select Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Charges Treatment_Types Treatments",
            "Breeds Charges Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Breeds Charges Sizes Treatment_Types Treatments",
            "Breeds Charges Charges Treatment_Types Treatments"
        ],
        "align_scores": [
            0.9950726628303528,
            7.354966510320082e-05,
            0.00036189265665598214,
            5.9682624851120636e-05,
            0.00010917556210188195,
            5.651496030623093e-05,
            0.0006232407176867127,
            7.204999565146863e-05
        ],
        "align_select": "select Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "gold_select": "select Owners.owner_id, Owners.zip_code",
        "select_candidates": [
            "select Owners.owner_id, Owners.zip_code",
            "select Sizes.size_code, Owners.zip_code",
            "select Owners.owner_id-, Owners.zip_code",
            "select Owners.owner_id, t4c6"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Charges Owners Dogs",
            "Owners Dogs",
            "Breeds Charges Owners Dogs",
            "Charges Sizes Owners Dogs",
            "Sizes Owners Dogs",
            "Breeds Charges Sizes Owners Dogs",
            "Treatment_Types Owners Dogs"
        ],
        "align_scores": [
            0.9719984531402588,
            9.741741087054834e-05,
            0.000557378341909498,
            9.442299051443115e-05,
            0.002873925492167473,
            8.440102828899398e-05,
            0.0011824837420135736,
            9.402316209161654e-05
        ],
        "align_select": "select Owners.owner_id, Owners.zip_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "gold_select": "select Owners.owner_id, Owners.zip_code",
        "select_candidates": [
            "select Owners.owner_id, Owners.zip_code",
            "select Owners.owner_id-, Owners.zip_code",
            "select Dogs.owner_id, Owners.zip_code",
            "select Sizes.size_code, Owners.zip_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Charges Owners Dogs",
            "Owners Dogs",
            "Breeds Charges Owners Dogs",
            "Charges Sizes Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs"
        ],
        "align_scores": [
            0.9783153533935547,
            9.202890214510262e-05,
            0.0036491097416728735,
            8.409439033130184e-05,
            0.8121184706687927,
            0.00010219514661002904,
            0.0006959905731491745,
            9.184689406538382e-05
        ],
        "align_select": "select Owners.owner_id, Owners.zip_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "gold_select": "select distinct Professionals.first_name, Professionals.last_name",
        "select_candidates": [
            "select Professionals.first_name, Professionals.last_name",
            "select distinct Professionals.first_name, Professionals.last_name",
            "select Professionals.role_code, Professionals.last_name",
            "select t6).c2, Professionals.last_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Charges Professionals Treatments",
            "Charges Sizes Professionals Treatments",
            "Charges Dogs Professionals Treatments",
            "Charges Treatment_Types Professionals Treatments",
            "Charges Sizes Treatments"
        ],
        "align_scores": [
            0.963548481464386,
            0.00045636616414412856,
            0.04227857664227486,
            0.00011372369772288948,
            0.0005006120773032308,
            0.00010413703421363607,
            0.0007528566638939083,
            0.0001118214349844493
        ],
        "align_select": "select Professionals.first_name, Professionals.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "gold_select": "select distinct Professionals.first_name, Professionals.last_name",
        "select_candidates": [
            "select Professionals.first_name, Professionals.last_name",
            "select distinct Professionals.first_name, Professionals.last_name",
            "select Professionals.role_code, Professionals.last_name",
            "select Dogs.abandoned_yn, Professionals.last_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Charges Professionals Treatments",
            "Charges Sizes Professionals Treatments",
            "Breeds Charges Professionals Treatments",
            "Charges Sizes Treatments",
            "Charges Dogs Professionals Treatments",
            "Charges Treatment_Types Professionals Treatments"
        ],
        "align_scores": [
            0.1043781042098999,
            0.00026049994630739093,
            0.017282189801335335,
            0.00015652677393518388,
            0.0005771272117272019,
            0.00014755821030121297,
            0.0006820888957008719,
            0.0001950412115547806
        ],
        "align_select": "select Professionals.first_name, Professionals.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the cost of each treatment and the corresponding treatment type description.",
        "gold_select": "select Treatments.charge_of_curative, Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatments.charge_of_curative, Treatment_Types.treatment_type_description",
            "select Treatments.charge_of_curative, Treatment_Types.treatment_type_code_description",
            "select t8.c5, Treatment_Types.treatment_type_description",
            "select Treatments.dog_id, Treatment_Types.treatment_type_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Charges Treatment_Types Treatments",
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Charges Sizes Treatment_Types Treatments",
            "Breeds Charges Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments"
        ],
        "align_scores": [
            0.9766985774040222,
            0.9859549403190613,
            0.9577006101608276,
            0.9659608602523804,
            0.00045804871479049325,
            0.0004913507727906108,
            0.00029703270411118865,
            0.00044159081880934536
        ],
        "align_select": "select Treatments.charge_of_curative, Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the cost and treatment type description of each treatment?",
        "gold_select": "select Treatments.charge_of_curative, Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatments.charge_of_curative, Treatment_Types.treatment_type_description",
            "select Treatments.charge_of_curative, Treatment_Types.treatment_type_code_description",
            "select t8.c5, Treatment_Types.treatment_type_description",
            "select Treatments.charge_of_curative, Treatment_Types.treatment_type_description, Treatments.treatment_type_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Charges Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Breeds Charges Treatment_Types Treatments",
            "Charges Sizes Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments",
            "Breeds Charges Sizes Treatment_Types Treatments"
        ],
        "align_scores": [
            0.9882131218910217,
            0.0001410836703144014,
            0.9788355827331543,
            0.00011572253424674273,
            0.0006193331792019308,
            0.00015720554802101105,
            0.0002775256580207497,
            7.386243669316173e-05
        ],
        "align_select": "select Treatments.charge_of_curative, Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "gold_select": "select distinct Dogs.date_arrived, Dogs.when_left",
        "select_candidates": [
            "select Dogs.date_arrived, Dogs.when_left",
            "select Dogs.dog_id, Dogs.when_left",
            "select Dogs.owner_id, Dogs.when_left",
            "select Dogs.mass, Dogs.when_left"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.013212380930781364,
            8.36494509712793e-05,
            0.0007178176892921329,
            7.094203465385363e-05,
            0.000807952368631959,
            6.863629823783413e-05,
            0.0012454601237550378,
            0.00012655745376832783
        ],
        "align_select": "select Dogs.date_arrived, Dogs.when_left",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "gold_select": "select distinct Dogs.date_arrived, Dogs.when_left",
        "select_candidates": [
            "select Dogs.date_arrived, Dogs.when_left",
            "select Dogs.dog_id, Dogs.when_left",
            "select Dogs.owner_id, Dogs.when_left",
            "select Dogs.dog_id, Dogs.date_adopted"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.025361206382513046,
            7.847305823815987e-05,
            0.0005112130311317742,
            7.606685539940372e-05,
            0.0006444347673095763,
            7.017271855147555e-05,
            0.0006423025042749941,
            7.267586624948308e-05
        ],
        "align_select": "select Dogs.date_arrived, Dogs.when_left",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "gold_select": "select Professionals.mail",
        "select_candidates": [
            "select Professionals.mail",
            "select Professionals.state, Professionals.mail",
            "select Professionals.mail, Professionals.home_phone",
            "select Professionals.mail (or Professionals.home_phone)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals",
            "Dogs Professionals",
            "Owners Professionals",
            "Treatment_Types Professionals"
        ],
        "align_scores": [
            0.8973572850227356,
            0.5083166360855103,
            0.0002536066749598831,
            0.00013542946544475853,
            0.0003485869965516031,
            0.00012301933020353317,
            0.07746906578540802,
            0.0009106099023483694
        ],
        "align_select": "select Professionals.mail",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
        "gold_select": "select Professionals.mail",
        "select_candidates": [
            "select Professionals.mail",
            "select Professionals.state, Professionals.mail",
            "select Professionals.mail, Professionals.home_phone",
            "select Professionals.mail, Professionals.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals",
            "Owners Professionals",
            "Dogs Professionals",
            "Treatment_Types Professionals",
            "Sizes Professionals",
            "Breeds Professionals",
            "Professionals Treatments"
        ],
        "align_scores": [
            0.9274919033050537,
            0.02496812865138054,
            0.00022531555441673845,
            9.246537229046226e-05,
            0.0003026714257430285,
            8.888406591722742e-05,
            0.00017665686027612537,
            7.888217078289017e-05
        ],
        "align_select": "select Professionals.mail",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the arriving date and the departing date of all the dogs?",
        "gold_select": "select Dogs.date_arrived, Dogs.when_left",
        "select_candidates": [
            "select Dogs.date_arrived, Dogs.when_left",
            "select Dogs.dog_id, Dogs.when_left",
            "select Dogs.owner_id, Dogs.when_left",
            "select Dogs.mass, Dogs.when_left"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.012825680896639824,
            9.72635971265845e-05,
            0.00046516984002664685,
            8.500017429469153e-05,
            0.0005759844789281487,
            8.743768557906151e-05,
            0.0008015980711206794,
            0.00027262361254543066
        ],
        "align_select": "select Dogs.date_arrived, Dogs.when_left",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the arrival date and the departure date for all the dogs.",
        "gold_select": "select Dogs.date_arrived, Dogs.when_left",
        "select_candidates": [
            "select Dogs.date_arrived, Dogs.when_left",
            "select Dogs.dog_id, Dogs.when_left",
            "select Dogs.owner_id, Dogs.when_left",
            "select Dogs.mass, Dogs.when_left"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.02307719923555851,
            9.43967024795711e-05,
            0.00043924336205236614,
            9.603315993444994e-05,
            0.0005149873322807252,
            0.00010145815758733079,
            0.0006830822676420212,
            0.00025557869230397046
        ],
        "align_select": "select Dogs.date_arrived, Dogs.when_left",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How much does the most recent treatment cost?",
        "gold_select": "select Treatments.charge_of_curative",
        "select_candidates": [
            "select Treatments.charge_of_curative",
            "select max(Treatments.charge_of_curative)",
            "select Charges.charge_amount",
            "select max(Charges.charge_amount)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatments",
        "table_candidates": [
            "Charges Treatments",
            "Breeds Charges Treatments",
            "Charges"
        ],
        "align_scores": [
            0.5934880971908569,
            5.6782260799081996e-05,
            8.172714296961203e-05,
            5.817653436679393e-05,
            0.031024930998682976,
            5.5789609177736565e-05,
            9.42966653383337e-05,
            5.809359936392866e-05
        ],
        "align_select": "select Treatments.charge_of_curative",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the cost of the most recently performed treatment.",
        "gold_select": "select Treatments.charge_of_curative",
        "select_candidates": [
            "select Treatments.charge_of_curative",
            "select Charges.charge_amount",
            "select Treatments.date_of_treatment, Treatments.charge_of_curative",
            "select Treatments.date_of_treatment, Charges.charge_amount"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatments",
        "table_candidates": [
            "Charges Treatments",
            "Breeds Charges Treatments",
            "Dogs Treatments",
            "Sizes Treatments",
            "Professionals Treatments"
        ],
        "align_scores": [
            0.964297354221344,
            6.070203744457103e-05,
            0.9786388278007507,
            6.12712829024531e-05,
            0.000157320115249604,
            6.128331733634695e-05,
            0.0002166658960049972,
            6.0941696574445814e-05
        ],
        "align_select": "select Treatments.charge_of_curative",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "gold_select": "select Dogs.name, Dogs.age, Dogs.mass",
        "select_candidates": [
            "select Dogs.name, Dogs.age, Dogs.mass",
            "select distinct Dogs.name, Dogs.age, Dogs.mass",
            "select Dogs.name, Dogs.age, Dogs.mass, Dogs.abandoned_yn",
            "select Dogs.dog_id, Dogs.name, Dogs.age, Dogs.mass"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs",
            "Dogs Professionals",
            "Dogs Treatments",
            "Dogs Sizes"
        ],
        "align_scores": [
            0.32600948214530945,
            0.0280569139868021,
            0.015473175793886185,
            0.0002428224979666993,
            0.00031322980066761374,
            0.00018063651805277914,
            0.000323490152368322,
            0.0003027253842446953
        ],
        "align_select": "select Dogs.name, Dogs.age, Dogs.mass",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
        "gold_select": "select Dogs.name, Dogs.age, Dogs.mass",
        "select_candidates": [
            "select Dogs.name, Dogs.age, Dogs.mass",
            "select distinct Dogs.name, Dogs.age, Dogs.mass",
            "select Dogs.name, Dogs.age, Dogs.mass, Dogs.abandoned_yn",
            "select Dogs.name, Dogs.age, Dogs.mass - Dogs.abandoned_yn"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.6777774095535278,
            0.0009504379122518003,
            0.00662439176812768,
            9.80218974291347e-05,
            0.00037987696123309433,
            0.00010747759370133281,
            0.0016452450072392821,
            0.00011824505781987682
        ],
        "align_select": "select Dogs.name, Dogs.age, Dogs.mass",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the email, cell phone and home phone of all the professionals.",
        "gold_select": "select Professionals.mail, Professionals.cell_number, Professionals.home_phone",
        "select_candidates": [
            "select Professionals.mail, Professionals.cell_number, Professionals.home_phone",
            "select Professionals.mail, Professionals.home_phone, Professionals.cell_number",
            "select Professionals.mail, t6.cten, Professionals.home_phone",
            "select Professionals.mail, Professionals.professional_id9, Professionals.home_phone"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals"
        ],
        "align_scores": [
            0.9321129322052002,
            0.00010249808110529557,
            0.9322229027748108,
            9.532405965728685e-05,
            0.0005039030220359564,
            0.00011194615944987163,
            0.0004481085925363004,
            0.00014893643674440682
        ],
        "align_select": "select Professionals.mail, Professionals.cell_number, Professionals.home_phone",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the email, cell phone and home phone of each professional?",
        "gold_select": "select Professionals.mail, Professionals.cell_number, Professionals.home_phone",
        "select_candidates": [
            "select Professionals.mail, Professionals.cell_number, Professionals.home_phone",
            "select Professionals.mail, Professionals.home_phone, Professionals.cell_number",
            "select Professionals.mail, t6.cten, Professionals.home_phone",
            "select Professionals.mail, Professionals.professional_id9, Professionals.home_phone"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals"
        ],
        "align_scores": [
            0.9884655475616455,
            0.00011115772213088349,
            0.9898556470870972,
            0.00010674953955458477,
            0.0006565627991221845,
            7.119760994100943e-05,
            0.0005150788347236812,
            7.159725646488369e-05
        ],
        "align_select": "select Professionals.mail, Professionals.cell_number, Professionals.home_phone",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Which states have both owners and professionals living there?",
        "gold_select": "select Owners.province",
        "select_candidates": [
            "select Owners.province",
            "select Owners.city",
            "select Owners.province, Professionals.district",
            "select Owners.province, Owners.zip_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-INTERSECT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Professionals",
        "table_candidates": [
            "Owners Professionals",
            "Treatment_Types Owners Professionals",
            "Sizes Owners Professionals",
            "Charges Owners Professionals"
        ],
        "align_scores": [
            0.987040102481842,
            0.00025571807054802775,
            0.03557836636900902,
            0.00014514043868985027,
            0.01487419568002224,
            9.658115595811978e-05,
            0.00019366339256521314,
            7.929539424367249e-05
        ],
        "align_select": "select Owners.province",
        "align_structure": "SELECT-FROM-INTERSECT-SELECT-FROM"
    },
    {
        "question": "Find the states where both owners and professionals live.",
        "gold_select": "select Owners.province",
        "select_candidates": [
            "select Owners.province",
            "select Owners.province, Owners.zip_code",
            "select Owners.province, Professionals.district",
            "select Owners.province, Professionals.zip_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-INTERSECT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Professionals",
        "table_candidates": [
            "Owners Professionals",
            "Sizes Owners Professionals",
            "Treatment_Types Owners Professionals",
            "Charges Owners Professionals"
        ],
        "align_scores": [
            0.37565237283706665,
            0.08788858354091644,
            0.00023395796597469598,
            9.584762301528826e-05,
            0.0069944425486028194,
            0.00018070561054628342,
            0.00026489418814890087,
            9.855941607384011e-05
        ],
        "align_select": "select Owners.province",
        "align_structure": "SELECT-FROM-INTERSECT-SELECT-FROM"
    },
    {
        "question": "What is the average age of the dogs who have gone through any treatments?",
        "gold_select": "select avg(Dogs.age)",
        "select_candidates": [
            "select avg(Dogs.age)",
            "select Treatments.dog_included, avg(Dogs.age)",
            "select avg(Dogs.age), Treatments.dog_included",
            "select an avg(Dogs.age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.990545392036438,
            0.0007176302606239915,
            0.000557157676666975,
            0.0009779204847291112,
            0.00014788527914788574,
            0.0006141098565421999,
            0.0005715275765396655,
            0.00020061549730598927
        ],
        "align_select": "select avg(Dogs.age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the average age of the dogs who went through treatments.",
        "gold_select": "select avg(Dogs.age)",
        "select_candidates": [
            "select avg(Dogs.age)",
            "select an avg(Dogs.age)",
            "select avg(Dogs.age)",
            "select the avg(Dogs.age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-INTERSECT-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs Treatments"
        ],
        "align_scores": [
            0.9765507578849792,
            5.635049819829874e-05,
            0.0011064468417316675,
            7.209617615444586e-05,
            0.9765507578849792,
            5.635049819829874e-05,
            0.0006483089528046548,
            7.598993397550657e-05
        ],
        "align_select": "select avg(Dogs.age)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "gold_select": "select Professionals.professional_id, Professionals.surname, Professionals.calling",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.surname, Professionals.home_phone",
            "select Professionals.first_name, Professionals.surname, Professionals.home_phone",
            "select Treatments.professional_id, Professionals.surname, Professionals.home_phone",
            "select Professionals.role_code, Professionals.surname, Professionals.home_phone"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Sizes Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Breeds Professionals Treatments",
            "Charges Professionals Treatments"
        ],
        "align_scores": [
            0.008877495303750038,
            0.0011782197980210185,
            0.0001776636199792847,
            0.00011554611410247162,
            0.0030829960014671087,
            0.000900568556971848,
            0.0005139682325534523,
            0.00021435403323266655
        ],
        "align_select": "select Professionals.professional_id, Professionals.surname, Professionals.home_phone",
        "align_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
        "gold_select": "select Professionals.professional_id, Professionals.surname, Professionals.calling",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.surname, Professionals.home_phone",
            "select Professionals.first_name, Professionals.surname, Professionals.home_phone",
            "select Treatments.professional_id, Professionals.surname, Professionals.home_phone",
            "select Professionals.role_code, Professionals.surname, Professionals.home_phone"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Sizes Professionals Treatments",
            "Breeds Professionals Treatments"
        ],
        "align_scores": [
            0.12305724620819092,
            0.008271656930446625,
            0.0002348385169170797,
            0.0001355448184767738,
            0.011052899993956089,
            0.0023877888452261686,
            0.001675714855082333,
            0.0004021889471914619
        ],
        "align_select": "select Professionals.professional_id, Professionals.surname, Professionals.home_phone",
        "align_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which dogs have not cost their owner more than 1000 for treatment? List the dog names.",
        "gold_select": "select Dogs.name",
        "select_candidates": [
            "select Dogs.name",
            "select Dogs.name, Treatments.dog_included",
            "select Dogs.name, Treatments.professional_id",
            "select Dogs.name, Treatments.treatment_type_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Charges Dogs Treatments",
            "Treatment_Types Dogs Treatments",
            "Owners Dogs Treatments",
            "Sizes Dogs Treatments"
        ],
        "align_scores": [
            0.035953231155872345,
            0.0021722926758229733,
            0.0004319881845731288,
            0.0003275043563917279,
            0.00026840734062716365,
            0.00024049881903920323,
            0.00040126583189703524,
            0.0004277715052012354
        ],
        "align_select": "select Dogs.name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment?",
        "gold_select": "select Dogs.name",
        "select_candidates": [
            "select Dogs.name",
            "select Dogs.name, Treatments.dog_included",
            "select Dogs.name, Dogs.owner_id",
            "select Dogs.name, Dogs.age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Charges Dogs Treatments",
            "Owners Dogs Treatments",
            "Treatment_Types Dogs Treatments"
        ],
        "align_scores": [
            0.9501652717590332,
            0.5781142711639404,
            0.0004067415720783174,
            0.001258495613001287,
            0.0001928568526636809,
            0.0006379580590873957,
            0.00016578628856223077,
            0.00017466838471591473
        ],
        "align_select": "select Dogs.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "gold_select": "select Dogs.owner_id, Owners.first_name, Owners.surname",
        "select_candidates": [
            "select Owners.owner_id, Owners.first_name, Owners.surname",
            "select Dogs.owner_id, Owners.first_name, Owners.surname",
            "select Sizes.size_code, Owners.first_name, Owners.surname",
            "select Owners.owner_id-, Owners.first_name, Owners.surname"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Charges Owners Dogs"
        ],
        "align_scores": [
            0.9934073686599731,
            9.468899224884808e-05,
            0.7154233455657959,
            9.326200961368158e-05,
            0.0002723604557104409,
            7.774689584039152e-05,
            0.0028825632762163877,
            7.977245695656165e-05
        ],
        "align_select": "select Owners.owner_id, Owners.first_name, Owners.surname",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "gold_select": "select Dogs.owner_id, Owners.first_name, Owners.surname",
        "select_candidates": [
            "select Owners.owner_id, Owners.first_name, Owners.surname",
            "select Dogs.owner_id, Owners.first_name, Owners.surname",
            "select Sizes.size_code, Owners.first_name, Owners.surname",
            "select Sizes.size_elaborations, Owners.first_name, Owners.surname"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs"
        ],
        "align_scores": [
            0.9929637312889099,
            8.181323210010305e-05,
            0.8565042614936829,
            8.260500180767849e-05,
            0.00025898139574564993,
            6.901921005919576e-05,
            0.0001819313911255449,
            6.302152178250253e-05
        ],
        "align_select": "select Owners.owner_id, Owners.first_name, Owners.surname",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the breed with the most dogs?",
        "gold_select": "select Breeds.breed_cognomen",
        "select_candidates": [
            "select Breeds.breed_cognomen",
            "select Breeds.breed_cognomen, Dogs.breed_digits",
            "select Breeds.breed_code, Dogs.name",
            "select Breeds.breed_cognomen, Dogs.breed_digits"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Breeds Dogs",
        "table_candidates": [
            "Breeds Dogs",
            "Breeds Charges Dogs"
        ],
        "align_scores": [
            0.9948260188102722,
            0.00010754454706329852,
            0.0008541945717297494,
            7.835401629563421e-05,
            0.004865724593400955,
            7.73792271502316e-05,
            0.0008541945717297494,
            7.835401629563421e-05
        ],
        "align_select": "select Breeds.breed_cognomen",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which breed do the most dogs have? Give me the breed name.",
        "gold_select": "select Breeds.breed_cognomen",
        "select_candidates": [
            "select Breeds.breed_cognomen",
            "select Breeds.breed_cognomen, Dogs.breed_digits",
            "select Breeds.breed_code, Breeds.breed_cognomen",
            "select Breeds.breed_cognomen (short for Dogs.breed_digits)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Breeds Dogs",
        "table_candidates": [
            "Breeds Dogs"
        ],
        "align_scores": [
            0.9919962286949158,
            0.00013029022375121713,
            0.001089223544113338,
            8.653017721371725e-05,
            0.004837715532630682,
            9.426401811651886e-05,
            0.0026617541443556547,
            0.00010027032840298489
        ],
        "align_select": "select Breeds.breed_cognomen",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "gold_select": "select Owners.owner_id, Owners.surname",
        "select_candidates": [
            "select Owners.owner_id, Owners.surname",
            "select Treatments.dog_included, Owners.surname",
            "select Treatments.professional_id, Owners.surname",
            "select Dogs.owner_id, Owners.surname"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Owners Dogs Treatments",
            "Sizes Owners Dogs Treatments",
            "Treatment_Types Owners Dogs Treatments",
            "Charges Owners Dogs Treatments",
            "Owners Treatments",
            "Sizes Owners Treatments",
            "Treatment_Types Owners Treatments"
        ],
        "align_scores": [
            0.987121045589447,
            0.0002510871854610741,
            0.002225531032308936,
            9.279061487177387e-05,
            0.0017991404747590423,
            0.00010033784928964451,
            0.7702838182449341,
            0.0001926397962961346
        ],
        "align_select": "select Owners.owner_id, Owners.surname",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "gold_select": "select Owners.owner_id, Owners.surname",
        "select_candidates": [
            "select Owners.owner_id, Owners.surname",
            "select Treatments.dog_included, Owners.surname",
            "select Dogs.owner_id, Owners.surname",
            "select t8.c1, Owners.surname"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Owners Dogs Treatments",
            "Sizes Owners Dogs Treatments",
            "Treatment_Types Owners Dogs Treatments",
            "Charges Owners Dogs Treatments",
            "Owners Treatments"
        ],
        "align_scores": [
            0.9820560812950134,
            8.88726208359003e-05,
            0.0011663151672109962,
            7.498610648326576e-05,
            0.8503970503807068,
            8.836879715090618e-05,
            0.0004902504151687026,
            7.186019502114505e-05
        ],
        "align_select": "select Owners.owner_id, Owners.surname",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the description of the treatment type that costs the least money in total?",
        "gold_select": "select Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatment_Types.treatment_type_description",
            "select Treatment_Types.treatment_type_description, Treatments.treatment_type_code",
            "select Treatment_Types.treatment_type_description, t7",
            "select Treatment_Types.medical_category_code, Treatment_Types.treatment_type_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments",
            "Charges Treatments"
        ],
        "align_scores": [
            0.9937441945075989,
            6.27041663392447e-05,
            0.0007021152414381504,
            5.879960008314811e-05,
            0.0005746902315877378,
            7.358579750871286e-05,
            0.0013284038286656141,
            7.067713886499405e-05
        ],
        "align_select": "select Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Give me the description of the treatment type whose total cost is the lowest.",
        "gold_select": "select Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatment_Types.treatment_type_description",
            "select Treatment_Types.treatment_type_description, Treatments.treatment_type_code",
            "select Treatment_Types.treatment_type_description, Treatments.professional_id",
            "select Treatment_Types.medical_category_code, Treatment_Types.treatment_type_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments",
            "Charges Treatments"
        ],
        "align_scores": [
            0.9950726628303528,
            5.823114770464599e-05,
            0.00036189265665598214,
            5.386305201682262e-05,
            0.00010917556210188195,
            5.39135180588346e-05,
            0.0006840992718935013,
            6.436188414227217e-05
        ],
        "align_select": "select Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "gold_select": "select Owners.owner_id, Owners.zip_code",
        "select_candidates": [
            "select Owners.owner_id, Owners.zip_code",
            "select Dogs.owner_id, Owners.zip_code",
            "select Sizes.size_code, Owners.zip_code",
            "select Owners.owner_id-, Owners.zip_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Charges Owners Dogs"
        ],
        "align_scores": [
            0.9719984531402588,
            9.741741087054834e-05,
            0.3610604703426361,
            0.0001068156270775944,
            0.000557378341909498,
            9.442299051443115e-05,
            0.002873925492167473,
            8.440102828899398e-05
        ],
        "align_select": "select Owners.owner_id, Owners.zip_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "gold_select": "select Owners.owner_id, Owners.zip_code",
        "select_candidates": [
            "select Owners.owner_id, Owners.zip_code",
            "select Dogs.owner_id, Owners.zip_code",
            "select Owners.owner_id-, Owners.zip_code",
            "select Sizes.size_code, Owners.zip_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Owners Dogs",
            "Owners Dogs Treatments",
            "Sizes Owners Dogs",
            "Charges Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Breeds Owners Dogs"
        ],
        "align_scores": [
            0.9783153533935547,
            9.202890214510262e-05,
            0.8121184706687927,
            0.00010219514661002904,
            0.0036491097416728735,
            8.409439033130184e-05,
            0.0006959905731491745,
            9.184689406538382e-05
        ],
        "align_select": "select Owners.owner_id, Owners.zip_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
        "gold_select": "select Professionals.professional_id, Professionals.calling",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.home_phone",
            "select Treatments.professional_id, Professionals.home_phone",
            "select Professionals.first_name, Professionals.home_phone",
            "select Professionals.role_code, Professionals.home_phone"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Breeds Professionals Treatments",
            "Charges Professionals Treatments"
        ],
        "align_scores": [
            0.00390767864882946,
            0.0008347624680027366,
            0.00252166879363358,
            0.0006312218029052019,
            0.0003431360819377005,
            0.00013452040730044246,
            0.004349574912339449,
            0.0004468523839022964
        ],
        "align_select": "select Professionals.professional_id, Professionals.home_phone",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "gold_select": "select Professionals.professional_id, Professionals.calling",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.home_phone",
            "select Treatments.professional_id, Professionals.home_phone",
            "select Treatments.professional_id, Owners.cell_number",
            "select Professionals.first_name, Professionals.home_phone"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Owners Dogs Professionals Treatments",
            "Sizes Treatments",
            "Dogs Treatments",
            "Treatments"
        ],
        "align_scores": [
            0.0015615745214745402,
            0.0001659109111642465,
            0.0011258728336542845,
            0.00015459359565284103,
            0.10528380423784256,
            0.000244911847403273,
            0.0004792074323631823,
            9.850905189523473e-05
        ],
        "align_select": "select Professionals.professional_id, Professionals.home_phone",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "gold_select": "select distinct Professionals.first_name, Professionals.surname",
        "select_candidates": [
            "select Professionals.first_name, Professionals.surname",
            "select distinct Professionals.first_name, Professionals.surname",
            "select Professionals.professional_id, Professionals.first_name, Professionals.surname",
            "select Professionals.role_code, Professionals.surname"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Charges Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments"
        ],
        "align_scores": [
            0.9563634395599365,
            0.0004262487345840782,
            0.02293628640472889,
            9.698898793430999e-05,
            0.00025963905500248075,
            0.00012506888015195727,
            0.0004732580273412168,
            8.866015559760854e-05
        ],
        "align_select": "select Professionals.first_name, Professionals.surname",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "gold_select": "select distinct Professionals.first_name, Professionals.surname",
        "select_candidates": [
            "select Professionals.first_name, Professionals.surname",
            "select distinct Professionals.first_name, Professionals.surname",
            "select Professionals.role_code, Professionals.surname",
            "select t.c2, Professionals.surname"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Charges Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments"
        ],
        "align_scores": [
            0.07568991184234619,
            0.0002554120437707752,
            0.008171901106834412,
            0.00013492147263605148,
            0.0006529568345285952,
            0.00013897032476961613,
            0.0011728606186807156,
            0.00013793476682621986
        ],
        "align_select": "select Professionals.first_name, Professionals.surname",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the cost of each treatment and the corresponding treatment type description.",
        "gold_select": "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_description",
            "select Treatments.cost_of_treatment, Treatment_Types.medical_category_code_description",
            "select Treatments.cost_of_treatment, t3_description",
            "select Treatments.dog_included, Treatment_Types.treatment_type_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Charges Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments"
        ],
        "align_scores": [
            0.9954060316085815,
            0.9934747815132141,
            0.9943015575408936,
            0.9927353858947754,
            0.001977772917598486,
            0.0027157498989254236,
            0.0004023329820483923,
            0.0002765077806543559
        ],
        "align_select": "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the cost and treatment type description of each treatment?",
        "gold_select": "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_description",
            "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_description, Treatments.treatment_type_code",
            "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_description, Treatments.professional_id",
            "select Treatments.cost_of_treatment, Treatment_Types.medical_category_code_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Charges Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments"
        ],
        "align_scores": [
            0.9938874840736389,
            0.00013104254321660846,
            0.0002841706736944616,
            6.183447840157896e-05,
            0.00041581131517887115,
            8.302695641759783e-05,
            0.994138240814209,
            9.815143857849762e-05
        ],
        "align_select": "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List each owner's first name, last name, and the size of his for her dog.",
        "gold_select": "select Owners.first_name, Owners.surname, Dogs.size_code",
        "select_candidates": [
            "select Owners.first_name, Owners.surname, Dogs.size_code",
            "select Owners.first_name, Owners.surname, Owners.city",
            "select Owners.first_name, Owners.surname, Dogs.size_code, Owners.owner_id",
            "select Owners.first_name, Owners.surname, Dogs.size_code, Owners.first_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Charges Sizes Owners Dogs",
            "Breeds Owners Dogs"
        ],
        "align_scores": [
            0.8947179317474365,
            0.9256296753883362,
            0.00048011416220106184,
            0.0002600158331915736,
            0.00017754067084752023,
            0.000200900889467448,
            0.0004186087171547115,
            0.0007207738235592842
        ],
        "align_select": "select Owners.first_name, Owners.surname, Dogs.size_code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are each owner's first name, last name, and the size of their dog?",
        "gold_select": "select Owners.first_name, Owners.surname, Dogs.size_code",
        "select_candidates": [
            "select Owners.first_name, Owners.surname, Dogs.size_code",
            "select Owners.first_name, Owners.surname, Owners.city",
            "select Owners.first_name, Owners.surname, Dogs.size_code, Owners.owner_id",
            "select Owners.first_name, Owners.surname, Dogs.size_code, Owners.first_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Breeds Sizes Owners Dogs",
            "Breeds Owners Dogs"
        ],
        "align_scores": [
            0.9936367273330688,
            0.00012506006169132888,
            0.0005041542463004589,
            0.00014115875819697976,
            0.0002468986203894019,
            9.186169336317107e-05,
            0.0007585696293972433,
            0.00010675808880478144
        ],
        "align_select": "select Owners.first_name, Owners.surname, Dogs.size_code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "gold_select": "select Dogs.name, Treatments.date_of_treatment",
        "select_candidates": [
            "select Dogs.name, Treatments.date_of_treatment",
            "select Dogs.name, Treatments.treatment_type_code",
            "select Dogs.name, Dogs.size_code",
            "select Dogs.name, t07.c4"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Breeds Dogs Treatments",
            "Sizes Dogs Treatments",
            "Charges Dogs Treatments",
            "Treatment_Types Dogs Treatments"
        ],
        "align_scores": [
            0.9696211814880371,
            0.9739934206008911,
            0.0010897902538999915,
            0.0013509233249351382,
            0.00028110708808526397,
            0.00020091410260647535,
            0.000648588698823005,
            0.0005082584684714675
        ],
        "align_select": "select Dogs.name, Treatments.date_of_treatment",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "gold_select": "select Dogs.name, Treatments.date_of_treatment",
        "select_candidates": [
            "select Dogs.name, Treatments.date_of_treatment",
            "select Dogs.name, Treatments.treatment_type_code, Treatments.date_of_treatment",
            "select Dogs.name, Treatments.treatment_type_code",
            "select Dogs.name, Treatments.professional_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Breeds Dogs Treatments",
            "Charges Dogs Treatments",
            "Treatment_Types Dogs Treatments",
            "Sizes Dogs Treatments"
        ],
        "align_scores": [
            0.9652599692344666,
            0.9898021817207336,
            0.0008958644466474652,
            0.0018172520212829113,
            0.0006440077559091151,
            0.0005936207016929984,
            0.0003727969015017152,
            0.0003965047362726182
        ],
        "align_select": "select Dogs.name, Treatments.date_of_treatment",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "gold_select": "select Owners.first_name, Dogs.name",
        "select_candidates": [
            "select Owners.first_name, Dogs.name",
            "select Owners.first_name, Owners.province",
            "select Dogs.owner_id, Dogs.name",
            "select Owners.first_name, Dogs.name, Owners.zip_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs"
        ],
        "align_scores": [
            0.9524298906326294,
            0.0002601975866127759,
            0.0010271589271724224,
            0.0001030852145049721,
            0.00046559309703297913,
            8.315388549817726e-05,
            0.0002149657957488671,
            9.509146912023425e-05
        ],
        "align_select": "select Owners.first_name, Dogs.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
        "gold_select": "select Owners.first_name, Dogs.name",
        "select_candidates": [
            "select Owners.first_name, Owners.surname",
            "select Owners.first_name, Owners.surname, Dogs.name",
            "select Owners.first_name, Owners.surname, Owners.province",
            "select Owners.first_name, Owners.surname, Dogs.name, Owners.owner_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs"
        ],
        "align_scores": [
            0.0006312398472800851,
            0.0001071322476491332,
            0.0001971073797903955,
            6.953590491320938e-05,
            0.000191260885912925,
            9.303195838583633e-05,
            0.00012520480959210545,
            7.932610606076196e-05
        ],
        "align_select": "select Owners.first_name, Owners.surname",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "gold_select": "select distinct Dogs.date_arrived, Dogs.date_departed",
        "select_candidates": [
            "select Dogs.date_arrived, Dogs.date_departed",
            "select Dogs.dog_id, Dogs.date_departed",
            "select Dogs.owner_id, Dogs.date_departed",
            "select Dogs.mass, Dogs.date_departed"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.9011204838752747,
            0.00011545744200702757,
            0.0008029151940718293,
            7.877175085013732e-05,
            0.0007202568231150508,
            8.126242028083652e-05,
            0.001356111140921712,
            0.00012405950110405684
        ],
        "align_select": "select Dogs.date_arrived, Dogs.date_departed",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "gold_select": "select distinct Dogs.date_arrived, Dogs.date_departed",
        "select_candidates": [
            "select Dogs.date_arrived, Dogs.date_departed",
            "select Dogs.dog_id, Dogs.date_departed",
            "select distinct Dogs.date_arrived, Dogs.date_departed",
            "select Dogs.owner_id, Dogs.date_departed"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.9660494327545166,
            0.00010655549704097211,
            0.0006641048239544034,
            7.080585055518895e-05,
            0.03310848027467728,
            6.643863889621571e-05,
            0.0006282717804424465,
            6.715280323987827e-05
        ],
        "align_select": "select Dogs.date_arrived, Dogs.date_departed",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the last name of the owner owning the youngest dog.",
        "gold_select": "select Owners.surname",
        "select_candidates": [
            "select Owners.surname",
            "select Owners.first_name, Owners.surname",
            "select Owners.surname, Owners.first_name",
            "select Owners.surname, Owners.mailbox"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Breeds Owners Dogs"
        ],
        "align_scores": [
            0.9906654357910156,
            7.623532292200252e-05,
            0.0002168047649320215,
            6.64604885969311e-05,
            0.0001628110621822998,
            6.017823034198955e-05,
            0.000290572497760877,
            6.360759289236739e-05
        ],
        "align_select": "select Owners.surname",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Who owns the youngest dog? Give me his or her last name.",
        "gold_select": "select Owners.surname",
        "select_candidates": [
            "select Owners.surname",
            "select Owners.first_name, Owners.surname",
            "select Owners.surname, Dogs.owner_id",
            "select Owners.surname, Owners.first_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Charges Owners Dogs",
            "Breeds Owners Dogs"
        ],
        "align_scores": [
            0.9931043982505798,
            9.375349327456206e-05,
            0.00021641113562509418,
            8.222572796512395e-05,
            0.00042529409984126687,
            6.520582974189892e-05,
            0.00025111352442763746,
            7.543939864262938e-05
        ],
        "align_select": "select Owners.surname",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "gold_select": "select Professionals.email_address",
        "select_candidates": [
            "select Professionals.email_address",
            "select the Professionals.email_address",
            "select Professionals.email_address ",
            "select Professionals.email_address-"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals",
            "Dogs Professionals",
            "Owners Professionals"
        ],
        "align_scores": [
            0.9792451858520508,
            0.18299002945423126,
            0.001157219521701336,
            0.0002615192497614771,
            0.9792451858520508,
            0.18299002945423126,
            0.006351271644234657,
            0.0005275171715766191
        ],
        "align_select": "select Professionals.email_address",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
        "gold_select": "select Professionals.email_address",
        "select_candidates": [
            "select Professionals.email_address",
            "select Professionals.email_address, Professionals.home_phone",
            "select Professionals.email_address (or Professionals.home_phone)",
            "select Professionals.email_address, Professionals.surname"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals",
            "Dogs Professionals",
            "Owners Professionals"
        ],
        "align_scores": [
            0.9877321720123291,
            0.01603817380964756,
            0.0002150211512343958,
            7.439423643518239e-05,
            0.0022069013211876154,
            0.00011401904339436442,
            0.00017038451915141195,
            7.828514935681596e-05
        ],
        "align_select": "select Professionals.email_address",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many dogs went through any treatments?",
        "gold_select": "select count(distinct Treatments.dog_included)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct Treatments.dog_included)",
            "select count(Treatments.dog_included)",
            "select count(distinct Treatments.treatment_id)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Treatments",
        "table_candidates": [
            "Treatments",
            "Dogs Treatments",
            "Professionals Treatments",
            "Breeds Dogs Treatments",
            "Breeds Treatments",
            "Treatment_Types Treatments",
            "Treatment_Types Dogs Treatments",
            "Charges Treatments"
        ],
        "align_scores": [
            0.9758580923080444,
            0.9758580923080444,
            0.9860500693321228,
            0.9860500693321228,
            0.9904168844223022,
            0.9904168844223022,
            0.016133561730384827,
            0.016133561730384827
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Count the number of dogs that went through a treatment.",
        "gold_select": "select count(distinct Treatments.dog_included)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct Treatments.dog_included)",
            "select count(Treatments.dog_included)",
            "select count(distinct Treatments.treatment_id)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Treatments",
        "table_candidates": [
            "Treatments"
        ],
        "align_scores": [
            0.969106912612915,
            0.969106912612915,
            0.8249934911727905,
            0.8249934911727905,
            0.985905647277832,
            0.985905647277832,
            0.5995891094207764,
            0.5995891094207764
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "gold_select": "select Professionals.role_code, Professionals.avenue, Professionals.location, Professionals.district",
        "select_candidates": [
            "select Professionals.role_code, Professionals.avenue, Professionals.location, Professionals.district",
            "select Professionals.role_code, Professionals.avenue, Professionals.location, Professionals.zip_code",
            "select Professionals.role_code, Professionals.avenue, Professionals.location, Professionals.surname",
            "select Professionals.role_code, Professionals.avenue, Professionals.location, t6.c"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals"
        ],
        "align_scores": [
            0.05502169579267502,
            0.00011915507639059797,
            0.28665342926979065,
            0.00013503216905519366,
            0.0008318197214975953,
            0.00010604744602460414,
            0.0011166437761858106,
            0.00013382211909629405
        ],
        "align_select": "select Professionals.role_code, Professionals.avenue, Professionals.location, Professionals.zip_code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "gold_select": "select Professionals.role_code, Professionals.avenue, Professionals.location, Professionals.district",
        "select_candidates": [
            "select Professionals.role_code, Professionals.avenue, Professionals.location, Professionals.district",
            "select Professionals.role_code, Owners.street, Owners.city, Professionals.district",
            "select Professionals.role_code, Professionals.avenue, Professionals.location, Professionals.zip_code",
            "select Professionals.role_code, Dogs.breed_digits, Dogs.size_code, Professionals.district"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Owners Professionals"
        ],
        "align_scores": [
            0.0013889888068661094,
            9.938133007381111e-05,
            0.0006367844762280583,
            9.926114580594003e-05,
            0.8822060823440552,
            0.00010753542301245034,
            0.0005963310832157731,
            0.00013559496437665075
        ],
        "align_select": "select Professionals.role_code, Professionals.avenue, Professionals.location, Professionals.zip_code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "gold_select": "select Owners.first_name, Owners.surname, Owners.mailbox",
        "select_candidates": [
            "select Owners.first_name, Owners.surname, Owners.home_phone",
            "select Owners.first_name, Owners.surname, Owners.mailbox",
            "select Owners.first_name, Owners.surname and Owners.home_phone",
            "select Owners.first_name., Owners.surname, Owners.home_phone"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners",
        "table_candidates": [
            "Owners"
        ],
        "align_scores": [
            0.00045696296729147434,
            9.433272498426959e-05,
            0.9879177212715149,
            0.00012184464139863849,
            0.0005655575660057366,
            9.063474863069132e-05,
            0.000941616075579077,
            0.00010978146019624546
        ],
        "align_select": "select Owners.first_name, Owners.surname, Owners.mailbox",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "gold_select": "select Owners.first_name, Owners.surname, Owners.mailbox",
        "select_candidates": [
            "select Owners.first_name, Owners.surname, Owners.home_phone",
            "select Owners.first_name, Owners.surname, Owners.mailbox",
            "select Owners.first_name, Owners.surname and Owners.home_phone",
            "select Owners.first_name., Owners.surname, Owners.home_phone"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners",
        "table_candidates": [
            "Owners"
        ],
        "align_scores": [
            0.0003483541077002883,
            9.470884833717719e-05,
            0.9919301867485046,
            9.745902934810147e-05,
            0.00036128543433733284,
            9.126133954850957e-05,
            0.0005363515228964388,
            0.0001158009035862051
        ],
        "align_select": "select Owners.first_name, Owners.surname, Owners.mailbox",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many dogs have not gone through any treatment?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Dogs.dog_id",
            "select count(*), Treatments.dog_included",
            "select count(*), Treatments.professional_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs Professionals Treatments",
            "Treatment_Types Dogs Treatments",
            "Dogs"
        ],
        "align_scores": [
            0.9845408201217651,
            0.0031732888892292976,
            0.00025069891125895083,
            0.0009839643025770783,
            0.00021982674661558121,
            0.000547447707504034,
            0.0002115405659424141,
            0.0002792061131913215
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Tell me the number of dogs that have not received any treatment.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Dogs.dog_id",
            "select count(*), Treatments.dog_included",
            "select count(*), Treatments.professional_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs Professionals Treatments",
            "Dogs"
        ],
        "align_scores": [
            0.9830970764160156,
            0.0041976673528552055,
            0.00019960346980951726,
            0.0005257762386463583,
            0.000182061325176619,
            0.0004274527309462428,
            0.0001560112286824733,
            0.00028970971470698714
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "gold_select": "select Dogs.name, Dogs.age, Dogs.mass",
        "select_candidates": [
            "select Dogs.name, Dogs.age, Dogs.mass",
            "select distinct Dogs.name, Dogs.age, Dogs.mass",
            "select Dogs.name, Dogs.age, Dogs.mass, Dogs.is_forsaken",
            "select Dogs.name, Dogs.age, Dogs.mass, Dogs.dog_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.32600948214530945,
            0.0280569139868021,
            0.015473175793886185,
            0.0002428224979666993,
            0.000468336307676509,
            0.00015976835857145488,
            0.00018527924839872867,
            0.0001283549499930814
        ],
        "align_select": "select Dogs.name, Dogs.age, Dogs.mass",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
        "gold_select": "select Dogs.name, Dogs.age, Dogs.mass",
        "select_candidates": [
            "select Dogs.name, Dogs.age, Dogs.mass",
            "select distinct Dogs.name, Dogs.age, Dogs.mass",
            "select Dogs.name, Dogs.age, Dogs.mass, Dogs.is_forsaken",
            "select Dogs.name, Dogs.age, Dogs.mass, Dogs.dog_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.6777774095535278,
            0.0004071281000506133,
            0.00662439176812768,
            7.47252706787549e-05,
            0.00044437131145969033,
            8.849410369293764e-05,
            0.00020418368512764573,
            8.987804903881624e-05
        ],
        "align_select": "select Dogs.name, Dogs.age, Dogs.mass",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How much does each charge type costs? List both charge type and amount.",
        "gold_select": "select Charges.charge_type, Charges.cost",
        "select_candidates": [
            "select Charges.charge_type, Charges.cost",
            "select Charges.charge_type, sum(Charges.cost)",
            "select Charges.charge_id, Charges.charge_type, Charges.cost",
            "select Charges.charge_type, Charges.cost."
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Charges",
        "table_candidates": [
            "Charges"
        ],
        "align_scores": [
            0.9951940178871155,
            0.00034212673199363053,
            0.9949068427085876,
            0.00024073787790257484,
            0.0004709743079729378,
            0.00014376058243215084,
            0.0017713489942252636,
            0.00025858957087621093
        ],
        "align_select": "select Charges.charge_type, Charges.cost",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "List each charge type and its amount.",
        "gold_select": "select Charges.charge_type, Charges.cost",
        "select_candidates": [
            "select Charges.charge_type, Charges.cost",
            "select Charges.charge_type, sum(Charges.cost)",
            "select Charges.charge_type, amount(Charges.cost)",
            "select Charges.charge_type, Charges.cost."
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Charges",
        "table_candidates": [
            "Charges"
        ],
        "align_scores": [
            0.9951428174972534,
            0.0001903744851006195,
            0.9960190653800964,
            0.00013927293184679002,
            0.00048103724839165807,
            0.0001730981020955369,
            0.001307944068685174,
            0.00013060156197752804
        ],
        "align_select": "select Charges.charge_type, Charges.cost",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How much does the most expensive charge type costs?",
        "gold_select": "select max(Charges.cost)",
        "select_candidates": [
            "select Charges.charge_type",
            "select Charges.charge_type, Charges.cost",
            "select Charges.cost",
            "select Charges.charge_id, Charges.charge_type"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Charges",
        "table_candidates": [
            "Charges"
        ],
        "align_scores": [
            0.9895023107528687,
            0.9951276779174805,
            0.0005052270134910941,
            0.0005221907049417496,
            0.9791855216026306,
            0.9910138249397278,
            0.0001357512519462034,
            0.0001478596095694229
        ],
        "align_select": "select Charges.charge_type",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the charge amount of the most expensive charge type?",
        "gold_select": "select max(Charges.cost)",
        "select_candidates": [
            "select Charges.cost",
            "select Charges.charge_id, Charges.cost",
            "select sum(Charges.cost)",
            "select Charges.cost, Charges.charge_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Charges",
        "table_candidates": [
            "Charges"
        ],
        "align_scores": [
            0.9847360253334045,
            0.9925049543380737,
            0.00018840163829736412,
            0.00020985987794119865,
            0.024567900225520134,
            0.2681085169315338,
            0.00015951400564517826,
            0.00022178296057973057
        ],
        "align_select": "select Charges.cost",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "List the email, cell phone and home phone of all the professionals.",
        "gold_select": "select Professionals.email_address, Professionals.calling, Professionals.home_phone",
        "select_candidates": [
            "select Professionals.email_address, Professionals.home_phone, Professionals.home_phone",
            "select Professionals.email_address, Professionals.home_phone, Professionals.email_address",
            "select Professionals.email_address, Dogs.mass, Professionals.home_phone",
            "select Professionals.email_address, Professionals.home_phone, Professionals.home_phone"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals",
            "Dogs Professionals",
            "Owners Professionals"
        ],
        "align_scores": [
            0.0008484756108373404,
            0.00012793777568731457,
            0.00046329779434017837,
            0.00010847158409887925,
            0.00044228482875041664,
            0.0001361655886285007,
            0.0008484756108373404,
            0.00012793777568731457
        ],
        "align_select": "select Professionals.email_address, Professionals.home_phone, Professionals.home_phone",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the email, cell phone and home phone of each professional?",
        "gold_select": "select Professionals.email_address, Professionals.calling, Professionals.home_phone",
        "select_candidates": [
            "select Professionals.email_address, Professionals.home_phone, Professionals.home_phone",
            "select Professionals.email_address, Professionals.home_phone, Professionals.email_address",
            "select Professionals.email_address, Dogs.mass, Professionals.home_phone",
            "select Professionals.email_address, Professionals.home_phone, Professionals.home_phone"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals",
            "Owners Professionals",
            "Dogs Professionals"
        ],
        "align_scores": [
            0.0011268920497968793,
            0.00013192922051530331,
            0.0005065644509159029,
            0.00011204557813471183,
            0.0004497999034356326,
            0.00016491660790052265,
            0.0011268920497968793,
            0.00013192922051530331
        ],
        "align_select": "select Professionals.email_address, Professionals.home_phone, Professionals.home_phone",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are all the possible breed type and size type combinations?",
        "gold_select": "select distinct Dogs.breed_digits, Dogs.size_code",
        "select_candidates": [
            "select Dogs.breed_digits, Dogs.size_code",
            "select possible Dogs.breed_digits, Dogs.size_code",
            "select distinct Dogs.breed_digits, Dogs.size_code",
            "select unique Dogs.breed_digits, Dogs.size_code"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Breeds Sizes Dogs",
            "Sizes Dogs",
            "Dogs",
            "Charges Sizes Dogs"
        ],
        "align_scores": [
            0.01100247260183096,
            0.00017037121870089322,
            0.0009448454948142171,
            0.00011098116374341771,
            0.005535655189305544,
            0.00012561677431222051,
            0.0012285291450098157,
            0.00012082832108717412
        ],
        "align_select": "select Dogs.breed_digits, Dogs.size_code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find the distinct breed type and size type combinations for dogs.",
        "gold_select": "select distinct Dogs.breed_digits, Dogs.size_code",
        "select_candidates": [
            "select distinct Dogs.breed_digits, Dogs.size_code",
            "select distinct Dogs.owner_id, Dogs.size_code",
            "select distinct t5.cbreed_Dogs.size_code",
            "select distinct Dogs.breed_digits.c0, Dogs.size_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs",
            "Sizes Dogs",
            "Breeds Sizes Dogs",
            "Charges Sizes Dogs",
            "Treatment_Types Dogs",
            "Owners Dogs",
            "Charges Dogs",
            "Breeds Dogs"
        ],
        "align_scores": [
            0.00410660682246089,
            0.0001380446192342788,
            0.0003116932639386505,
            9.945347846951336e-05,
            0.00037070890539325774,
            0.00010537086927797645,
            0.000368605979019776,
            9.943233453668654e-05
        ],
        "align_select": "select distinct Dogs.breed_digits, Dogs.size_code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the first name of all the professionals along with the description of the treatment they have done.",
        "gold_select": "select distinct Professionals.first_name, Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Professionals.first_name, Treatment_Types.treatment_type_description",
            "select Professionals.first_name, Treatment_Types.treatment_type_description, Treatments.professional_id",
            "select Professionals.first_name, t3 - Treatments.dog_included",
            "select Professionals.first_name, Treatment_Types.treatment_type_description - Treatments.professional_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Professionals Treatments",
        "table_candidates": [
            "Treatment_Types Professionals Treatments",
            "Sizes Treatment_Types Professionals Treatments",
            "Charges Treatment_Types Professionals Treatments",
            "Breeds Treatment_Types Professionals Treatments",
            "Charges Professionals Treatments"
        ],
        "align_scores": [
            0.9357481598854065,
            0.00011623236059676856,
            0.0001701056316960603,
            7.248484325828031e-05,
            0.0008124886080622673,
            0.0001323440228588879,
            0.0009820229606702924,
            0.00011024683044524863
        ],
        "align_select": "select Professionals.first_name, Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are each professional's first name and description of the treatment they have performed?",
        "gold_select": "select distinct Professionals.first_name, Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Professionals.first_name, Treatment_Types.treatment_type_description",
            "select Professionals.first_name, Treatment_Types.treatment_type_description, Treatments.professional_id",
            "select Professionals.first_name, Treatment_Types.treatment_type_description - Treatments.professional_id",
            "select Professionals.first_name, t3-c1"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Professionals Treatments",
        "table_candidates": [
            "Treatment_Types Professionals Treatments",
            "Sizes Treatment_Types Professionals Treatments",
            "Charges Treatment_Types Professionals Treatments",
            "Breeds Treatment_Types Professionals Treatments"
        ],
        "align_scores": [
            0.9574305415153503,
            0.00013878890604246408,
            0.00022654450731351972,
            8.257444278569892e-05,
            0.0027051044162362814,
            0.00012028801575070247,
            0.05144849792122841,
            0.00020026422862429172
        ],
        "align_select": "select Professionals.first_name, Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Which states have both owners and professionals living there?",
        "gold_select": "select Owners.province",
        "select_candidates": [
            "select Professionals.state",
            "select Owners.city, Professionals.state",
            "select Owners.street, Owners.last_name",
            "select Professionals.state, Owners.street"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-INTERSECT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Professionals",
        "table_candidates": [
            "Owners Professionals",
            "Treatment_Types Owners Professionals",
            "Sizes Owners Professionals",
            "Charges Owners Professionals",
            "Breeds Owners Professionals"
        ],
        "align_scores": [
            0.9841645359992981,
            0.00019494858861435205,
            0.00040028354851529,
            6.727406434947625e-05,
            0.00022978521883487701,
            7.017332245595753e-05,
            0.00045334300375543535,
            6.375443626893684e-05
        ],
        "align_select": "select Professionals.state",
        "align_structure": "SELECT-FROM-INTERSECT-SELECT-FROM"
    },
    {
        "question": "Find the states where both owners and professionals live.",
        "gold_select": "select Owners.province",
        "select_candidates": [
            "select Professionals.state",
            "select Professionals.state, Owners.city",
            "select Professionals.state, Owners.street",
            "select Owners.city, Professionals.state"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-INTERSECT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Professionals",
        "table_candidates": [
            "Owners Professionals",
            "Treatment_Types Owners Professionals",
            "Sizes Owners Professionals",
            "Charges Owners Professionals",
            "Breeds Owners Professionals"
        ],
        "align_scores": [
            0.9937044978141785,
            0.30149197578430176,
            0.000268688949290663,
            9.501994645688683e-05,
            0.0003708565200213343,
            0.00010495171591173857,
            0.0003647143021225929,
            0.0001232692156918347
        ],
        "align_select": "select Professionals.state",
        "align_structure": "SELECT-FROM-INTERSECT-SELECT-FROM"
    },
    {
        "question": "What is the average age of the dogs who have gone through any treatments?",
        "gold_select": "select avg(Dogs.age)",
        "select_candidates": [
            "select avg(Dogs.age)",
            "select Treatments.dog_included, avg(Dogs.age)",
            "select an avg(Dogs.age)",
            "select avg(Dogs.age), Treatments.dog_included"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.990545392036438,
            0.0007176302606239915,
            0.000557157676666975,
            0.0009779204847291112,
            0.0005715275765396655,
            0.00020061549730598927,
            0.00014788527914788574,
            0.0006141098565421999
        ],
        "align_select": "select avg(Dogs.age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the average age of the dogs who went through treatments.",
        "gold_select": "select avg(Dogs.age)",
        "select_candidates": [
            "select avg(Dogs.age)",
            "select an avg(Dogs.age)",
            "select avg(Dogs.age)",
            "select the avg(Dogs.age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-INTERSECT-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs Treatments"
        ],
        "align_scores": [
            0.9765507578849792,
            5.635049819829874e-05,
            0.0011064468417316675,
            7.209617615444586e-05,
            0.9765507578849792,
            5.635049819829874e-05,
            0.0006483089528046548,
            7.598993397550657e-05
        ],
        "align_select": "select avg(Dogs.age)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Which dogs have not cost their owner more than 1000 for treatment? List the dog names.",
        "gold_select": "select Dogs.name",
        "select_candidates": [
            "select Dogs.name",
            "select Dogs.name, Treatments.dog_included",
            "select Dogs.name, Treatments.dog_included, Treatments.professional_id",
            "select Dogs.name, Treatments.dog_included, Dogs.deserted"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Charges Dogs Treatments",
            "Treatment_Types Dogs Treatments",
            "Owners Dogs Treatments"
        ],
        "align_scores": [
            0.035953231155872345,
            0.0021722926758229733,
            0.0004319881845731288,
            0.0003275043563917279,
            0.00011525274021551013,
            0.00011730003461707383,
            0.00012099389277864248,
            0.00011871097376570106
        ],
        "align_select": "select Dogs.name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment?",
        "gold_select": "select Dogs.name",
        "select_candidates": [
            "select Dogs.name",
            "select Dogs.name, Treatments.dog_included",
            "select Dogs.name, Dogs.age",
            "select Dogs.name, Dogs.owner_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Charges Dogs Treatments",
            "Owners Dogs Treatments",
            "Treatment_Types Dogs Treatments"
        ],
        "align_scores": [
            0.9501652717590332,
            0.5781142711639404,
            0.0004067415720783174,
            0.001258495613001287,
            0.00016578628856223077,
            0.00017466838471591473,
            0.0001928568526636809,
            0.0006379580590873957
        ],
        "align_select": "select Dogs.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which first names are used for professionals or owners but are not used as dog names?",
        "gold_select": "select Professionals.forename",
        "select_candidates": [
            "select Owners.forename",
            "select Professionals.forename",
            "select Professionals.role_cipher",
            "select Owners.forename, Owners.last_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-UNION-SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Owners Dogs Professionals",
        "table_candidates": [
            "Owners Dogs Professionals",
            "Treatment_Types Owners Dogs Professionals",
            "Charges Owners Dogs Professionals",
            "Sizes Owners Dogs Professionals",
            "Breeds Owners Dogs Professionals",
            "Dogs Professionals",
            "Owners Professionals"
        ],
        "align_scores": [
            0.9415758848190308,
            0.20722655951976776,
            0.9337716698646545,
            0.2081560492515564,
            0.0052038878202438354,
            0.0012903418391942978,
            0.00019470784172881395,
            0.000126948332763277
        ],
        "align_select": "select Owners.forename",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
        "gold_select": "select Professionals.forename",
        "select_candidates": [
            "select Professionals.forename",
            "select Owners.forename",
            "select Professionals.role_cipher",
            "select Professionals.forename, Owners.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-UNION-SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Owners Dogs Professionals",
        "table_candidates": [
            "Owners Dogs Professionals",
            "Treatment_Types Owners Dogs Professionals",
            "Charges Owners Dogs Professionals",
            "Sizes Owners Dogs Professionals",
            "Breeds Owners Dogs Professionals",
            "Owners Professionals",
            "Dogs Professionals"
        ],
        "align_scores": [
            0.9398007392883301,
            0.1443871110677719,
            0.9397434592247009,
            0.15500956773757935,
            0.005061471834778786,
            0.0014179237186908722,
            0.000520939938724041,
            0.00017914680938702077
        ],
        "align_select": "select Professionals.forename",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "gold_select": "select Professionals.professional_id, Professionals.role_cipher, Professionals.e_mail_address",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.role_cipher, Professionals.e_mail_address",
            "select Professionals.professional_id, Professionals.forename, Professionals.e_mail_address",
            "select Professionals.professional_id, Professionals.capital_area, Professionals.e_mail_address",
            "select Professionals.professional_id, Professionals.avenue, Professionals.e_mail_address"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.1347808986902237,
            0.12167349457740784,
            0.0005565417231991887,
            0.0005417419597506523,
            0.00041116311331279576,
            0.0003313418128527701,
            0.0005775248282589018,
            0.00044888415141031146
        ],
        "align_select": "select Professionals.professional_id, Professionals.role_cipher, Professionals.e_mail_address",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
        "gold_select": "select Professionals.professional_id, Professionals.role_cipher, Professionals.e_mail_address",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.role_cipher, Professionals.e_mail_address",
            "select Professionals.professional_id, Professionals.forename, Professionals.e_mail_address",
            "select Professionals.professional_id, Professionals.capital_area, Professionals.e_mail_address",
            "select Professionals.professional_id, Professionals.avenue, Professionals.e_mail_address"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.17110702395439148,
            0.003237781347706914,
            0.0009349154424853623,
            0.00030508849886246026,
            0.0007193873170763254,
            0.00019765431352425367,
            0.0012236720649525523,
            0.0002687502419576049
        ],
        "align_select": "select Professionals.professional_id, Professionals.role_cipher, Professionals.e_mail_address",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "gold_select": "select Dogs.owner_id, Owners.forename, Owners.last_name",
        "select_candidates": [
            "select Owners.owner_id, Owners.forename, Owners.last_name",
            "select Dogs.owner_id, Owners.forename, Owners.last_name",
            "select Sizes.size_code, Owners.forename, Owners.last_name",
            "select Owners.owner_id-, Owners.forename, Owners.last_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs"
        ],
        "align_scores": [
            0.990063488483429,
            9.836740355240181e-05,
            0.690820574760437,
            9.567703091306612e-05,
            0.00031603171373717487,
            8.137889381032437e-05,
            0.0023953800555318594,
            7.893206930020824e-05
        ],
        "align_select": "select Owners.owner_id, Owners.forename, Owners.last_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "gold_select": "select Dogs.owner_id, Owners.forename, Owners.last_name",
        "select_candidates": [
            "select Owners.owner_id, Owners.forename, Owners.last_name",
            "select Dogs.owner_id, Owners.forename, Owners.last_name",
            "select Sizes.size_code, Owners.forename, Owners.last_name",
            "select t8.c1, Owners.forename, Owners.last_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs"
        ],
        "align_scores": [
            0.9893869161605835,
            8.459328091703355e-05,
            0.8361430764198303,
            8.60497893881984e-05,
            0.000285188463749364,
            7.082732918206602e-05,
            0.0002646909561008215,
            6.976124859647825e-05
        ],
        "align_select": "select Owners.owner_id, Owners.forename, Owners.last_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
        "gold_select": "select Professionals.professional_id, Professionals.role_cipher, Professionals.forename",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.role_cipher, Professionals.forename",
            "select Treatments.professional_id, Professionals.role_cipher, Professionals.forename",
            "select Professionals.professional_id, Professionals.forename, Professionals.last_name",
            "select t8.c2, Professionals.role_cipher, Professionals.forename"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Owners Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments"
        ],
        "align_scores": [
            0.6828445196151733,
            9.106478682952002e-05,
            0.01981475204229355,
            9.360494004795328e-05,
            0.0004542722017504275,
            7.206606824183837e-05,
            0.00047152486513368785,
            7.173680933192372e-05
        ],
        "align_select": "select Professionals.professional_id, Professionals.role_cipher, Professionals.forename",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
        "gold_select": "select Professionals.professional_id, Professionals.role_cipher, Professionals.forename",
        "select_candidates": [
            "select Treatments.professional_id, Professionals.role_cipher, Professionals.forename",
            "select Professionals.professional_id, Professionals.role_cipher, Professionals.forename",
            "select t8.c2, Professionals.role_cipher, Professionals.forename",
            "select Treatments.professional_id, Professionals.role_cipher, Professionals.forename"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Breeds Professionals Treatments"
        ],
        "align_scores": [
            0.012997996062040329,
            0.00011060525866923854,
            0.6416981816291809,
            0.00011058375821448863,
            0.0005728484247811139,
            7.025032391538844e-05,
            0.012997996062040329,
            0.00011060525866923854
        ],
        "align_select": "select Professionals.professional_id, Professionals.role_cipher, Professionals.forename",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the name of the breed with the most dogs?",
        "gold_select": "select Breeds.breed_name",
        "select_candidates": [
            "select Breeds.breed_name",
            "select Breeds.breed_name, Dogs.breed_cipher",
            "select Breeds.breed_name, Dogs.name",
            "select Breeds.breed_name, Dogs.owner_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Breeds Dogs",
        "table_candidates": [
            "Breeds Dogs"
        ],
        "align_scores": [
            0.9936808347702026,
            8.679760503582656e-05,
            0.0008635970880277455,
            6.992802082095295e-05,
            0.0017966263694688678,
            7.173989433795214e-05,
            0.0003042269963771105,
            5.8338595408713445e-05
        ],
        "align_select": "select Breeds.breed_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which breed do the most dogs have? Give me the breed name.",
        "gold_select": "select Breeds.breed_name",
        "select_candidates": [
            "select Breeds.breed_name",
            "select Breeds.breed_name, Dogs.breed_cipher",
            "select Breeds.breed_code, Breeds.breed_name",
            "select Breeds.breed_name, Dogs.deserted"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Breeds Dogs",
        "table_candidates": [
            "Breeds Dogs",
            "Breeds Owners Dogs",
            "Breeds Charges Dogs"
        ],
        "align_scores": [
            0.9916725754737854,
            0.00010539479262661189,
            0.001252353424206376,
            7.309902139240876e-05,
            0.003950794227421284,
            8.609986252849922e-05,
            0.0012331701582297683,
            7.423562783515081e-05
        ],
        "align_select": "select Breeds.breed_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "gold_select": "select Owners.owner_id, Owners.last_name",
        "select_candidates": [
            "select Owners.owner_id, Owners.last_name",
            "select Treatments.dog_included, Owners.last_name",
            "select Treatments.professional_id, Owners.last_name",
            "select Dogs.owner_id, Owners.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Owners Dogs Treatments",
            "Sizes Owners Dogs Treatments",
            "Treatment_Types Owners Dogs Treatments",
            "Owners Treatments",
            "Owners Professionals Treatments",
            "Sizes Owners Treatments"
        ],
        "align_scores": [
            0.9850560426712036,
            0.00020548694010358304,
            0.0015426119789481163,
            7.755238038953394e-05,
            0.0018250428838655353,
            9.512547694612294e-05,
            0.8703170418739319,
            0.0001591625768924132
        ],
        "align_select": "select Owners.owner_id, Owners.last_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "gold_select": "select Owners.owner_id, Owners.last_name",
        "select_candidates": [
            "select Owners.owner_id, Owners.last_name",
            "select Treatments.dog_included, Owners.last_name",
            "select Dogs.owner_id, Owners.last_name",
            "select Treatments.professional_id, Owners.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Owners Dogs Treatments",
            "Sizes Owners Dogs Treatments",
            "Treatment_Types Owners Dogs Treatments"
        ],
        "align_scores": [
            0.9571389555931091,
            8.778933988651261e-05,
            0.0015304783592000604,
            7.415850996039808e-05,
            0.8435884118080139,
            8.67386843310669e-05,
            0.0010686427121981978,
            8.148201595759019e-05
        ],
        "align_select": "select Owners.owner_id, Owners.last_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the description of the treatment type that costs the least money in total?",
        "gold_select": "select Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatment_Types.treatment_type_description",
            "select Treatment_Types.treatment_type_description, Treatments.category",
            "select Treatment_Types.treatment_type_description, t7",
            "select Treatment_Types.treatment_type_number, Treatment_Types.treatment_type_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments",
            "Charges Treatments"
        ],
        "align_scores": [
            0.9937441945075989,
            7.971069862833247e-05,
            0.0005729877157136798,
            6.478295108536258e-05,
            0.0005746902315877378,
            6.790868792450055e-05,
            0.00035038634086959064,
            6.191302236402407e-05
        ],
        "align_select": "select Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Give me the description of the treatment type whose total cost is the lowest.",
        "gold_select": "select Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatment_Types.treatment_type_description",
            "select Treatment_Types.treatment_type_description, Treatments.category",
            "select Treatment_Types.treatment_type_description, Treatments.professional_id",
            "select Treatment_Types.treatment_type_number, Treatment_Types.treatment_type_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments",
            "Charges Treatments"
        ],
        "align_scores": [
            0.9950726628303528,
            7.354966510320082e-05,
            0.00035804693470709026,
            6.1859427660238e-05,
            0.00010917556210188195,
            5.651496030623093e-05,
            0.00022927661484573036,
            6.354685319820419e-05
        ],
        "align_select": "select Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "gold_select": "select Owners.owner_id, Owners.zip_number",
        "select_candidates": [
            "select Owners.owner_id, Owners.zip_number",
            "select Dogs.owner_id, Owners.zip_number",
            "select Sizes.size_code, Owners.zip_number",
            "select Owners.owner_id-, Owners.zip_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Charges Owners Dogs",
            "Owners Dogs",
            "Breeds Charges Owners Dogs",
            "Charges Sizes Owners Dogs",
            "Sizes Owners Dogs",
            "Breeds Charges Sizes Owners Dogs",
            "Treatment_Types Owners Dogs"
        ],
        "align_scores": [
            0.26187455654144287,
            9.35323114390485e-05,
            0.012051247991621494,
            9.590887930244207e-05,
            0.0006386549212038517,
            0.00010255567030981183,
            0.0018701651133596897,
            8.600164437666535e-05
        ],
        "align_select": "select Owners.owner_id, Owners.zip_number",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "gold_select": "select Owners.owner_id, Owners.zip_number",
        "select_candidates": [
            "select Owners.owner_id, Owners.zip_number",
            "select Dogs.owner_id, Owners.zip_number",
            "select Owners.owner_id-, Owners.zip_number",
            "select Sizes.size_code, Owners.zip_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Owners Dogs Treatments",
            "Sizes Owners Dogs Treatments",
            "Charges Owners Dogs Treatments",
            "Treatment_Types Owners Dogs Treatments",
            "Breeds Owners Dogs Treatments",
            "Owners Dogs"
        ],
        "align_scores": [
            0.3262440860271454,
            0.00011279425962129608,
            0.033529266715049744,
            0.00010164117702515796,
            0.002065397333353758,
            8.133980009006336e-05,
            0.0007519939681515098,
            9.523011249257252e-05
        ],
        "align_select": "select Owners.owner_id, Owners.zip_number",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "gold_select": "select distinct Professionals.forename, Professionals.last_name",
        "select_candidates": [
            "select Professionals.forename, Professionals.last_name",
            "select distinct Professionals.forename, Professionals.last_name",
            "select Professionals.role_cipher, Professionals.last_name",
            "select t6).c2, Professionals.last_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Sizes Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Breeds Professionals Treatments",
            "Charges Professionals Treatments"
        ],
        "align_scores": [
            0.26515841484069824,
            0.00031552385189570487,
            0.006874762941151857,
            9.420059359399602e-05,
            0.0007905886159278452,
            0.00012472292291931808,
            0.0007528566638939083,
            0.0001118214349844493
        ],
        "align_select": "select Professionals.forename, Professionals.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "gold_select": "select distinct Professionals.forename, Professionals.last_name",
        "select_candidates": [
            "select Professionals.forename, Professionals.last_name",
            "select distinct Professionals.forename, Professionals.last_name",
            "select Professionals.role_cipher, Professionals.last_name",
            "select t.c2, Professionals.last_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments",
            "Charges Professionals Treatments"
        ],
        "align_scores": [
            0.03320705518126488,
            0.00023048254661262035,
            0.008676577359437943,
            0.00013746759213972837,
            0.0008571885991841555,
            0.0001834375725593418,
            0.0011229856172576547,
            0.00013587194553110749
        ],
        "align_select": "select Professionals.forename, Professionals.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the date of each treatment, together with the first name of the professional who operated it.",
        "gold_select": "select Treatments.date_of_treatment, Professionals.forename",
        "select_candidates": [
            "select Treatments.date_of_treatment, Professionals.forename",
            "select Treatments.date_of_treatment, Professionals.role_cipher",
            "select Treatments.date_of_treatment, Professionals.zip_code",
            "select Treatments.date_of_treatment, Professionals.state"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Charges Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Treatments"
        ],
        "align_scores": [
            0.9880902767181396,
            0.8942092061042786,
            0.0008307809475809336,
            0.0004823186609428376,
            0.0004954910837113857,
            0.00029132948839105666,
            0.0006406853208318353,
            0.0003178734623361379
        ],
        "align_select": "select Treatments.date_of_treatment, Professionals.forename",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the date and the operating professional's first name of each treatment?",
        "gold_select": "select Treatments.date_of_treatment, Professionals.forename",
        "select_candidates": [
            "select Treatments.date_of_treatment, Professionals.forename",
            "select Treatments.date_of_treatment, Professionals.zip_code",
            "select Treatments.date_of_treatment, Professionals.role_cipher",
            "select Treatments.date_of_treatment, Professionals.state"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Sizes Professionals Treatments",
            "Charges Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Treatments"
        ],
        "align_scores": [
            0.9805591702461243,
            0.0009082265314646065,
            0.0006829645135439932,
            0.00030119181610643864,
            0.0011834792094305158,
            0.0003534347051754594,
            0.0008874353370629251,
            0.0004092712188139558
        ],
        "align_select": "select Treatments.date_of_treatment, Professionals.forename",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the cost of each treatment and the corresponding treatment type description.",
        "gold_select": "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_description",
            "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_number_description",
            "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_description",
            "select Treatments.dog_included, Treatment_Types.treatment_type_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Charges Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments"
        ],
        "align_scores": [
            0.9954060316085815,
            0.9934747815132141,
            0.621964693069458,
            0.45401811599731445,
            0.9954060316085815,
            0.9934747815132141,
            0.0004023329820483923,
            0.0002765077806543559
        ],
        "align_select": "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the cost and treatment type description of each treatment?",
        "gold_select": "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_description",
            "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_description, Treatments.category",
            "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_description, Treatments.professional_id",
            "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_number_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Charges Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments"
        ],
        "align_scores": [
            0.9938874840736389,
            0.00013104254321660846,
            0.0002290876000188291,
            7.95342493802309e-05,
            0.00041581131517887115,
            8.302695641759783e-05,
            0.20539720356464386,
            0.0001225517044076696
        ],
        "align_select": "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List each owner's first name, last name, and the size of his for her dog.",
        "gold_select": "select Owners.forename, Owners.last_name, Dogs.size_code",
        "select_candidates": [
            "select Owners.forename, Owners.last_name, Dogs.size_code",
            "select Owners.forename, Owners.last_name, Owners.city",
            "select Owners.forename, Owners.last_name, Dogs.size_code, Owners.owner_id",
            "select Owners.forename, Owners.last_name, Dogs.size_code, Owners.forename"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Charges Sizes Owners Dogs",
            "Treatment_Types Owners Dogs"
        ],
        "align_scores": [
            0.7196131348609924,
            0.7705904841423035,
            0.000511132413521409,
            0.0002599986910354346,
            0.00018366772565059364,
            0.00021287210984155536,
            0.0005648480728268623,
            0.0007263816078193486
        ],
        "align_select": "select Owners.forename, Owners.last_name, Dogs.size_code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are each owner's first name, last name, and the size of their dog?",
        "gold_select": "select Owners.forename, Owners.last_name, Dogs.size_code",
        "select_candidates": [
            "select Owners.forename, Owners.last_name, Dogs.size_code",
            "select Owners.forename, Owners.last_name, Owners.city",
            "select Owners.forename, Owners.last_name, Dogs.size_code, Owners.owner_id",
            "select Owners.forename, Owners.last_name, Dogs.size_code, Owners.forename"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Charges Sizes Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Breeds Sizes Owners Dogs",
            "Breeds Owners Dogs"
        ],
        "align_scores": [
            0.9768079519271851,
            0.00014132844808045775,
            0.0005493765347637236,
            0.00013878733443561941,
            0.00023029626754578203,
            9.452587983105332e-05,
            0.000763279153034091,
            0.00011327736865496263
        ],
        "align_select": "select Owners.forename, Owners.last_name, Dogs.size_code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List pairs of the owner's first name and the dogs's name.",
        "gold_select": "select Owners.forename, Dogs.name",
        "select_candidates": [
            "select Owners.forename, Dogs.name",
            "select Owners.forename, Owners.last_name",
            "select Owners.forename, Dogs.name, Owners.last_name",
            "select Dogs.owner_id, Dogs.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Sizes Owners Dogs",
            "Breeds Owners Dogs",
            "Charges Dogs"
        ],
        "align_scores": [
            0.9744110107421875,
            9.143547504208982e-05,
            0.0005153005477041006,
            8.857068314682692e-05,
            0.0001689964410616085,
            6.640531501034275e-05,
            0.00028248000307939947,
            8.755482849664986e-05
        ],
        "align_select": "select Owners.forename, Dogs.name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are each owner's first name and their dogs's name?",
        "gold_select": "select Owners.forename, Dogs.name",
        "select_candidates": [
            "select Owners.forename, Dogs.name",
            "select Owners.forename, Owners.last_name",
            "select Owners.forename, Dogs.name, Owners.last_name",
            "select Owners.forename, Owners.last_name, Dogs.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Sizes Owners Dogs",
            "Breeds Owners Dogs",
            "Charges Dogs"
        ],
        "align_scores": [
            0.9768891930580139,
            0.00012209167471155524,
            0.0006249079015105963,
            9.376073285238817e-05,
            0.0002638091682456434,
            6.944848428247496e-05,
            0.0002459604584146291,
            7.24894052837044e-05
        ],
        "align_select": "select Owners.forename, Dogs.name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "gold_select": "select Dogs.name, Treatments.date_of_treatment",
        "select_candidates": [
            "select Dogs.name, Treatments.date_of_treatment",
            "select Dogs.name, Treatments.category",
            "select Dogs.name, Dogs.size_code",
            "select Dogs.name, t07.c4"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Breeds Dogs Treatments",
            "Breeds Charges Dogs Treatments",
            "Breeds Sizes Dogs Treatments",
            "Breeds Charges Sizes Dogs Treatments",
            "Charges Dogs Treatments",
            "Sizes Dogs Treatments",
            "Dogs Treatments"
        ],
        "align_scores": [
            0.9696211814880371,
            0.9739934206008911,
            0.000746288918890059,
            0.0006683659739792347,
            0.00028110708808526397,
            0.00020091410260647535,
            0.000648588698823005,
            0.0005082584684714675
        ],
        "align_select": "select Dogs.name, Treatments.date_of_treatment",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "gold_select": "select Dogs.name, Treatments.date_of_treatment",
        "select_candidates": [
            "select Dogs.name, Treatments.date_of_treatment",
            "select Dogs.name, Treatments.category, Treatments.date_of_treatment",
            "select Dogs.name, Treatments.category",
            "select Dogs.name, Dogs.size_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Breeds Dogs Treatments",
            "Breeds Charges Dogs Treatments",
            "Breeds Sizes Dogs Treatments",
            "Breeds Charges Sizes Dogs Treatments",
            "Charges Dogs Treatments",
            "Dogs Treatments",
            "Treatment_Types Dogs Treatments"
        ],
        "align_scores": [
            0.9652599692344666,
            0.9898021817207336,
            0.00028680264949798584,
            0.0003441083536017686,
            0.001002555014565587,
            0.0007905546226538718,
            0.00042070646304637194,
            0.00030139839509502053
        ],
        "align_select": "select Dogs.name, Treatments.date_of_treatment",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "gold_select": "select Owners.forename, Dogs.name",
        "select_candidates": [
            "select Owners.forename, Dogs.name",
            "select Dogs.owner_id, Dogs.name",
            "select Owners.forename, Owners.province",
            "select Owners.forename, Dogs.name, Owners.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Breeds Owners Dogs"
        ],
        "align_scores": [
            0.975578784942627,
            0.00028492187266238034,
            0.00046559309703297913,
            8.315388549817726e-05,
            0.0010944240493699908,
            0.00010502669465495273,
            0.000307582929963246,
            8.426005661021918e-05
        ],
        "align_select": "select Owners.forename, Dogs.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
        "gold_select": "select Owners.forename, Dogs.name",
        "select_candidates": [
            "select Owners.forename, Owners.last_name",
            "select Owners.forename, Owners.last_name, Dogs.name",
            "select Owners.forename, Owners.last_name, Owners.province",
            "select Owners.forename, Owners.last_name, Dogs.name, Owners.owner_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs"
        ],
        "align_scores": [
            0.000578967621549964,
            0.00010802164615597576,
            0.00022440864995587617,
            7.246521272463724e-05,
            0.00021815096260979772,
            9.802151907933876e-05,
            0.00013256022066343576,
            8.118605182971805e-05
        ],
        "align_select": "select Owners.forename, Owners.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "gold_select": "select distinct Dogs.date_arrived, Dogs.depature_day",
        "select_candidates": [
            "select Dogs.date_arrived, Dogs.depature_day",
            "select Dogs.dog_id, Dogs.depature_day",
            "select Dogs.owner_id, Dogs.depature_day",
            "select Dogs.weight, Dogs.depature_day"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.17572082579135895,
            0.0002436086069792509,
            0.0006755981594324112,
            0.00025515403831377625,
            0.0007027793908491731,
            0.00020560827397275716,
            0.000997075461782515,
            0.0004628049209713936
        ],
        "align_select": "select Dogs.date_arrived, Dogs.depature_day",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "gold_select": "select distinct Dogs.date_arrived, Dogs.depature_day",
        "select_candidates": [
            "select Dogs.date_arrived, Dogs.depature_day",
            "select Dogs.dog_id, Dogs.depature_day",
            "select distinct Dogs.date_arrived, Dogs.depature_day",
            "select Dogs.owner_id, Dogs.depature_day"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-INTERSECT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.351677268743515,
            0.00018995508435182273,
            0.0005433239275589585,
            0.00015303412510547787,
            0.008983428589999676,
            7.546313281636685e-05,
            0.0005868090083822608,
            0.00015268985589500517
        ],
        "align_select": "select Dogs.date_arrived, Dogs.depature_day",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "gold_select": "select Professionals.e_mail_address",
        "select_candidates": [
            "select Professionals.e_mail_address",
            "select Professionals.e_mail_address, Professionals.host_ring_up",
            "select Professionals.e_mail_address, Professionals.last_name",
            "select Professionals.e_mail_address (or Professionals.host_ring_up)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals",
            "Dogs Professionals",
            "Professionals Treatments"
        ],
        "align_scores": [
            0.9674537777900696,
            0.19250920414924622,
            0.00018905976321548223,
            7.959130016388372e-05,
            0.00019541684014257044,
            9.07769426703453e-05,
            0.0010546337580308318,
            0.00026246096240356565
        ],
        "align_select": "select Professionals.e_mail_address",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
        "gold_select": "select Professionals.e_mail_address",
        "select_candidates": [
            "select Professionals.e_mail_address",
            "select Professionals.e_mail_address, Professionals.host_ring_up",
            "select Professionals.e_mail_address, Professionals.last_name",
            "select Professionals.e_mail_address (or Professionals.host_ring_up)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals",
            "Dogs Professionals",
            "Owners Professionals"
        ],
        "align_scores": [
            0.9822283387184143,
            0.015831224620342255,
            0.00018306401034351438,
            7.355113484663889e-05,
            0.0001548501750221476,
            7.645483128726482e-05,
            0.0011995695531368256,
            0.00013420754112303257
        ],
        "align_select": "select Professionals.e_mail_address",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the arriving date and the departing date of all the dogs?",
        "gold_select": "select Dogs.date_arrived, Dogs.depature_day",
        "select_candidates": [
            "select Dogs.date_arrived, Dogs.depature_day",
            "select Dogs.dog_id, Dogs.depature_day",
            "select Dogs.owner_id, Dogs.depature_day",
            "select Dogs.weight, Dogs.depature_day"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.5744392275810242,
            0.00012029834761051461,
            0.00042528961785137653,
            8.763945515966043e-05,
            0.0004656987148337066,
            8.466462168144062e-05,
            0.0007079390925355256,
            0.00020406184194143862
        ],
        "align_select": "select Dogs.date_arrived, Dogs.depature_day",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the arrival date and the departure date for all the dogs.",
        "gold_select": "select Dogs.date_arrived, Dogs.depature_day",
        "select_candidates": [
            "select Dogs.date_arrived, Dogs.depature_day",
            "select Dogs.dog_id, Dogs.depature_day",
            "select Dogs.owner_id, Dogs.depature_day",
            "select Dogs.weight, Dogs.depature_day"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.3512817621231079,
            0.00010328652570024133,
            0.00042735354509204626,
            8.27544936328195e-05,
            0.0004971286398358643,
            8.729015098651871e-05,
            0.0006459791911765933,
            0.00019315496319904923
        ],
        "align_select": "select Dogs.date_arrived, Dogs.depature_day",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many dogs went through any treatments?",
        "gold_select": "select count(distinct Treatments.dog_included)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct Treatments.dog_included)",
            "select count(Treatments.dog_included)",
            "select count(distinct Treatments.treatment_id)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Treatments",
        "table_candidates": [
            "Treatments",
            "Dogs Treatments",
            "Professionals Treatments",
            "Breeds Treatments",
            "Breeds Dogs Treatments",
            "Charges Treatments",
            "Treatment_Types Treatments",
            "Treatment_Types Dogs Treatments"
        ],
        "align_scores": [
            0.9758580923080444,
            0.9758580923080444,
            0.9860500693321228,
            0.9860500693321228,
            0.9904168844223022,
            0.9904168844223022,
            0.016133561730384827,
            0.016133561730384827
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Count the number of dogs that went through a treatment.",
        "gold_select": "select count(distinct Treatments.dog_included)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct Treatments.dog_included)",
            "select count(Treatments.dog_included)",
            "select count(distinct Treatments.treatment_id)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Treatments",
        "table_candidates": [
            "Treatments",
            "Dogs Treatments",
            "Professionals Treatments",
            "Breeds Treatments",
            "Charges Treatments"
        ],
        "align_scores": [
            0.969106912612915,
            0.969106912612915,
            0.8249934911727905,
            0.8249934911727905,
            0.985905647277832,
            0.985905647277832,
            0.5995891094207764,
            0.5995891094207764
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "gold_select": "select Professionals.role_cipher, Professionals.avenue, Professionals.capital_area, Professionals.state",
        "select_candidates": [
            "select Professionals.role_cipher, Professionals.avenue, Professionals.capital_area, Professionals.state",
            "select Professionals.role_cipher, Professionals.avenue, Professionals.state, Professionals.zip_code",
            "select Professionals.role_cipher, Professionals.forename, Professionals.avenue, Professionals.capital_area, Professionals.state",
            "select Professionals.role_cipher, Professionals.avenue, Professionals.state"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals"
        ],
        "align_scores": [
            0.0009554160642437637,
            0.0001514403847977519,
            0.0006778748356737196,
            0.00012218390475027263,
            0.0006696225609630346,
            0.0001576409995323047,
            0.0011008154833689332,
            0.00013452810526359826
        ],
        "align_select": "select Professionals.role_cipher, Professionals.avenue, Professionals.capital_area, Professionals.state",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "gold_select": "select Professionals.role_cipher, Professionals.avenue, Professionals.capital_area, Professionals.state",
        "select_candidates": [
            "select Professionals.role_cipher, Professionals.avenue, Professionals.capital_area, Professionals.state",
            "select Professionals.role_cipher, Owners.street, Owners.city, Professionals.state",
            "select Professionals.role_cipher, Dogs.breed_cipher, Professionals.capital_area, Professionals.state",
            "select Professionals.role_cipher, Professionals.forename, Professionals.avenue, Professionals.capital_area, Professionals.state"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Owners Professionals"
        ],
        "align_scores": [
            0.0004429456021171063,
            0.00013933096488472074,
            0.018786970525979996,
            0.00010424791253171861,
            0.0006450259243138134,
            0.00016962330846581608,
            0.0006079919403418899,
            0.00018003553850576282
        ],
        "align_select": "select Professionals.role_cipher, Professionals.avenue, Professionals.capital_area, Professionals.state",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "gold_select": "select Owners.forename, Owners.last_name, Owners.email_address",
        "select_candidates": [
            "select Owners.forename, Owners.last_name, Owners.email_address",
            "select Owners.forename, Owners.last_name and Owners.email_address",
            "select Owners.forename, Owners.last_name, t4.c-7",
            "select Owners.forename, Owners.last_name, and Owners.email_address"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners",
        "table_candidates": [
            "Owners"
        ],
        "align_scores": [
            0.9746639728546143,
            0.00011418377835070714,
            0.9696952700614929,
            0.00011882466787938029,
            0.0005799529608339071,
            0.00012698490172624588,
            0.9715030193328857,
            0.0001170107934740372
        ],
        "align_select": "select Owners.forename, Owners.last_name, Owners.email_address",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "gold_select": "select Owners.forename, Owners.last_name, Owners.email_address",
        "select_candidates": [
            "select Owners.forename, Owners.last_name, Owners.email_address",
            "select Owners.forename, Owners.last_name and Owners.email_address",
            "select distinct Owners.forename, Owners.last_name, Owners.email_address",
            "select Owners.forename, Owners.last_name, t4.c-7"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners",
        "table_candidates": [
            "Owners"
        ],
        "align_scores": [
            0.9858373999595642,
            0.00010202464181929827,
            0.9838041663169861,
            0.00010867284436244518,
            0.020731700584292412,
            6.778699025744572e-05,
            0.00037772435462102294,
            0.00012555379362311214
        ],
        "align_select": "select Owners.forename, Owners.last_name, Owners.email_address",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many dogs have not gone through any treatment?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Dogs.dog_id",
            "select count(*), Dogs.breed_cipher",
            "select count(*), Treatments.dog_included"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs Professionals Treatments",
            "Dogs",
            "Dogs Professionals"
        ],
        "align_scores": [
            0.9845408201217651,
            0.0031732888892292976,
            0.00025069891125895083,
            0.0009839643025770783,
            0.0002765333338174969,
            0.0006602293578907847,
            0.00021982674661558121,
            0.000547447707504034
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Tell me the number of dogs that have not received any treatment.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Dogs.dog_id",
            "select count(*), Dogs.breed_cipher",
            "select count(*), Treatments.dog_included"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs",
            "Dogs Professionals Treatments",
            "Dogs Professionals"
        ],
        "align_scores": [
            0.9830970764160156,
            0.0041976673528552055,
            0.00019960346980951726,
            0.0005257762386463583,
            0.0003216033219359815,
            0.00037026163772679865,
            0.000182061325176619,
            0.0004274527309462428
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "gold_select": "select Dogs.name, Dogs.age, Dogs.weight",
        "select_candidates": [
            "select Dogs.name, Dogs.age, Dogs.weight",
            "select distinct Dogs.name, Dogs.age, Dogs.weight",
            "select Dogs.name, Dogs.age, Dogs.weight, Dogs.deserted",
            "select Dogs.name, Dogs.age, Dogs.weight, Dogs.dog_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.3193008601665497,
            0.05834385007619858,
            0.01842895708978176,
            0.0003044951008632779,
            0.00044617781531997025,
            0.00016871772822923958,
            0.00017730689432937652,
            0.00013341874000616372
        ],
        "align_select": "select Dogs.name, Dogs.age, Dogs.weight",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
        "gold_select": "select Dogs.name, Dogs.age, Dogs.weight",
        "select_candidates": [
            "select Dogs.name, Dogs.age, Dogs.weight",
            "select distinct Dogs.name, Dogs.age, Dogs.weight",
            "select Dogs.name, Dogs.age, Dogs.weight, Dogs.deserted",
            "select Dogs.name, Dogs.age, Dogs.weight, Dogs.dog_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.6497166752815247,
            0.0016469331458210945,
            0.00802391767501831,
            0.00011343516962369904,
            0.00043943728087469935,
            9.085488272830844e-05,
            0.00020314437279012054,
            9.855772805167362e-05
        ],
        "align_select": "select Dogs.name, Dogs.age, Dogs.weight",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the email, cell phone and home phone of all the professionals.",
        "gold_select": "select Professionals.e_mail_address, Professionals.cell_number, Professionals.host_ring_up",
        "select_candidates": [
            "select Professionals.e_mail_address, Professionals.cell_number, Professionals.e_mail_address",
            "select Professionals.e_mail_address, Professionals.host_ring_up, Professionals.e_mail_address",
            "select Professionals.e_mail_address, t6.cten, Professionals.e_mail_address",
            "select Professionals.e_mail_address, Professionals.cell_number., Professionals.e_mail_address"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals",
            "Dogs Professionals",
            "Owners Professionals"
        ],
        "align_scores": [
            0.00033120662556029856,
            0.0001160437532234937,
            0.0005410350277088583,
            0.00012820155825465918,
            0.0002766683464869857,
            0.00011348191037541255,
            0.0004973241593688726,
            0.00013451451377477497
        ],
        "align_select": "select Professionals.e_mail_address, Professionals.cell_number, Professionals.e_mail_address",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the email, cell phone and home phone of each professional?",
        "gold_select": "select Professionals.e_mail_address, Professionals.cell_number, Professionals.host_ring_up",
        "select_candidates": [
            "select Professionals.e_mail_address, Professionals.cell_number, Professionals.e_mail_address",
            "select Professionals.e_mail_address, Professionals.host_ring_up, Professionals.e_mail_address",
            "select Professionals.e_mail_address, t6.cten, Professionals.e_mail_address",
            "select Professionals.e_mail_address, Professionals.professional_id9, Professionals.e_mail_address"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals",
            "Dogs Professionals",
            "Owners Professionals"
        ],
        "align_scores": [
            0.000373020680854097,
            7.325602928176522e-05,
            0.0005723583162762225,
            7.062055374262854e-05,
            0.00033400970278307796,
            6.506041972897947e-05,
            0.0003843065642286092,
            6.93177426001057e-05
        ],
        "align_select": "select Professionals.e_mail_address, Professionals.cell_number, Professionals.e_mail_address",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are all the possible breed type and size type combinations?",
        "gold_select": "select distinct Dogs.breed_cipher, Dogs.size_code",
        "select_candidates": [
            "select Dogs.breed_cipher, Dogs.size_code",
            "select possible Dogs.breed_cipher, Dogs.size_code",
            "select distinct Dogs.breed_cipher, Dogs.size_code",
            "select unique Dogs.breed_cipher, Dogs.size_code"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs",
            "Sizes Dogs",
            "Charges Sizes Dogs",
            "Breeds Sizes Dogs",
            "Sizes Treatment_Types Dogs",
            "Treatment_Types Dogs",
            "Owners Dogs",
            "Charges Dogs"
        ],
        "align_scores": [
            0.387853741645813,
            0.00015111395623534918,
            0.0009154053404927254,
            0.00011855598859256133,
            0.030445531010627747,
            0.00010804399789776653,
            0.0014422497479245067,
            0.00011064324644394219
        ],
        "align_select": "select Dogs.breed_cipher, Dogs.size_code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find the distinct breed type and size type combinations for dogs.",
        "gold_select": "select distinct Dogs.breed_cipher, Dogs.size_code",
        "select_candidates": [
            "select distinct Dogs.breed_cipher, Dogs.size_code",
            "select distinct Dogs.owner_id, Dogs.size_code",
            "select distinct t5.cbreed_type, Dogs.size_code",
            "select distinct Dogs.breed_cipher, Dogs.size_code, Dogs.owner_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs",
            "Sizes Dogs",
            "Breeds Sizes Dogs",
            "Charges Sizes Dogs",
            "Treatment_Types Dogs",
            "Owners Dogs",
            "Charges Dogs",
            "Breeds Dogs"
        ],
        "align_scores": [
            0.07177270203828812,
            0.00010903645306825638,
            0.0003116932639386505,
            9.945347846951336e-05,
            0.0004524070827756077,
            0.00010801968892337754,
            0.00012650822463911027,
            9.225673420587555e-05
        ],
        "align_select": "select distinct Dogs.breed_cipher, Dogs.size_code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the first name of all the professionals along with the description of the treatment they have done.",
        "gold_select": "select distinct Professionals.forename, Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Professionals.forename, Treatment_Types.treatment_type_description",
            "select Professionals.forename, Treatment_Types.treatment_type_description, Treatments.professional_id",
            "select Professionals.forename, t3_description",
            "select Professionals.forename, Treatment_Types.treatment_type_number_description"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Professionals Treatments",
        "table_candidates": [
            "Treatment_Types Professionals Treatments",
            "Sizes Treatment_Types Professionals Treatments",
            "Charges Treatment_Types Professionals Treatments",
            "Breeds Treatment_Types Professionals Treatments",
            "Charges Professionals Treatments"
        ],
        "align_scores": [
            0.9608811736106873,
            0.0001093989922082983,
            0.00018179802282247692,
            7.462174107786268e-05,
            0.008344382978975773,
            0.00010605149873299524,
            0.012570700608193874,
            9.919246076606214e-05
        ],
        "align_select": "select Professionals.forename, Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are each professional's first name and description of the treatment they have performed?",
        "gold_select": "select distinct Professionals.forename, Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Professionals.forename, Treatment_Types.treatment_type_description",
            "select Professionals.forename, Treatment_Types.treatment_type_description, Treatments.professional_id",
            "select Professionals.forename, t3 - Treatments.dog_included",
            "select Professionals.forename, Treatment_Types.treatment_type_description - Treatments.professional_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Professionals Treatments",
        "table_candidates": [
            "Treatment_Types Professionals Treatments",
            "Sizes Treatment_Types Professionals Treatments",
            "Charges Treatment_Types Professionals Treatments",
            "Breeds Treatment_Types Professionals Treatments",
            "Charges Professionals Treatments"
        ],
        "align_scores": [
            0.9660129547119141,
            0.0001299412251682952,
            0.00024488757480867207,
            8.845571574056521e-05,
            0.0015826825983822346,
            0.00016914201842155308,
            0.003458289196714759,
            0.00011826400441350415
        ],
        "align_select": "select Professionals.forename, Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the name of singers in ascending order of net worth.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.value_estimation",
            "select singer.Name, singer.born_date",
            "select singer.Name in singer.value_estimation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.995835542678833,
            0.0002599766885396093,
            0.00019282485300209373,
            9.613815927878022e-05,
            0.00016436072473879904,
            0.00014611856022384018,
            0.0006359641556628048,
            0.0001598764065420255
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the names of singers ordered by ascending net worth?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.value_estimation",
            "select singer.Name, singer.born_date",
            "select singer.Name (ordered singer.value_estimation)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9954044818878174,
            0.00028871928225271404,
            0.00019473698921501637,
            0.0001015667658066377,
            0.0002512689388822764,
            0.0001442638604203239,
            0.0006059500738047063,
            0.0001993409969145432
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the birth year and citizenship of singers?",
        "gold_select": "select singer.born_date, singer.nationality",
        "select_candidates": [
            "select singer.born_date, singer.nationality",
            "select singer.Singer_ID, singer.born_date, singer.nationality",
            "select singer.nationality, singer.born_date",
            "select singer.Name, singer.born_date, singer.nationality"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.991390585899353,
            0.008012955076992512,
            0.00018876594549510628,
            0.00014344016381073743,
            0.9956833124160767,
            0.011931752786040306,
            0.00018800687394104898,
            0.00014929047028999776
        ],
        "align_select": "select singer.born_date, singer.nationality",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the birth years and citizenships of the singers?",
        "gold_select": "select singer.born_date, singer.nationality",
        "select_candidates": [
            "select singer.born_date, singer.nationality",
            "select singer.Singer_ID, singer.born_date, singer.nationality",
            "select singer.Name, singer.born_date, singer.nationality",
            "select singer.born_date.c2, singer.nationality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9914419054985046,
            0.010244258679449558,
            0.00022244521824177355,
            0.00015210712444968522,
            0.00021090716472826898,
            0.0001588140585226938,
            0.0006904308684170246,
            0.0001788636582205072
        ],
        "align_select": "select singer.born_date, singer.nationality",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the name of singers whose citizenship is not \"France\".",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.born_date",
            "select singer.Name, singer.nationality",
            "select singer.Name, singer.value_estimation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9939309358596802,
            0.0001300305884797126,
            0.0001607947633601725,
            6.498317088698968e-05,
            0.00018455075041856617,
            5.933871943852864e-05,
            0.0001400708279106766,
            5.765560854342766e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of the singers who are not French citizens?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.nationality",
            "select distinct singer.Name",
            "select singer.Name, singer.born_date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.95353102684021,
            0.003747157519683242,
            0.0002173540706280619,
            0.00011531211202964187,
            0.06609020382165909,
            0.023833703249692917,
            0.000201079310500063,
            0.00011890627501998097
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the name of singers whose birth year is either 1948 or 1949?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.born_date",
            "select singer.Name, singer.value_estimation",
            "select t0, singer.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9944954514503479,
            0.0006085730856284499,
            0.00017260447202716023,
            7.794636621838436e-05,
            0.00015456620894838125,
            7.655740773770958e-05,
            0.0005795622710138559,
            0.00012292225437704474
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.born_date",
            "select singer.Singer_ID, singer.Name",
            "select singer.Name, singer.value_estimation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9931562542915344,
            0.0005275888252072036,
            0.00019598094513639808,
            6.884974573040381e-05,
            0.00025232936604879797,
            0.00010354904225096107,
            0.0001752365642460063,
            6.567009404534474e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name of the singer with the largest net worth?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.value_estimation",
            "select singer.Name (ORDER BY-LIMIT)",
            "select singer.Name, singer.born_date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9757742285728455,
            6.81202654959634e-05,
            0.000436110858572647,
            5.916937152505852e-05,
            0.0004479424678720534,
            6.889388168929145e-05,
            0.0009890047367662191,
            5.9253565268591046e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the singer who is worth the most?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.value_estimation",
            "select singer.Name, singer.born_date",
            "select singer.Name, singer.Singer_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9369750022888184,
            6.842645234428346e-05,
            0.000456636626040563,
            5.924712240812369e-05,
            0.0007662471034564078,
            5.977763794362545e-05,
            0.0006516326102428138,
            6.170723645482212e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show different citizenship of singers and the number of singers of each citizenship.",
        "gold_select": "select singer.nationality, count(*)",
        "select_candidates": [
            "select singer.nationality, count(*)",
            "select singer.nationality, count(*), singer.value_estimation",
            "select singer.nationality, count(*), t0.c5",
            "select singer.nationality, count(*), singer.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9958258867263794,
            0.00025073144934140146,
            0.0004323985194787383,
            0.00016852078260853887,
            0.00022823385370429605,
            0.00011229790834477171,
            0.00019528275879565626,
            0.00012237022747285664
        ],
        "align_select": "select singer.nationality, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For each citizenship, how many singers are from that country?",
        "gold_select": "select singer.nationality, count(*)",
        "select_candidates": [
            "select singer.nationality, count(*)",
            "select count(*), singer.nationality",
            "select singer.nationality.c4, count(*)",
            "select singer.nationality, count(*), singer.value_estimation"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9963351488113403,
            0.0002610115916468203,
            0.9962294697761536,
            0.00021424225997179747,
            0.0004933883901685476,
            0.0002658001321833581,
            0.0010200130054727197,
            0.00010151670721825212
        ],
        "align_select": "select singer.nationality, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Please show the most common citizenship of singers.",
        "gold_select": "select singer.nationality",
        "select_candidates": [
            "select singer.nationality",
            "select singer.nationality--GROUP BY-ORDER BY-LIMIT",
            "select singer.nationality, t0.c5",
            "select singer.nationality, singer.value_estimation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9957450032234192,
            7.051845750538632e-05,
            0.0005836861673742533,
            8.806015830487013e-05,
            0.000365151820005849,
            6.237163324840367e-05,
            0.0005355824832804501,
            5.505907392944209e-05
        ],
        "align_select": "select singer.nationality",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the most common singer citizenship?",
        "gold_select": "select singer.nationality",
        "select_candidates": [
            "select singer.nationality",
            "select singer.nationality, t0.c5",
            "select singer.nationality, singer.value_estimation",
            "select singer.nationality, singer.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9958803653717041,
            6.575939187314361e-05,
            0.0004649943148251623,
            5.928488099016249e-05,
            0.0008163996390067041,
            5.388360295910388e-05,
            0.0002711972629185766,
            5.6776407291181386e-05
        ],
        "align_select": "select singer.nationality",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "gold_select": "select singer.nationality, max(singer.value_estimation)",
        "select_candidates": [
            "select singer.nationality, max(singer.value_estimation)",
            "select singer.nationality., max(singer.value_estimation)",
            "select singer.nationality, max(singer.value_estimation)",
            "select singer.nationality, Max(singer.value_estimation)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9937769174575806,
            0.00029661328881047666,
            0.003933516331017017,
            0.00035772964474745095,
            0.9937769174575806,
            0.00029661328881047666,
            0.9937769174575806,
            0.00029661328881047666
        ],
        "align_select": "select singer.nationality, max(singer.value_estimation)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For each citizenship, what is the maximum net worth?",
        "gold_select": "select singer.nationality, max(singer.value_estimation)",
        "select_candidates": [
            "select singer.nationality, max(singer.value_estimation)",
            "select singer.nationality, max(singer.value_estimation)",
            "select singer.nationality., max(singer.value_estimation)",
            "select for singer.nationality, max(singer.value_estimation)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9931178092956543,
            0.00018563080811873078,
            0.9931178092956543,
            0.00018563080811873078,
            0.005352681502699852,
            0.0002577207633294165,
            0.0006797414971515536,
            0.00016267418686766177
        ],
        "align_select": "select singer.nationality, max(singer.value_estimation)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show distinct names of singers that have songs with sales more than 300000.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select distinct singer.Name",
            "select distinct singer.Name, song.Singer_ID",
            "select distinct singer.Name, singer.born_date",
            "select distinct singer.Name, singer.Singer_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9947316646575928,
            0.005026184022426605,
            0.0002153282839572057,
            0.00022067956160753965,
            0.00017774649313651025,
            0.0002431083412375301,
            0.00018653178995009512,
            0.00021469850616995245
        ],
        "align_select": "select distinct singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "what are the different names of the singers that have sales more than 300000?",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select distinct singer.Name",
            "select distinct singer.Name, song.Singer_ID",
            "select distinct singer.Name, singer.born_date",
            "select count(distinct singer.Name)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9949806332588196,
            0.005171963945031166,
            0.00018580275354906917,
            0.00020416537881828845,
            0.0001357059518340975,
            0.00015642473590560257,
            0.0013599810190498829,
            0.00014378936612047255
        ],
        "align_select": "select distinct singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the names of singers and the total sales of their songs.",
        "gold_select": "select singer.Name, sum(song.selling)",
        "select_candidates": [
            "select singer.Name, sum(song.selling)",
            "select song.Singer_ID, sum(song.selling)",
            "select t2.c2, sum(song.selling)",
            "select t3.c2, sum(song.selling)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9904261231422424,
            0.00015622378850821406,
            0.001518677338026464,
            0.00016494965530000627,
            0.0003665241820272058,
            0.00014710794494021684,
            0.00025393959367647767,
            0.00016815112030599266
        ],
        "align_select": "select singer.Name, sum(song.selling)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For each singer name, what is the total sales for their songs?",
        "gold_select": "select singer.Name, sum(song.selling)",
        "select_candidates": [
            "select singer.Name, sum(song.selling)",
            "select sum(song.selling), singer.Name",
            "select singer.Name, sum(song.selling)",
            "select song.Singer_ID, sum(song.selling)"
        ],
        "select_labels": [
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9910942912101746,
            0.00020985027367714792,
            0.986160397529602,
            0.00019176908244844526,
            0.9910942912101746,
            0.00020985027367714792,
            0.35215240716934204,
            0.0002455829526297748
        ],
        "align_select": "select singer.Name, sum(song.selling)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
        "gold_select": "select singer.nationality",
        "select_candidates": [
            "select singer.nationality",
            "select singer.nationality, singer.born_date",
            "select singer.nationality, a mix of singer.nationality",
            "select singer.born_date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9910680651664734,
            0.6135644912719727,
            0.00012625745148397982,
            0.00012092100223526359,
            0.0001795651187421754,
            0.00017238507280126214,
            0.012987753376364708,
            0.008318968117237091
        ],
        "align_select": "select singer.nationality",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
        "gold_select": "select singer.nationality",
        "select_candidates": [
            "select singer.nationality",
            "select singer.Name, singer.born_date",
            "select singer.value_estimation, singer.nationality",
            "select singer.Name, singer.nationality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9925310015678406,
            0.9925310015678406,
            0.00014041691611055285,
            0.00014041691611055285,
            0.0001510224974481389,
            0.0001510224974481389,
            0.00014093227218836546,
            0.00014093227218836546
        ],
        "align_select": "select singer.nationality",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the birth year and citizenship of singers?",
        "gold_select": "select singer.born_yr, singer.Citizenship",
        "select_candidates": [
            "select singer.born_yr, singer.Citizenship",
            "select singer.Name, singer.born_yr, singer.Citizenship",
            "select singer.Singer_ID, singer.born_yr, singer.Citizenship",
            "select singer.Citizenship, singer.born_yr"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9953039884567261,
            0.0016826068749651313,
            0.00022006162907928228,
            0.00014748674584552646,
            0.0002032728079939261,
            0.00015046335465740412,
            0.9954600930213928,
            0.0058486852794885635
        ],
        "align_select": "select singer.born_yr, singer.Citizenship",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the birth years and citizenships of the singers?",
        "gold_select": "select singer.born_yr, singer.Citizenship",
        "select_candidates": [
            "select singer.born_yr, singer.Citizenship",
            "select singer.Singer_ID, singer.born_yr, singer.Citizenship",
            "select singer.Name, singer.born_yr, singer.Citizenship",
            "select singer.Citizenship, singer.born_yr"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9937562942504883,
            0.0028728502802550793,
            0.0002393082540947944,
            0.00015990185784175992,
            0.00028056412702426314,
            0.00014985984307713807,
            0.9939334988594055,
            0.005830956622958183
        ],
        "align_select": "select singer.born_yr, singer.Citizenship",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show the name of singers whose birth year is either 1948 or 1949?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.born_yr",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Name, t0.c6"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9944954514503479,
            0.0006085730856284499,
            0.00018384659779258072,
            7.947041012812406e-05,
            0.00017113595094997436,
            8.362264634342864e-05,
            0.00036985729821026325,
            8.861021342454478e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.born_yr",
            "select distinct singer.Name",
            "select singer.Name, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9931562542915344,
            0.0005275888252072036,
            0.00022616358182858676,
            7.187349547166377e-05,
            0.044933974742889404,
            0.00018704740796238184,
            0.00020143200526945293,
            7.716840627836064e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show distinct names of singers that have songs with sales more than 300000.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select distinct singer.Name",
            "select distinct singer.Name, song.Singer_ID",
            "select distinct singer.Name, singer.born_yr",
            "select distinct singer.Name, singer.Singer_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9947316646575928,
            0.005026184022426605,
            0.0002153282839572057,
            0.00022067956160753965,
            0.00030114015680737793,
            0.00032786489464342594,
            0.00018653178995009512,
            0.00021469850616995245
        ],
        "align_select": "select distinct singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "what are the different names of the singers that have sales more than 300000?",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select distinct singer.Name",
            "select distinct singer.Name, song.Singer_ID",
            "select distinct singer.Name, singer.born_yr",
            "select distinct singer.Name, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9949806332588196,
            0.005171963945031166,
            0.00018580275354906917,
            0.00020416537881828845,
            0.00021488034690264612,
            0.00028403609758242965,
            0.00020183036394882947,
            0.00012694083852693439
        ],
        "align_select": "select distinct singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the names of singers and the total sales of their songs.",
        "gold_select": "select singer.Name, sum(song.sold)",
        "select_candidates": [
            "select singer.Name, sum(song.sold)",
            "select song.Singer_ID, sum(song.sold)",
            "select t2.c2, sum(song.sold)",
            "select t3.c2, sum(song.sold)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9956296682357788,
            0.00016787141794338822,
            0.001839583506807685,
            0.00016679061809554696,
            0.0003447305643931031,
            0.0001436265738448128,
            0.0002521196729503572,
            0.00016425937064923346
        ],
        "align_select": "select singer.Name, sum(song.sold)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For each singer name, what is the total sales for their songs?",
        "gold_select": "select singer.Name, sum(song.sold)",
        "select_candidates": [
            "select singer.Name, sum(song.sold)",
            "select sum(song.sold), singer.Name",
            "select song.Singer_ID, sum(song.sold)",
            "select singer.Name, sum(song.sold)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9957703948020935,
            0.00017883414693642408,
            0.9951207041740417,
            0.00018078953144140542,
            0.29163026809692383,
            0.0002294870064361021,
            0.9957703948020935,
            0.00017883414693642408
        ],
        "align_select": "select singer.Name, sum(song.sold)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
        "gold_select": "select singer.Citizenship",
        "select_candidates": [
            "select singer.Citizenship",
            "select singer.Citizenship, singer.born_yr",
            "select singer.Name, singer.Citizenship",
            "select singer.born_yr"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9912407994270325,
            0.30219122767448425,
            0.00018223970255348831,
            0.00016454247816000134,
            0.00011426546552684158,
            0.00010376332647865638,
            0.048918385058641434,
            0.03147127851843834
        ],
        "align_select": "select singer.Citizenship",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
        "gold_select": "select singer.Citizenship",
        "select_candidates": [
            "select singer.Citizenship",
            "select singer.Citizenship, singer.born_yr",
            "select singer.Name, singer.Citizenship",
            "select singer.Net_Worth_Millions, singer.Citizenship"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9927526712417603,
            0.9927526712417603,
            0.00023859197972342372,
            0.00023859197972342372,
            0.00014661683235317469,
            0.00014661683235317469,
            0.0002389156725257635,
            0.0002389156725257635
        ],
        "align_select": "select singer.Citizenship",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "List the name of singers in ascending order of net worth.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.gross_value",
            "select singer.Name, singer.Birth_Year",
            "select singer.Name in singer.gross_value"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.995835542678833,
            0.0002599766885396093,
            0.00019408267689868808,
            0.00010194305650657043,
            0.00015314097981899977,
            0.00013844760542269796,
            0.0003263620310463011,
            0.0002013874618569389
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the names of singers ordered by ascending net worth?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.gross_value",
            "select singer.Name (ordered singer.gross_value)",
            "select singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9954044818878174,
            0.00028871928225271404,
            0.00020097618107683957,
            0.00010923274385277182,
            0.0012561335461214185,
            0.00021895694953855127,
            0.0002188822254538536,
            0.00014085782459005713
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What is the name of the singer with the largest net worth?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.gross_value",
            "select singer.Name, singer.Birth_Year",
            "select singer.Name (ORDER BY-LIMIT)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9757742285728455,
            6.81202654959634e-05,
            0.00048397431964986026,
            5.976247484795749e-05,
            0.0006706651765853167,
            6.0049591411370784e-05,
            0.0004479424678720534,
            6.889388168929145e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the singer who is worth the most?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.gross_value",
            "select singer.Name, singer.Birth_Year",
            "select singer.Name, singer.Singer_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9369750022888184,
            6.842645234428346e-05,
            0.0005669252132065594,
            5.6959601351991296e-05,
            0.0004889064584858716,
            6.0839032812509686e-05,
            0.0006516326102428138,
            6.170723645482212e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "gold_select": "select singer.Citizenship, max(singer.gross_value)",
        "select_candidates": [
            "select singer.Citizenship, max(singer.gross_value)",
            "select singer.Citizenship., max(singer.gross_value)",
            "select singer.Citizenship, max(singer.gross_value)",
            "select singer.Citizenship, Max(singer.gross_value)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.99400395154953,
            0.00037122718640603125,
            0.004510953556746244,
            0.00042699091136455536,
            0.99400395154953,
            0.00037122718640603125,
            0.99400395154953,
            0.00037122718640603125
        ],
        "align_select": "select singer.Citizenship, max(singer.gross_value)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For each citizenship, what is the maximum net worth?",
        "gold_select": "select singer.Citizenship, max(singer.gross_value)",
        "select_candidates": [
            "select singer.Citizenship, max(singer.gross_value)",
            "select max(singer.gross_value), singer.Citizenship",
            "select maximum(singer.gross_value), singer.Citizenship",
            "select singer.Citizenship, max(singer.gross_value)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9914400577545166,
            0.00024831786868162453,
            0.9937452077865601,
            0.00016854441491886973,
            0.011772127822041512,
            0.0001520760852145031,
            0.9914400577545166,
            0.00024831786868162453
        ],
        "align_select": "select singer.Citizenship, max(singer.gross_value)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the birth year and citizenship of singers?",
        "gold_select": "select singer.born_yr, singer.Citizenship",
        "select_candidates": [
            "select singer.born_yr, singer.Citizenship",
            "select singer.Name, singer.born_yr, singer.Citizenship",
            "select singer.Citizenship, singer.born_yr",
            "select singer.Singer_ID, singer.born_yr, singer.Citizenship"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9953039884567261,
            0.0016826068749651313,
            0.00022006162907928228,
            0.00014748674584552646,
            0.9954600930213928,
            0.0058486852794885635,
            0.0002032728079939261,
            0.00015046335465740412
        ],
        "align_select": "select singer.born_yr, singer.Citizenship",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the birth years and citizenships of the singers?",
        "gold_select": "select singer.born_yr, singer.Citizenship",
        "select_candidates": [
            "select singer.born_yr, singer.Citizenship",
            "select singer.Singer_ID, singer.born_yr, singer.Citizenship",
            "select singer.Name, singer.born_yr, singer.Citizenship",
            "select singer.Citizenship, singer.born_yr"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9937562942504883,
            0.0028728502802550793,
            0.0002393082540947944,
            0.00015990185784175992,
            0.00028056412702426314,
            0.00014985984307713807,
            0.9939334988594055,
            0.005830956622958183
        ],
        "align_select": "select singer.born_yr, singer.Citizenship",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show the name of singers whose birth year is either 1948 or 1949?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.born_yr",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Name, t0.c6"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9944954514503479,
            0.0006085730856284499,
            0.00018384659779258072,
            7.947041012812406e-05,
            0.00017113595094997436,
            8.362264634342864e-05,
            0.00036985729821026325,
            8.861021342454478e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.born_yr",
            "select singer.Singer_ID, singer.Name",
            "select singer.Name, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9931562542915344,
            0.0005275888252072036,
            0.00022616358182858676,
            7.187349547166377e-05,
            0.00025232936604879797,
            0.00010354904225096107,
            0.00020143200526945293,
            7.716840627836064e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show distinct names of singers that have songs with sales more than 300000.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select distinct singer.Name",
            "select distinct singer.Name, song.Singer_ID",
            "select distinct singer.Name, singer.born_yr",
            "select distinct singer.Name, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9947316646575928,
            0.005026184022426605,
            0.0002153282839572057,
            0.00022067956160753965,
            0.00030114015680737793,
            0.00032786489464342594,
            0.0002228744706371799,
            0.0001371904945699498
        ],
        "align_select": "select distinct singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "what are the different names of the singers that have sales more than 300000?",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select distinct singer.Name",
            "select distinct singer.Name, singer.born_yr",
            "select distinct singer.Name, singer.Net_Worth_Millions",
            "select count(distinct singer.Name)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer",
            "singer song"
        ],
        "align_scores": [
            0.9949806332588196,
            0.0002002298424486071,
            0.00021488034690264612,
            7.876889867475256e-05,
            0.00020183036394882947,
            7.238952093757689e-05,
            0.0013599810190498829,
            8.506196172675118e-05
        ],
        "align_select": "select distinct singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the names of singers and the total sales of their songs.",
        "gold_select": "select singer.Name, sum(song.number_of_trading)",
        "select_candidates": [
            "select singer.Name, sum(song.number_of_trading)",
            "select song.Singer_ID, sum(song.number_of_trading)",
            "select t2.c2, sum(song.number_of_trading)",
            "select t3.c1, sum(song.number_of_trading)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song",
            "song singer song",
            "song singer"
        ],
        "align_scores": [
            0.6247870326042175,
            0.0003352379135321826,
            0.0012064919574186206,
            0.00031583625241182745,
            0.00039250811096280813,
            0.0001975109480554238,
            0.00032614151132293046,
            0.0002118405100191012
        ],
        "align_select": "select singer.Name, sum(song.number_of_trading)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For each singer name, what is the total sales for their songs?",
        "gold_select": "select singer.Name, sum(song.number_of_trading)",
        "select_candidates": [
            "select singer.Name, sum(song.number_of_trading)",
            "select sum(song.number_of_trading), singer.Name",
            "select singer.Name, sum(song.Highest_Position)",
            "select song.Singer_ID, sum(song.number_of_trading)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9081233739852905,
            0.00033381779212504625,
            0.7049648761749268,
            0.0003261694801039994,
            0.0002998853160534054,
            0.00013704602315556258,
            0.35418927669525146,
            0.00038117411895655096
        ],
        "align_select": "select singer.Name, sum(song.number_of_trading)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
        "gold_select": "select singer.Citizenship",
        "select_candidates": [
            "select singer.Citizenship",
            "select singer.Citizenship, singer.born_yr",
            "select singer.born_yr",
            "select singer.Net_Worth_Millions, singer.Citizenship"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9912407994270325,
            0.9909634590148926,
            0.00018223970255348831,
            0.0003118092135991901,
            0.048918385058641434,
            0.0263666994869709,
            0.0001883068325696513,
            0.0002918847312685102
        ],
        "align_select": "select singer.Citizenship",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
        "gold_select": "select singer.Citizenship",
        "select_candidates": [
            "select singer.Citizenship",
            "select singer.Citizenship, singer.born_yr",
            "select singer.Name, singer.born_yr",
            "select singer.Name, singer.Citizenship"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9927526712417603,
            0.9927526712417603,
            0.00023859197972342372,
            0.00023859197972342372,
            0.00013479686458595097,
            0.00013479686458595097,
            0.00014661683235317469,
            0.00014661683235317469
        ],
        "align_select": "select singer.Citizenship",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the birth year and citizenship of singers?",
        "gold_select": "select singer.born_date, singer.home_country",
        "select_candidates": [
            "select singer.born_date, singer.home_country",
            "select singer.Singer_ID, singer.born_date, singer.home_country",
            "select singer.Singer_ID, singer.born_date",
            "select singer.home_country, singer.born_date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9934845566749573,
            0.007168871350586414,
            0.00019470487313810736,
            0.0001224563893629238,
            0.00048595378757454455,
            0.00022673618514090776,
            0.9946079254150391,
            0.022069478407502174
        ],
        "align_select": "select singer.born_date, singer.home_country",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the birth years and citizenships of the singers?",
        "gold_select": "select singer.born_date, singer.home_country",
        "select_candidates": [
            "select singer.born_date, singer.home_country",
            "select singer.Singer_ID, singer.born_date, singer.home_country",
            "select singer.Name, singer.born_date, singer.home_country",
            "select singer.born_date, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9908676147460938,
            0.009224419482052326,
            0.00021839130204170942,
            0.00013049773406237364,
            0.00021710387954954058,
            0.00014693409320898354,
            0.00040389696368947625,
            0.00017944478895515203
        ],
        "align_select": "select singer.born_date, singer.home_country",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the name of singers whose citizenship is not \"France\".",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.born_date",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Name, singer.home_country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9939309358596802,
            0.0001300305884797126,
            0.0001607947633601725,
            6.498317088698968e-05,
            0.00015940755838528275,
            5.8941015595337376e-05,
            0.00017004951951093972,
            5.651851824950427e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of the singers who are not French citizens?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select distinct singer.Name",
            "select singer.Name, singer.home_country",
            "select singer.Name, singer.born_date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.95353102684021,
            0.00021240358182694763,
            0.06609020382165909,
            0.0003096377768088132,
            0.00014096895756665617,
            6.380827107932419e-05,
            0.000201079310500063,
            6.896354898344725e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the name of singers whose birth year is either 1948 or 1949?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.born_date",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Name, t0.c6"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9944954514503479,
            0.0006085730856284499,
            0.00017260447202716023,
            7.794636621838436e-05,
            0.00017113595094997436,
            8.362264634342864e-05,
            0.00036985729821026325,
            8.861021342454478e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.born_date",
            "select singer.Singer_ID, singer.Name",
            "select singer.Name, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9931562542915344,
            0.0005275888252072036,
            0.00019598094513639808,
            6.884974573040381e-05,
            0.00025232936604879797,
            0.00010354904225096107,
            0.00020143200526945293,
            7.716840627836064e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show different citizenship of singers and the number of singers of each citizenship.",
        "gold_select": "select singer.home_country, count(*)",
        "select_candidates": [
            "select singer.home_country, count(*)",
            "select singer.home_country, count(*), singer.Net_Worth_Millions",
            "select singer.home_country, count(*), t0.c5",
            "select singer.home_country, count(*), singer.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9946581721305847,
            0.00024725525872781873,
            0.0005478436360135674,
            0.00011704227654263377,
            0.0002452784974593669,
            0.0001214683215948753,
            0.00018741445092018694,
            0.0001328398793702945
        ],
        "align_select": "select singer.home_country, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For each citizenship, how many singers are from that country?",
        "gold_select": "select singer.home_country, count(*)",
        "select_candidates": [
            "select singer.home_country, count(*)",
            "select count(*), singer.home_country",
            "select singer.home_country, count(*), singer.Net_Worth_Millions",
            "select singer.home_country.c4, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.992548406124115,
            0.0003330586478114128,
            0.992461621761322,
            0.0002883264678530395,
            0.0014308432582765818,
            9.25269559957087e-05,
            0.0003602522483561188,
            0.00023475992202293128
        ],
        "align_select": "select singer.home_country, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Please show the most common citizenship of singers.",
        "gold_select": "select singer.home_country",
        "select_candidates": [
            "select singer.home_country",
            "select singer.home_country--GROUP BY-ORDER BY-LIMIT",
            "select singer.home_country-GROUP BY-ORDER BY-LIMIT",
            "select singer.home_country, singer.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9962030053138733,
            7.308961357921362e-05,
            0.0006173659930936992,
            8.663832704769447e-05,
            0.00118877028580755,
            0.00010378827573731542,
            0.0001911254512378946,
            5.966196476947516e-05
        ],
        "align_select": "select singer.home_country",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the most common singer citizenship?",
        "gold_select": "select singer.home_country",
        "select_candidates": [
            "select singer.home_country",
            "select singer.home_country, t0.c5",
            "select singer.home_country, singer.Net_Worth_Millions",
            "select singer.home_country, singer.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9958993792533875,
            6.715305789839476e-05,
            0.0004669624613597989,
            6.0580710851354524e-05,
            0.000383097241865471,
            6.002680675010197e-05,
            0.00021248460689093918,
            5.6605898862471804e-05
        ],
        "align_select": "select singer.home_country",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "gold_select": "select singer.home_country, max(singer.Net_Worth_Millions)",
        "select_candidates": [
            "select singer.home_country, max(singer.Net_Worth_Millions)",
            "select singer.home_country.c4, max(singer.Net_Worth_Millions)",
            "select singer.home_country, max(singer.Net_Worth_Millions), singer.Net_Worth_Millions",
            "select singer.home_country, max(singer.Net_Worth_Millions)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9958048462867737,
            0.000368169421562925,
            0.0006167902029119432,
            0.00023479262017644942,
            0.00025574027677066624,
            0.00014788245607633144,
            0.9958048462867737,
            0.000368169421562925
        ],
        "align_select": "select singer.home_country, max(singer.Net_Worth_Millions)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For each citizenship, what is the maximum net worth?",
        "gold_select": "select singer.home_country, max(singer.Net_Worth_Millions)",
        "select_candidates": [
            "select singer.home_country, max(singer.Net_Worth_Millions)",
            "select max(singer.Net_Worth_Millions), singer.home_country",
            "select maximum(singer.Net_Worth_Millions), singer.home_country",
            "select min(singer.Net_Worth_Millions), singer.home_country"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9959892630577087,
            0.0003040979499928653,
            0.9953299760818481,
            0.00015885871835052967,
            0.003481617197394371,
            0.00010766110062832013,
            0.00036296460893936455,
            0.00010501898941583931
        ],
        "align_select": "select singer.home_country, max(singer.Net_Worth_Millions)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
        "gold_select": "select singer.home_country",
        "select_candidates": [
            "select singer.home_country",
            "select singer.home_country, t0.c5",
            "select singer.home_country, singer.Net_Worth_Millions",
            "select singer.home_country, singer.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9919443130493164,
            0.9929617047309875,
            0.000189867801964283,
            0.00035181810380890965,
            0.00014082320558372885,
            0.00023343680368270725,
            0.00012516074639279395,
            0.00017281640612054616
        ],
        "align_select": "select singer.home_country",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
        "gold_select": "select singer.home_country",
        "select_candidates": [
            "select singer.home_country",
            "select singer.Name, singer.born_date",
            "select singer.home_country, t0.c5",
            "select singer.Name, singer.home_country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9929117560386658,
            0.9929117560386658,
            0.00014041691611055285,
            0.00014041691611055285,
            0.0002818915818352252,
            0.0002818915818352252,
            0.00018662179354578257,
            0.00018662179354578257
        ],
        "align_select": "select singer.home_country",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What is the feature type name of feature AirCon?",
        "gold_select": "select Ref_Feature_Types.characteristics_type_name",
        "select_candidates": [
            "select Ref_Feature_Types.characteristics_type_name",
            "select Ref_Feature_Types.characteristics_type_name, Other_Available_Features.attribute_type_num",
            "select Ref_Feature_Types.characteristics_type_name, Other_Available_Features.feature_id",
            "select Ref_Feature_Types.characteristics_type_name, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Feature_Types Other_Available_Features",
        "table_candidates": [
            "Ref_Feature_Types Other_Available_Features"
        ],
        "align_scores": [
            0.690032422542572,
            7.726346666458994e-05,
            0.00013822336040902883,
            5.834971307194792e-05,
            0.00014418781211134046,
            6.200707866810262e-05,
            0.0002405506675131619,
            7.800407183822244e-05
        ],
        "align_select": "select Ref_Feature_Types.characteristics_type_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the property type descriptions of properties belonging to that code.",
        "gold_select": "select Ref_Property_Types.category_details",
        "select_candidates": [
            "select Other_Available_Features.feature_description",
            "select Other_Property_Features.property_feature_description",
            "select Properties.type_of_property, Other_Available_Features.feature_description",
            "select Properties.type_of_property, Other_Property_Features.property_feature_description"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Property_Types Properties",
        "table_candidates": [
            "Ref_Property_Types Properties Other_Property_Features",
            "Ref_Property_Types Properties",
            "Other_Available_Features Properties Other_Property_Features",
            "Ref_Feature_Types Ref_Property_Types Properties Other_Property_Features",
            "Ref_Property_Types Other_Available_Features Properties Other_Property_Features"
        ],
        "align_scores": [
            0.003929635975509882,
            9.133439016295597e-05,
            0.0006381596904247999,
            9.361030242871493e-05,
            0.0062511516734957695,
            9.239857899956405e-05,
            0.0007817798759788275,
            7.421339978463948e-05
        ],
        "align_select": "select Other_Available_Features.feature_description",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "gold_select": "select Properties.property_name",
        "select_candidates": [
            "select Properties.property_name",
            "select Properties.property_name, Properties.total_room",
            "select Properties.property_name, Properties.property_address",
            "select Properties.property_name, Properties.vendor_requested_price"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Properties",
        "table_candidates": [
            "Properties",
            "Other_Available_Features Properties",
            "Ref_Property_Types Properties"
        ],
        "align_scores": [
            0.990105926990509,
            0.9412389993667603,
            0.00023908201546873897,
            0.00013604930427391082,
            0.0002744811063166708,
            0.00014665961498394608,
            0.00023937784135341644,
            0.0001350567617919296
        ],
        "align_select": "select Properties.property_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the property type descriptions of properties belonging to that code.",
        "gold_select": "select Ref_Property_Types.property_type_description",
        "select_candidates": [
            "select Ref_Property_Types.property_type_description",
            "select Ref_Property_Types.property_type_description, Properties.property_id",
            "select Ref_Property_Types.property_type_code, Ref_Property_Types.property_type_description",
            "select Ref_Property_Types.property_type_description, Properties.possessions_class_num"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Ref_Property_Types Properties",
        "table_candidates": [
            "Ref_Property_Types Properties",
            "Ref_Property_Types"
        ],
        "align_scores": [
            0.6838400959968567,
            0.021801797673106194,
            0.00015950806846376508,
            0.0002862917899619788,
            0.002518011024221778,
            0.0035166763700544834,
            0.0001616494992049411,
            0.00015733542386442423
        ],
        "align_select": "select Ref_Property_Types.property_type_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "gold_select": "select Properties.estate_name",
        "select_candidates": [
            "select Properties.estate_name",
            "select Properties.estate_name, Properties.number_room",
            "select Properties.estate_name, Properties.property_address",
            "select Properties.estate_name, Properties.property_address, Properties.number_room"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Properties",
        "table_candidates": [
            "Properties",
            "Other_Available_Features Properties",
            "Ref_Property_Types Properties"
        ],
        "align_scores": [
            0.9544224739074707,
            0.9635056853294373,
            0.00020860742370132357,
            0.00013114855391904712,
            0.00026775558944791555,
            0.00015952737885527313,
            0.00021100032608956099,
            0.00016803876496851444
        ],
        "align_select": "select Properties.estate_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the feature type name of feature AirCon?",
        "gold_select": "select Ref_Feature_Types.feature_type_name",
        "select_candidates": [
            "select Ref_Feature_Types.feature_type_name",
            "select Ref_Feature_Types.feature_type_name, Other_Available_Features.feature_name",
            "select Ref_Feature_Types.feature_type_code, Ref_Feature_Types.feature_type_name",
            "select Ref_Feature_Types.feature_type_name, Ref_Feature_Types.feature_type_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Feature_Types Other_Available_Features",
        "table_candidates": [
            "Ref_Feature_Types Other_Available_Features"
        ],
        "align_scores": [
            0.9962326884269714,
            8.47316550789401e-05,
            0.00022857642034068704,
            6.079993909224868e-05,
            0.00015776189684402198,
            7.16172726242803e-05,
            0.00016276324458885938,
            6.346448935801163e-05
        ],
        "align_select": "select Ref_Feature_Types.feature_type_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the feature type name of feature AirCon?",
        "gold_select": "select Ref_Feature_Types.property_type_name",
        "select_candidates": [
            "select Ref_Feature_Types.property_type_name",
            "select Ref_Feature_Types.property_type_name, Other_Available_Features.feature_name",
            "select Ref_Feature_Types.property_type_name, Other_Available_Features.feature_type_code",
            "select Ref_Feature_Types.property_type_name, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Feature_Types Other_Available_Features",
        "table_candidates": [
            "Ref_Feature_Types Other_Available_Features",
            "Ref_Feature_Types Ref_Property_Types Other_Available_Features",
            "Ref_Property_Types Other_Available_Features"
        ],
        "align_scores": [
            0.0011592551600188017,
            7.590005407109857e-05,
            0.00016817549476400018,
            6.072774704080075e-05,
            0.00015782826812937856,
            5.8218498452333733e-05,
            0.0002499225956853479,
            7.171602919697762e-05
        ],
        "align_select": "select Ref_Feature_Types.property_type_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the property type descriptions of properties belonging to that code.",
        "gold_select": "select Ref_Property_Types.property_type_description",
        "select_candidates": [
            "select Ref_Property_Types.property_type_description",
            "select Ref_Property_Types.property_type_description, Properties.property_cognomen",
            "select Ref_Property_Types.property_type_description, Properties.property_id",
            "select Ref_Property_Types.property_type_code, Ref_Property_Types.property_type_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Property_Types Properties",
        "table_candidates": [
            "Ref_Property_Types Properties",
            "Ref_Feature_Types Ref_Property_Types Properties",
            "Ref_Property_Types"
        ],
        "align_scores": [
            0.021801797673106194,
            0.6838400959968567,
            0.0015974956331774592,
            0.00046122606727294624,
            0.0002862917899619788,
            0.00015950806846376508,
            0.0035166763700544834,
            0.002518011024221778
        ],
        "align_select": "select Ref_Property_Types.property_type_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "gold_select": "select Properties.property_cognomen",
        "select_candidates": [
            "select Properties.property_address",
            "select Properties.property_address, Properties.room_count",
            "select Properties.other_property_details",
            "select Properties.property_address-, Properties.room_count"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Properties",
        "table_candidates": [
            "Properties",
            "Ref_Feature_Types Properties",
            "Other_Available_Features Properties",
            "Ref_Property_Types Properties",
            "Ref_Feature_Types Other_Available_Features Properties",
            "Ref_Feature_Types Ref_Property_Types Properties"
        ],
        "align_scores": [
            0.009658679366111755,
            0.4985444247722626,
            0.00016414585115853697,
            0.00013100831711199135,
            0.924630880355835,
            0.8812039494514465,
            0.0002245073119411245,
            0.0001052421357599087
        ],
        "align_select": "select Properties.other_property_details",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the feature type name of feature AirCon?",
        "gold_select": "select Ref_Feature_Types.characteristics_type_name",
        "select_candidates": [
            "select Ref_Feature_Types.characteristics_type_name",
            "select Ref_Feature_Types.feature_type_code, Ref_Feature_Types.characteristics_type_name",
            "select Ref_Feature_Types.characteristics_type_name, Other_Available_Features.feature_type_code",
            "select Ref_Feature_Types.characteristics_type_name, Ref_Feature_Types.feature_type_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Feature_Types Other_Available_Features",
        "table_candidates": [
            "Ref_Feature_Types Other_Available_Features",
            "Ref_Feature_Types Ref_Property_Types Other_Available_Features"
        ],
        "align_scores": [
            0.690032422542572,
            7.726346666458994e-05,
            0.00014972500503063202,
            6.808104080846533e-05,
            0.0001745809568092227,
            6.213896267581731e-05,
            0.0001670006604399532,
            6.153572030598298e-05
        ],
        "align_select": "select Ref_Feature_Types.characteristics_type_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the property type descriptions of properties belonging to that code.",
        "gold_select": "select Ref_Property_Types.genus_details",
        "select_candidates": [
            "select Other_Available_Features.feature_description",
            "select Other_Property_Features.property_feature_description",
            "select Properties.property_type_code, Other_Available_Features.feature_description",
            "select Properties.property_type_code, Other_Property_Features.property_feature_description"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Property_Types Properties",
        "table_candidates": [
            "Ref_Property_Types Properties Other_Property_Features",
            "Other_Available_Features Properties Other_Property_Features",
            "Properties Other_Property_Features",
            "Ref_Feature_Types Ref_Property_Types Properties Other_Property_Features",
            "Ref_Property_Types Other_Available_Features Properties Other_Property_Features",
            "Ref_Property_Types Properties",
            "Ref_Property_Types Properties Other_Available_Features Other_Property_Features",
            "Other_Available_Features Properties"
        ],
        "align_scores": [
            0.003929635975509882,
            9.919566946337e-05,
            0.0006381596904247999,
            8.794343011686578e-05,
            0.01643957756459713,
            0.00011522592103574425,
            0.0015316936187446117,
            0.00010922690125880763
        ],
        "align_select": "select Other_Available_Features.feature_description",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "gold_select": "select Properties.house_designation",
        "select_candidates": [
            "select Properties.property_address",
            "select Properties.property_address, Properties.total_room",
            "select Properties.other_property_details",
            "select Properties.property_address-, Properties.total_room"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Properties",
        "table_candidates": [
            "Properties"
        ],
        "align_scores": [
            0.009658679366111755,
            0.4985444247722626,
            0.00016675754159223288,
            0.00014055569772608578,
            0.924630880355835,
            0.8812039494514465,
            0.00023326014343183488,
            0.00011898249795194715
        ],
        "align_select": "select Properties.other_property_details",
        "align_structure": "SELECT-FROM-WHERE"
    }
]